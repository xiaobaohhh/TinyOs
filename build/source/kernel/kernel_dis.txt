
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000030c0 memsz 0x000030c0 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x000090e0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001d0e0 align 2**12
         filesz 0x00000044 memsz 0x00000044 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ce9  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000003d4  00012cec  00012cec  00003cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000080e0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000044  80000000  0001d0e0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001ad1  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c03  00000000  00000000  00007b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001274  00000000  00000000  0000c718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000d990  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001213  00000000  00000000  0000db70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000ed83  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001344  00000000  00000000  0000ed94  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012cec l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 source/kernel/CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00010377 l       .text	00000000 switch_to_kernel
000103ac l       .text	00000000 switch_to_user
00010382 l       .text	00000000 skip_page_switch1
000103b7 l       .text	00000000 skip_page_switch2
00010407 l       .text	00000000 return_to_kernel
00010435 l       .text	00000000 return_to_user
00010412 l       .text	00000000 skip_page_switch3
00010440 l       .text	00000000 skip_page_switch4
00000000 l    df *ABS*	00000000 memory.c
00010485 l     F .text	0000000d down2
00010492 l     F .text	00000017 up2
000104a9 l     F .text	0000000c write_cr3
000104b5 l     F .text	0000000b pde_index
000104c0 l     F .text	00000010 pte_index
000104d0 l     F .text	00000010 pde_paddr
000104e0 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
000104f1 l     F .text	00000055 addr_alloc_init
00010546 l     F .text	00000067 addr_alloc_page
000105ad l     F .text	00000062 addr_free_page
00010675 l     F .text	0000003a total_mem_size
00014000 l     O .data	00000040 kernel_map.2228
00000000 l    df *ABS*	00000000 task.c
00010a53 l     F .text	0000001b list_node_init
00010a6e l     F .text	0000000b list_node_next
00010a79 l     F .text	0000000b list_count
00010a84 l     F .text	0000000a list_first
00010a8e l     F .text	00000011 read_cr3
00010a9f l     F .text	0000000c write_cr3
00010aab l     F .text	00000007 hlt
00010ab2 l     F .text	00000017 write_tr
00017020 l     O .bss	0000023c task_manager
00017260 l     O .bss	00001000 idle_task_stack
00010ac9 l     F .text	0000015c tss_init
00010d6f l     F .text	0000000a idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
000112ce l     F .text	00000028 lgdt
000112f6 l     F .text	0000001a far_jump
00018260 l     O .bss	00000800 gdt_table
00018a60 l     O .bss	00000014 gdt_mutex
00000000 l    df *ABS*	00000000 irq.c
0001151d l     F .text	0000001d inb
0001153a l     F .text	0000001f outb
00011559 l     F .text	00000007 cli
00011560 l     F .text	00000007 sti
00011567 l     F .text	00000028 lidt
0001158f l     F .text	00000007 hlt
00011596 l     F .text	00000010 read_eflags
000115a6 l     F .text	0000000b write_eflags
00018a80 l     O .bss	00000400 idt_table
000115b1 l     F .text	000000e3 dump_core_regs
00011694 l     F .text	0000003e do_default_handler
0001191e l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00011d31 l     F .text	0000001f outb
00018e80 l     O .bss	00000004 sys_tick
00011d78 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00018ea0 l     O .bss	00000100 init_task
00018fa0 l     O .bss	00001000 init_task_stack
00019fa0 l     O .bss	00000100 test_task
0001a0a0 l     O .bss	00001000 test_task_stack
0001b0a0 l     O .bss	00000010 sem
0001b0b0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mutex.c
00011f4b l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000120d1 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012463 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1917
00000000 l    df *ABS*	00000000 list.c
00012950 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012b46 l     F .text	0000001d inb
00012b63 l     F .text	0000001f outb
0001b0c4 l     O .bss	00000014 log_mutex
00000000 l    df *ABS*	00000000 first_task.c
000118ca g     F .text	0000001c do_handler_simd_floating_point
0001227c g     F .text	0000003e bitmap_get_bit
000125bc g     F .text	0000004f kernel_memcpy
00010f67 g     F .text	0000000a task_current
00011cd2 g     F .text	0000000b irq_enable_global
00011177 g     F .text	00000043 mmu_set_page_dir_task
000129e7 g     F .text	00000064 list_insert_last
00011806 g     F .text	0000001c do_handler_segment_not_present
00010f07 g     F .text	00000035 task_set_ready
0001238e g     F .text	0000001b bitmap_is_set
0001260b g     F .text	0000003a kernel_memset
000100ac g       .text	00000000 exception_handler_nmi
000114eb g     F .text	0000001e cpu_init
00012b82 g     F .text	0000009d log_init
00011f16 g     F .text	00000035 init_main
00010233 g       .text	00000000 exception_handler_alignment_check
000102ad g       .text	00000000 exception_handler_security
000111ba g     F .text	0000005c do_schedule_switch
0001246a g     F .text	00000033 kernel_strcpy
00017000 g     O .bss	00000004 need_reschedule
00014000 g       .data	00000000 s_data
000103fb g       .text	00000000 switch_on_interrupt_return
00011bb1 g     F .text	0000008b irq_enable
0001004f g       .text	00000000 exception_handler_unknown
000100cb g       .text	00000000 exception_handler_breakpoint
00011796 g     F .text	0000001c do_handler_invalid_op
0001175e g     F .text	0000001c do_handler_overflow
0001026f g       .text	00000000 exception_handler_simd_floating_point
00011892 g     F .text	0000001c do_handler_alignment_check
00010766 g     F .text	00000063 memory_create_map
000101da g       .text	00000000 exception_handler_general_protection
0001183e g     F .text	0000001c do_handler_general_protection
000121f1 g     F .text	00000029 sem_count
80000010 g     F .first_task	00000028 first_task_main
000116ee g     F .text	0000001c do_handler_divider
000122ba g     F .text	000000d4 bitmap_set_bit
000117ce g     F .text	0000001c do_handler_double_fault
00011e20 g     F .text	00000069 init_task_entry
0001185a g     F .text	0000001c do_handler_page_fault
00010166 g       .text	00000000 exception_handler_double_fault
00011cdd g     F .text	0000002b pic_send_eoi
00010efd g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000120ff g     F .text	0000006e sem_wait
00010a2e g     F .text	00000025 memory_alloc_page_for
00011902 g     F .text	0000001c do_handler_security
000101bd g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100ea g       .text	00000000 exception_handler_overflow
000102ca g       .text	00000000 simple_switch
0001002b g       .text	00000000 exception_handler_time
0001170a g     F .text	0000001c do_handler_debug
0001b0e0 g     O .bss	00002000 stack
00010ef3 g     F .text	0000000a task_is_need_reschedule
00011271 g     F .text	0000005d sys_sleep
0001d0e0 g       *ABS*	00000000 s_first_task
0001098c g     F .text	000000a2 memory_alloc_for_page_dir
00011022 g     F .text	00000013 schedule_switch
0001032f g       .text	00000000 universal_task_switch
00011e89 g     F .text	00000069 test_task_entry
0001216d g     F .text	00000084 sem_notify
00010183 g       .text	00000000 exception_handler_invalid_tss
00010e46 g     F .text	00000099 task_first_init
000118ae g     F .text	0000001c do_handler_machine_check
0001060f g     F .text	00000066 show_mem_info
00011445 g     F .text	00000039 gdt_free_desc
00012988 g     F .text	0000005f list_insert_first
00011251 g     F .text	00000020 task_set_wakeup
0001006e g       .text	00000000 exception_handler_divider
0001249d g     F .text	0000006a kernel_strncpy
00011cc7 g     F .text	0000000b irq_disable_global
00010f71 g     F .text	00000061 sys_sched_yield
0001d124 g       *ABS*	00000000 mem_free_start
00011df0 g     F .text	00000030 kernel_init
000120dc g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
000127ac g     F .text	0000014b kernel_vsprintf
00010edf g     F .text	0000000a get_from_task
0001d0e0 g       .bss	00000000 e_data
00011f82 g     F .text	00000093 mutex_lock
00010250 g       .text	00000000 exception_handler_machine_check
00010ee9 g     F .text	0000000a get_to_task
000117ea g     F .text	0000001c do_handler_invalid_tss
00010301 g       .text	00000000 create_and_switch_user
00000000 g       .text	00000000 kernel_base
0001d124 g       *ABS*	00000000 e_first_task
00011216 g     F .text	0000003b task_set_sleep
000128f7 g     F .text	00000059 panic
00011b71 g     F .text	00000040 irq_install
0001147e g     F .text	0000006d init_gdt
00011726 g     F .text	0000001c do_handler_nmi
00011d08 g     F .text	00000018 irq_enter_protection
00011f56 g     F .text	0000002c mutex_init
0001028e g       .text	00000000 exception_handler_virtualization
00011c3c g     F .text	0000008b irq_disable
000117b2 g     F .text	0000001c do_handler_device_not_available
0001221a g     F .text	00000016 bitmap_byte_count
00011035 g     F .text	00000065 task_dispatch
00011ef2 g     F .text	00000024 move_to_first_task
00011509 g     F .text	00000014 switch_to_tss
0001177a g     F .text	0000001c do_handler_bounds
00010fd2 g     F .text	00000050 task_next_run
00012645 g     F .text	00000064 kernel_memcmp
000102e1 g       .text	00000000 manual_switch_to_user
000107c9 g     F .text	000000a7 create_kernel_table
00012963 g     F .text	00000025 list_init
000101f7 g       .text	00000000 exception_handler_page_fault
00010f3c g     F .text	0000002b task_set_block
000116d2 g     F .text	0000001c do_handler_unknown
000119b1 g     F .text	000001c0 irq_init
00012015 g     F .text	000000bc mutex_unlock
000118e6 g     F .text	0000001c do_handler_virtualization
00011d20 g     F .text	00000011 irq_leave_protection
00011876 g     F .text	0000001c do_handler_x87_floating_point
00012581 g     F .text	0000003b kernel_strlen
0001008d g       .text	00000000 exception_handler_debug
00011310 g     F .text	00000083 segment_desc_set
00010128 g       .text	00000000 exception_handler_invalid_op
00012a4b g     F .text	00000077 list_remove_first
000130c0 g       .rodata	00000000 e_text
00012507 g     F .text	0000007a kernel_strncmp
00012230 g     F .text	0000004c bitmap_init
000101a0 g       .text	00000000 exception_handler_segment_not_present
000123a9 g     F .text	000000ba bitmap_alloc_nbits
00010d79 g     F .text	000000cd task_manager_init
0001109a g     F .text	000000dd task_time_tick
000108f5 g     F .text	00000097 memory_init
00011822 g     F .text	0000001c do_handler_stack_segment_fault
00011742 g     F .text	0000001c do_handler_breakpoint
00010870 g     F .text	00000085 memory_create_user_space
00012c1f g     F .text	000000ca log_printf
00010c25 g     F .text	0000014a task_init
00010214 g       .text	00000000 exception_handler_x87_floating_point
00012788 g     F .text	00000024 kernel_sprintf
000103e4 g       .text	00000000 fast_kernel_switch
000113da g     F .text	0000006b gdt_alloc_desc
000126a9 g     F .text	000000df kernel_itoa
00012ac2 g     F .text	00000084 list_remove
00011393 g     F .text	00000047 gate_desc_set
00010109 g       .text	00000000 exception_handler_bounds
00010147 g       .text	00000000 exception_handler_device_not_available
000106af g     F .text	000000b7 find_pte
00011d50 g     F .text	00000028 do_handler_time
00011dd8 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .global _start
    .extern init_main
    .extern need_reschedule
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax

    push %eax 
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 e4 1d 00 00       	call   11df0 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   10019:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001b:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001d:	8e e8                	mov    %eax,%gs
    mov %ax, %ss    
   1001f:	8e d0                	mov    %eax,%ss
    
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc e0 d0 01 00       	mov    $0x1d0e0,%esp
    jmp init_main
   10026:	e9 eb 1e 00 00       	jmp    11f16 <init_main>

0001002b <exception_handler_time>:

.text
    .extern do_handler_time
    .global exception_handler_time
exception_handler_time:
    push $0
   1002b:	6a 00                	push   $0x0

    push $0x20
   1002d:	6a 20                	push   $0x20
    pusha
   1002f:	60                   	pusha  
    push %ds
   10030:	1e                   	push   %ds
    push %es
   10031:	06                   	push   %es
    push %fs
   10032:	0f a0                	push   %fs
    push %gs
   10034:	0f a8                	push   %gs
    push %esp
   10036:	54                   	push   %esp
    call do_handler_time
   10037:	e8 14 1d 00 00       	call   11d50 <do_handler_time>
    add $(1*4), %esp
   1003c:	83 c4 04             	add    $0x4,%esp
    pop %gs
   1003f:	0f a9                	pop    %gs
    pop %fs
   10041:	0f a1                	pop    %fs
    pop %es
   10043:	07                   	pop    %es
    pop %ds
   10044:	1f                   	pop    %ds
    popa
   10045:	61                   	popa   

    add $(2*4), %esp
   10046:	83 c4 08             	add    $0x8,%esp
    call do_schedule_switch
   10049:	e8 6c 11 00 00       	call   111ba <do_schedule_switch>

    iret 
   1004e:	cf                   	iret   

0001004f <exception_handler_unknown>:

exception_handler unknown,-1,0
   1004f:	6a 00                	push   $0x0
   10051:	6a ff                	push   $0xffffffff
   10053:	60                   	pusha  
   10054:	1e                   	push   %ds
   10055:	06                   	push   %es
   10056:	0f a0                	push   %fs
   10058:	0f a8                	push   %gs
   1005a:	54                   	push   %esp
   1005b:	e8 72 16 00 00       	call   116d2 <do_handler_unknown>
   10060:	83 c4 04             	add    $0x4,%esp
   10063:	0f a9                	pop    %gs
   10065:	0f a1                	pop    %fs
   10067:	07                   	pop    %es
   10068:	1f                   	pop    %ds
   10069:	61                   	popa   
   1006a:	83 c4 08             	add    $0x8,%esp
   1006d:	cf                   	iret   

0001006e <exception_handler_divider>:
exception_handler divider,0,0
   1006e:	6a 00                	push   $0x0
   10070:	6a 00                	push   $0x0
   10072:	60                   	pusha  
   10073:	1e                   	push   %ds
   10074:	06                   	push   %es
   10075:	0f a0                	push   %fs
   10077:	0f a8                	push   %gs
   10079:	54                   	push   %esp
   1007a:	e8 6f 16 00 00       	call   116ee <do_handler_divider>
   1007f:	83 c4 04             	add    $0x4,%esp
   10082:	0f a9                	pop    %gs
   10084:	0f a1                	pop    %fs
   10086:	07                   	pop    %es
   10087:	1f                   	pop    %ds
   10088:	61                   	popa   
   10089:	83 c4 08             	add    $0x8,%esp
   1008c:	cf                   	iret   

0001008d <exception_handler_debug>:
exception_handler debug,1,0
   1008d:	6a 00                	push   $0x0
   1008f:	6a 01                	push   $0x1
   10091:	60                   	pusha  
   10092:	1e                   	push   %ds
   10093:	06                   	push   %es
   10094:	0f a0                	push   %fs
   10096:	0f a8                	push   %gs
   10098:	54                   	push   %esp
   10099:	e8 6c 16 00 00       	call   1170a <do_handler_debug>
   1009e:	83 c4 04             	add    $0x4,%esp
   100a1:	0f a9                	pop    %gs
   100a3:	0f a1                	pop    %fs
   100a5:	07                   	pop    %es
   100a6:	1f                   	pop    %ds
   100a7:	61                   	popa   
   100a8:	83 c4 08             	add    $0x8,%esp
   100ab:	cf                   	iret   

000100ac <exception_handler_nmi>:
exception_handler nmi,2,0
   100ac:	6a 00                	push   $0x0
   100ae:	6a 02                	push   $0x2
   100b0:	60                   	pusha  
   100b1:	1e                   	push   %ds
   100b2:	06                   	push   %es
   100b3:	0f a0                	push   %fs
   100b5:	0f a8                	push   %gs
   100b7:	54                   	push   %esp
   100b8:	e8 69 16 00 00       	call   11726 <do_handler_nmi>
   100bd:	83 c4 04             	add    $0x4,%esp
   100c0:	0f a9                	pop    %gs
   100c2:	0f a1                	pop    %fs
   100c4:	07                   	pop    %es
   100c5:	1f                   	pop    %ds
   100c6:	61                   	popa   
   100c7:	83 c4 08             	add    $0x8,%esp
   100ca:	cf                   	iret   

000100cb <exception_handler_breakpoint>:
exception_handler breakpoint,3,0
   100cb:	6a 00                	push   $0x0
   100cd:	6a 03                	push   $0x3
   100cf:	60                   	pusha  
   100d0:	1e                   	push   %ds
   100d1:	06                   	push   %es
   100d2:	0f a0                	push   %fs
   100d4:	0f a8                	push   %gs
   100d6:	54                   	push   %esp
   100d7:	e8 66 16 00 00       	call   11742 <do_handler_breakpoint>
   100dc:	83 c4 04             	add    $0x4,%esp
   100df:	0f a9                	pop    %gs
   100e1:	0f a1                	pop    %fs
   100e3:	07                   	pop    %es
   100e4:	1f                   	pop    %ds
   100e5:	61                   	popa   
   100e6:	83 c4 08             	add    $0x8,%esp
   100e9:	cf                   	iret   

000100ea <exception_handler_overflow>:
exception_handler overflow,4,0
   100ea:	6a 00                	push   $0x0
   100ec:	6a 04                	push   $0x4
   100ee:	60                   	pusha  
   100ef:	1e                   	push   %ds
   100f0:	06                   	push   %es
   100f1:	0f a0                	push   %fs
   100f3:	0f a8                	push   %gs
   100f5:	54                   	push   %esp
   100f6:	e8 63 16 00 00       	call   1175e <do_handler_overflow>
   100fb:	83 c4 04             	add    $0x4,%esp
   100fe:	0f a9                	pop    %gs
   10100:	0f a1                	pop    %fs
   10102:	07                   	pop    %es
   10103:	1f                   	pop    %ds
   10104:	61                   	popa   
   10105:	83 c4 08             	add    $0x8,%esp
   10108:	cf                   	iret   

00010109 <exception_handler_bounds>:
exception_handler bounds,5,0
   10109:	6a 00                	push   $0x0
   1010b:	6a 05                	push   $0x5
   1010d:	60                   	pusha  
   1010e:	1e                   	push   %ds
   1010f:	06                   	push   %es
   10110:	0f a0                	push   %fs
   10112:	0f a8                	push   %gs
   10114:	54                   	push   %esp
   10115:	e8 60 16 00 00       	call   1177a <do_handler_bounds>
   1011a:	83 c4 04             	add    $0x4,%esp
   1011d:	0f a9                	pop    %gs
   1011f:	0f a1                	pop    %fs
   10121:	07                   	pop    %es
   10122:	1f                   	pop    %ds
   10123:	61                   	popa   
   10124:	83 c4 08             	add    $0x8,%esp
   10127:	cf                   	iret   

00010128 <exception_handler_invalid_op>:
exception_handler invalid_op,6,0
   10128:	6a 00                	push   $0x0
   1012a:	6a 06                	push   $0x6
   1012c:	60                   	pusha  
   1012d:	1e                   	push   %ds
   1012e:	06                   	push   %es
   1012f:	0f a0                	push   %fs
   10131:	0f a8                	push   %gs
   10133:	54                   	push   %esp
   10134:	e8 5d 16 00 00       	call   11796 <do_handler_invalid_op>
   10139:	83 c4 04             	add    $0x4,%esp
   1013c:	0f a9                	pop    %gs
   1013e:	0f a1                	pop    %fs
   10140:	07                   	pop    %es
   10141:	1f                   	pop    %ds
   10142:	61                   	popa   
   10143:	83 c4 08             	add    $0x8,%esp
   10146:	cf                   	iret   

00010147 <exception_handler_device_not_available>:
exception_handler device_not_available,7,0
   10147:	6a 00                	push   $0x0
   10149:	6a 07                	push   $0x7
   1014b:	60                   	pusha  
   1014c:	1e                   	push   %ds
   1014d:	06                   	push   %es
   1014e:	0f a0                	push   %fs
   10150:	0f a8                	push   %gs
   10152:	54                   	push   %esp
   10153:	e8 5a 16 00 00       	call   117b2 <do_handler_device_not_available>
   10158:	83 c4 04             	add    $0x4,%esp
   1015b:	0f a9                	pop    %gs
   1015d:	0f a1                	pop    %fs
   1015f:	07                   	pop    %es
   10160:	1f                   	pop    %ds
   10161:	61                   	popa   
   10162:	83 c4 08             	add    $0x8,%esp
   10165:	cf                   	iret   

00010166 <exception_handler_double_fault>:
exception_handler double_fault,8,1
   10166:	6a 08                	push   $0x8
   10168:	60                   	pusha  
   10169:	1e                   	push   %ds
   1016a:	06                   	push   %es
   1016b:	0f a0                	push   %fs
   1016d:	0f a8                	push   %gs
   1016f:	54                   	push   %esp
   10170:	e8 59 16 00 00       	call   117ce <do_handler_double_fault>
   10175:	83 c4 04             	add    $0x4,%esp
   10178:	0f a9                	pop    %gs
   1017a:	0f a1                	pop    %fs
   1017c:	07                   	pop    %es
   1017d:	1f                   	pop    %ds
   1017e:	61                   	popa   
   1017f:	83 c4 08             	add    $0x8,%esp
   10182:	cf                   	iret   

00010183 <exception_handler_invalid_tss>:

exception_handler invalid_tss,10,1
   10183:	6a 0a                	push   $0xa
   10185:	60                   	pusha  
   10186:	1e                   	push   %ds
   10187:	06                   	push   %es
   10188:	0f a0                	push   %fs
   1018a:	0f a8                	push   %gs
   1018c:	54                   	push   %esp
   1018d:	e8 58 16 00 00       	call   117ea <do_handler_invalid_tss>
   10192:	83 c4 04             	add    $0x4,%esp
   10195:	0f a9                	pop    %gs
   10197:	0f a1                	pop    %fs
   10199:	07                   	pop    %es
   1019a:	1f                   	pop    %ds
   1019b:	61                   	popa   
   1019c:	83 c4 08             	add    $0x8,%esp
   1019f:	cf                   	iret   

000101a0 <exception_handler_segment_not_present>:
exception_handler segment_not_present,11,1
   101a0:	6a 0b                	push   $0xb
   101a2:	60                   	pusha  
   101a3:	1e                   	push   %ds
   101a4:	06                   	push   %es
   101a5:	0f a0                	push   %fs
   101a7:	0f a8                	push   %gs
   101a9:	54                   	push   %esp
   101aa:	e8 57 16 00 00       	call   11806 <do_handler_segment_not_present>
   101af:	83 c4 04             	add    $0x4,%esp
   101b2:	0f a9                	pop    %gs
   101b4:	0f a1                	pop    %fs
   101b6:	07                   	pop    %es
   101b7:	1f                   	pop    %ds
   101b8:	61                   	popa   
   101b9:	83 c4 08             	add    $0x8,%esp
   101bc:	cf                   	iret   

000101bd <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,12,1
   101bd:	6a 0c                	push   $0xc
   101bf:	60                   	pusha  
   101c0:	1e                   	push   %ds
   101c1:	06                   	push   %es
   101c2:	0f a0                	push   %fs
   101c4:	0f a8                	push   %gs
   101c6:	54                   	push   %esp
   101c7:	e8 56 16 00 00       	call   11822 <do_handler_stack_segment_fault>
   101cc:	83 c4 04             	add    $0x4,%esp
   101cf:	0f a9                	pop    %gs
   101d1:	0f a1                	pop    %fs
   101d3:	07                   	pop    %es
   101d4:	1f                   	pop    %ds
   101d5:	61                   	popa   
   101d6:	83 c4 08             	add    $0x8,%esp
   101d9:	cf                   	iret   

000101da <exception_handler_general_protection>:
exception_handler general_protection,13,1
   101da:	6a 0d                	push   $0xd
   101dc:	60                   	pusha  
   101dd:	1e                   	push   %ds
   101de:	06                   	push   %es
   101df:	0f a0                	push   %fs
   101e1:	0f a8                	push   %gs
   101e3:	54                   	push   %esp
   101e4:	e8 55 16 00 00       	call   1183e <do_handler_general_protection>
   101e9:	83 c4 04             	add    $0x4,%esp
   101ec:	0f a9                	pop    %gs
   101ee:	0f a1                	pop    %fs
   101f0:	07                   	pop    %es
   101f1:	1f                   	pop    %ds
   101f2:	61                   	popa   
   101f3:	83 c4 08             	add    $0x8,%esp
   101f6:	cf                   	iret   

000101f7 <exception_handler_page_fault>:
exception_handler page_fault,14,1
   101f7:	6a 0e                	push   $0xe
   101f9:	60                   	pusha  
   101fa:	1e                   	push   %ds
   101fb:	06                   	push   %es
   101fc:	0f a0                	push   %fs
   101fe:	0f a8                	push   %gs
   10200:	54                   	push   %esp
   10201:	e8 54 16 00 00       	call   1185a <do_handler_page_fault>
   10206:	83 c4 04             	add    $0x4,%esp
   10209:	0f a9                	pop    %gs
   1020b:	0f a1                	pop    %fs
   1020d:	07                   	pop    %es
   1020e:	1f                   	pop    %ds
   1020f:	61                   	popa   
   10210:	83 c4 08             	add    $0x8,%esp
   10213:	cf                   	iret   

00010214 <exception_handler_x87_floating_point>:
exception_handler x87_floating_point,16,0
   10214:	6a 00                	push   $0x0
   10216:	6a 10                	push   $0x10
   10218:	60                   	pusha  
   10219:	1e                   	push   %ds
   1021a:	06                   	push   %es
   1021b:	0f a0                	push   %fs
   1021d:	0f a8                	push   %gs
   1021f:	54                   	push   %esp
   10220:	e8 51 16 00 00       	call   11876 <do_handler_x87_floating_point>
   10225:	83 c4 04             	add    $0x4,%esp
   10228:	0f a9                	pop    %gs
   1022a:	0f a1                	pop    %fs
   1022c:	07                   	pop    %es
   1022d:	1f                   	pop    %ds
   1022e:	61                   	popa   
   1022f:	83 c4 08             	add    $0x8,%esp
   10232:	cf                   	iret   

00010233 <exception_handler_alignment_check>:
exception_handler alignment_check,17,1
   10233:	6a 11                	push   $0x11
   10235:	60                   	pusha  
   10236:	1e                   	push   %ds
   10237:	06                   	push   %es
   10238:	0f a0                	push   %fs
   1023a:	0f a8                	push   %gs
   1023c:	54                   	push   %esp
   1023d:	e8 50 16 00 00       	call   11892 <do_handler_alignment_check>
   10242:	83 c4 04             	add    $0x4,%esp
   10245:	0f a9                	pop    %gs
   10247:	0f a1                	pop    %fs
   10249:	07                   	pop    %es
   1024a:	1f                   	pop    %ds
   1024b:	61                   	popa   
   1024c:	83 c4 08             	add    $0x8,%esp
   1024f:	cf                   	iret   

00010250 <exception_handler_machine_check>:
exception_handler machine_check,18,0
   10250:	6a 00                	push   $0x0
   10252:	6a 12                	push   $0x12
   10254:	60                   	pusha  
   10255:	1e                   	push   %ds
   10256:	06                   	push   %es
   10257:	0f a0                	push   %fs
   10259:	0f a8                	push   %gs
   1025b:	54                   	push   %esp
   1025c:	e8 4d 16 00 00       	call   118ae <do_handler_machine_check>
   10261:	83 c4 04             	add    $0x4,%esp
   10264:	0f a9                	pop    %gs
   10266:	0f a1                	pop    %fs
   10268:	07                   	pop    %es
   10269:	1f                   	pop    %ds
   1026a:	61                   	popa   
   1026b:	83 c4 08             	add    $0x8,%esp
   1026e:	cf                   	iret   

0001026f <exception_handler_simd_floating_point>:
exception_handler simd_floating_point,19,0
   1026f:	6a 00                	push   $0x0
   10271:	6a 13                	push   $0x13
   10273:	60                   	pusha  
   10274:	1e                   	push   %ds
   10275:	06                   	push   %es
   10276:	0f a0                	push   %fs
   10278:	0f a8                	push   %gs
   1027a:	54                   	push   %esp
   1027b:	e8 4a 16 00 00       	call   118ca <do_handler_simd_floating_point>
   10280:	83 c4 04             	add    $0x4,%esp
   10283:	0f a9                	pop    %gs
   10285:	0f a1                	pop    %fs
   10287:	07                   	pop    %es
   10288:	1f                   	pop    %ds
   10289:	61                   	popa   
   1028a:	83 c4 08             	add    $0x8,%esp
   1028d:	cf                   	iret   

0001028e <exception_handler_virtualization>:
exception_handler virtualization,20,0
   1028e:	6a 00                	push   $0x0
   10290:	6a 14                	push   $0x14
   10292:	60                   	pusha  
   10293:	1e                   	push   %ds
   10294:	06                   	push   %es
   10295:	0f a0                	push   %fs
   10297:	0f a8                	push   %gs
   10299:	54                   	push   %esp
   1029a:	e8 47 16 00 00       	call   118e6 <do_handler_virtualization>
   1029f:	83 c4 04             	add    $0x4,%esp
   102a2:	0f a9                	pop    %gs
   102a4:	0f a1                	pop    %fs
   102a6:	07                   	pop    %es
   102a7:	1f                   	pop    %ds
   102a8:	61                   	popa   
   102a9:	83 c4 08             	add    $0x8,%esp
   102ac:	cf                   	iret   

000102ad <exception_handler_security>:
exception_handler security,21,1
   102ad:	6a 15                	push   $0x15
   102af:	60                   	pusha  
   102b0:	1e                   	push   %ds
   102b1:	06                   	push   %es
   102b2:	0f a0                	push   %fs
   102b4:	0f a8                	push   %gs
   102b6:	54                   	push   %esp
   102b7:	e8 46 16 00 00       	call   11902 <do_handler_security>
   102bc:	83 c4 04             	add    $0x4,%esp
   102bf:	0f a9                	pop    %gs
   102c1:	0f a1                	pop    %fs
   102c3:	07                   	pop    %es
   102c4:	1f                   	pop    %ds
   102c5:	61                   	popa   
   102c6:	83 c4 08             	add    $0x8,%esp
   102c9:	cf                   	iret   

000102ca <simple_switch>:
*/

    .text
    .global simple_switch
simple_switch:
    mov 4(%esp), %eax
   102ca:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102ce:	8b 54 24 08          	mov    0x8(%esp),%edx

    
    push %ebp
   102d2:	55                   	push   %ebp
    push %ebx
   102d3:	53                   	push   %ebx
    push %esi
   102d4:	56                   	push   %esi
    push %edi
   102d5:	57                   	push   %edi
    pushf                # 保存EFLAGS寄存器
   102d6:	9c                   	pushf  

    mov %esp,(%eax)
   102d7:	89 20                	mov    %esp,(%eax)

    mov %edx,%esp
   102d9:	89 d4                	mov    %edx,%esp

    popf                 # 恢复EFLAGS寄存器
   102db:	9d                   	popf   
    pop %edi
   102dc:	5f                   	pop    %edi
    pop %esi
   102dd:	5e                   	pop    %esi
    pop %ebx
   102de:	5b                   	pop    %ebx
    pop %ebp
   102df:	5d                   	pop    %ebp
    

    ret
   102e0:	c3                   	ret    

000102e1 <manual_switch_to_user>:

# 手动构造iret栈帧切换到用户态
    .global manual_switch_to_user
manual_switch_to_user:
    # 参数：user_entry_point
    mov 4(%esp), %eax    # 用户程序入口地址
   102e1:	8b 44 24 04          	mov    0x4(%esp),%eax
    
    # 设置用户态段寄存器
    mov $0x23, %bx       # 用户数据段选择子
   102e5:	66 bb 23 00          	mov    $0x23,%bx
    mov %bx, %ds
   102e9:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   102eb:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   102ed:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   102ef:	8e eb                	mov    %ebx,%gs
    
    # 构造iret栈帧（从高地址到低地址压栈）
    push $0x23           # 用户栈段(SS)
   102f1:	6a 23                	push   $0x23
    push $0x7FFFFFFF     # 用户栈指针(ESP) 
   102f3:	68 ff ff ff 7f       	push   $0x7fffffff
    push $0x202          # EFLAGS（开启中断标志IF=1）
   102f8:	68 02 02 00 00       	push   $0x202
    push $0x1B           # 用户代码段(CS)
   102fd:	6a 1b                	push   $0x1b
    push %eax            # 用户程序入口(EIP)
   102ff:	50                   	push   %eax
    
    # 执行特权级切换
    iret
   10300:	cf                   	iret   

00010301 <create_and_switch_user>:

# 创建用户进程并切换（更完整的版本）
    .global create_and_switch_user
create_and_switch_user:
    # 参数：用户程序地址、用户栈地址
    mov 4(%esp), %eax    # 用户程序地址
   10301:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %ebx    # 用户栈地址
   10305:	8b 5c 24 08          	mov    0x8(%esp),%ebx
    
    # 清理寄存器（安全考虑）
    xor %ecx, %ecx
   10309:	31 c9                	xor    %ecx,%ecx
    xor %edx, %edx
   1030b:	31 d2                	xor    %edx,%edx
    xor %esi, %esi
   1030d:	31 f6                	xor    %esi,%esi
    xor %edi, %edi
   1030f:	31 ff                	xor    %edi,%edi
    xor %ebp, %ebp
   10311:	31 ed                	xor    %ebp,%ebp
    
    # 设置用户态段寄存器
    mov $0x23, %cx       # 用户数据段选择子
   10313:	66 b9 23 00          	mov    $0x23,%cx
    mov %cx, %ds
   10317:	8e d9                	mov    %ecx,%ds
    mov %cx, %es
   10319:	8e c1                	mov    %ecx,%es
    mov %cx, %fs
   1031b:	8e e1                	mov    %ecx,%fs
    mov %cx, %gs
   1031d:	8e e9                	mov    %ecx,%gs
    
    # 构造完整的iret栈帧
    push $0x23           # SS - 用户栈段
   1031f:	6a 23                	push   $0x23
    push %ebx            # ESP - 用户栈指针
   10321:	53                   	push   %ebx
    pushf                # 获取当前EFLAGS
   10322:	9c                   	pushf  
    pop %ecx
   10323:	59                   	pop    %ecx
    or $0x200, %ecx      # 设置IF标志（开启中断）
   10324:	81 c9 00 02 00 00    	or     $0x200,%ecx
    push %ecx            # EFLAGS
   1032a:	51                   	push   %ecx
    push $0x1B           # CS - 用户代码段
   1032b:	6a 1b                	push   $0x1b
    push %eax            # EIP - 用户程序入口
   1032d:	50                   	push   %eax
    
    # 跳转到用户态
    iret
   1032e:	cf                   	iret   

0001032f <universal_task_switch>:
# =========================== 统一任务切换系统 ===========================

# 统一任务切换函数 - 支持内核态/用户态任务间随意切换
    .global universal_task_switch
universal_task_switch:
    mov 4(%esp), %eax    # 当前任务指针
   1032f:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx    # 新任务指针
   10333:	8b 54 24 08          	mov    0x8(%esp),%edx
    
    # 保存当前任务上下文到任务结构
    # 假设context结构从偏移0开始
    mov %ebx, 0(%eax)    # ebx
   10337:	89 18                	mov    %ebx,(%eax)
    mov %ecx, 4(%eax)    # ecx
   10339:	89 48 04             	mov    %ecx,0x4(%eax)
    mov %edx, 8(%eax)    # edx (先保存)
   1033c:	89 50 08             	mov    %edx,0x8(%eax)
    mov %esi, 12(%eax)   # esi
   1033f:	89 70 0c             	mov    %esi,0xc(%eax)
    mov %edi, 16(%eax)   # edi
   10342:	89 78 10             	mov    %edi,0x10(%eax)
    mov %ebp, 20(%eax)   # ebp
   10345:	89 68 14             	mov    %ebp,0x14(%eax)
    mov %esp, 24(%eax)   # esp
   10348:	89 60 18             	mov    %esp,0x18(%eax)
    
    # 保存返回地址作为EIP
    mov (%esp), %ebx
   1034b:	8b 1c 24             	mov    (%esp),%ebx
    mov %ebx, 28(%eax)   # eip
   1034e:	89 58 1c             	mov    %ebx,0x1c(%eax)
    
    # 保存EFLAGS
    pushf
   10351:	9c                   	pushf  
    pop %ebx
   10352:	5b                   	pop    %ebx
    mov %ebx, 32(%eax)   # eflags
   10353:	89 58 20             	mov    %ebx,0x20(%eax)
    
    # 保存当前段寄存器
    mov %cs, %bx
   10356:	66 8c cb             	mov    %cs,%bx
    mov %bx, 36(%eax)    # cs
   10359:	66 89 58 24          	mov    %bx,0x24(%eax)
    mov %ds, %bx
   1035d:	66 8c db             	mov    %ds,%bx
    mov %bx, 38(%eax)    # ds
   10360:	66 89 58 26          	mov    %bx,0x26(%eax)
    mov %ss, %bx
   10364:	66 8c d3             	mov    %ss,%bx
    mov %bx, 46(%eax)    # ss
   10367:	66 89 58 2e          	mov    %bx,0x2e(%eax)
    
    # 重新获取新任务指针
    mov 8(%esp), %edx
   1036b:	8b 54 24 08          	mov    0x8(%esp),%edx
    
    # 检查新任务类型 (type字段假设在偏移64)
    cmpl $0, 64(%edx)    # 0=内核任务, 1=用户任务
   1036f:	83 7a 40 00          	cmpl   $0x0,0x40(%edx)
    je switch_to_kernel
   10373:	74 02                	je     10377 <switch_to_kernel>
    jmp switch_to_user
   10375:	eb 35                	jmp    103ac <switch_to_user>

00010377 <switch_to_kernel>:

switch_to_kernel:
    # 切换到内核任务
    
    # 切换页目录 (page_directory字段假设在偏移68)
    mov 68(%edx), %ebx
   10377:	8b 5a 44             	mov    0x44(%edx),%ebx
    cmp $0, %ebx
   1037a:	83 fb 00             	cmp    $0x0,%ebx
    je skip_page_switch1
   1037d:	74 03                	je     10382 <skip_page_switch1>
    mov %ebx, %cr3
   1037f:	0f 22 db             	mov    %ebx,%cr3

00010382 <skip_page_switch1>:
skip_page_switch1:
    
    # 设置内核段寄存器
    mov $0x10, %bx       # 内核数据段
   10382:	66 bb 10 00          	mov    $0x10,%bx
    mov %bx, %ds
   10386:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   10388:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   1038a:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   1038c:	8e eb                	mov    %ebx,%gs
    mov %bx, %ss
   1038e:	8e d3                	mov    %ebx,%ss
    
    # 恢复通用寄存器
    mov 0(%edx), %ebx
   10390:	8b 1a                	mov    (%edx),%ebx
    mov 4(%edx), %ecx
   10392:	8b 4a 04             	mov    0x4(%edx),%ecx
    mov 12(%edx), %esi
   10395:	8b 72 0c             	mov    0xc(%edx),%esi
    mov 16(%edx), %edi
   10398:	8b 7a 10             	mov    0x10(%edx),%edi
    mov 20(%edx), %ebp
   1039b:	8b 6a 14             	mov    0x14(%edx),%ebp
    mov 24(%edx), %esp
   1039e:	8b 62 18             	mov    0x18(%edx),%esp
    
    # 恢复EFLAGS
    mov 32(%edx), %eax
   103a1:	8b 42 20             	mov    0x20(%edx),%eax
    push %eax
   103a4:	50                   	push   %eax
    popf
   103a5:	9d                   	popf   
    
    # 恢复edx并跳转到任务
    mov 8(%edx), %eax
   103a6:	8b 42 08             	mov    0x8(%edx),%eax
    mov %eax, %edx
   103a9:	89 c2                	mov    %eax,%edx
    ret                  # 返回到新任务
   103ab:	c3                   	ret    

000103ac <switch_to_user>:

switch_to_user:
    # 切换到用户任务
    
    # 切换页目录
    mov 68(%edx), %ebx
   103ac:	8b 5a 44             	mov    0x44(%edx),%ebx
    cmp $0, %ebx
   103af:	83 fb 00             	cmp    $0x0,%ebx
    je skip_page_switch2
   103b2:	74 03                	je     103b7 <skip_page_switch2>
    mov %ebx, %cr3
   103b4:	0f 22 db             	mov    %ebx,%cr3

000103b7 <skip_page_switch2>:
skip_page_switch2:
    
    # 构造iret栈帧进行特权级切换
    # 用户栈指针 (user_esp字段假设在偏移76)
    pushl $0x23          # SS - 用户栈段
   103b7:	6a 23                	push   $0x23
    pushl 76(%edx)       # ESP - 用户栈指针
   103b9:	ff 72 4c             	pushl  0x4c(%edx)
    pushl 32(%edx)       # EFLAGS
   103bc:	ff 72 20             	pushl  0x20(%edx)
    pushl $0x1B          # CS - 用户代码段
   103bf:	6a 1b                	push   $0x1b
    pushl 28(%edx)       # EIP - 用户程序地址
   103c1:	ff 72 1c             	pushl  0x1c(%edx)
    
    # 设置用户态段寄存器
    mov $0x23, %bx
   103c4:	66 bb 23 00          	mov    $0x23,%bx
    mov %bx, %ds
   103c8:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   103ca:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   103cc:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   103ce:	8e eb                	mov    %ebx,%gs
    
    # 恢复通用寄存器
    mov 0(%edx), %ebx
   103d0:	8b 1a                	mov    (%edx),%ebx
    mov 4(%edx), %ecx
   103d2:	8b 4a 04             	mov    0x4(%edx),%ecx
    mov 12(%edx), %esi
   103d5:	8b 72 0c             	mov    0xc(%edx),%esi
    mov 16(%edx), %edi
   103d8:	8b 7a 10             	mov    0x10(%edx),%edi
    mov 20(%edx), %ebp
   103db:	8b 6a 14             	mov    0x14(%edx),%ebp
    mov 8(%edx), %eax    # edx暂存到eax
   103de:	8b 42 08             	mov    0x8(%edx),%eax
    mov %eax, %edx       # 恢复edx
   103e1:	89 c2                	mov    %eax,%edx
    
    # 执行特权级切换
    iret
   103e3:	cf                   	iret   

000103e4 <fast_kernel_switch>:

# 快速内核任务切换 (只保存必要寄存器)
    .global fast_kernel_switch
fast_kernel_switch:
    mov 4(%esp), %eax    # 当前ESP保存地址
   103e4:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx    # 新ESP值
   103e8:	8b 54 24 08          	mov    0x8(%esp),%edx
    
    # 保存调用者保存的寄存器
    push %ebp
   103ec:	55                   	push   %ebp
    push %ebx
   103ed:	53                   	push   %ebx
    push %esi
   103ee:	56                   	push   %esi
    push %edi
   103ef:	57                   	push   %edi
    pushf
   103f0:	9c                   	pushf  
    
    # 保存当前ESP
    mov %esp, (%eax)
   103f1:	89 20                	mov    %esp,(%eax)
    
    # 切换到新任务
    mov %edx, %esp
   103f3:	89 d4                	mov    %edx,%esp
    
    # 恢复新任务寄存器
    popf
   103f5:	9d                   	popf   
    pop %edi
   103f6:	5f                   	pop    %edi
    pop %esi
   103f7:	5e                   	pop    %esi
    pop %ebx
   103f8:	5b                   	pop    %ebx
    pop %ebp
   103f9:	5d                   	pop    %ebp
    
    ret
   103fa:	c3                   	ret    

000103fb <switch_on_interrupt_return>:

# 从中断返回时切换任务
    .global switch_on_interrupt_return
switch_on_interrupt_return:
    mov 4(%esp), %eax    # 新任务指针
   103fb:	8b 44 24 04          	mov    0x4(%esp),%eax
    
    # 检查任务类型
    cmpl $0, 64(%eax)
   103ff:	83 78 40 00          	cmpl   $0x0,0x40(%eax)
    je return_to_kernel
   10403:	74 02                	je     10407 <return_to_kernel>
    jmp return_to_user
   10405:	eb 2e                	jmp    10435 <return_to_user>

00010407 <return_to_kernel>:

return_to_kernel:
    # 返回内核任务
    mov 68(%eax), %ebx   # 切换页目录
   10407:	8b 58 44             	mov    0x44(%eax),%ebx
    cmp $0, %ebx
   1040a:	83 fb 00             	cmp    $0x0,%ebx
    je skip_page_switch3
   1040d:	74 03                	je     10412 <skip_page_switch3>
    mov %ebx, %cr3
   1040f:	0f 22 db             	mov    %ebx,%cr3

00010412 <skip_page_switch3>:
skip_page_switch3:
    
    # 设置内核段
    mov $0x10, %bx
   10412:	66 bb 10 00          	mov    $0x10,%bx
    mov %bx, %ds
   10416:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   10418:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   1041a:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   1041c:	8e eb                	mov    %ebx,%gs
    
    # 恢复并跳转
    mov 0(%eax), %ebx
   1041e:	8b 18                	mov    (%eax),%ebx
    mov 4(%eax), %ecx
   10420:	8b 48 04             	mov    0x4(%eax),%ecx
    mov 8(%eax), %edx
   10423:	8b 50 08             	mov    0x8(%eax),%edx
    mov 12(%eax), %esi
   10426:	8b 70 0c             	mov    0xc(%eax),%esi
    mov 16(%eax), %edi
   10429:	8b 78 10             	mov    0x10(%eax),%edi
    mov 20(%eax), %ebp
   1042c:	8b 68 14             	mov    0x14(%eax),%ebp
    mov 24(%eax), %esp
   1042f:	8b 60 18             	mov    0x18(%eax),%esp
    jmp *28(%eax)        # 跳转到任务
   10432:	ff 60 1c             	jmp    *0x1c(%eax)

00010435 <return_to_user>:

return_to_user:
    # 返回用户任务 - 需要修改当前栈上的iret帧
    
    # 切换页目录
    mov 68(%eax), %ebx
   10435:	8b 58 44             	mov    0x44(%eax),%ebx
    cmp $0, %ebx
   10438:	83 fb 00             	cmp    $0x0,%ebx
    je skip_page_switch4
   1043b:	74 03                	je     10440 <skip_page_switch4>
    mov %ebx, %cr3
   1043d:	0f 22 db             	mov    %ebx,%cr3

00010440 <skip_page_switch4>:
skip_page_switch4:
    
    # 修改栈上的iret帧
    mov 28(%eax), %ebx   # 用户EIP
   10440:	8b 58 1c             	mov    0x1c(%eax),%ebx
    mov %ebx, 20(%esp)   # 修改栈上的EIP
   10443:	89 5c 24 14          	mov    %ebx,0x14(%esp)
    mov $0x1B, %bx       # 用户CS
   10447:	66 bb 1b 00          	mov    $0x1b,%bx
    mov %bx, 16(%esp)    # 修改栈上的CS
   1044b:	66 89 5c 24 10       	mov    %bx,0x10(%esp)
    mov 32(%eax), %ebx   # 用户EFLAGS
   10450:	8b 58 20             	mov    0x20(%eax),%ebx
    mov %ebx, 12(%esp)   # 修改栈上的EFLAGS
   10453:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
    mov 76(%eax), %ebx   # 用户ESP
   10457:	8b 58 4c             	mov    0x4c(%eax),%ebx
    mov %ebx, 8(%esp)    # 修改栈上的ESP
   1045a:	89 5c 24 08          	mov    %ebx,0x8(%esp)
    mov $0x23, %bx       # 用户SS
   1045e:	66 bb 23 00          	mov    $0x23,%bx
    mov %bx, 4(%esp)     # 修改栈上的SS
   10462:	66 89 5c 24 04       	mov    %bx,0x4(%esp)
    
    # 设置用户段
    mov $0x23, %bx
   10467:	66 bb 23 00          	mov    $0x23,%bx
    mov %bx, %ds
   1046b:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   1046d:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   1046f:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   10471:	8e eb                	mov    %ebx,%gs
    
    # 恢复通用寄存器
    mov 0(%eax), %ebx
   10473:	8b 18                	mov    (%eax),%ebx
    mov 4(%eax), %ecx
   10475:	8b 48 04             	mov    0x4(%eax),%ecx
    mov 8(%eax), %edx
   10478:	8b 50 08             	mov    0x8(%eax),%edx
    mov 12(%eax), %esi
   1047b:	8b 70 0c             	mov    0xc(%eax),%esi
    mov 16(%eax), %edi
   1047e:	8b 78 10             	mov    0x10(%eax),%edi
    mov 20(%eax), %ebp
   10481:	8b 68 14             	mov    0x14(%eax),%ebp
    
    # 通过修改过的iret帧返回用户态
    iret
   10484:	cf                   	iret   

00010485 <down2>:
#ifndef KLIB_H
#define KLIB_H
#include <stdarg.h>
#include "comm/types.h"
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   10485:	55                   	push   %ebp
   10486:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   10488:	8b 45 0c             	mov    0xc(%ebp),%eax
   1048b:	f7 d8                	neg    %eax
   1048d:	23 45 08             	and    0x8(%ebp),%eax
}
   10490:	5d                   	pop    %ebp
   10491:	c3                   	ret    

00010492 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   10492:	55                   	push   %ebp
   10493:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10495:	8b 55 08             	mov    0x8(%ebp),%edx
   10498:	8b 45 0c             	mov    0xc(%ebp),%eax
   1049b:	01 d0                	add    %edx,%eax
   1049d:	8d 50 ff             	lea    -0x1(%eax),%edx
   104a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   104a3:	f7 d8                	neg    %eax
   104a5:	21 d0                	and    %edx,%eax
}
   104a7:	5d                   	pop    %ebp
   104a8:	c3                   	ret    

000104a9 <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   104a9:	55                   	push   %ebp
   104aa:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   104ac:	8b 45 08             	mov    0x8(%ebp),%eax
   104af:	0f 22 d8             	mov    %eax,%cr3
}
   104b2:	90                   	nop
   104b3:	5d                   	pop    %ebp
   104b4:	c3                   	ret    

000104b5 <pde_index>:
        uint32_t phy_page_addr : 20;
    }
}pte_t;

static inline uint32_t pde_index(uint32_t vaddr)
{
   104b5:	55                   	push   %ebp
   104b6:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 22) & 0x3FF;
   104b8:	8b 45 08             	mov    0x8(%ebp),%eax
   104bb:	c1 e8 16             	shr    $0x16,%eax
}
   104be:	5d                   	pop    %ebp
   104bf:	c3                   	ret    

000104c0 <pte_index>:

static inline uint32_t pte_index(uint32_t vaddr)
{
   104c0:	55                   	push   %ebp
   104c1:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;
   104c3:	8b 45 08             	mov    0x8(%ebp),%eax
   104c6:	c1 e8 0c             	shr    $0xc,%eax
   104c9:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   104ce:	5d                   	pop    %ebp
   104cf:	c3                   	ret    

000104d0 <pde_paddr>:

static inline uint32_t pde_paddr(pde_t * pde)
{
   104d0:	55                   	push   %ebp
   104d1:	89 e5                	mov    %esp,%ebp
    return (pde->phy_pt_addr << 12) ;
   104d3:	8b 45 08             	mov    0x8(%ebp),%eax
   104d6:	8b 00                	mov    (%eax),%eax
   104d8:	c1 e8 0c             	shr    $0xc,%eax
   104db:	c1 e0 0c             	shl    $0xc,%eax
}
   104de:	5d                   	pop    %ebp
   104df:	c3                   	ret    

000104e0 <mmu_set_page_dir>:
static inline uint32_t pte_paddr(pte_t * pte)
{
    return (pte->phy_page_addr << 12) ;
}
static inline void mmu_set_page_dir(uint32_t paddr)
{
   104e0:	55                   	push   %ebp
   104e1:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   104e3:	ff 75 08             	pushl  0x8(%ebp)
   104e6:	e8 be ff ff ff       	call   104a9 <write_cr3>
   104eb:	83 c4 04             	add    $0x4,%esp
}
   104ee:	90                   	nop
   104ef:	c9                   	leave  
   104f0:	c3                   	ret    

000104f1 <addr_alloc_init>:
static addr_alloc_t paddr_alloc;

static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE)));
static void addr_alloc_init(addr_alloc_t *addr_alloc,uint8_t* bits, 
    uint32_t start, uint32_t size, uint32_t page_size)
{
   104f1:	55                   	push   %ebp
   104f2:	89 e5                	mov    %esp,%ebp
   104f4:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&addr_alloc->mutex);
   104f7:	8b 45 08             	mov    0x8(%ebp),%eax
   104fa:	83 ec 0c             	sub    $0xc,%esp
   104fd:	50                   	push   %eax
   104fe:	e8 53 1a 00 00       	call   11f56 <mutex_init>
   10503:	83 c4 10             	add    $0x10,%esp
    
    addr_alloc->start = start;
   10506:	8b 45 08             	mov    0x8(%ebp),%eax
   10509:	8b 55 10             	mov    0x10(%ebp),%edx
   1050c:	89 50 1c             	mov    %edx,0x1c(%eax)
    addr_alloc->size = size;
   1050f:	8b 45 08             	mov    0x8(%ebp),%eax
   10512:	8b 55 14             	mov    0x14(%ebp),%edx
   10515:	89 50 20             	mov    %edx,0x20(%eax)
    addr_alloc->page_size = page_size;
   10518:	8b 45 08             	mov    0x8(%ebp),%eax
   1051b:	8b 55 18             	mov    0x18(%ebp),%edx
   1051e:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&addr_alloc->bitmap, bits, size / page_size, 0);
   10521:	8b 45 14             	mov    0x14(%ebp),%eax
   10524:	ba 00 00 00 00       	mov    $0x0,%edx
   10529:	f7 75 18             	divl   0x18(%ebp)
   1052c:	89 c2                	mov    %eax,%edx
   1052e:	8b 45 08             	mov    0x8(%ebp),%eax
   10531:	83 c0 14             	add    $0x14,%eax
   10534:	6a 00                	push   $0x0
   10536:	52                   	push   %edx
   10537:	ff 75 0c             	pushl  0xc(%ebp)
   1053a:	50                   	push   %eax
   1053b:	e8 f0 1c 00 00       	call   12230 <bitmap_init>
   10540:	83 c4 10             	add    $0x10,%esp
    
}
   10543:	90                   	nop
   10544:	c9                   	leave  
   10545:	c3                   	ret    

00010546 <addr_alloc_page>:

static uint32_t addr_alloc_page(addr_alloc_t *addr_alloc, int page_count)
{
   10546:	55                   	push   %ebp
   10547:	89 e5                	mov    %esp,%ebp
   10549:	83 ec 18             	sub    $0x18,%esp
    uint32_t  addr = 0;
   1054c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&addr_alloc->mutex);
   10553:	8b 45 08             	mov    0x8(%ebp),%eax
   10556:	83 ec 0c             	sub    $0xc,%esp
   10559:	50                   	push   %eax
   1055a:	e8 23 1a 00 00       	call   11f82 <mutex_lock>
   1055f:	83 c4 10             	add    $0x10,%esp
    int page_index = bitmap_alloc_nbits(&addr_alloc->bitmap, 0, page_count);
   10562:	8b 45 08             	mov    0x8(%ebp),%eax
   10565:	83 c0 14             	add    $0x14,%eax
   10568:	83 ec 04             	sub    $0x4,%esp
   1056b:	ff 75 0c             	pushl  0xc(%ebp)
   1056e:	6a 00                	push   $0x0
   10570:	50                   	push   %eax
   10571:	e8 33 1e 00 00       	call   123a9 <bitmap_alloc_nbits>
   10576:	83 c4 10             	add    $0x10,%esp
   10579:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   1057c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10580:	78 17                	js     10599 <addr_alloc_page+0x53>
    {
        addr = addr_alloc->start + page_index * addr_alloc->page_size;
   10582:	8b 45 08             	mov    0x8(%ebp),%eax
   10585:	8b 50 1c             	mov    0x1c(%eax),%edx
   10588:	8b 45 08             	mov    0x8(%ebp),%eax
   1058b:	8b 48 24             	mov    0x24(%eax),%ecx
   1058e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10591:	0f af c1             	imul   %ecx,%eax
   10594:	01 d0                	add    %edx,%eax
   10596:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&addr_alloc->mutex);
   10599:	8b 45 08             	mov    0x8(%ebp),%eax
   1059c:	83 ec 0c             	sub    $0xc,%esp
   1059f:	50                   	push   %eax
   105a0:	e8 70 1a 00 00       	call   12015 <mutex_unlock>
   105a5:	83 c4 10             	add    $0x10,%esp
    return addr;
   105a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   105ab:	c9                   	leave  
   105ac:	c3                   	ret    

000105ad <addr_free_page>:

static void addr_free_page(addr_alloc_t *addr_alloc, uint32_t addr, int page_count)
{
   105ad:	55                   	push   %ebp
   105ae:	89 e5                	mov    %esp,%ebp
   105b0:	53                   	push   %ebx
   105b1:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&addr_alloc->mutex);
   105b4:	8b 45 08             	mov    0x8(%ebp),%eax
   105b7:	83 ec 0c             	sub    $0xc,%esp
   105ba:	50                   	push   %eax
   105bb:	e8 c2 19 00 00       	call   11f82 <mutex_lock>
   105c0:	83 c4 10             	add    $0x10,%esp
    uint32_t page_index = (addr - addr_alloc->start) / addr_alloc->page_size;
   105c3:	8b 45 08             	mov    0x8(%ebp),%eax
   105c6:	8b 40 1c             	mov    0x1c(%eax),%eax
   105c9:	8b 55 0c             	mov    0xc(%ebp),%edx
   105cc:	89 d1                	mov    %edx,%ecx
   105ce:	29 c1                	sub    %eax,%ecx
   105d0:	8b 45 08             	mov    0x8(%ebp),%eax
   105d3:	8b 58 24             	mov    0x24(%eax),%ebx
   105d6:	89 c8                	mov    %ecx,%eax
   105d8:	ba 00 00 00 00       	mov    $0x0,%edx
   105dd:	f7 f3                	div    %ebx
   105df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&addr_alloc->bitmap, page_index, page_count,0);
   105e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105e5:	8b 55 08             	mov    0x8(%ebp),%edx
   105e8:	83 c2 14             	add    $0x14,%edx
   105eb:	6a 00                	push   $0x0
   105ed:	ff 75 10             	pushl  0x10(%ebp)
   105f0:	50                   	push   %eax
   105f1:	52                   	push   %edx
   105f2:	e8 c3 1c 00 00       	call   122ba <bitmap_set_bit>
   105f7:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&addr_alloc->mutex);
   105fa:	8b 45 08             	mov    0x8(%ebp),%eax
   105fd:	83 ec 0c             	sub    $0xc,%esp
   10600:	50                   	push   %eax
   10601:	e8 0f 1a 00 00       	call   12015 <mutex_unlock>
   10606:	83 c4 10             	add    $0x10,%esp
}
   10609:	90                   	nop
   1060a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1060d:	c9                   	leave  
   1060e:	c3                   	ret    

0001060f <show_mem_info>:

void show_mem_info(boot_info_t *boot_info)
{
   1060f:	55                   	push   %ebp
   10610:	89 e5                	mov    %esp,%ebp
   10612:	53                   	push   %ebx
   10613:	83 ec 14             	sub    $0x14,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   10616:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1061d:	eb 42                	jmp    10661 <show_mem_info+0x52>
    {
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   1061f:	8b 45 08             	mov    0x8(%ebp),%eax
   10622:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10625:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
        boot_info->ram_region_cfg[i].start + boot_info->ram_region_cfg[i].size,
   10629:	8b 45 08             	mov    0x8(%ebp),%eax
   1062c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1062f:	8b 1c c8             	mov    (%eax,%ecx,8),%ebx
   10632:	8b 45 08             	mov    0x8(%ebp),%eax
   10635:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10638:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   1063c:	01 c3                	add    %eax,%ebx
   1063e:	8b 45 08             	mov    0x8(%ebp),%eax
   10641:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10644:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10647:	83 ec 0c             	sub    $0xc,%esp
   1064a:	52                   	push   %edx
   1064b:	53                   	push   %ebx
   1064c:	50                   	push   %eax
   1064d:	ff 75 f4             	pushl  -0xc(%ebp)
   10650:	68 ec 2c 01 00       	push   $0x12cec
   10655:	e8 c5 25 00 00       	call   12c1f <log_printf>
   1065a:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   1065d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10661:	8b 45 08             	mov    0x8(%ebp),%eax
   10664:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   1066a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1066d:	7c b0                	jl     1061f <show_mem_info+0x10>
        boot_info->ram_region_cfg[i].size);
    }
}
   1066f:	90                   	nop
   10670:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10673:	c9                   	leave  
   10674:	c3                   	ret    

00010675 <total_mem_size>:
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   10675:	55                   	push   %ebp
   10676:	89 e5                	mov    %esp,%ebp
   10678:	83 ec 10             	sub    $0x10,%esp
    uint32_t total_size = 0;
   1067b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   10682:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10689:	eb 11                	jmp    1069c <total_mem_size+0x27>
    {
        total_size += boot_info->ram_region_cfg[i].size;
   1068b:	8b 45 08             	mov    0x8(%ebp),%eax
   1068e:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10691:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10695:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   10698:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1069c:	8b 45 08             	mov    0x8(%ebp),%eax
   1069f:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   106a5:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   106a8:	7c e1                	jl     1068b <total_mem_size+0x16>
    }
    return total_size;
   106aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   106ad:	c9                   	leave  
   106ae:	c3                   	ret    

000106af <find_pte>:

pte_t * find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   106af:	55                   	push   %ebp
   106b0:	89 e5                	mov    %esp,%ebp
   106b2:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table = (pte_t *)0;
   106b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    pde_t *pde = page_dir + pde_index(vaddr);
   106bc:	ff 75 0c             	pushl  0xc(%ebp)
   106bf:	e8 f1 fd ff ff       	call   104b5 <pde_index>
   106c4:	83 c4 04             	add    $0x4,%esp
   106c7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   106ce:	8b 45 08             	mov    0x8(%ebp),%eax
   106d1:	01 d0                	add    %edx,%eax
   106d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   106d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d9:	0f b6 00             	movzbl (%eax),%eax
   106dc:	83 e0 01             	and    $0x1,%eax
   106df:	84 c0                	test   %al,%al
   106e1:	74 10                	je     106f3 <find_pte+0x44>
    {
        page_table = (pte_t *)pde_paddr(pde);
   106e3:	ff 75 f0             	pushl  -0x10(%ebp)
   106e6:	e8 e5 fd ff ff       	call   104d0 <pde_paddr>
   106eb:	83 c4 04             	add    $0x4,%esp
   106ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
   106f1:	eb 57                	jmp    1074a <find_pte+0x9b>
    }
    else
    {
        if (alloc == 0)
   106f3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   106f7:	75 07                	jne    10700 <find_pte+0x51>
        {
            return (pte_t *)0;
   106f9:	b8 00 00 00 00       	mov    $0x0,%eax
   106fe:	eb 64                	jmp    10764 <find_pte+0xb5>
        }
        else
        {
            uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10700:	83 ec 08             	sub    $0x8,%esp
   10703:	6a 01                	push   $0x1
   10705:	68 00 50 01 00       	push   $0x15000
   1070a:	e8 37 fe ff ff       	call   10546 <addr_alloc_page>
   1070f:	83 c4 10             	add    $0x10,%esp
   10712:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (pg_paddr == 0)
   10715:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10719:	75 07                	jne    10722 <find_pte+0x73>
            {
                return (pte_t *)0;
   1071b:	b8 00 00 00 00       	mov    $0x0,%eax
   10720:	eb 42                	jmp    10764 <find_pte+0xb5>
            }
            pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   10722:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10725:	83 c8 07             	or     $0x7,%eax
   10728:	89 c2                	mov    %eax,%edx
   1072a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1072d:	89 10                	mov    %edx,(%eax)
            page_table = (pte_t *)pg_paddr;
   1072f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10732:	89 45 f4             	mov    %eax,-0xc(%ebp)
            kernel_memset(page_table, 0, MEM_PAGE_SIZE);        
   10735:	83 ec 04             	sub    $0x4,%esp
   10738:	68 00 10 00 00       	push   $0x1000
   1073d:	6a 00                	push   $0x0
   1073f:	ff 75 f4             	pushl  -0xc(%ebp)
   10742:	e8 c4 1e 00 00       	call   1260b <kernel_memset>
   10747:	83 c4 10             	add    $0x10,%esp
        }
    }
    return page_table + pte_index(vaddr);
   1074a:	83 ec 0c             	sub    $0xc,%esp
   1074d:	ff 75 0c             	pushl  0xc(%ebp)
   10750:	e8 6b fd ff ff       	call   104c0 <pte_index>
   10755:	83 c4 10             	add    $0x10,%esp
   10758:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1075f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10762:	01 d0                	add    %edx,%eax
    
    
}
   10764:	c9                   	leave  
   10765:	c3                   	ret    

00010766 <memory_create_map>:
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   10766:	55                   	push   %ebp
   10767:	89 e5                	mov    %esp,%ebp
   10769:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < count; i++)
   1076c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10773:	eb 45                	jmp    107ba <memory_create_map+0x54>
    {
        //log_printf("create map %d: 0x%x - 0x%x, 0x%x, perm :%d\n", i, vaddr, vaddr + MEM_PAGE_SIZE, paddr,perm);
        pte_t * pte = find_pte(page_dir, vaddr,1);
   10775:	83 ec 04             	sub    $0x4,%esp
   10778:	6a 01                	push   $0x1
   1077a:	ff 75 0c             	pushl  0xc(%ebp)
   1077d:	ff 75 08             	pushl  0x8(%ebp)
   10780:	e8 2a ff ff ff       	call   106af <find_pte>
   10785:	83 c4 10             	add    $0x10,%esp
   10788:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   1078b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1078f:	75 07                	jne    10798 <memory_create_map+0x32>
        {
            return -1;
   10791:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10796:	eb 2f                	jmp    107c7 <memory_create_map+0x61>
        }
        //log_printf("pte addr: 0x%x\n", pte);
        ASSERT(pte->present == 0);
        pte->v = paddr | perm | PTE_P;
   10798:	8b 45 10             	mov    0x10(%ebp),%eax
   1079b:	0b 45 18             	or     0x18(%ebp),%eax
   1079e:	83 c8 01             	or     $0x1,%eax
   107a1:	89 c2                	mov    %eax,%edx
   107a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a6:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   107a8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   107af:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for(int i = 0; i < count; i++)
   107b6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107bd:	3b 45 14             	cmp    0x14(%ebp),%eax
   107c0:	7c b3                	jl     10775 <memory_create_map+0xf>
    }
    return 0;
   107c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   107c7:	c9                   	leave  
   107c8:	c3                   	ret    

000107c9 <create_kernel_table>:
void create_kernel_table(void)
{
   107c9:	55                   	push   %ebp
   107ca:	89 e5                	mov    %esp,%ebp
   107cc:	83 ec 28             	sub    $0x28,%esp
        {kernel_base,s_text,kernel_base,PTE_W},
        {s_text,e_text,s_text,0},
        {s_data,(void *)MEM_EBDA_START,s_data,PTE_W},
        {(void *)MEM_EXT_START,(void *)MEM_EXT_END,(void *)MEM_EXT_START,PTE_W}
    };
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   107cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107d6:	e9 86 00 00 00       	jmp    10861 <create_kernel_table+0x98>
    {
        memory_map_t *map = &kernel_map[i];
   107db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107de:	c1 e0 04             	shl    $0x4,%eax
   107e1:	05 00 40 01 00       	add    $0x14000,%eax
   107e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   107e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107ec:	8b 00                	mov    (%eax),%eax
   107ee:	68 00 10 00 00       	push   $0x1000
   107f3:	50                   	push   %eax
   107f4:	e8 8c fc ff ff       	call   10485 <down2>
   107f9:	83 c4 08             	add    $0x8,%esp
   107fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   107ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10802:	8b 40 04             	mov    0x4(%eax),%eax
   10805:	68 00 10 00 00       	push   $0x1000
   1080a:	50                   	push   %eax
   1080b:	e8 82 fc ff ff       	call   10492 <up2>
   10810:	83 c4 08             	add    $0x8,%esp
   10813:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10816:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10819:	8b 40 08             	mov    0x8(%eax),%eax
   1081c:	68 00 10 00 00       	push   $0x1000
   10821:	50                   	push   %eax
   10822:	e8 5e fc ff ff       	call   10485 <down2>
   10827:	83 c4 08             	add    $0x8,%esp
   1082a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1082d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10830:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10833:	c1 e8 0c             	shr    $0xc,%eax
   10836:	89 45 e0             	mov    %eax,-0x20(%ebp)
        memory_create_map(kernel_page_dir,vstart, (uint32_t)map->pstart,page_count,map->perm);
   10839:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083c:	8b 40 0c             	mov    0xc(%eax),%eax
   1083f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10842:	8b 52 08             	mov    0x8(%edx),%edx
   10845:	83 ec 0c             	sub    $0xc,%esp
   10848:	50                   	push   %eax
   10849:	ff 75 e0             	pushl  -0x20(%ebp)
   1084c:	52                   	push   %edx
   1084d:	ff 75 ec             	pushl  -0x14(%ebp)
   10850:	68 00 60 01 00       	push   $0x16000
   10855:	e8 0c ff ff ff       	call   10766 <memory_create_map>
   1085a:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   1085d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10861:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10864:	83 f8 03             	cmp    $0x3,%eax
   10867:	0f 86 6e ff ff ff    	jbe    107db <create_kernel_table+0x12>
    }
}
   1086d:	90                   	nop
   1086e:	c9                   	leave  
   1086f:	c3                   	ret    

00010870 <memory_create_user_space>:

uint32_t memory_create_user_space()
{
   10870:	55                   	push   %ebp
   10871:	89 e5                	mov    %esp,%ebp
   10873:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10876:	83 ec 08             	sub    $0x8,%esp
   10879:	6a 01                	push   $0x1
   1087b:	68 00 50 01 00       	push   $0x15000
   10880:	e8 c1 fc ff ff       	call   10546 <addr_alloc_page>
   10885:	83 c4 10             	add    $0x10,%esp
   10888:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == (pde_t *)0)
   1088b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1088f:	75 07                	jne    10898 <memory_create_user_space+0x28>
    {
        return 0;
   10891:	b8 00 00 00 00       	mov    $0x0,%eax
   10896:	eb 5b                	jmp    108f3 <memory_create_user_space+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   10898:	83 ec 04             	sub    $0x4,%esp
   1089b:	68 00 10 00 00       	push   $0x1000
   108a0:	6a 00                	push   $0x0
   108a2:	ff 75 f0             	pushl  -0x10(%ebp)
   108a5:	e8 61 1d 00 00       	call   1260b <kernel_memset>
   108aa:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   108ad:	83 ec 0c             	sub    $0xc,%esp
   108b0:	68 00 00 00 80       	push   $0x80000000
   108b5:	e8 fb fb ff ff       	call   104b5 <pde_index>
   108ba:	83 c4 10             	add    $0x10,%esp
   108bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i = 0; i < user_pde_start; i++)
   108c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108c7:	eb 1f                	jmp    108e8 <memory_create_user_space+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   108c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   108d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108d6:	01 c2                	add    %eax,%edx
   108d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108db:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   108e2:	89 02                	mov    %eax,(%edx)
    for(int i = 0; i < user_pde_start; i++)
   108e4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108eb:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   108ee:	77 d9                	ja     108c9 <memory_create_user_space+0x59>
    }
    return (uint32_t)page_dir;
   108f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
    
}
   108f3:	c9                   	leave  
   108f4:	c3                   	ret    

000108f5 <memory_init>:
void memory_init(boot_info_t *boot_info)
{
   108f5:	55                   	push   %ebp
   108f6:	89 e5                	mov    %esp,%ebp
   108f8:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    //log_printf("mem init\n");
    show_mem_info(boot_info);
   108fb:	83 ec 0c             	sub    $0xc,%esp
   108fe:	ff 75 08             	pushl  0x8(%ebp)
   10901:	e8 09 fd ff ff       	call   1060f <show_mem_info>
   10906:	83 c4 10             	add    $0x10,%esp

    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10909:	c7 45 f4 24 d1 01 00 	movl   $0x1d124,-0xc(%ebp)
    uint32_t mem_up1MB_free_size = total_mem_size(boot_info) - MEM_EXT_START;
   10910:	83 ec 0c             	sub    $0xc,%esp
   10913:	ff 75 08             	pushl  0x8(%ebp)
   10916:	e8 5a fd ff ff       	call   10675 <total_mem_size>
   1091b:	83 c4 10             	add    $0x10,%esp
   1091e:	2d 00 00 10 00       	sub    $0x100000,%eax
   10923:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free_size = down2(mem_up1MB_free_size,MEM_PAGE_SIZE);
   10926:	83 ec 08             	sub    $0x8,%esp
   10929:	68 00 10 00 00       	push   $0x1000
   1092e:	ff 75 f0             	pushl  -0x10(%ebp)
   10931:	e8 4f fb ff ff       	call   10485 <down2>
   10936:	83 c4 10             	add    $0x10,%esp
   10939:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //log_printf("free memory begin addr: 0x%x ,size 0x%x\n", MEM_EXT_START, mem_up1MB_free_size);
    
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free_size, MEM_PAGE_SIZE);
   1093c:	83 ec 0c             	sub    $0xc,%esp
   1093f:	68 00 10 00 00       	push   $0x1000
   10944:	ff 75 f0             	pushl  -0x10(%ebp)
   10947:	68 00 00 10 00       	push   $0x100000
   1094c:	ff 75 f4             	pushl  -0xc(%ebp)
   1094f:	68 00 50 01 00       	push   $0x15000
   10954:	e8 98 fb ff ff       	call   104f1 <addr_alloc_init>
   10959:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   1095c:	a1 20 50 01 00       	mov    0x15020,%eax
   10961:	c1 e8 0c             	shr    $0xc,%eax
   10964:	83 ec 0c             	sub    $0xc,%esp
   10967:	50                   	push   %eax
   10968:	e8 ad 18 00 00       	call   1221a <bitmap_byte_count>
   1096d:	83 c4 10             	add    $0x10,%esp
   10970:	01 45 f4             	add    %eax,-0xc(%ebp)
    
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);

    create_kernel_table();
   10973:	e8 51 fe ff ff       	call   107c9 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10978:	b8 00 60 01 00       	mov    $0x16000,%eax
   1097d:	83 ec 0c             	sub    $0xc,%esp
   10980:	50                   	push   %eax
   10981:	e8 5a fb ff ff       	call   104e0 <mmu_set_page_dir>
   10986:	83 c4 10             	add    $0x10,%esp
}
   10989:	90                   	nop
   1098a:	c9                   	leave  
   1098b:	c3                   	ret    

0001098c <memory_alloc_for_page_dir>:


int memory_alloc_for_page_dir(uint32_t page_dir,uint32_t vaddr,uint32_t size,int perm)
{
   1098c:	55                   	push   %ebp
   1098d:	89 e5                	mov    %esp,%ebp
   1098f:	83 ec 28             	sub    $0x28,%esp
    uint32_t current_vaddr = vaddr;
   10992:	8b 45 0c             	mov    0xc(%ebp),%eax
   10995:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size,MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10998:	68 00 10 00 00       	push   $0x1000
   1099d:	ff 75 10             	pushl  0x10(%ebp)
   109a0:	e8 ed fa ff ff       	call   10492 <up2>
   109a5:	83 c4 08             	add    $0x8,%esp
   109a8:	c1 e8 0c             	shr    $0xc,%eax
   109ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i = 0; i < page_count; i++)
   109ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   109b5:	eb 68                	jmp    10a1f <memory_alloc_for_page_dir+0x93>
    {
        uint32_t paddr = addr_alloc_page(&paddr_alloc,1);
   109b7:	83 ec 08             	sub    $0x8,%esp
   109ba:	6a 01                	push   $0x1
   109bc:	68 00 50 01 00       	push   $0x15000
   109c1:	e8 80 fb ff ff       	call   10546 <addr_alloc_page>
   109c6:	83 c4 10             	add    $0x10,%esp
   109c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(paddr == 0)
   109cc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   109d0:	75 07                	jne    109d9 <memory_alloc_for_page_dir+0x4d>
        {
            return 0;
   109d2:	b8 00 00 00 00       	mov    $0x0,%eax
   109d7:	eb 53                	jmp    10a2c <memory_alloc_for_page_dir+0xa0>
        }
        int err = memory_create_map((pde_t *)page_dir,current_vaddr,paddr,1,perm);
   109d9:	8b 55 14             	mov    0x14(%ebp),%edx
   109dc:	8b 45 08             	mov    0x8(%ebp),%eax
   109df:	83 ec 0c             	sub    $0xc,%esp
   109e2:	52                   	push   %edx
   109e3:	6a 01                	push   $0x1
   109e5:	ff 75 e8             	pushl  -0x18(%ebp)
   109e8:	ff 75 f4             	pushl  -0xc(%ebp)
   109eb:	50                   	push   %eax
   109ec:	e8 75 fd ff ff       	call   10766 <memory_create_map>
   109f1:	83 c4 20             	add    $0x20,%esp
   109f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if(err < 0)
   109f7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   109fb:	79 17                	jns    10a14 <memory_alloc_for_page_dir+0x88>
        {
            log_printf("memory_alloc_for_page_dir error\n");
   109fd:	83 ec 0c             	sub    $0xc,%esp
   10a00:	68 0c 2d 01 00       	push   $0x12d0c
   10a05:	e8 15 22 00 00       	call   12c1f <log_printf>
   10a0a:	83 c4 10             	add    $0x10,%esp
            return 0;
   10a0d:	b8 00 00 00 00       	mov    $0x0,%eax
   10a12:	eb 18                	jmp    10a2c <memory_alloc_for_page_dir+0xa0>
        }
        current_vaddr += MEM_PAGE_SIZE;
   10a14:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for(int i = 0; i < page_count; i++)
   10a1b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a22:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a25:	7c 90                	jl     109b7 <memory_alloc_for_page_dir+0x2b>
    }
    return 0;
   10a27:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a2c:	c9                   	leave  
   10a2d:	c3                   	ret    

00010a2e <memory_alloc_page_for>:

int memory_alloc_page_for(uint32_t addr,uint32_t size,int perm)
{
   10a2e:	55                   	push   %ebp
   10a2f:	89 e5                	mov    %esp,%ebp
   10a31:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3,addr,size,perm);
   10a34:	e8 2e 05 00 00       	call   10f67 <task_current>
   10a39:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10a3f:	ff 75 10             	pushl  0x10(%ebp)
   10a42:	ff 75 0c             	pushl  0xc(%ebp)
   10a45:	ff 75 08             	pushl  0x8(%ebp)
   10a48:	50                   	push   %eax
   10a49:	e8 3e ff ff ff       	call   1098c <memory_alloc_for_page_dir>
   10a4e:	83 c4 10             	add    $0x10,%esp
}
   10a51:	c9                   	leave  
   10a52:	c3                   	ret    

00010a53 <list_node_init>:
    struct _list_node_t* next;
}list_node_t;


static inline void list_node_init(list_node_t *node)
{
   10a53:	55                   	push   %ebp
   10a54:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10a56:	8b 45 08             	mov    0x8(%ebp),%eax
   10a59:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10a60:	8b 45 08             	mov    0x8(%ebp),%eax
   10a63:	8b 50 04             	mov    0x4(%eax),%edx
   10a66:	8b 45 08             	mov    0x8(%ebp),%eax
   10a69:	89 10                	mov    %edx,(%eax)
}
   10a6b:	90                   	nop
   10a6c:	5d                   	pop    %ebp
   10a6d:	c3                   	ret    

00010a6e <list_node_next>:
static inline list_node_t* list_node_pre(list_node_t* node)
{
    return node->pre;
} 
static inline list_node_t* list_node_next(list_node_t* node)
{
   10a6e:	55                   	push   %ebp
   10a6f:	89 e5                	mov    %esp,%ebp
    return node->next;
   10a71:	8b 45 08             	mov    0x8(%ebp),%eax
   10a74:	8b 40 04             	mov    0x4(%eax),%eax
}
   10a77:	5d                   	pop    %ebp
   10a78:	c3                   	ret    

00010a79 <list_count>:
{
    return list->count == 0;
}

static inline int list_count(list_t * list)
{
   10a79:	55                   	push   %ebp
   10a7a:	89 e5                	mov    %esp,%ebp
    return list->count;
   10a7c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7f:	8b 40 08             	mov    0x8(%eax),%eax
}
   10a82:	5d                   	pop    %ebp
   10a83:	c3                   	ret    

00010a84 <list_first>:
static inline list_node_t* list_first(list_t * list)
{
   10a84:	55                   	push   %ebp
   10a85:	89 e5                	mov    %esp,%ebp
    return list->first;
   10a87:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8a:	8b 00                	mov    (%eax),%eax
}
   10a8c:	5d                   	pop    %ebp
   10a8d:	c3                   	ret    

00010a8e <read_cr3>:
{
   10a8e:	55                   	push   %ebp
   10a8f:	89 e5                	mov    %esp,%ebp
   10a91:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
   10a94:	0f 20 d8             	mov    %cr3,%eax
   10a97:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr3;
   10a9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10a9d:	c9                   	leave  
   10a9e:	c3                   	ret    

00010a9f <write_cr3>:
{
   10a9f:	55                   	push   %ebp
   10aa0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10aa2:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa5:	0f 22 d8             	mov    %eax,%cr3
}
   10aa8:	90                   	nop
   10aa9:	5d                   	pop    %ebp
   10aaa:	c3                   	ret    

00010aab <hlt>:
    uint32_t addr[] = {offset ,selector};
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}

static inline void hlt(void)
{
   10aab:	55                   	push   %ebp
   10aac:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10aae:	f4                   	hlt    
}
   10aaf:	90                   	nop
   10ab0:	5d                   	pop    %ebp
   10ab1:	c3                   	ret    

00010ab2 <write_tr>:

static inline void write_tr(uint16_t selector)
{
   10ab2:	55                   	push   %ebp
   10ab3:	89 e5                	mov    %esp,%ebp
   10ab5:	83 ec 04             	sub    $0x4,%esp
   10ab8:	8b 45 08             	mov    0x8(%ebp),%eax
   10abb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(selector));
   10abf:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10ac3:	0f 00 d8             	ltr    %ax
}
   10ac6:	90                   	nop
   10ac7:	c9                   	leave  
   10ac8:	c3                   	ret    

00010ac9 <tss_init>:
#include "cpu/mmu.h"
static task_manager_t task_manager;
int need_reschedule = 0;
static uint32_t idle_task_stack[1024];
static int tss_init(task_t *task,uint32_t entry,uint32_t esp)
{
   10ac9:	55                   	push   %ebp
   10aca:	89 e5                	mov    %esp,%ebp
   10acc:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   10acf:	e8 06 09 00 00       	call   113da <gdt_alloc_desc>
   10ad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel == -1)
   10ad7:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   10adb:	75 1a                	jne    10af7 <tss_init+0x2e>
    {
        log_printf("tss_init: gdt_alloc_desc failed\n");
   10add:	83 ec 0c             	sub    $0xc,%esp
   10ae0:	68 30 2d 01 00       	push   $0x12d30
   10ae5:	e8 35 21 00 00       	call   12c1f <log_printf>
   10aea:	83 c4 10             	add    $0x10,%esp
        return -1;
   10aed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10af2:	e9 2c 01 00 00       	jmp    10c23 <tss_init+0x15a>
    }
    segment_desc_set(tss_sel,(uint32_t)&task->tss,sizeof(tss_t),
   10af7:	8b 45 08             	mov    0x8(%ebp),%eax
   10afa:	05 94 00 00 00       	add    $0x94,%eax
   10aff:	68 89 00 00 00       	push   $0x89
   10b04:	6a 68                	push   $0x68
   10b06:	50                   	push   %eax
   10b07:	ff 75 f4             	pushl  -0xc(%ebp)
   10b0a:	e8 01 08 00 00       	call   11310 <segment_desc_set>
   10b0f:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL_0 | SEG_TYPE_TSS);
    kernel_memset(&task->tss,0,sizeof(tss_t));
   10b12:	8b 45 08             	mov    0x8(%ebp),%eax
   10b15:	05 94 00 00 00       	add    $0x94,%eax
   10b1a:	83 ec 04             	sub    $0x4,%esp
   10b1d:	6a 68                	push   $0x68
   10b1f:	6a 00                	push   $0x0
   10b21:	50                   	push   %eax
   10b22:	e8 e4 1a 00 00       	call   1260b <kernel_memset>
   10b27:	83 c4 10             	add    $0x10,%esp

    int code_sel = task_manager.app_code_sel | SEG_CPL_3;
   10b2a:	a1 54 72 01 00       	mov    0x17254,%eax
   10b2f:	83 c8 03             	or     $0x3,%eax
   10b32:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int data_sel = task_manager.app_data_sel | SEG_CPL_3;
   10b35:	a1 58 72 01 00       	mov    0x17258,%eax
   10b3a:	83 c8 03             	or     $0x3,%eax
   10b3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    task->tss.eip = entry;
   10b40:	8b 45 08             	mov    0x8(%ebp),%eax
   10b43:	8b 55 0c             	mov    0xc(%ebp),%edx
   10b46:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10b4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4f:	8b 55 10             	mov    0x10(%ebp),%edx
   10b52:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   10b58:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5b:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   10b61:	8b 45 08             	mov    0x8(%ebp),%eax
   10b64:	89 90 cc 00 00 00    	mov    %edx,0xcc(%eax)
    task->tss.ss = task->tss.ss0 = data_sel;
   10b6a:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b70:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10b76:	8b 45 08             	mov    0x8(%ebp),%eax
   10b79:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b82:	89 90 e4 00 00 00    	mov    %edx,0xe4(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = data_sel;
   10b88:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8e:	89 90 f0 00 00 00    	mov    %edx,0xf0(%eax)
   10b94:	8b 45 08             	mov    0x8(%ebp),%eax
   10b97:	8b 90 f0 00 00 00    	mov    0xf0(%eax),%edx
   10b9d:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba0:	89 90 ec 00 00 00    	mov    %edx,0xec(%eax)
   10ba6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba9:	8b 90 ec 00 00 00    	mov    0xec(%eax),%edx
   10baf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb2:	89 90 e8 00 00 00    	mov    %edx,0xe8(%eax)
   10bb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbb:	8b 90 e8 00 00 00    	mov    0xe8(%eax),%edx
   10bc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc4:	89 90 dc 00 00 00    	mov    %edx,0xdc(%eax)
    task->tss.cs = code_sel;
   10bca:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10bcd:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd0:	89 90 e0 00 00 00    	mov    %edx,0xe0(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10bd6:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd9:	c7 80 b8 00 00 00 02 	movl   $0x202,0xb8(%eax)
   10be0:	02 00 00 
    task->tss_sel = tss_sel;
   10be3:	8b 45 08             	mov    0x8(%ebp),%eax
   10be6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10be9:	89 90 fc 00 00 00    	mov    %edx,0xfc(%eax)
    uint32_t page_dir = memory_create_user_space();
   10bef:	e8 7c fc ff ff       	call   10870 <memory_create_user_space>
   10bf4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(page_dir == 0)
   10bf7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bfb:	75 15                	jne    10c12 <tss_init+0x149>
    {
        gdt_free_desc(tss_sel);
   10bfd:	83 ec 0c             	sub    $0xc,%esp
   10c00:	ff 75 f4             	pushl  -0xc(%ebp)
   10c03:	e8 3d 08 00 00       	call   11445 <gdt_free_desc>
   10c08:	83 c4 10             	add    $0x10,%esp
        return -1;
   10c0b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c10:	eb 11                	jmp    10c23 <tss_init+0x15a>
    }
    task->tss.cr3 = page_dir;
   10c12:	8b 45 08             	mov    0x8(%ebp),%eax
   10c15:	8b 55 e8             	mov    -0x18(%ebp),%edx
   10c18:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10c1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c23:	c9                   	leave  
   10c24:	c3                   	ret    

00010c25 <task_init>:
int task_init(task_t *task,const char *name,uint32_t entry,uint32_t esp)
{
   10c25:	55                   	push   %ebp
   10c26:	89 e5                	mov    %esp,%ebp
   10c28:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task *)0);
    //tss_init(task,entry,esp);
    uint32_t * pesp = (uint32_t *)esp;
   10c2b:	8b 45 14             	mov    0x14(%ebp),%eax
   10c2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pesp)
   10c31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10c35:	74 55                	je     10c8c <task_init+0x67>
    {
       *(--pesp) = entry;              // 任务入口地址
   10c37:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c3e:	8b 55 10             	mov    0x10(%ebp),%edx
   10c41:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;                  // ebp
   10c43:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10c47:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c4a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;                  // ebx
   10c50:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c57:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;                  // esi
   10c5d:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10c61:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c64:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;                  // edi
   10c6a:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10c6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = EFLAGS_DEFAULT | EFLAGS_IF; // EFLAGS，允许中断
   10c77:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10c7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c7e:	c7 00 02 02 00 00    	movl   $0x202,(%eax)
        // *(--pesp) = task_manager.app_code_sel; // cs
        // *(--pesp) = task_manager.app_data_sel; // ds
        task->stack = pesp;
   10c84:	8b 45 08             	mov    0x8(%ebp),%eax
   10c87:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10c8a:	89 10                	mov    %edx,(%eax)
    }
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10c8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c8f:	83 c0 5c             	add    $0x5c,%eax
   10c92:	83 ec 04             	sub    $0x4,%esp
   10c95:	6a 20                	push   $0x20
   10c97:	ff 75 0c             	pushl  0xc(%ebp)
   10c9a:	50                   	push   %eax
   10c9b:	e8 fd 17 00 00       	call   1249d <kernel_strncpy>
   10ca0:	83 c4 10             	add    $0x10,%esp
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10ca3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca6:	c7 40 58 0a 00 00 00 	movl   $0xa,0x58(%eax)
    task->slice_ticks = task->time_ticks;
   10cad:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb0:	8b 50 58             	mov    0x58(%eax),%edx
   10cb3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb6:	89 50 54             	mov    %edx,0x54(%eax)
    task->sleep_ticks = 0;
   10cb9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbc:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
    task->state = TASK_CREATED;
   10cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    uint32_t page_dir = memory_create_user_space();
   10ccd:	e8 9e fb ff ff       	call   10870 <memory_create_user_space>
   10cd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == 0)
   10cd5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10cd9:	75 0a                	jne    10ce5 <task_init+0xc0>
    {
        return -1;
   10cdb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ce0:	e9 88 00 00 00       	jmp    10d6d <task_init+0x148>
    }
    task->tss.cr3 = page_dir;
   10ce5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ceb:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    list_node_init(&task->run_node);
   10cf1:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf4:	83 c0 7c             	add    $0x7c,%eax
   10cf7:	83 ec 0c             	sub    $0xc,%esp
   10cfa:	50                   	push   %eax
   10cfb:	e8 53 fd ff ff       	call   10a53 <list_node_init>
   10d00:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   10d03:	8b 45 08             	mov    0x8(%ebp),%eax
   10d06:	05 84 00 00 00       	add    $0x84,%eax
   10d0b:	83 ec 0c             	sub    $0xc,%esp
   10d0e:	50                   	push   %eax
   10d0f:	e8 3f fd ff ff       	call   10a53 <list_node_init>
   10d14:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10d17:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1a:	05 8c 00 00 00       	add    $0x8c,%eax
   10d1f:	83 ec 0c             	sub    $0xc,%esp
   10d22:	50                   	push   %eax
   10d23:	e8 2b fd ff ff       	call   10a53 <list_node_init>
   10d28:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   10d2b:	e8 d8 0f 00 00       	call   11d08 <irq_enter_protection>
   10d30:	89 45 ec             	mov    %eax,-0x14(%ebp)
    task_set_ready(task);
   10d33:	83 ec 0c             	sub    $0xc,%esp
   10d36:	ff 75 08             	pushl  0x8(%ebp)
   10d39:	e8 c9 01 00 00       	call   10f07 <task_set_ready>
   10d3e:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   10d41:	8b 45 08             	mov    0x8(%ebp),%eax
   10d44:	05 84 00 00 00       	add    $0x84,%eax
   10d49:	83 ec 08             	sub    $0x8,%esp
   10d4c:	50                   	push   %eax
   10d4d:	68 48 70 01 00       	push   $0x17048
   10d52:	e8 90 1c 00 00       	call   129e7 <list_insert_last>
   10d57:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10d5a:	83 ec 0c             	sub    $0xc,%esp
   10d5d:	ff 75 ec             	pushl  -0x14(%ebp)
   10d60:	e8 bb 0f 00 00       	call   11d20 <irq_leave_protection>
   10d65:	83 c4 10             	add    $0x10,%esp
    return 0;
   10d68:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d6d:	c9                   	leave  
   10d6e:	c3                   	ret    

00010d6f <idle_task_entry>:
void simple_switch(uint32_t ** from,uint32_t *to);
void interrupt_switch(uint32_t ** from,uint32_t *to);
static void idle_task_entry(void)
{
   10d6f:	55                   	push   %ebp
   10d70:	89 e5                	mov    %esp,%ebp
    while(1)
    {
        hlt();
   10d72:	e8 34 fd ff ff       	call   10aab <hlt>
   10d77:	eb f9                	jmp    10d72 <idle_task_entry+0x3>

00010d79 <task_manager_init>:
    }
}
void task_manager_init()
{
   10d79:	55                   	push   %ebp
   10d7a:	89 e5                	mov    %esp,%ebp
   10d7c:	83 ec 18             	sub    $0x18,%esp
    int sel = gdt_alloc_desc();
   10d7f:	e8 56 06 00 00       	call   113da <gdt_alloc_desc>
   10d84:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel,0,0xFFFFFFFF,SEG_P_PRESENT | SEG_DPL_3 | 
   10d87:	68 e2 00 00 00       	push   $0xe2
   10d8c:	6a ff                	push   $0xffffffff
   10d8e:	6a 00                	push   $0x0
   10d90:	ff 75 f4             	pushl  -0xc(%ebp)
   10d93:	e8 78 05 00 00       	call   11310 <segment_desc_set>
   10d98:	83 c4 10             	add    $0x10,%esp
        SEG_TYPE_DATA | SEG_TYPE_RW | SEG_DPL_3);
    task_manager.app_data_sel = sel | SEG_CPL_3;
   10d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d9e:	83 c8 03             	or     $0x3,%eax
   10da1:	a3 58 72 01 00       	mov    %eax,0x17258
    sel = gdt_alloc_desc();
   10da6:	e8 2f 06 00 00       	call   113da <gdt_alloc_desc>
   10dab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel,0,0xFFFFFFFF,SEG_P_PRESENT | SEG_DPL_3 | 
   10dae:	68 ea 00 00 00       	push   $0xea
   10db3:	6a ff                	push   $0xffffffff
   10db5:	6a 00                	push   $0x0
   10db7:	ff 75 f4             	pushl  -0xc(%ebp)
   10dba:	e8 51 05 00 00       	call   11310 <segment_desc_set>
   10dbf:	83 c4 10             	add    $0x10,%esp
        SEG_TYPE_CODE | SEG_TYPE_RW | SEG_DPL_3);
    task_manager.app_code_sel = sel | SEG_CPL_3;
   10dc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dc5:	83 c8 03             	or     $0x3,%eax
   10dc8:	a3 54 72 01 00       	mov    %eax,0x17254
    list_init(&task_manager.ready_list);
   10dcd:	83 ec 0c             	sub    $0xc,%esp
   10dd0:	68 30 70 01 00       	push   $0x17030
   10dd5:	e8 89 1b 00 00       	call   12963 <list_init>
   10dda:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10ddd:	83 ec 0c             	sub    $0xc,%esp
   10de0:	68 48 70 01 00       	push   $0x17048
   10de5:	e8 79 1b 00 00       	call   12963 <list_init>
   10dea:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10ded:	83 ec 0c             	sub    $0xc,%esp
   10df0:	68 3c 70 01 00       	push   $0x1703c
   10df5:	e8 69 1b 00 00       	call   12963 <list_init>
   10dfa:	83 c4 10             	add    $0x10,%esp

    task_manager.current_task = (task_t *)0;
   10dfd:	c7 05 2c 70 01 00 00 	movl   $0x0,0x1702c
   10e04:	00 00 00 
    task_manager.from_task = (task_t *)0;
   10e07:	c7 05 24 70 01 00 00 	movl   $0x0,0x17024
   10e0e:	00 00 00 
    task_manager.to_task = (task_t *)0;
   10e11:	c7 05 28 70 01 00 00 	movl   $0x0,0x17028
   10e18:	00 00 00 
    task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE ;
   10e1b:	c7 05 20 70 01 00 00 	movl   $0x0,0x17020
   10e22:	00 00 00 

    task_init(&task_manager.idle_task,"idle_task",idle_task_entry,(uint32_t)&idle_task_stack[1024]);
   10e25:	ba 60 82 01 00       	mov    $0x18260,%edx
   10e2a:	b8 6f 0d 01 00       	mov    $0x10d6f,%eax
   10e2f:	52                   	push   %edx
   10e30:	50                   	push   %eax
   10e31:	68 51 2d 01 00       	push   $0x12d51
   10e36:	68 54 71 01 00       	push   $0x17154
   10e3b:	e8 e5 fd ff ff       	call   10c25 <task_init>
   10e40:	83 c4 10             	add    $0x10,%esp
}
   10e43:	90                   	nop
   10e44:	c9                   	leave  
   10e45:	c3                   	ret    

00010e46 <task_first_init>:

void task_first_init()
{
   10e46:	55                   	push   %ebp
   10e47:	89 e5                	mov    %esp,%ebp
   10e49:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[];
    extern uint8_t e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10e4c:	ba 24 d1 01 00       	mov    $0x1d124,%edx
   10e51:	b8 e0 d0 01 00       	mov    $0x1d0e0,%eax
   10e56:	29 c2                	sub    %eax,%edx
   10e58:	89 d0                	mov    %edx,%eax
   10e5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10e5d:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    
    uint32_t first_start = (uint32_t)first_task_entry;
   10e64:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    task_init(&task_manager.first_task,"first_task",first_start,0);
   10e6b:	6a 00                	push   $0x0
   10e6d:	ff 75 ec             	pushl  -0x14(%ebp)
   10e70:	68 5b 2d 01 00       	push   $0x12d5b
   10e75:	68 54 70 01 00       	push   $0x17054
   10e7a:	e8 a6 fd ff ff       	call   10c25 <task_init>
   10e7f:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10e82:	a1 50 71 01 00       	mov    0x17150,%eax
   10e87:	0f b7 c0             	movzwl %ax,%eax
   10e8a:	83 ec 0c             	sub    $0xc,%esp
   10e8d:	50                   	push   %eax
   10e8e:	e8 1f fc ff ff       	call   10ab2 <write_tr>
   10e93:	83 c4 10             	add    $0x10,%esp
    task_manager.current_task = &task_manager.first_task;
   10e96:	c7 05 2c 70 01 00 54 	movl   $0x17054,0x1702c
   10e9d:	70 01 00 
    mmu_set_page_dir_task(task_manager.current_task);
   10ea0:	a1 2c 70 01 00       	mov    0x1702c,%eax
   10ea5:	83 ec 0c             	sub    $0xc,%esp
   10ea8:	50                   	push   %eax
   10ea9:	e8 c9 02 00 00       	call   11177 <mmu_set_page_dir_task>
   10eae:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start,alloc_size,PTE_P | PTE_W);
   10eb1:	83 ec 04             	sub    $0x4,%esp
   10eb4:	6a 03                	push   $0x3
   10eb6:	ff 75 f0             	pushl  -0x10(%ebp)
   10eb9:	ff 75 ec             	pushl  -0x14(%ebp)
   10ebc:	e8 6d fb ff ff       	call   10a2e <memory_alloc_page_for>
   10ec1:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start,s_first_task,copy_size);
   10ec4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10ec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10eca:	83 ec 04             	sub    $0x4,%esp
   10ecd:	52                   	push   %edx
   10ece:	68 e0 d0 01 00       	push   $0x1d0e0
   10ed3:	50                   	push   %eax
   10ed4:	e8 e3 16 00 00       	call   125bc <kernel_memcpy>
   10ed9:	83 c4 10             	add    $0x10,%esp

}
   10edc:	90                   	nop
   10edd:	c9                   	leave  
   10ede:	c3                   	ret    

00010edf <get_from_task>:
task_t * get_from_task()
{
   10edf:	55                   	push   %ebp
   10ee0:	89 e5                	mov    %esp,%ebp
    return task_manager.from_task;
   10ee2:	a1 24 70 01 00       	mov    0x17024,%eax
}
   10ee7:	5d                   	pop    %ebp
   10ee8:	c3                   	ret    

00010ee9 <get_to_task>:
task_t * get_to_task()
{
   10ee9:	55                   	push   %ebp
   10eea:	89 e5                	mov    %esp,%ebp
    return task_manager.to_task;
   10eec:	a1 28 70 01 00       	mov    0x17028,%eax
}
   10ef1:	5d                   	pop    %ebp
   10ef2:	c3                   	ret    

00010ef3 <task_is_need_reschedule>:
uint32_t task_is_need_reschedule()
{
   10ef3:	55                   	push   %ebp
   10ef4:	89 e5                	mov    %esp,%ebp
    return task_manager.need_reschedule;
   10ef6:	a1 20 70 01 00       	mov    0x17020,%eax
}
   10efb:	5d                   	pop    %ebp
   10efc:	c3                   	ret    

00010efd <task_first_task>:
task_t * task_first_task()
{
   10efd:	55                   	push   %ebp
   10efe:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10f00:	b8 54 70 01 00       	mov    $0x17054,%eax
}
   10f05:	5d                   	pop    %ebp
   10f06:	c3                   	ret    

00010f07 <task_set_ready>:

void task_set_ready(task_t *task)
{
   10f07:	55                   	push   %ebp
   10f08:	89 e5                	mov    %esp,%ebp
   10f0a:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   10f0d:	81 7d 08 54 71 01 00 	cmpl   $0x17154,0x8(%ebp)
   10f14:	74 23                	je     10f39 <task_set_ready+0x32>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   10f16:	8b 45 08             	mov    0x8(%ebp),%eax
   10f19:	83 c0 7c             	add    $0x7c,%eax
   10f1c:	83 ec 08             	sub    $0x8,%esp
   10f1f:	50                   	push   %eax
   10f20:	68 30 70 01 00       	push   $0x17030
   10f25:	e8 bd 1a 00 00       	call   129e7 <list_insert_last>
   10f2a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;  
   10f2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f30:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
   10f37:	eb 01                	jmp    10f3a <task_set_ready+0x33>
        return;
   10f39:	90                   	nop
}
   10f3a:	c9                   	leave  
   10f3b:	c3                   	ret    

00010f3c <task_set_block>:

void task_set_block(task_t *task)
{
   10f3c:	55                   	push   %ebp
   10f3d:	89 e5                	mov    %esp,%ebp
   10f3f:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   10f42:	81 7d 08 54 71 01 00 	cmpl   $0x17154,0x8(%ebp)
   10f49:	74 19                	je     10f64 <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   10f4b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4e:	83 c0 7c             	add    $0x7c,%eax
   10f51:	83 ec 08             	sub    $0x8,%esp
   10f54:	50                   	push   %eax
   10f55:	68 30 70 01 00       	push   $0x17030
   10f5a:	e8 63 1b 00 00       	call   12ac2 <list_remove>
   10f5f:	83 c4 10             	add    $0x10,%esp
   10f62:	eb 01                	jmp    10f65 <task_set_block+0x29>
        return;
   10f64:	90                   	nop
}
   10f65:	c9                   	leave  
   10f66:	c3                   	ret    

00010f67 <task_current>:

task_t * task_current()
{
   10f67:	55                   	push   %ebp
   10f68:	89 e5                	mov    %esp,%ebp
    return task_manager.current_task;
   10f6a:	a1 2c 70 01 00       	mov    0x1702c,%eax
}
   10f6f:	5d                   	pop    %ebp
   10f70:	c3                   	ret    

00010f71 <sys_sched_yield>:
int sys_sched_yield()
{
   10f71:	55                   	push   %ebp
   10f72:	89 e5                	mov    %esp,%ebp
   10f74:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10f77:	e8 8c 0d 00 00       	call   11d08 <irq_enter_protection>
   10f7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&task_manager.ready_list) > 1)
   10f7f:	83 ec 0c             	sub    $0xc,%esp
   10f82:	68 30 70 01 00       	push   $0x17030
   10f87:	e8 ed fa ff ff       	call   10a79 <list_count>
   10f8c:	83 c4 10             	add    $0x10,%esp
   10f8f:	83 f8 01             	cmp    $0x1,%eax
   10f92:	7e 29                	jle    10fbd <sys_sched_yield+0x4c>
    {
        task_t * current_task = task_current();
   10f94:	e8 ce ff ff ff       	call   10f67 <task_current>
   10f99:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(current_task);
   10f9c:	83 ec 0c             	sub    $0xc,%esp
   10f9f:	ff 75 f0             	pushl  -0x10(%ebp)
   10fa2:	e8 95 ff ff ff       	call   10f3c <task_set_block>
   10fa7:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   10faa:	83 ec 0c             	sub    $0xc,%esp
   10fad:	ff 75 f0             	pushl  -0x10(%ebp)
   10fb0:	e8 52 ff ff ff       	call   10f07 <task_set_ready>
   10fb5:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10fb8:	e8 78 00 00 00       	call   11035 <task_dispatch>
    }
    irq_leave_protection(state);
   10fbd:	83 ec 0c             	sub    $0xc,%esp
   10fc0:	ff 75 f4             	pushl  -0xc(%ebp)
   10fc3:	e8 58 0d 00 00       	call   11d20 <irq_leave_protection>
   10fc8:	83 c4 10             	add    $0x10,%esp
    return 0;
   10fcb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10fd0:	c9                   	leave  
   10fd1:	c3                   	ret    

00010fd2 <task_next_run>:

task_t * task_next_run()
{
   10fd2:	55                   	push   %ebp
   10fd3:	89 e5                	mov    %esp,%ebp
   10fd5:	83 ec 10             	sub    $0x10,%esp
    if(list_count(&task_manager.ready_list) == 0)
   10fd8:	68 30 70 01 00       	push   $0x17030
   10fdd:	e8 97 fa ff ff       	call   10a79 <list_count>
   10fe2:	83 c4 04             	add    $0x4,%esp
   10fe5:	85 c0                	test   %eax,%eax
   10fe7:	75 07                	jne    10ff0 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   10fe9:	b8 54 71 01 00       	mov    $0x17154,%eax
   10fee:	eb 30                	jmp    11020 <task_next_run+0x4e>
    }
    list_node_t * node = list_first(&task_manager.ready_list);
   10ff0:	68 30 70 01 00       	push   $0x17030
   10ff5:	e8 8a fa ff ff       	call   10a84 <list_first>
   10ffa:	83 c4 04             	add    $0x4,%esp
   10ffd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(node)
   11000:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11004:	74 15                	je     1101b <task_next_run+0x49>
    {
        return list_node_parent(node,task_t,run_node);
   11006:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1100a:	74 08                	je     11014 <task_next_run+0x42>
   1100c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1100f:	83 e8 7c             	sub    $0x7c,%eax
   11012:	eb 0c                	jmp    11020 <task_next_run+0x4e>
   11014:	b8 00 00 00 00       	mov    $0x0,%eax
   11019:	eb 05                	jmp    11020 <task_next_run+0x4e>
    }
    return (task_t *)0;
   1101b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11020:	c9                   	leave  
   11021:	c3                   	ret    

00011022 <schedule_switch>:

void schedule_switch()
{
   11022:	55                   	push   %ebp
   11023:	89 e5                	mov    %esp,%ebp
   11025:	83 ec 08             	sub    $0x8,%esp
    task_dispatch();
   11028:	e8 08 00 00 00       	call   11035 <task_dispatch>
    do_schedule_switch();
   1102d:	e8 88 01 00 00       	call   111ba <do_schedule_switch>
}
   11032:	90                   	nop
   11033:	c9                   	leave  
   11034:	c3                   	ret    

00011035 <task_dispatch>:
void task_dispatch()
{
   11035:	55                   	push   %ebp
   11036:	89 e5                	mov    %esp,%ebp
   11038:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1103b:	e8 c8 0c 00 00       	call   11d08 <irq_enter_protection>
   11040:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * next_task = task_next_run();
   11043:	e8 8a ff ff ff       	call   10fd2 <task_next_run>
   11048:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next_task != task_current())
   1104b:	e8 17 ff ff ff       	call   10f67 <task_current>
   11050:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11053:	74 34                	je     11089 <task_dispatch+0x54>
    {
        task_t * from = task_current();
   11055:	e8 0d ff ff ff       	call   10f67 <task_current>
   1105a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.current_task = next_task;
   1105d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11060:	a3 2c 70 01 00       	mov    %eax,0x1702c
        next_task->state = TASK_RUNNING;
   11065:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11068:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        task_manager.need_reschedule = TASK_NEED_RESCHEDULE;
   1106f:	c7 05 20 70 01 00 01 	movl   $0x1,0x17020
   11076:	00 00 00 
        task_manager.from_task = from;
   11079:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1107c:	a3 24 70 01 00       	mov    %eax,0x17024
        task_manager.to_task = next_task;
   11081:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11084:	a3 28 70 01 00       	mov    %eax,0x17028
    }
    irq_leave_protection(state);
   11089:	83 ec 0c             	sub    $0xc,%esp
   1108c:	ff 75 f4             	pushl  -0xc(%ebp)
   1108f:	e8 8c 0c 00 00       	call   11d20 <irq_leave_protection>
   11094:	83 c4 10             	add    $0x10,%esp
}
   11097:	90                   	nop
   11098:	c9                   	leave  
   11099:	c3                   	ret    

0001109a <task_time_tick>:

void task_time_tick()
{
   1109a:	55                   	push   %ebp
   1109b:	89 e5                	mov    %esp,%ebp
   1109d:	83 ec 18             	sub    $0x18,%esp
    if(task_manager.need_reschedule)
   110a0:	a1 20 70 01 00       	mov    0x17020,%eax
   110a5:	85 c0                	test   %eax,%eax
   110a7:	0f 85 c7 00 00 00    	jne    11174 <task_time_tick+0xda>
    {
        return; 
    }
    list_node_t * curr = list_first(&task_manager.sleep_list);
   110ad:	68 3c 70 01 00       	push   $0x1703c
   110b2:	e8 cd f9 ff ff       	call   10a84 <list_first>
   110b7:	83 c4 04             	add    $0x4,%esp
   110ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   110bd:	eb 5f                	jmp    1111e <task_time_tick+0x84>
    {
        list_node_t * next = list_node_next(curr);
   110bf:	ff 75 f4             	pushl  -0xc(%ebp)
   110c2:	e8 a7 f9 ff ff       	call   10a6e <list_node_next>
   110c7:	83 c4 04             	add    $0x4,%esp
   110ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   110cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   110d1:	74 08                	je     110db <task_time_tick+0x41>
   110d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110d6:	83 e8 7c             	sub    $0x7c,%eax
   110d9:	eb 05                	jmp    110e0 <task_time_tick+0x46>
   110db:	b8 00 00 00 00       	mov    $0x0,%eax
   110e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task->sleep_ticks--;
   110e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110e6:	8b 40 50             	mov    0x50(%eax),%eax
   110e9:	8d 50 ff             	lea    -0x1(%eax),%edx
   110ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110ef:	89 50 50             	mov    %edx,0x50(%eax)
        if(task->sleep_ticks <= 0)
   110f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110f5:	8b 40 50             	mov    0x50(%eax),%eax
   110f8:	85 c0                	test   %eax,%eax
   110fa:	7f 1c                	jg     11118 <task_time_tick+0x7e>
        {
            task_set_wakeup(task);
   110fc:	83 ec 0c             	sub    $0xc,%esp
   110ff:	ff 75 e8             	pushl  -0x18(%ebp)
   11102:	e8 4a 01 00 00       	call   11251 <task_set_wakeup>
   11107:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1110a:	83 ec 0c             	sub    $0xc,%esp
   1110d:	ff 75 e8             	pushl  -0x18(%ebp)
   11110:	e8 f2 fd ff ff       	call   10f07 <task_set_ready>
   11115:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11118:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1111b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   1111e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11122:	75 9b                	jne    110bf <task_time_tick+0x25>
    }
    task_t * current_task = task_current();
   11124:	e8 3e fe ff ff       	call   10f67 <task_current>
   11129:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current_task->slice_ticks--;
   1112c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1112f:	8b 40 54             	mov    0x54(%eax),%eax
   11132:	8d 50 ff             	lea    -0x1(%eax),%edx
   11135:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11138:	89 50 54             	mov    %edx,0x54(%eax)
    if(current_task->slice_ticks <= 0)
   1113b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1113e:	8b 40 54             	mov    0x54(%eax),%eax
   11141:	85 c0                	test   %eax,%eax
   11143:	7f 30                	jg     11175 <task_time_tick+0xdb>
    {
        current_task->slice_ticks = current_task->time_ticks;
   11145:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11148:	8b 50 58             	mov    0x58(%eax),%edx
   1114b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1114e:	89 50 54             	mov    %edx,0x54(%eax)
        task_set_block(current_task);
   11151:	83 ec 0c             	sub    $0xc,%esp
   11154:	ff 75 f0             	pushl  -0x10(%ebp)
   11157:	e8 e0 fd ff ff       	call   10f3c <task_set_block>
   1115c:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   1115f:	83 ec 0c             	sub    $0xc,%esp
   11162:	ff 75 f0             	pushl  -0x10(%ebp)
   11165:	e8 9d fd ff ff       	call   10f07 <task_set_ready>
   1116a:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1116d:	e8 c3 fe ff ff       	call   11035 <task_dispatch>
   11172:	eb 01                	jmp    11175 <task_time_tick+0xdb>
        return; 
   11174:	90                   	nop
    }
}
   11175:	c9                   	leave  
   11176:	c3                   	ret    

00011177 <mmu_set_page_dir_task>:

void mmu_set_page_dir_task(task_t * to_task)
{
   11177:	55                   	push   %ebp
   11178:	89 e5                	mov    %esp,%ebp
   1117a:	53                   	push   %ebx
    if(to_task == (task_t *)0)
   1117b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1117f:	74 33                	je     111b4 <mmu_set_page_dir_task+0x3d>
    {
        return;
    }
    if(to_task->tss.cr3 != read_cr3() && to_task->tss.cr3 != 0)
   11181:	8b 45 08             	mov    0x8(%ebp),%eax
   11184:	8b 98 b0 00 00 00    	mov    0xb0(%eax),%ebx
   1118a:	e8 ff f8 ff ff       	call   10a8e <read_cr3>
   1118f:	39 c3                	cmp    %eax,%ebx
   11191:	74 22                	je     111b5 <mmu_set_page_dir_task+0x3e>
   11193:	8b 45 08             	mov    0x8(%ebp),%eax
   11196:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   1119c:	85 c0                	test   %eax,%eax
   1119e:	74 15                	je     111b5 <mmu_set_page_dir_task+0x3e>
    {
        write_cr3(to_task->tss.cr3);
   111a0:	8b 45 08             	mov    0x8(%ebp),%eax
   111a3:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   111a9:	50                   	push   %eax
   111aa:	e8 f0 f8 ff ff       	call   10a9f <write_cr3>
   111af:	83 c4 04             	add    $0x4,%esp
   111b2:	eb 01                	jmp    111b5 <mmu_set_page_dir_task+0x3e>
        return;
   111b4:	90                   	nop
    }
}
   111b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   111b8:	c9                   	leave  
   111b9:	c3                   	ret    

000111ba <do_schedule_switch>:
void do_schedule_switch(void)
{
   111ba:	55                   	push   %ebp
   111bb:	89 e5                	mov    %esp,%ebp
   111bd:	83 ec 08             	sub    $0x8,%esp
    if (task_manager.need_reschedule) {
   111c0:	a1 20 70 01 00       	mov    0x17020,%eax
   111c5:	85 c0                	test   %eax,%eax
   111c7:	74 4a                	je     11213 <do_schedule_switch+0x59>
        task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE;
   111c9:	c7 05 20 70 01 00 00 	movl   $0x0,0x17020
   111d0:	00 00 00 
        if (task_manager.from_task && task_manager.from_task != task_manager.to_task) {
   111d3:	a1 24 70 01 00       	mov    0x17024,%eax
   111d8:	85 c0                	test   %eax,%eax
   111da:	74 37                	je     11213 <do_schedule_switch+0x59>
   111dc:	8b 15 24 70 01 00    	mov    0x17024,%edx
   111e2:	a1 28 70 01 00       	mov    0x17028,%eax
   111e7:	39 c2                	cmp    %eax,%edx
   111e9:	74 28                	je     11213 <do_schedule_switch+0x59>
            // 在这里进行任务切换
            // 使用简单的栈切换，避免复杂的中断上下文切换
            mmu_set_page_dir_task(task_manager.to_task);
   111eb:	a1 28 70 01 00       	mov    0x17028,%eax
   111f0:	50                   	push   %eax
   111f1:	e8 81 ff ff ff       	call   11177 <mmu_set_page_dir_task>
   111f6:	83 c4 04             	add    $0x4,%esp
            simple_switch(&task_manager.from_task->stack, task_manager.to_task->stack);
   111f9:	a1 28 70 01 00       	mov    0x17028,%eax
   111fe:	8b 00                	mov    (%eax),%eax
   11200:	8b 15 24 70 01 00    	mov    0x17024,%edx
   11206:	83 ec 08             	sub    $0x8,%esp
   11209:	50                   	push   %eax
   1120a:	52                   	push   %edx
   1120b:	e8 ba f0 ff ff       	call   102ca <simple_switch>
   11210:	83 c4 10             	add    $0x10,%esp
        }
    }
}
   11213:	90                   	nop
   11214:	c9                   	leave  
   11215:	c3                   	ret    

00011216 <task_set_sleep>:

void task_set_sleep(task_t *task,uint32_t ticks)
{
   11216:	55                   	push   %ebp
   11217:	89 e5                	mov    %esp,%ebp
   11219:	83 ec 08             	sub    $0x8,%esp
    if(ticks == 0)
   1121c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11220:	74 2c                	je     1124e <task_set_sleep+0x38>
    {
        return;
    }
    task->sleep_ticks = ticks;
   11222:	8b 55 0c             	mov    0xc(%ebp),%edx
   11225:	8b 45 08             	mov    0x8(%ebp),%eax
   11228:	89 50 50             	mov    %edx,0x50(%eax)
    task->state = TASK_SLEEP;
   1122b:	8b 45 08             	mov    0x8(%ebp),%eax
   1122e:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
    list_insert_last(&task_manager.sleep_list,&task->run_node);
   11235:	8b 45 08             	mov    0x8(%ebp),%eax
   11238:	83 c0 7c             	add    $0x7c,%eax
   1123b:	83 ec 08             	sub    $0x8,%esp
   1123e:	50                   	push   %eax
   1123f:	68 3c 70 01 00       	push   $0x1703c
   11244:	e8 9e 17 00 00       	call   129e7 <list_insert_last>
   11249:	83 c4 10             	add    $0x10,%esp
   1124c:	eb 01                	jmp    1124f <task_set_sleep+0x39>
        return;
   1124e:	90                   	nop
}
   1124f:	c9                   	leave  
   11250:	c3                   	ret    

00011251 <task_set_wakeup>:

void task_set_wakeup(task_t *task)
{
   11251:	55                   	push   %ebp
   11252:	89 e5                	mov    %esp,%ebp
   11254:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	83 c0 7c             	add    $0x7c,%eax
   1125d:	83 ec 08             	sub    $0x8,%esp
   11260:	50                   	push   %eax
   11261:	68 3c 70 01 00       	push   $0x1703c
   11266:	e8 57 18 00 00       	call   12ac2 <list_remove>
   1126b:	83 c4 10             	add    $0x10,%esp

    //task->state = TASK_READY;
}
   1126e:	90                   	nop
   1126f:	c9                   	leave  
   11270:	c3                   	ret    

00011271 <sys_sleep>:

void sys_sleep(uint32_t ms)
{
   11271:	55                   	push   %ebp
   11272:	89 e5                	mov    %esp,%ebp
   11274:	53                   	push   %ebx
   11275:	83 ec 14             	sub    $0x14,%esp
    irq_state_t state = irq_enter_protection();
   11278:	e8 8b 0a 00 00       	call   11d08 <irq_enter_protection>
   1127d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    
    task_set_block(task_current());
   11280:	e8 e2 fc ff ff       	call   10f67 <task_current>
   11285:	83 ec 0c             	sub    $0xc,%esp
   11288:	50                   	push   %eax
   11289:	e8 ae fc ff ff       	call   10f3c <task_set_block>
   1128e:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_current(),(ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   11291:	8b 45 08             	mov    0x8(%ebp),%eax
   11294:	83 c0 18             	add    $0x18,%eax
   11297:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   1129c:	f7 e2                	mul    %edx
   1129e:	89 d3                	mov    %edx,%ebx
   112a0:	c1 eb 03             	shr    $0x3,%ebx
   112a3:	e8 bf fc ff ff       	call   10f67 <task_current>
   112a8:	83 ec 08             	sub    $0x8,%esp
   112ab:	53                   	push   %ebx
   112ac:	50                   	push   %eax
   112ad:	e8 64 ff ff ff       	call   11216 <task_set_sleep>
   112b2:	83 c4 10             	add    $0x10,%esp

    schedule_switch();
   112b5:	e8 68 fd ff ff       	call   11022 <schedule_switch>
    irq_leave_protection(state);
   112ba:	83 ec 0c             	sub    $0xc,%esp
   112bd:	ff 75 f4             	pushl  -0xc(%ebp)
   112c0:	e8 5b 0a 00 00       	call   11d20 <irq_leave_protection>
   112c5:	83 c4 10             	add    $0x10,%esp
}
   112c8:	90                   	nop
   112c9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   112cc:	c9                   	leave  
   112cd:	c3                   	ret    

000112ce <lgdt>:
{
   112ce:	55                   	push   %ebp
   112cf:	89 e5                	mov    %esp,%ebp
   112d1:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   112d4:	8b 45 08             	mov    0x8(%ebp),%eax
   112d7:	c1 e8 10             	shr    $0x10,%eax
   112da:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   112de:	8b 45 08             	mov    0x8(%ebp),%eax
   112e1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   112e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   112e8:	83 e8 01             	sub    $0x1,%eax
   112eb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   112ef:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   112f3:	90                   	nop
   112f4:	c9                   	leave  
   112f5:	c3                   	ret    

000112f6 <far_jump>:
{
   112f6:	55                   	push   %ebp
   112f7:	89 e5                	mov    %esp,%ebp
   112f9:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset ,selector};
   112fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11302:	8b 45 08             	mov    0x8(%ebp),%eax
   11305:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11308:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1130b:	ff 28                	ljmp   *(%eax)
}
   1130d:	90                   	nop
   1130e:	c9                   	leave  
   1130f:	c3                   	ret    

00011310 <segment_desc_set>:
#include "ipc/mutex.h"
static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t gdt_mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   11310:	55                   	push   %ebp
   11311:	89 e5                	mov    %esp,%ebp
   11313:	83 ec 14             	sub    $0x14,%esp
   11316:	8b 45 14             	mov    0x14(%ebp),%eax
   11319:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   1131d:	8b 45 08             	mov    0x8(%ebp),%eax
   11320:	83 e0 f8             	and    $0xfffffff8,%eax
   11323:	05 60 82 01 00       	add    $0x18260,%eax
   11328:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(limit > 0xfffff)
   1132b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11332:	76 0f                	jbe    11343 <segment_desc_set+0x33>
    {
        limit /= 0x1000;
   11334:	8b 45 10             	mov    0x10(%ebp),%eax
   11337:	c1 e8 0c             	shr    $0xc,%eax
   1133a:	89 45 10             	mov    %eax,0x10(%ebp)
        attr |= SEG_G;
   1133d:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   11343:	8b 45 10             	mov    0x10(%ebp),%eax
   11346:	89 c2                	mov    %eax,%edx
   11348:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1134b:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   1134e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11351:	89 c2                	mov    %eax,%edx
   11353:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11356:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1135a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1135d:	c1 e8 10             	shr    $0x10,%eax
   11360:	89 c2                	mov    %eax,%edx
   11362:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11365:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0x0f) << 8);
   11368:	8b 45 10             	mov    0x10(%ebp),%eax
   1136b:	c1 e8 10             	shr    $0x10,%eax
   1136e:	c1 e0 08             	shl    $0x8,%eax
   11371:	66 25 00 0f          	and    $0xf00,%ax
   11375:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   11379:	89 c2                	mov    %eax,%edx
   1137b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1137e:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11382:	8b 45 0c             	mov    0xc(%ebp),%eax
   11385:	c1 e8 18             	shr    $0x18,%eax
   11388:	89 c2                	mov    %eax,%edx
   1138a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1138d:	88 50 07             	mov    %dl,0x7(%eax)
}
   11390:	90                   	nop
   11391:	c9                   	leave  
   11392:	c3                   	ret    

00011393 <gate_desc_set>:
void gate_desc_set(gate_desc_t * gate_desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   11393:	55                   	push   %ebp
   11394:	89 e5                	mov    %esp,%ebp
   11396:	83 ec 08             	sub    $0x8,%esp
   11399:	8b 55 0c             	mov    0xc(%ebp),%edx
   1139c:	8b 45 14             	mov    0x14(%ebp),%eax
   1139f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   113a3:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    gate_desc->selector = selector;
   113a7:	8b 45 08             	mov    0x8(%ebp),%eax
   113aa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   113ae:	66 89 50 02          	mov    %dx,0x2(%eax)
    gate_desc->offset15_0 = offset & 0xffff;
   113b2:	8b 45 10             	mov    0x10(%ebp),%eax
   113b5:	89 c2                	mov    %eax,%edx
   113b7:	8b 45 08             	mov    0x8(%ebp),%eax
   113ba:	66 89 10             	mov    %dx,(%eax)
    gate_desc->offset31_16 = (offset >> 16) & 0xffff;
   113bd:	8b 45 10             	mov    0x10(%ebp),%eax
   113c0:	c1 e8 10             	shr    $0x10,%eax
   113c3:	89 c2                	mov    %eax,%edx
   113c5:	8b 45 08             	mov    0x8(%ebp),%eax
   113c8:	66 89 50 06          	mov    %dx,0x6(%eax)
    gate_desc->attr = attr;
   113cc:	8b 45 08             	mov    0x8(%ebp),%eax
   113cf:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   113d3:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   113d7:	90                   	nop
   113d8:	c9                   	leave  
   113d9:	c3                   	ret    

000113da <gdt_alloc_desc>:

int gdt_alloc_desc(void)
{
   113da:	55                   	push   %ebp
   113db:	89 e5                	mov    %esp,%ebp
   113dd:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&gdt_mutex);
   113e0:	83 ec 0c             	sub    $0xc,%esp
   113e3:	68 60 8a 01 00       	push   $0x18a60
   113e8:	e8 95 0b 00 00       	call   11f82 <mutex_lock>
   113ed:	83 c4 10             	add    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   113f0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   113f7:	eb 2c                	jmp    11425 <gdt_alloc_desc+0x4b>
    {
        if(gdt_table[i].attr == 0)
   113f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113fc:	0f b7 04 c5 65 82 01 	movzwl 0x18265(,%eax,8),%eax
   11403:	00 
   11404:	66 85 c0             	test   %ax,%ax
   11407:	75 18                	jne    11421 <gdt_alloc_desc+0x47>
        {
            mutex_unlock(&gdt_mutex);
   11409:	83 ec 0c             	sub    $0xc,%esp
   1140c:	68 60 8a 01 00       	push   $0x18a60
   11411:	e8 ff 0b 00 00       	call   12015 <mutex_unlock>
   11416:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   11419:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1141c:	c1 e0 03             	shl    $0x3,%eax
   1141f:	eb 22                	jmp    11443 <gdt_alloc_desc+0x69>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   11421:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11425:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1142c:	7e cb                	jle    113f9 <gdt_alloc_desc+0x1f>
        }
        
    }
    mutex_unlock(&gdt_mutex);
   1142e:	83 ec 0c             	sub    $0xc,%esp
   11431:	68 60 8a 01 00       	push   $0x18a60
   11436:	e8 da 0b 00 00       	call   12015 <mutex_unlock>
   1143b:	83 c4 10             	add    $0x10,%esp
    return -1;
   1143e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11443:	c9                   	leave  
   11444:	c3                   	ret    

00011445 <gdt_free_desc>:

void gdt_free_desc(int selector)
{
   11445:	55                   	push   %ebp
   11446:	89 e5                	mov    %esp,%ebp
   11448:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&gdt_mutex);
   1144b:	83 ec 0c             	sub    $0xc,%esp
   1144e:	68 60 8a 01 00       	push   $0x18a60
   11453:	e8 2a 0b 00 00       	call   11f82 <mutex_lock>
   11458:	83 c4 10             	add    $0x10,%esp
    gdt_table[selector / sizeof(segment_desc_t)].attr = 0;
   1145b:	8b 45 08             	mov    0x8(%ebp),%eax
   1145e:	c1 e8 03             	shr    $0x3,%eax
   11461:	66 c7 04 c5 65 82 01 	movw   $0x0,0x18265(,%eax,8)
   11468:	00 00 00 
    mutex_unlock(&gdt_mutex);
   1146b:	83 ec 0c             	sub    $0xc,%esp
   1146e:	68 60 8a 01 00       	push   $0x18a60
   11473:	e8 9d 0b 00 00       	call   12015 <mutex_unlock>
   11478:	83 c4 10             	add    $0x10,%esp
}
   1147b:	90                   	nop
   1147c:	c9                   	leave  
   1147d:	c3                   	ret    

0001147e <init_gdt>:
void init_gdt(void)
{
   1147e:	55                   	push   %ebp
   1147f:	89 e5                	mov    %esp,%ebp
   11481:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   11484:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1148b:	eb 19                	jmp    114a6 <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   1148d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11490:	c1 e0 03             	shl    $0x3,%eax
   11493:	6a 00                	push   $0x0
   11495:	6a 00                	push   $0x0
   11497:	6a 00                	push   $0x0
   11499:	50                   	push   %eax
   1149a:	e8 71 fe ff ff       	call   11310 <segment_desc_set>
   1149f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   114a2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   114a6:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   114ad:	7e de                	jle    1148d <init_gdt+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   114af:	68 9a 40 00 00       	push   $0x409a
   114b4:	6a ff                	push   $0xffffffff
   114b6:	6a 00                	push   $0x0
   114b8:	6a 08                	push   $0x8
   114ba:	e8 51 fe ff ff       	call   11310 <segment_desc_set>
   114bf:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   114c2:	68 92 40 00 00       	push   $0x4092
   114c7:	6a ff                	push   $0xffffffff
   114c9:	6a 00                	push   $0x0
   114cb:	6a 10                	push   $0x10
   114cd:	e8 3e fe ff ff       	call   11310 <segment_desc_set>
   114d2:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   114d5:	b8 60 82 01 00       	mov    $0x18260,%eax
   114da:	68 00 08 00 00       	push   $0x800
   114df:	50                   	push   %eax
   114e0:	e8 e9 fd ff ff       	call   112ce <lgdt>
   114e5:	83 c4 08             	add    $0x8,%esp
}
   114e8:	90                   	nop
   114e9:	c9                   	leave  
   114ea:	c3                   	ret    

000114eb <cpu_init>:

void cpu_init(void)
{
   114eb:	55                   	push   %ebp
   114ec:	89 e5                	mov    %esp,%ebp
   114ee:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&gdt_mutex);
   114f1:	83 ec 0c             	sub    $0xc,%esp
   114f4:	68 60 8a 01 00       	push   $0x18a60
   114f9:	e8 58 0a 00 00       	call   11f56 <mutex_init>
   114fe:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11501:	e8 78 ff ff ff       	call   1147e <init_gdt>
    
}
   11506:	90                   	nop
   11507:	c9                   	leave  
   11508:	c3                   	ret    

00011509 <switch_to_tss>:

void switch_to_tss (int tss_sel)
{
   11509:	55                   	push   %ebp
   1150a:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   1150c:	8b 45 08             	mov    0x8(%ebp),%eax
   1150f:	6a 00                	push   $0x0
   11511:	50                   	push   %eax
   11512:	e8 df fd ff ff       	call   112f6 <far_jump>
   11517:	83 c4 08             	add    $0x8,%esp
   1151a:	90                   	nop
   1151b:	c9                   	leave  
   1151c:	c3                   	ret    

0001151d <inb>:
{
   1151d:	55                   	push   %ebp
   1151e:	89 e5                	mov    %esp,%ebp
   11520:	83 ec 14             	sub    $0x14,%esp
   11523:	8b 45 08             	mov    0x8(%ebp),%eax
   11526:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   1152a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1152e:	89 c2                	mov    %eax,%edx
   11530:	ec                   	in     (%dx),%al
   11531:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11534:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11538:	c9                   	leave  
   11539:	c3                   	ret    

0001153a <outb>:
{
   1153a:	55                   	push   %ebp
   1153b:	89 e5                	mov    %esp,%ebp
   1153d:	83 ec 08             	sub    $0x8,%esp
   11540:	8b 55 08             	mov    0x8(%ebp),%edx
   11543:	8b 45 0c             	mov    0xc(%ebp),%eax
   11546:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1154a:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   1154d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11551:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11555:	ee                   	out    %al,(%dx)
}
   11556:	90                   	nop
   11557:	c9                   	leave  
   11558:	c3                   	ret    

00011559 <cli>:
{
   11559:	55                   	push   %ebp
   1155a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   1155c:	fa                   	cli    
}
   1155d:	90                   	nop
   1155e:	5d                   	pop    %ebp
   1155f:	c3                   	ret    

00011560 <sti>:
{
   11560:	55                   	push   %ebp
   11561:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   11563:	fb                   	sti    
}
   11564:	90                   	nop
   11565:	5d                   	pop    %ebp
   11566:	c3                   	ret    

00011567 <lidt>:
{
   11567:	55                   	push   %ebp
   11568:	89 e5                	mov    %esp,%ebp
   1156a:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   1156d:	8b 45 08             	mov    0x8(%ebp),%eax
   11570:	c1 e8 10             	shr    $0x10,%eax
   11573:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   11577:	8b 45 08             	mov    0x8(%ebp),%eax
   1157a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   1157e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11581:	83 e8 01             	sub    $0x1,%eax
   11584:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[i]"::[i]"m"(idt));
   11588:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1158c:	90                   	nop
   1158d:	c9                   	leave  
   1158e:	c3                   	ret    

0001158f <hlt>:
{
   1158f:	55                   	push   %ebp
   11590:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11592:	f4                   	hlt    
}
   11593:	90                   	nop
   11594:	5d                   	pop    %ebp
   11595:	c3                   	ret    

00011596 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   11596:	55                   	push   %ebp
   11597:	89 e5                	mov    %esp,%ebp
   11599:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1159c:	9c                   	pushf  
   1159d:	58                   	pop    %eax
   1159e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   115a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   115a4:	c9                   	leave  
   115a5:	c3                   	ret    

000115a6 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   115a6:	55                   	push   %ebp
   115a7:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   115a9:	8b 45 08             	mov    0x8(%ebp),%eax
   115ac:	50                   	push   %eax
   115ad:	9d                   	popf   
}
   115ae:	90                   	nop
   115af:	5d                   	pop    %ebp
   115b0:	c3                   	ret    

000115b1 <dump_core_regs>:
#include "os_cfg.h"
#include "tools/log.h"
#define IRQ_TABLE_NU 128
static gate_desc_t idt_table[IRQ_TABLE_NU];
static dump_core_regs(exception_frame_t *frame)
{
   115b1:	55                   	push   %ebp
   115b2:	89 e5                	mov    %esp,%ebp
   115b4:	57                   	push   %edi
   115b5:	56                   	push   %esi
   115b6:	53                   	push   %ebx
   115b7:	83 ec 0c             	sub    $0xc,%esp
    log_printf("IRQ: %d, error code: %d\n",frame->irq_num,frame->error_code);
   115ba:	8b 45 08             	mov    0x8(%ebp),%eax
   115bd:	8b 50 34             	mov    0x34(%eax),%edx
   115c0:	8b 45 08             	mov    0x8(%ebp),%eax
   115c3:	8b 40 30             	mov    0x30(%eax),%eax
   115c6:	83 ec 04             	sub    $0x4,%esp
   115c9:	52                   	push   %edx
   115ca:	50                   	push   %eax
   115cb:	68 68 2d 01 00       	push   $0x12d68
   115d0:	e8 4a 16 00 00       	call   12c1f <log_printf>
   115d5:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d DS: %d ES: %d SS: %d FS: %d GS: %d\n",frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
   115d8:	8b 45 08             	mov    0x8(%ebp),%eax
   115db:	8b 38                	mov    (%eax),%edi
   115dd:	8b 45 08             	mov    0x8(%ebp),%eax
   115e0:	8b 70 04             	mov    0x4(%eax),%esi
   115e3:	8b 45 08             	mov    0x8(%ebp),%eax
   115e6:	8b 58 0c             	mov    0xc(%eax),%ebx
   115e9:	8b 45 08             	mov    0x8(%ebp),%eax
   115ec:	8b 48 08             	mov    0x8(%eax),%ecx
   115ef:	8b 45 08             	mov    0x8(%ebp),%eax
   115f2:	8b 50 0c             	mov    0xc(%eax),%edx
   115f5:	8b 45 08             	mov    0x8(%ebp),%eax
   115f8:	8b 40 3c             	mov    0x3c(%eax),%eax
   115fb:	83 ec 04             	sub    $0x4,%esp
   115fe:	57                   	push   %edi
   115ff:	56                   	push   %esi
   11600:	53                   	push   %ebx
   11601:	51                   	push   %ecx
   11602:	52                   	push   %edx
   11603:	50                   	push   %eax
   11604:	68 84 2d 01 00       	push   $0x12d84
   11609:	e8 11 16 00 00       	call   12c1f <log_printf>
   1160e:	83 c4 20             	add    $0x20,%esp
    log_printf("EAX: 0x%x EBX: 0x%x ECX: 0x%x EDX: 0x%x\n",frame->eax,frame->ebx,frame->ecx,frame->edx);
   11611:	8b 45 08             	mov    0x8(%ebp),%eax
   11614:	8b 58 24             	mov    0x24(%eax),%ebx
   11617:	8b 45 08             	mov    0x8(%ebp),%eax
   1161a:	8b 48 28             	mov    0x28(%eax),%ecx
   1161d:	8b 45 08             	mov    0x8(%ebp),%eax
   11620:	8b 50 20             	mov    0x20(%eax),%edx
   11623:	8b 45 08             	mov    0x8(%ebp),%eax
   11626:	8b 40 2c             	mov    0x2c(%eax),%eax
   11629:	83 ec 0c             	sub    $0xc,%esp
   1162c:	53                   	push   %ebx
   1162d:	51                   	push   %ecx
   1162e:	52                   	push   %edx
   1162f:	50                   	push   %eax
   11630:	68 b0 2d 01 00       	push   $0x12db0
   11635:	e8 e5 15 00 00       	call   12c1f <log_printf>
   1163a:	83 c4 20             	add    $0x20,%esp
    log_printf("EIP: 0x%x EFLAGS: 0x%x ESP: 0x%x EBP: 0x%x\n",frame->eip,frame->eflags,frame->esp,frame->ebp);
   1163d:	8b 45 08             	mov    0x8(%ebp),%eax
   11640:	8b 58 18             	mov    0x18(%eax),%ebx
   11643:	8b 45 08             	mov    0x8(%ebp),%eax
   11646:	8b 48 1c             	mov    0x1c(%eax),%ecx
   11649:	8b 45 08             	mov    0x8(%ebp),%eax
   1164c:	8b 50 40             	mov    0x40(%eax),%edx
   1164f:	8b 45 08             	mov    0x8(%ebp),%eax
   11652:	8b 40 38             	mov    0x38(%eax),%eax
   11655:	83 ec 0c             	sub    $0xc,%esp
   11658:	53                   	push   %ebx
   11659:	51                   	push   %ecx
   1165a:	52                   	push   %edx
   1165b:	50                   	push   %eax
   1165c:	68 dc 2d 01 00       	push   $0x12ddc
   11661:	e8 b9 15 00 00       	call   12c1f <log_printf>
   11666:	83 c4 20             	add    $0x20,%esp
    log_printf("EDI: 0x%x ESI: 0x%x EDI: 0x%x\n",frame->edi,frame->esi,frame->edi);
   11669:	8b 45 08             	mov    0x8(%ebp),%eax
   1166c:	8b 48 10             	mov    0x10(%eax),%ecx
   1166f:	8b 45 08             	mov    0x8(%ebp),%eax
   11672:	8b 50 14             	mov    0x14(%eax),%edx
   11675:	8b 45 08             	mov    0x8(%ebp),%eax
   11678:	8b 40 10             	mov    0x10(%eax),%eax
   1167b:	51                   	push   %ecx
   1167c:	52                   	push   %edx
   1167d:	50                   	push   %eax
   1167e:	68 08 2e 01 00       	push   $0x12e08
   11683:	e8 97 15 00 00       	call   12c1f <log_printf>
   11688:	83 c4 10             	add    $0x10,%esp
}
   1168b:	90                   	nop
   1168c:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1168f:	5b                   	pop    %ebx
   11690:	5e                   	pop    %esi
   11691:	5f                   	pop    %edi
   11692:	5d                   	pop    %ebp
   11693:	c3                   	ret    

00011694 <do_default_handler>:
static void do_default_handler(exception_frame_t *frame,const char *message)
{
   11694:	55                   	push   %ebp
   11695:	89 e5                	mov    %esp,%ebp
   11697:	83 ec 08             	sub    $0x8,%esp
    log_printf("---------------------\n");
   1169a:	83 ec 0c             	sub    $0xc,%esp
   1169d:	68 27 2e 01 00       	push   $0x12e27
   116a2:	e8 78 15 00 00       	call   12c1f <log_printf>
   116a7:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s\n",message);
   116aa:	83 ec 08             	sub    $0x8,%esp
   116ad:	ff 75 0c             	pushl  0xc(%ebp)
   116b0:	68 3e 2e 01 00       	push   $0x12e3e
   116b5:	e8 65 15 00 00       	call   12c1f <log_printf>
   116ba:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   116bd:	83 ec 0c             	sub    $0xc,%esp
   116c0:	ff 75 08             	pushl  0x8(%ebp)
   116c3:	e8 e9 fe ff ff       	call   115b1 <dump_core_regs>
   116c8:	83 c4 10             	add    $0x10,%esp
    for(;;)
    {
        hlt();
   116cb:	e8 bf fe ff ff       	call   1158f <hlt>
   116d0:	eb f9                	jmp    116cb <do_default_handler+0x37>

000116d2 <do_handler_unknown>:
    }
}
void do_handler_unknown(exception_frame_t *frame)
{
   116d2:	55                   	push   %ebp
   116d3:	89 e5                	mov    %esp,%ebp
   116d5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"unknown exception");
   116d8:	83 ec 08             	sub    $0x8,%esp
   116db:	68 59 2e 01 00       	push   $0x12e59
   116e0:	ff 75 08             	pushl  0x8(%ebp)
   116e3:	e8 ac ff ff ff       	call   11694 <do_default_handler>
   116e8:	83 c4 10             	add    $0x10,%esp
}
   116eb:	90                   	nop
   116ec:	c9                   	leave  
   116ed:	c3                   	ret    

000116ee <do_handler_divider>:
void do_handler_divider(exception_frame_t *frame)
{
   116ee:	55                   	push   %ebp
   116ef:	89 e5                	mov    %esp,%ebp
   116f1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"divider exception");
   116f4:	83 ec 08             	sub    $0x8,%esp
   116f7:	68 6b 2e 01 00       	push   $0x12e6b
   116fc:	ff 75 08             	pushl  0x8(%ebp)
   116ff:	e8 90 ff ff ff       	call   11694 <do_default_handler>
   11704:	83 c4 10             	add    $0x10,%esp
}
   11707:	90                   	nop
   11708:	c9                   	leave  
   11709:	c3                   	ret    

0001170a <do_handler_debug>:
void do_handler_debug(exception_frame_t *frame)
{
   1170a:	55                   	push   %ebp
   1170b:	89 e5                	mov    %esp,%ebp
   1170d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"debug exception");
   11710:	83 ec 08             	sub    $0x8,%esp
   11713:	68 7d 2e 01 00       	push   $0x12e7d
   11718:	ff 75 08             	pushl  0x8(%ebp)
   1171b:	e8 74 ff ff ff       	call   11694 <do_default_handler>
   11720:	83 c4 10             	add    $0x10,%esp
}
   11723:	90                   	nop
   11724:	c9                   	leave  
   11725:	c3                   	ret    

00011726 <do_handler_nmi>:
void do_handler_nmi(exception_frame_t *frame)   
{
   11726:	55                   	push   %ebp
   11727:	89 e5                	mov    %esp,%ebp
   11729:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"nmi exception");
   1172c:	83 ec 08             	sub    $0x8,%esp
   1172f:	68 8d 2e 01 00       	push   $0x12e8d
   11734:	ff 75 08             	pushl  0x8(%ebp)
   11737:	e8 58 ff ff ff       	call   11694 <do_default_handler>
   1173c:	83 c4 10             	add    $0x10,%esp
}
   1173f:	90                   	nop
   11740:	c9                   	leave  
   11741:	c3                   	ret    

00011742 <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t *frame)
{
   11742:	55                   	push   %ebp
   11743:	89 e5                	mov    %esp,%ebp
   11745:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"breakpoint exception");
   11748:	83 ec 08             	sub    $0x8,%esp
   1174b:	68 9b 2e 01 00       	push   $0x12e9b
   11750:	ff 75 08             	pushl  0x8(%ebp)
   11753:	e8 3c ff ff ff       	call   11694 <do_default_handler>
   11758:	83 c4 10             	add    $0x10,%esp
}
   1175b:	90                   	nop
   1175c:	c9                   	leave  
   1175d:	c3                   	ret    

0001175e <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   1175e:	55                   	push   %ebp
   1175f:	89 e5                	mov    %esp,%ebp
   11761:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"overflow exception");
   11764:	83 ec 08             	sub    $0x8,%esp
   11767:	68 b0 2e 01 00       	push   $0x12eb0
   1176c:	ff 75 08             	pushl  0x8(%ebp)
   1176f:	e8 20 ff ff ff       	call   11694 <do_default_handler>
   11774:	83 c4 10             	add    $0x10,%esp
}
   11777:	90                   	nop
   11778:	c9                   	leave  
   11779:	c3                   	ret    

0001177a <do_handler_bounds>:
void do_handler_bounds(exception_frame_t *frame)
{
   1177a:	55                   	push   %ebp
   1177b:	89 e5                	mov    %esp,%ebp
   1177d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"bounds exception");
   11780:	83 ec 08             	sub    $0x8,%esp
   11783:	68 c3 2e 01 00       	push   $0x12ec3
   11788:	ff 75 08             	pushl  0x8(%ebp)
   1178b:	e8 04 ff ff ff       	call   11694 <do_default_handler>
   11790:	83 c4 10             	add    $0x10,%esp
}
   11793:	90                   	nop
   11794:	c9                   	leave  
   11795:	c3                   	ret    

00011796 <do_handler_invalid_op>:
void do_handler_invalid_op(exception_frame_t *frame)
{
   11796:	55                   	push   %ebp
   11797:	89 e5                	mov    %esp,%ebp
   11799:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid operation exception");
   1179c:	83 ec 08             	sub    $0x8,%esp
   1179f:	68 d4 2e 01 00       	push   $0x12ed4
   117a4:	ff 75 08             	pushl  0x8(%ebp)
   117a7:	e8 e8 fe ff ff       	call   11694 <do_default_handler>
   117ac:	83 c4 10             	add    $0x10,%esp
}
   117af:	90                   	nop
   117b0:	c9                   	leave  
   117b1:	c3                   	ret    

000117b2 <do_handler_device_not_available>:
void do_handler_device_not_available(exception_frame_t *frame)
{
   117b2:	55                   	push   %ebp
   117b3:	89 e5                	mov    %esp,%ebp
   117b5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"device not available exception");
   117b8:	83 ec 08             	sub    $0x8,%esp
   117bb:	68 f0 2e 01 00       	push   $0x12ef0
   117c0:	ff 75 08             	pushl  0x8(%ebp)
   117c3:	e8 cc fe ff ff       	call   11694 <do_default_handler>
   117c8:	83 c4 10             	add    $0x10,%esp
}
   117cb:	90                   	nop
   117cc:	c9                   	leave  
   117cd:	c3                   	ret    

000117ce <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   117ce:	55                   	push   %ebp
   117cf:	89 e5                	mov    %esp,%ebp
   117d1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"double fault exception");
   117d4:	83 ec 08             	sub    $0x8,%esp
   117d7:	68 0f 2f 01 00       	push   $0x12f0f
   117dc:	ff 75 08             	pushl  0x8(%ebp)
   117df:	e8 b0 fe ff ff       	call   11694 <do_default_handler>
   117e4:	83 c4 10             	add    $0x10,%esp
}
   117e7:	90                   	nop
   117e8:	c9                   	leave  
   117e9:	c3                   	ret    

000117ea <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   117ea:	55                   	push   %ebp
   117eb:	89 e5                	mov    %esp,%ebp
   117ed:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid tss exception");
   117f0:	83 ec 08             	sub    $0x8,%esp
   117f3:	68 26 2f 01 00       	push   $0x12f26
   117f8:	ff 75 08             	pushl  0x8(%ebp)
   117fb:	e8 94 fe ff ff       	call   11694 <do_default_handler>
   11800:	83 c4 10             	add    $0x10,%esp
}
   11803:	90                   	nop
   11804:	c9                   	leave  
   11805:	c3                   	ret    

00011806 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   11806:	55                   	push   %ebp
   11807:	89 e5                	mov    %esp,%ebp
   11809:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"segment not present exception");
   1180c:	83 ec 08             	sub    $0x8,%esp
   1180f:	68 3c 2f 01 00       	push   $0x12f3c
   11814:	ff 75 08             	pushl  0x8(%ebp)
   11817:	e8 78 fe ff ff       	call   11694 <do_default_handler>
   1181c:	83 c4 10             	add    $0x10,%esp
}
   1181f:	90                   	nop
   11820:	c9                   	leave  
   11821:	c3                   	ret    

00011822 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   11822:	55                   	push   %ebp
   11823:	89 e5                	mov    %esp,%ebp
   11825:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"stack segment fault exception");
   11828:	83 ec 08             	sub    $0x8,%esp
   1182b:	68 5a 2f 01 00       	push   $0x12f5a
   11830:	ff 75 08             	pushl  0x8(%ebp)
   11833:	e8 5c fe ff ff       	call   11694 <do_default_handler>
   11838:	83 c4 10             	add    $0x10,%esp
}
   1183b:	90                   	nop
   1183c:	c9                   	leave  
   1183d:	c3                   	ret    

0001183e <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   1183e:	55                   	push   %ebp
   1183f:	89 e5                	mov    %esp,%ebp
   11841:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"general protection exception");
   11844:	83 ec 08             	sub    $0x8,%esp
   11847:	68 78 2f 01 00       	push   $0x12f78
   1184c:	ff 75 08             	pushl  0x8(%ebp)
   1184f:	e8 40 fe ff ff       	call   11694 <do_default_handler>
   11854:	83 c4 10             	add    $0x10,%esp
}
   11857:	90                   	nop
   11858:	c9                   	leave  
   11859:	c3                   	ret    

0001185a <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   1185a:	55                   	push   %ebp
   1185b:	89 e5                	mov    %esp,%ebp
   1185d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"page fault exception");
   11860:	83 ec 08             	sub    $0x8,%esp
   11863:	68 95 2f 01 00       	push   $0x12f95
   11868:	ff 75 08             	pushl  0x8(%ebp)
   1186b:	e8 24 fe ff ff       	call   11694 <do_default_handler>
   11870:	83 c4 10             	add    $0x10,%esp
}
   11873:	90                   	nop
   11874:	c9                   	leave  
   11875:	c3                   	ret    

00011876 <do_handler_x87_floating_point>:
void do_handler_x87_floating_point(exception_frame_t *frame)
{   
   11876:	55                   	push   %ebp
   11877:	89 e5                	mov    %esp,%ebp
   11879:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"x87 floating point exception");
   1187c:	83 ec 08             	sub    $0x8,%esp
   1187f:	68 aa 2f 01 00       	push   $0x12faa
   11884:	ff 75 08             	pushl  0x8(%ebp)
   11887:	e8 08 fe ff ff       	call   11694 <do_default_handler>
   1188c:	83 c4 10             	add    $0x10,%esp
}
   1188f:	90                   	nop
   11890:	c9                   	leave  
   11891:	c3                   	ret    

00011892 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   11892:	55                   	push   %ebp
   11893:	89 e5                	mov    %esp,%ebp
   11895:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"alignment check exception");
   11898:	83 ec 08             	sub    $0x8,%esp
   1189b:	68 c7 2f 01 00       	push   $0x12fc7
   118a0:	ff 75 08             	pushl  0x8(%ebp)
   118a3:	e8 ec fd ff ff       	call   11694 <do_default_handler>
   118a8:	83 c4 10             	add    $0x10,%esp
}
   118ab:	90                   	nop
   118ac:	c9                   	leave  
   118ad:	c3                   	ret    

000118ae <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   118ae:	55                   	push   %ebp
   118af:	89 e5                	mov    %esp,%ebp
   118b1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"machine check exception");
   118b4:	83 ec 08             	sub    $0x8,%esp
   118b7:	68 e1 2f 01 00       	push   $0x12fe1
   118bc:	ff 75 08             	pushl  0x8(%ebp)
   118bf:	e8 d0 fd ff ff       	call   11694 <do_default_handler>
   118c4:	83 c4 10             	add    $0x10,%esp
}
   118c7:	90                   	nop
   118c8:	c9                   	leave  
   118c9:	c3                   	ret    

000118ca <do_handler_simd_floating_point>:
void do_handler_simd_floating_point(exception_frame_t *frame)
{
   118ca:	55                   	push   %ebp
   118cb:	89 e5                	mov    %esp,%ebp
   118cd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"simd floating point exception");
   118d0:	83 ec 08             	sub    $0x8,%esp
   118d3:	68 f9 2f 01 00       	push   $0x12ff9
   118d8:	ff 75 08             	pushl  0x8(%ebp)
   118db:	e8 b4 fd ff ff       	call   11694 <do_default_handler>
   118e0:	83 c4 10             	add    $0x10,%esp
}
   118e3:	90                   	nop
   118e4:	c9                   	leave  
   118e5:	c3                   	ret    

000118e6 <do_handler_virtualization>:
void do_handler_virtualization(exception_frame_t *frame)
{
   118e6:	55                   	push   %ebp
   118e7:	89 e5                	mov    %esp,%ebp
   118e9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"virtualization exception");
   118ec:	83 ec 08             	sub    $0x8,%esp
   118ef:	68 17 30 01 00       	push   $0x13017
   118f4:	ff 75 08             	pushl  0x8(%ebp)
   118f7:	e8 98 fd ff ff       	call   11694 <do_default_handler>
   118fc:	83 c4 10             	add    $0x10,%esp
}
   118ff:	90                   	nop
   11900:	c9                   	leave  
   11901:	c3                   	ret    

00011902 <do_handler_security>:
void do_handler_security(exception_frame_t *frame)
{
   11902:	55                   	push   %ebp
   11903:	89 e5                	mov    %esp,%ebp
   11905:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"security exception");
   11908:	83 ec 08             	sub    $0x8,%esp
   1190b:	68 30 30 01 00       	push   $0x13030
   11910:	ff 75 08             	pushl  0x8(%ebp)
   11913:	e8 7c fd ff ff       	call   11694 <do_default_handler>
   11918:	83 c4 10             	add    $0x10,%esp
}
   1191b:	90                   	nop
   1191c:	c9                   	leave  
   1191d:	c3                   	ret    

0001191e <init_pic>:

static void init_pic(void)
{
   1191e:	55                   	push   %ebp
   1191f:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11921:	6a 11                	push   $0x11
   11923:	6a 20                	push   $0x20
   11925:	e8 10 fc ff ff       	call   1153a <outb>
   1192a:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2,IRQ_PIC_START);
   1192d:	6a 20                	push   $0x20
   1192f:	6a 21                	push   $0x21
   11931:	e8 04 fc ff ff       	call   1153a <outb>
   11936:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3,1 << IRQ2_NMI);
   11939:	6a 04                	push   $0x4
   1193b:	6a 21                	push   $0x21
   1193d:	e8 f8 fb ff ff       	call   1153a <outb>
   11942:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4,PIC_ICW4_8086);
   11945:	6a 01                	push   $0x1
   11947:	6a 21                	push   $0x21
   11949:	e8 ec fb ff ff       	call   1153a <outb>
   1194e:	83 c4 08             	add    $0x8,%esp


    outb(PIC1_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11951:	6a 11                	push   $0x11
   11953:	68 a0 00 00 00       	push   $0xa0
   11958:	e8 dd fb ff ff       	call   1153a <outb>
   1195d:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2,IRQ_PIC_START + 8);
   11960:	6a 28                	push   $0x28
   11962:	68 a1 00 00 00       	push   $0xa1
   11967:	e8 ce fb ff ff       	call   1153a <outb>
   1196c:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3,2);
   1196f:	6a 02                	push   $0x2
   11971:	68 a1 00 00 00       	push   $0xa1
   11976:	e8 bf fb ff ff       	call   1153a <outb>
   1197b:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4,PIC_ICW4_8086);
   1197e:	6a 01                	push   $0x1
   11980:	68 a1 00 00 00       	push   $0xa1
   11985:	e8 b0 fb ff ff       	call   1153a <outb>
   1198a:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR,0xff & ~ (1 << 2));
   1198d:	68 fb 00 00 00       	push   $0xfb
   11992:	6a 21                	push   $0x21
   11994:	e8 a1 fb ff ff       	call   1153a <outb>
   11999:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR,0xff);
   1199c:	68 ff 00 00 00       	push   $0xff
   119a1:	68 a1 00 00 00       	push   $0xa1
   119a6:	e8 8f fb ff ff       	call   1153a <outb>
   119ab:	83 c4 08             	add    $0x8,%esp
}
   119ae:	90                   	nop
   119af:	c9                   	leave  
   119b0:	c3                   	ret    

000119b1 <irq_init>:

void irq_init(void)
{
   119b1:	55                   	push   %ebp
   119b2:	89 e5                	mov    %esp,%ebp
   119b4:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   119b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   119be:	eb 25                	jmp    119e5 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   119c0:	ba 4f 00 01 00       	mov    $0x1004f,%edx
   119c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119c8:	c1 e0 03             	shl    $0x3,%eax
   119cb:	05 80 8a 01 00       	add    $0x18a80,%eax
   119d0:	68 00 8e 00 00       	push   $0x8e00
   119d5:	52                   	push   %edx
   119d6:	6a 08                	push   $0x8
   119d8:	50                   	push   %eax
   119d9:	e8 b5 f9 ff ff       	call   11393 <gate_desc_set>
   119de:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   119e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   119e5:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   119e9:	7e d5                	jle    119c0 <irq_init+0xf>
        GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    }
    //irq_install(IRQ0_DE,do_handler_divider); 用这个的话能进入do_handler_divider 但是跳不到.S的地方出栈
    irq_install(IRQ0_DE,exception_handler_divider);
   119eb:	83 ec 08             	sub    $0x8,%esp
   119ee:	68 6e 00 01 00       	push   $0x1006e
   119f3:	6a 00                	push   $0x0
   119f5:	e8 77 01 00 00       	call   11b71 <irq_install>
   119fa:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB,exception_handler_debug);
   119fd:	83 ec 08             	sub    $0x8,%esp
   11a00:	68 8d 00 01 00       	push   $0x1008d
   11a05:	6a 01                	push   $0x1
   11a07:	e8 65 01 00 00       	call   11b71 <irq_install>
   11a0c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI,exception_handler_nmi);
   11a0f:	83 ec 08             	sub    $0x8,%esp
   11a12:	68 ac 00 01 00       	push   $0x100ac
   11a17:	6a 02                	push   $0x2
   11a19:	e8 53 01 00 00       	call   11b71 <irq_install>
   11a1e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP,exception_handler_breakpoint);
   11a21:	83 ec 08             	sub    $0x8,%esp
   11a24:	68 cb 00 01 00       	push   $0x100cb
   11a29:	6a 03                	push   $0x3
   11a2b:	e8 41 01 00 00       	call   11b71 <irq_install>
   11a30:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF,exception_handler_overflow);
   11a33:	83 ec 08             	sub    $0x8,%esp
   11a36:	68 ea 00 01 00       	push   $0x100ea
   11a3b:	6a 04                	push   $0x4
   11a3d:	e8 2f 01 00 00       	call   11b71 <irq_install>
   11a42:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR,exception_handler_bounds);
   11a45:	83 ec 08             	sub    $0x8,%esp
   11a48:	68 09 01 01 00       	push   $0x10109
   11a4d:	6a 05                	push   $0x5
   11a4f:	e8 1d 01 00 00       	call   11b71 <irq_install>
   11a54:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD,exception_handler_invalid_op);
   11a57:	83 ec 08             	sub    $0x8,%esp
   11a5a:	68 28 01 01 00       	push   $0x10128
   11a5f:	6a 06                	push   $0x6
   11a61:	e8 0b 01 00 00       	call   11b71 <irq_install>
   11a66:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM,exception_handler_device_not_available);
   11a69:	83 ec 08             	sub    $0x8,%esp
   11a6c:	68 47 01 01 00       	push   $0x10147
   11a71:	6a 07                	push   $0x7
   11a73:	e8 f9 00 00 00       	call   11b71 <irq_install>
   11a78:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF,exception_handler_double_fault);
   11a7b:	83 ec 08             	sub    $0x8,%esp
   11a7e:	68 66 01 01 00       	push   $0x10166
   11a83:	6a 08                	push   $0x8
   11a85:	e8 e7 00 00 00       	call   11b71 <irq_install>
   11a8a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS,exception_handler_invalid_tss);
   11a8d:	83 ec 08             	sub    $0x8,%esp
   11a90:	68 83 01 01 00       	push   $0x10183
   11a95:	6a 0a                	push   $0xa
   11a97:	e8 d5 00 00 00       	call   11b71 <irq_install>
   11a9c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP,exception_handler_segment_not_present);
   11a9f:	83 ec 08             	sub    $0x8,%esp
   11aa2:	68 a0 01 01 00       	push   $0x101a0
   11aa7:	6a 0b                	push   $0xb
   11aa9:	e8 c3 00 00 00       	call   11b71 <irq_install>
   11aae:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS,exception_handler_stack_segment_fault);
   11ab1:	83 ec 08             	sub    $0x8,%esp
   11ab4:	68 bd 01 01 00       	push   $0x101bd
   11ab9:	6a 0c                	push   $0xc
   11abb:	e8 b1 00 00 00       	call   11b71 <irq_install>
   11ac0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP,exception_handler_general_protection);
   11ac3:	83 ec 08             	sub    $0x8,%esp
   11ac6:	68 da 01 01 00       	push   $0x101da
   11acb:	6a 0d                	push   $0xd
   11acd:	e8 9f 00 00 00       	call   11b71 <irq_install>
   11ad2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF,exception_handler_page_fault);
   11ad5:	83 ec 08             	sub    $0x8,%esp
   11ad8:	68 f7 01 01 00       	push   $0x101f7
   11add:	6a 0e                	push   $0xe
   11adf:	e8 8d 00 00 00       	call   11b71 <irq_install>
   11ae4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF,exception_handler_x87_floating_point);
   11ae7:	83 ec 08             	sub    $0x8,%esp
   11aea:	68 14 02 01 00       	push   $0x10214
   11aef:	6a 10                	push   $0x10
   11af1:	e8 7b 00 00 00       	call   11b71 <irq_install>
   11af6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC,exception_handler_alignment_check);
   11af9:	83 ec 08             	sub    $0x8,%esp
   11afc:	68 33 02 01 00       	push   $0x10233
   11b01:	6a 11                	push   $0x11
   11b03:	e8 69 00 00 00       	call   11b71 <irq_install>
   11b08:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC,exception_handler_machine_check);
   11b0b:	83 ec 08             	sub    $0x8,%esp
   11b0e:	68 50 02 01 00       	push   $0x10250
   11b13:	6a 12                	push   $0x12
   11b15:	e8 57 00 00 00       	call   11b71 <irq_install>
   11b1a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM,exception_handler_simd_floating_point);
   11b1d:	83 ec 08             	sub    $0x8,%esp
   11b20:	68 6f 02 01 00       	push   $0x1026f
   11b25:	6a 13                	push   $0x13
   11b27:	e8 45 00 00 00       	call   11b71 <irq_install>
   11b2c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE,exception_handler_virtualization);
   11b2f:	83 ec 08             	sub    $0x8,%esp
   11b32:	68 8e 02 01 00       	push   $0x1028e
   11b37:	6a 14                	push   $0x14
   11b39:	e8 33 00 00 00       	call   11b71 <irq_install>
   11b3e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP,exception_handler_security);
   11b41:	83 ec 08             	sub    $0x8,%esp
   11b44:	68 ad 02 01 00       	push   $0x102ad
   11b49:	6a 15                	push   $0x15
   11b4b:	e8 21 00 00 00       	call   11b71 <irq_install>
   11b50:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11b53:	b8 80 8a 01 00       	mov    $0x18a80,%eax
   11b58:	83 ec 08             	sub    $0x8,%esp
   11b5b:	68 00 04 00 00       	push   $0x400
   11b60:	50                   	push   %eax
   11b61:	e8 01 fa ff ff       	call   11567 <lidt>
   11b66:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11b69:	e8 b0 fd ff ff       	call   1191e <init_pic>
}
   11b6e:	90                   	nop
   11b6f:	c9                   	leave  
   11b70:	c3                   	ret    

00011b71 <irq_install>:

int irq_install(int irq_num,irq_handler_t handler)
{
   11b71:	55                   	push   %ebp
   11b72:	89 e5                	mov    %esp,%ebp
   11b74:	83 ec 08             	sub    $0x8,%esp
    if(irq_num < 0 || irq_num >= IRQ_TABLE_NU)
   11b77:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b7b:	78 06                	js     11b83 <irq_install+0x12>
   11b7d:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11b81:	7e 07                	jle    11b8a <irq_install+0x19>
    {
        return -1;
   11b83:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11b88:	eb 25                	jmp    11baf <irq_install+0x3e>
    }
    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   11b8a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b8d:	8b 55 08             	mov    0x8(%ebp),%edx
   11b90:	c1 e2 03             	shl    $0x3,%edx
   11b93:	81 c2 80 8a 01 00    	add    $0x18a80,%edx
   11b99:	68 00 8e 00 00       	push   $0x8e00
   11b9e:	50                   	push   %eax
   11b9f:	6a 08                	push   $0x8
   11ba1:	52                   	push   %edx
   11ba2:	e8 ec f7 ff ff       	call   11393 <gate_desc_set>
   11ba7:	83 c4 10             	add    $0x10,%esp
    GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    return 0;
   11baa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11baf:	c9                   	leave  
   11bb0:	c3                   	ret    

00011bb1 <irq_enable>:

void irq_enable(int irq_num)
{
   11bb1:	55                   	push   %ebp
   11bb2:	89 e5                	mov    %esp,%ebp
   11bb4:	53                   	push   %ebx
   11bb5:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   11bb8:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11bbc:	7e 78                	jle    11c36 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11bbe:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   11bc2:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11bc6:	7f 32                	jg     11bfa <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11bc8:	6a 21                	push   $0x21
   11bca:	e8 4e f9 ff ff       	call   1151d <inb>
   11bcf:	83 c4 04             	add    $0x4,%esp
   11bd2:	89 c2                	mov    %eax,%edx
   11bd4:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd7:	bb 01 00 00 00       	mov    $0x1,%ebx
   11bdc:	89 c1                	mov    %eax,%ecx
   11bde:	d3 e3                	shl    %cl,%ebx
   11be0:	89 d8                	mov    %ebx,%eax
   11be2:	f7 d0                	not    %eax
   11be4:	21 d0                	and    %edx,%eax
   11be6:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   11be9:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11bed:	50                   	push   %eax
   11bee:	6a 21                	push   $0x21
   11bf0:	e8 45 f9 ff ff       	call   1153a <outb>
   11bf5:	83 c4 08             	add    $0x8,%esp
   11bf8:	eb 3d                	jmp    11c37 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   11bfa:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num));
   11bfe:	68 a1 00 00 00       	push   $0xa1
   11c03:	e8 15 f9 ff ff       	call   1151d <inb>
   11c08:	83 c4 04             	add    $0x4,%esp
   11c0b:	89 c2                	mov    %eax,%edx
   11c0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c10:	bb 01 00 00 00       	mov    $0x1,%ebx
   11c15:	89 c1                	mov    %eax,%ecx
   11c17:	d3 e3                	shl    %cl,%ebx
   11c19:	89 d8                	mov    %ebx,%eax
   11c1b:	f7 d0                	not    %eax
   11c1d:	21 d0                	and    %edx,%eax
   11c1f:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   11c22:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11c26:	50                   	push   %eax
   11c27:	68 a1 00 00 00       	push   $0xa1
   11c2c:	e8 09 f9 ff ff       	call   1153a <outb>
   11c31:	83 c4 08             	add    $0x8,%esp
   11c34:	eb 01                	jmp    11c37 <irq_enable+0x86>
        return;
   11c36:	90                   	nop
    }
}
   11c37:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11c3a:	c9                   	leave  
   11c3b:	c3                   	ret    

00011c3c <irq_disable>:

void irq_disable(int irq_num)
{
   11c3c:	55                   	push   %ebp
   11c3d:	89 e5                	mov    %esp,%ebp
   11c3f:	53                   	push   %ebx
   11c40:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   11c43:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11c47:	7e 78                	jle    11cc1 <irq_disable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11c49:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   11c4d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11c51:	7f 32                	jg     11c85 <irq_disable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) | ~(1 << irq_num);
   11c53:	6a 21                	push   $0x21
   11c55:	e8 c3 f8 ff ff       	call   1151d <inb>
   11c5a:	83 c4 04             	add    $0x4,%esp
   11c5d:	89 c3                	mov    %eax,%ebx
   11c5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11c62:	ba 01 00 00 00       	mov    $0x1,%edx
   11c67:	89 c1                	mov    %eax,%ecx
   11c69:	d3 e2                	shl    %cl,%edx
   11c6b:	89 d0                	mov    %edx,%eax
   11c6d:	f7 d0                	not    %eax
   11c6f:	09 d8                	or     %ebx,%eax
   11c71:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   11c74:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11c78:	50                   	push   %eax
   11c79:	6a 21                	push   $0x21
   11c7b:	e8 ba f8 ff ff       	call   1153a <outb>
   11c80:	83 c4 08             	add    $0x8,%esp
   11c83:	eb 3d                	jmp    11cc2 <irq_disable+0x86>
    }
    else
    {
        irq_num -= 8;
   11c85:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | ~(1 << (irq_num));
   11c89:	68 a1 00 00 00       	push   $0xa1
   11c8e:	e8 8a f8 ff ff       	call   1151d <inb>
   11c93:	83 c4 04             	add    $0x4,%esp
   11c96:	89 c3                	mov    %eax,%ebx
   11c98:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9b:	ba 01 00 00 00       	mov    $0x1,%edx
   11ca0:	89 c1                	mov    %eax,%ecx
   11ca2:	d3 e2                	shl    %cl,%edx
   11ca4:	89 d0                	mov    %edx,%eax
   11ca6:	f7 d0                	not    %eax
   11ca8:	09 d8                	or     %ebx,%eax
   11caa:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   11cad:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11cb1:	50                   	push   %eax
   11cb2:	68 a1 00 00 00       	push   $0xa1
   11cb7:	e8 7e f8 ff ff       	call   1153a <outb>
   11cbc:	83 c4 08             	add    $0x8,%esp
   11cbf:	eb 01                	jmp    11cc2 <irq_disable+0x86>
        return;
   11cc1:	90                   	nop
    }
}
   11cc2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11cc5:	c9                   	leave  
   11cc6:	c3                   	ret    

00011cc7 <irq_disable_global>:
void irq_disable_global(void)
{
   11cc7:	55                   	push   %ebp
   11cc8:	89 e5                	mov    %esp,%ebp
    cli();
   11cca:	e8 8a f8 ff ff       	call   11559 <cli>
}
   11ccf:	90                   	nop
   11cd0:	5d                   	pop    %ebp
   11cd1:	c3                   	ret    

00011cd2 <irq_enable_global>:

void irq_enable_global(void)
{
   11cd2:	55                   	push   %ebp
   11cd3:	89 e5                	mov    %esp,%ebp
    sti();
   11cd5:	e8 86 f8 ff ff       	call   11560 <sti>
}
   11cda:	90                   	nop
   11cdb:	5d                   	pop    %ebp
   11cdc:	c3                   	ret    

00011cdd <pic_send_eoi>:
void pic_send_eoi(int irq_num)
{
   11cdd:	55                   	push   %ebp
   11cde:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11ce0:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num >= 8)
   11ce4:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11ce8:	7e 0f                	jle    11cf9 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   11cea:	6a 20                	push   $0x20
   11cec:	68 a0 00 00 00       	push   $0xa0
   11cf1:	e8 44 f8 ff ff       	call   1153a <outb>
   11cf6:	83 c4 08             	add    $0x8,%esp
    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   11cf9:	6a 20                	push   $0x20
   11cfb:	6a 20                	push   $0x20
   11cfd:	e8 38 f8 ff ff       	call   1153a <outb>
   11d02:	83 c4 08             	add    $0x8,%esp
}
   11d05:	90                   	nop
   11d06:	c9                   	leave  
   11d07:	c3                   	ret    

00011d08 <irq_enter_protection>:

irq_state_t irq_enter_protection(void)
{
   11d08:	55                   	push   %ebp
   11d09:	89 e5                	mov    %esp,%ebp
   11d0b:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11d0e:	e8 83 f8 ff ff       	call   11596 <read_eflags>
   11d13:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11d16:	e8 ac ff ff ff       	call   11cc7 <irq_disable_global>
    return state;
   11d1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11d1e:	c9                   	leave  
   11d1f:	c3                   	ret    

00011d20 <irq_leave_protection>:

void irq_leave_protection(irq_state_t state)
{
   11d20:	55                   	push   %ebp
   11d21:	89 e5                	mov    %esp,%ebp
    
    write_eflags(state);
   11d23:	ff 75 08             	pushl  0x8(%ebp)
   11d26:	e8 7b f8 ff ff       	call   115a6 <write_eflags>
   11d2b:	83 c4 04             	add    $0x4,%esp
}
   11d2e:	90                   	nop
   11d2f:	c9                   	leave  
   11d30:	c3                   	ret    

00011d31 <outb>:
{
   11d31:	55                   	push   %ebp
   11d32:	89 e5                	mov    %esp,%ebp
   11d34:	83 ec 08             	sub    $0x8,%esp
   11d37:	8b 55 08             	mov    0x8(%ebp),%edx
   11d3a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d3d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11d41:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   11d44:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11d48:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11d4c:	ee                   	out    %al,(%dx)
}
   11d4d:	90                   	nop
   11d4e:	c9                   	leave  
   11d4f:	c3                   	ret    

00011d50 <do_handler_time>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
void do_handler_time(exception_frame_t *frame)
{
   11d50:	55                   	push   %ebp
   11d51:	89 e5                	mov    %esp,%ebp
   11d53:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11d56:	a1 80 8e 01 00       	mov    0x18e80,%eax
   11d5b:	83 c0 01             	add    $0x1,%eax
   11d5e:	a3 80 8e 01 00       	mov    %eax,0x18e80
    pic_send_eoi(IRQ0_TIMER);
   11d63:	83 ec 0c             	sub    $0xc,%esp
   11d66:	6a 20                	push   $0x20
   11d68:	e8 70 ff ff ff       	call   11cdd <pic_send_eoi>
   11d6d:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   11d70:	e8 25 f3 ff ff       	call   1109a <task_time_tick>
    
}
   11d75:	90                   	nop
   11d76:	c9                   	leave  
   11d77:	c3                   	ret    

00011d78 <init_pit>:
static void init_pit(void)
{
   11d78:	55                   	push   %ebp
   11d79:	89 e5                	mov    %esp,%ebp
   11d7b:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = (PIT_OSC_FREQ * OS_TICK_MS )/ 1000.0;
   11d7e:	c7 45 f4 85 74 00 00 	movl   $0x7485,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT,PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11d85:	6a 36                	push   $0x36
   11d87:	6a 43                	push   $0x43
   11d89:	e8 a3 ff ff ff       	call   11d31 <outb>
   11d8e:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,reload_count & 0xff);
   11d91:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d94:	0f b6 c0             	movzbl %al,%eax
   11d97:	50                   	push   %eax
   11d98:	6a 40                	push   $0x40
   11d9a:	e8 92 ff ff ff       	call   11d31 <outb>
   11d9f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,(reload_count >> 8) & 0xff);
   11da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11da5:	c1 e8 08             	shr    $0x8,%eax
   11da8:	0f b6 c0             	movzbl %al,%eax
   11dab:	50                   	push   %eax
   11dac:	6a 40                	push   $0x40
   11dae:	e8 7e ff ff ff       	call   11d31 <outb>
   11db3:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER,exception_handler_time);
   11db6:	83 ec 08             	sub    $0x8,%esp
   11db9:	68 2b 00 01 00       	push   $0x1002b
   11dbe:	6a 20                	push   $0x20
   11dc0:	e8 ac fd ff ff       	call   11b71 <irq_install>
   11dc5:	83 c4 10             	add    $0x10,%esp

    irq_enable(IRQ0_TIMER);
   11dc8:	83 ec 0c             	sub    $0xc,%esp
   11dcb:	6a 20                	push   $0x20
   11dcd:	e8 df fd ff ff       	call   11bb1 <irq_enable>
   11dd2:	83 c4 10             	add    $0x10,%esp
}
   11dd5:	90                   	nop
   11dd6:	c9                   	leave  
   11dd7:	c3                   	ret    

00011dd8 <time_init>:
void time_init(void)
{
   11dd8:	55                   	push   %ebp
   11dd9:	89 e5                	mov    %esp,%ebp
   11ddb:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11dde:	c7 05 80 8e 01 00 00 	movl   $0x0,0x18e80
   11de5:	00 00 00 
    init_pit();
   11de8:	e8 8b ff ff ff       	call   11d78 <init_pit>
}
   11ded:	90                   	nop
   11dee:	c9                   	leave  
   11def:	c3                   	ret    

00011df0 <kernel_init>:
#include "ipc/sem.h"
#include "ipc/mutex.h"
#include "core/memory.h"
#include "dev/time.h"
void kernel_init(boot_info_t * boot_info)
{
   11df0:	55                   	push   %ebp
   11df1:	89 e5                	mov    %esp,%ebp
   11df3:	83 ec 08             	sub    $0x8,%esp
    //ASSERT(boot_info->ram_region_count != 2);
    cpu_init();
   11df6:	e8 f0 f6 ff ff       	call   114eb <cpu_init>
    log_init(); 
   11dfb:	e8 82 0d 00 00       	call   12b82 <log_init>
    memory_init(boot_info);
   11e00:	83 ec 0c             	sub    $0xc,%esp
   11e03:	ff 75 08             	pushl  0x8(%ebp)
   11e06:	e8 ea ea ff ff       	call   108f5 <memory_init>
   11e0b:	83 c4 10             	add    $0x10,%esp
    
    irq_init();
   11e0e:	e8 9e fb ff ff       	call   119b1 <irq_init>
    time_init();
   11e13:	e8 c0 ff ff ff       	call   11dd8 <time_init>

    task_manager_init();
   11e18:	e8 5c ef ff ff       	call   10d79 <task_manager_init>
}
   11e1d:	90                   	nop
   11e1e:	c9                   	leave  
   11e1f:	c3                   	ret    

00011e20 <init_task_entry>:
static uint32_t test_task_stack[1024];

static sem_t sem;
static mutex_t mutex;
void init_task_entry(void)
{
   11e20:	55                   	push   %ebp
   11e21:	89 e5                	mov    %esp,%ebp
   11e23:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11e26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;)
    {
        sys_sleep(3000);
   11e2d:	83 ec 0c             	sub    $0xc,%esp
   11e30:	68 b8 0b 00 00       	push   $0xbb8
   11e35:	e8 37 f4 ff ff       	call   11271 <sys_sleep>
   11e3a:	83 c4 10             	add    $0x10,%esp
        mutex_lock(&mutex);
   11e3d:	83 ec 0c             	sub    $0xc,%esp
   11e40:	68 b0 b0 01 00       	push   $0x1b0b0
   11e45:	e8 38 01 00 00       	call   11f82 <mutex_lock>
   11e4a:	83 c4 10             	add    $0x10,%esp
        log_printf("init task count = %d\n", count++);
   11e4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e50:	8d 50 01             	lea    0x1(%eax),%edx
   11e53:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11e56:	83 ec 08             	sub    $0x8,%esp
   11e59:	50                   	push   %eax
   11e5a:	68 43 30 01 00       	push   $0x13043
   11e5f:	e8 bb 0d 00 00       	call   12c1f <log_printf>
   11e64:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11e67:	83 ec 0c             	sub    $0xc,%esp
   11e6a:	68 e8 03 00 00       	push   $0x3e8
   11e6f:	e8 fd f3 ff ff       	call   11271 <sys_sleep>
   11e74:	83 c4 10             	add    $0x10,%esp
        mutex_unlock(&mutex);
   11e77:	83 ec 0c             	sub    $0xc,%esp
   11e7a:	68 b0 b0 01 00       	push   $0x1b0b0
   11e7f:	e8 91 01 00 00       	call   12015 <mutex_unlock>
   11e84:	83 c4 10             	add    $0x10,%esp
        sys_sleep(3000);
   11e87:	eb a4                	jmp    11e2d <init_task_entry+0xd>

00011e89 <test_task_entry>:
    }
}

void test_task_entry(void)
{
   11e89:	55                   	push   %ebp
   11e8a:	89 e5                	mov    %esp,%ebp
   11e8c:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11e8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;)
    {
        sys_sleep(4000);
   11e96:	83 ec 0c             	sub    $0xc,%esp
   11e99:	68 a0 0f 00 00       	push   $0xfa0
   11e9e:	e8 ce f3 ff ff       	call   11271 <sys_sleep>
   11ea3:	83 c4 10             	add    $0x10,%esp
        mutex_lock(&mutex);
   11ea6:	83 ec 0c             	sub    $0xc,%esp
   11ea9:	68 b0 b0 01 00       	push   $0x1b0b0
   11eae:	e8 cf 00 00 00       	call   11f82 <mutex_lock>
   11eb3:	83 c4 10             	add    $0x10,%esp
        log_printf("init idle count = %d\n", count++);
   11eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11eb9:	8d 50 01             	lea    0x1(%eax),%edx
   11ebc:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11ebf:	83 ec 08             	sub    $0x8,%esp
   11ec2:	50                   	push   %eax
   11ec3:	68 59 30 01 00       	push   $0x13059
   11ec8:	e8 52 0d 00 00       	call   12c1f <log_printf>
   11ecd:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11ed0:	83 ec 0c             	sub    $0xc,%esp
   11ed3:	68 e8 03 00 00       	push   $0x3e8
   11ed8:	e8 94 f3 ff ff       	call   11271 <sys_sleep>
   11edd:	83 c4 10             	add    $0x10,%esp
        mutex_unlock(&mutex);
   11ee0:	83 ec 0c             	sub    $0xc,%esp
   11ee3:	68 b0 b0 01 00       	push   $0x1b0b0
   11ee8:	e8 28 01 00 00       	call   12015 <mutex_unlock>
   11eed:	83 c4 10             	add    $0x10,%esp
        sys_sleep(4000);
   11ef0:	eb a4                	jmp    11e96 <test_task_entry+0xd>

00011ef2 <move_to_first_task>:
    }
}

void move_to_first_task(void)
{
   11ef2:	55                   	push   %ebp
   11ef3:	89 e5                	mov    %esp,%ebp
   11ef5:	83 ec 18             	sub    $0x18,%esp
    // void first_task_entry(void);
    // first_task_entry();
    task_t *curr = task_current();
   11ef8:	e8 6a f0 ff ff       	call   10f67 <task_current>
   11efd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    tss_t *tss = &curr->tss;
   11f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f03:	05 94 00 00 00       	add    $0x94,%eax
   11f08:	89 45 f0             	mov    %eax,-0x10(%ebp)
    __asm__ __volatile__("jmp *%[ip]"::[ip]"r"(tss->eip));
   11f0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f0e:	8b 40 20             	mov    0x20(%eax),%eax
   11f11:	ff e0                	jmp    *%eax
}
   11f13:	90                   	nop
   11f14:	c9                   	leave  
   11f15:	c3                   	ret    

00011f16 <init_main>:
void init_main(void)
{
   11f16:	55                   	push   %ebp
   11f17:	89 e5                	mov    %esp,%ebp
   11f19:	83 ec 08             	sub    $0x8,%esp
    sem_init(&sem,0);
   11f1c:	83 ec 08             	sub    $0x8,%esp
   11f1f:	6a 00                	push   $0x0
   11f21:	68 a0 b0 01 00       	push   $0x1b0a0
   11f26:	e8 b1 01 00 00       	call   120dc <sem_init>
   11f2b:	83 c4 10             	add    $0x10,%esp
    log_printf("init main\n");
   11f2e:	83 ec 0c             	sub    $0xc,%esp
   11f31:	68 6f 30 01 00       	push   $0x1306f
   11f36:	e8 e4 0c 00 00       	call   12c1f <log_printf>
   11f3b:	83 c4 10             	add    $0x10,%esp
    // task_init(&init_task,"init_task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
    // task_init(&test_task,"test_task",(uint32_t)test_task_entry,(uint32_t)&test_task_stack[1024]);
    task_first_init();
   11f3e:	e8 03 ef ff ff       	call   10e46 <task_first_init>
    move_to_first_task();
   11f43:	e8 aa ff ff ff       	call   11ef2 <move_to_first_task>
    //     mutex_lock(&mutex);
    //     log_printf("init main count = %d\n", count++);
    //     sys_sleep(3000);
    //     mutex_unlock(&mutex);
    // }
}
   11f48:	90                   	nop
   11f49:	c9                   	leave  
   11f4a:	c3                   	ret    

00011f4b <list_count>:
{
   11f4b:	55                   	push   %ebp
   11f4c:	89 e5                	mov    %esp,%ebp
    return list->count;
   11f4e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f51:	8b 40 08             	mov    0x8(%eax),%eax
}
   11f54:	5d                   	pop    %ebp
   11f55:	c3                   	ret    

00011f56 <mutex_init>:
 */
#include "ipc/mutex.h"
#include "cpu/irq.h"

void mutex_init(mutex_t *mutex)
{
   11f56:	55                   	push   %ebp
   11f57:	89 e5                	mov    %esp,%ebp
   11f59:	83 ec 08             	sub    $0x8,%esp
    mutex->owner = (task_t *)0;
   11f5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mutex->locked_count = 0;
   11f66:	8b 45 08             	mov    0x8(%ebp),%eax
   11f69:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    list_init(&mutex->wait_list);
   11f70:	8b 45 08             	mov    0x8(%ebp),%eax
   11f73:	83 ec 0c             	sub    $0xc,%esp
   11f76:	50                   	push   %eax
   11f77:	e8 e7 09 00 00       	call   12963 <list_init>
   11f7c:	83 c4 10             	add    $0x10,%esp
}
   11f7f:	90                   	nop
   11f80:	c9                   	leave  
   11f81:	c3                   	ret    

00011f82 <mutex_lock>:

void mutex_lock(mutex_t *mutex)
{
   11f82:	55                   	push   %ebp
   11f83:	89 e5                	mov    %esp,%ebp
   11f85:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11f88:	e8 7b fd ff ff       	call   11d08 <irq_enter_protection>
   11f8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   11f90:	e8 d2 ef ff ff       	call   10f67 <task_current>
   11f95:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->locked_count == 0)
   11f98:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9b:	8b 40 10             	mov    0x10(%eax),%eax
   11f9e:	85 c0                	test   %eax,%eax
   11fa0:	75 1a                	jne    11fbc <mutex_lock+0x3a>
    {
        mutex->locked_count++;
   11fa2:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa5:	8b 40 10             	mov    0x10(%eax),%eax
   11fa8:	8d 50 01             	lea    0x1(%eax),%edx
   11fab:	8b 45 08             	mov    0x8(%ebp),%eax
   11fae:	89 50 10             	mov    %edx,0x10(%eax)
        mutex->owner = curr;
   11fb1:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11fb7:	89 50 0c             	mov    %edx,0xc(%eax)
   11fba:	eb 48                	jmp    12004 <mutex_lock+0x82>
    }else if(mutex->owner == curr)
   11fbc:	8b 45 08             	mov    0x8(%ebp),%eax
   11fbf:	8b 40 0c             	mov    0xc(%eax),%eax
   11fc2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11fc5:	75 11                	jne    11fd8 <mutex_lock+0x56>
    {
        mutex->locked_count++;
   11fc7:	8b 45 08             	mov    0x8(%ebp),%eax
   11fca:	8b 40 10             	mov    0x10(%eax),%eax
   11fcd:	8d 50 01             	lea    0x1(%eax),%edx
   11fd0:	8b 45 08             	mov    0x8(%ebp),%eax
   11fd3:	89 50 10             	mov    %edx,0x10(%eax)
   11fd6:	eb 2c                	jmp    12004 <mutex_lock+0x82>
    }else
    {
        task_set_block(curr);
   11fd8:	83 ec 0c             	sub    $0xc,%esp
   11fdb:	ff 75 f0             	pushl  -0x10(%ebp)
   11fde:	e8 59 ef ff ff       	call   10f3c <task_set_block>
   11fe3:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list,&curr->wait_node);
   11fe6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fe9:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
   11fef:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff2:	83 ec 08             	sub    $0x8,%esp
   11ff5:	52                   	push   %edx
   11ff6:	50                   	push   %eax
   11ff7:	e8 eb 09 00 00       	call   129e7 <list_insert_last>
   11ffc:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   11fff:	e8 1e f0 ff ff       	call   11022 <schedule_switch>
    }
    irq_leave_protection(state);
   12004:	83 ec 0c             	sub    $0xc,%esp
   12007:	ff 75 f4             	pushl  -0xc(%ebp)
   1200a:	e8 11 fd ff ff       	call   11d20 <irq_leave_protection>
   1200f:	83 c4 10             	add    $0x10,%esp
}
   12012:	90                   	nop
   12013:	c9                   	leave  
   12014:	c3                   	ret    

00012015 <mutex_unlock>:

void mutex_unlock(mutex_t *mutex)
{
   12015:	55                   	push   %ebp
   12016:	89 e5                	mov    %esp,%ebp
   12018:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1201b:	e8 e8 fc ff ff       	call   11d08 <irq_enter_protection>
   12020:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   12023:	e8 3f ef ff ff       	call   10f67 <task_current>
   12028:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->owner == curr)
   1202b:	8b 45 08             	mov    0x8(%ebp),%eax
   1202e:	8b 40 0c             	mov    0xc(%eax),%eax
   12031:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12034:	0f 85 86 00 00 00    	jne    120c0 <mutex_unlock+0xab>
    {
        if(--mutex->locked_count == 0)
   1203a:	8b 45 08             	mov    0x8(%ebp),%eax
   1203d:	8b 40 10             	mov    0x10(%eax),%eax
   12040:	8d 50 ff             	lea    -0x1(%eax),%edx
   12043:	8b 45 08             	mov    0x8(%ebp),%eax
   12046:	89 50 10             	mov    %edx,0x10(%eax)
   12049:	8b 45 08             	mov    0x8(%ebp),%eax
   1204c:	8b 40 10             	mov    0x10(%eax),%eax
   1204f:	85 c0                	test   %eax,%eax
   12051:	75 6d                	jne    120c0 <mutex_unlock+0xab>
        {
            mutex->owner = (task_t *)0;
   12053:	8b 45 08             	mov    0x8(%ebp),%eax
   12056:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            if(list_count(&mutex->wait_list))
   1205d:	8b 45 08             	mov    0x8(%ebp),%eax
   12060:	83 ec 0c             	sub    $0xc,%esp
   12063:	50                   	push   %eax
   12064:	e8 e2 fe ff ff       	call   11f4b <list_count>
   12069:	83 c4 10             	add    $0x10,%esp
   1206c:	85 c0                	test   %eax,%eax
   1206e:	74 50                	je     120c0 <mutex_unlock+0xab>
            {
                list_node_t * node = list_remove_first(&mutex->wait_list);
   12070:	8b 45 08             	mov    0x8(%ebp),%eax
   12073:	83 ec 0c             	sub    $0xc,%esp
   12076:	50                   	push   %eax
   12077:	e8 cf 09 00 00       	call   12a4b <list_remove_first>
   1207c:	83 c4 10             	add    $0x10,%esp
   1207f:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node,task_t,wait_node);
   12082:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12086:	74 0a                	je     12092 <mutex_unlock+0x7d>
   12088:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1208b:	2d 8c 00 00 00       	sub    $0x8c,%eax
   12090:	eb 05                	jmp    12097 <mutex_unlock+0x82>
   12092:	b8 00 00 00 00       	mov    $0x0,%eax
   12097:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   1209a:	83 ec 0c             	sub    $0xc,%esp
   1209d:	ff 75 e8             	pushl  -0x18(%ebp)
   120a0:	e8 62 ee ff ff       	call   10f07 <task_set_ready>
   120a5:	83 c4 10             	add    $0x10,%esp
                mutex->locked_count = 1;
   120a8:	8b 45 08             	mov    0x8(%ebp),%eax
   120ab:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
                mutex->owner = task;
   120b2:	8b 45 08             	mov    0x8(%ebp),%eax
   120b5:	8b 55 e8             	mov    -0x18(%ebp),%edx
   120b8:	89 50 0c             	mov    %edx,0xc(%eax)
                schedule_switch();
   120bb:	e8 62 ef ff ff       	call   11022 <schedule_switch>
            }
        }
    }
    irq_leave_protection(state);
   120c0:	83 ec 0c             	sub    $0xc,%esp
   120c3:	ff 75 f4             	pushl  -0xc(%ebp)
   120c6:	e8 55 fc ff ff       	call   11d20 <irq_leave_protection>
   120cb:	83 c4 10             	add    $0x10,%esp
}
   120ce:	90                   	nop
   120cf:	c9                   	leave  
   120d0:	c3                   	ret    

000120d1 <list_count>:
{
   120d1:	55                   	push   %ebp
   120d2:	89 e5                	mov    %esp,%ebp
    return list->count;
   120d4:	8b 45 08             	mov    0x8(%ebp),%eax
   120d7:	8b 40 08             	mov    0x8(%eax),%eax
}
   120da:	5d                   	pop    %ebp
   120db:	c3                   	ret    

000120dc <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"
void sem_init(sem_t *sem,int count)
{
   120dc:	55                   	push   %ebp
   120dd:	89 e5                	mov    %esp,%ebp
   120df:	83 ec 08             	sub    $0x8,%esp
    sem->count = count;
   120e2:	8b 45 08             	mov    0x8(%ebp),%eax
   120e5:	8b 55 0c             	mov    0xc(%ebp),%edx
   120e8:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   120ea:	8b 45 08             	mov    0x8(%ebp),%eax
   120ed:	83 c0 04             	add    $0x4,%eax
   120f0:	83 ec 0c             	sub    $0xc,%esp
   120f3:	50                   	push   %eax
   120f4:	e8 6a 08 00 00       	call   12963 <list_init>
   120f9:	83 c4 10             	add    $0x10,%esp
}
   120fc:	90                   	nop
   120fd:	c9                   	leave  
   120fe:	c3                   	ret    

000120ff <sem_wait>:

void sem_wait(sem_t *sem)
{
   120ff:	55                   	push   %ebp
   12100:	89 e5                	mov    %esp,%ebp
   12102:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12105:	e8 fe fb ff ff       	call   11d08 <irq_enter_protection>
   1210a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(sem->count > 0)
   1210d:	8b 45 08             	mov    0x8(%ebp),%eax
   12110:	8b 00                	mov    (%eax),%eax
   12112:	85 c0                	test   %eax,%eax
   12114:	7e 0f                	jle    12125 <sem_wait+0x26>
    {
        sem->count--;
   12116:	8b 45 08             	mov    0x8(%ebp),%eax
   12119:	8b 00                	mov    (%eax),%eax
   1211b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1211e:	8b 45 08             	mov    0x8(%ebp),%eax
   12121:	89 10                	mov    %edx,(%eax)
   12123:	eb 37                	jmp    1215c <sem_wait+0x5d>
    }
    else
    {
        task_t *curr = task_current();
   12125:	e8 3d ee ff ff       	call   10f67 <task_current>
   1212a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   1212d:	83 ec 0c             	sub    $0xc,%esp
   12130:	ff 75 f0             	pushl  -0x10(%ebp)
   12133:	e8 04 ee ff ff       	call   10f3c <task_set_block>
   12138:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list,&curr->wait_node);
   1213b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1213e:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
   12144:	8b 45 08             	mov    0x8(%ebp),%eax
   12147:	83 c0 04             	add    $0x4,%eax
   1214a:	83 ec 08             	sub    $0x8,%esp
   1214d:	52                   	push   %edx
   1214e:	50                   	push   %eax
   1214f:	e8 93 08 00 00       	call   129e7 <list_insert_last>
   12154:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   12157:	e8 c6 ee ff ff       	call   11022 <schedule_switch>
    }
    irq_leave_protection(state);
   1215c:	83 ec 0c             	sub    $0xc,%esp
   1215f:	ff 75 f4             	pushl  -0xc(%ebp)
   12162:	e8 b9 fb ff ff       	call   11d20 <irq_leave_protection>
   12167:	83 c4 10             	add    $0x10,%esp
}
   1216a:	90                   	nop
   1216b:	c9                   	leave  
   1216c:	c3                   	ret    

0001216d <sem_notify>:


void sem_notify(sem_t *sem)
{
   1216d:	55                   	push   %ebp
   1216e:	89 e5                	mov    %esp,%ebp
   12170:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12173:	e8 90 fb ff ff       	call   11d08 <irq_enter_protection>
   12178:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&sem->wait_list) > 0)
   1217b:	8b 45 08             	mov    0x8(%ebp),%eax
   1217e:	83 c0 04             	add    $0x4,%eax
   12181:	83 ec 0c             	sub    $0xc,%esp
   12184:	50                   	push   %eax
   12185:	e8 47 ff ff ff       	call   120d1 <list_count>
   1218a:	83 c4 10             	add    $0x10,%esp
   1218d:	85 c0                	test   %eax,%eax
   1218f:	7e 42                	jle    121d3 <sem_notify+0x66>
    {
        list_node_t * node = list_remove_first(&sem->wait_list);
   12191:	8b 45 08             	mov    0x8(%ebp),%eax
   12194:	83 c0 04             	add    $0x4,%eax
   12197:	83 ec 0c             	sub    $0xc,%esp
   1219a:	50                   	push   %eax
   1219b:	e8 ab 08 00 00       	call   12a4b <list_remove_first>
   121a0:	83 c4 10             	add    $0x10,%esp
   121a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node,task_t,wait_node);
   121a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   121aa:	74 0a                	je     121b6 <sem_notify+0x49>
   121ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121af:	2d 8c 00 00 00       	sub    $0x8c,%eax
   121b4:	eb 05                	jmp    121bb <sem_notify+0x4e>
   121b6:	b8 00 00 00 00       	mov    $0x0,%eax
   121bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   121be:	83 ec 0c             	sub    $0xc,%esp
   121c1:	ff 75 ec             	pushl  -0x14(%ebp)
   121c4:	e8 3e ed ff ff       	call   10f07 <task_set_ready>
   121c9:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   121cc:	e8 51 ee ff ff       	call   11022 <schedule_switch>
   121d1:	eb 0d                	jmp    121e0 <sem_notify+0x73>
    }
    else
    {
        sem->count++;
   121d3:	8b 45 08             	mov    0x8(%ebp),%eax
   121d6:	8b 00                	mov    (%eax),%eax
   121d8:	8d 50 01             	lea    0x1(%eax),%edx
   121db:	8b 45 08             	mov    0x8(%ebp),%eax
   121de:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);
   121e0:	83 ec 0c             	sub    $0xc,%esp
   121e3:	ff 75 f4             	pushl  -0xc(%ebp)
   121e6:	e8 35 fb ff ff       	call   11d20 <irq_leave_protection>
   121eb:	83 c4 10             	add    $0x10,%esp
}
   121ee:	90                   	nop
   121ef:	c9                   	leave  
   121f0:	c3                   	ret    

000121f1 <sem_count>:
int sem_count(sem_t *sem)
{
   121f1:	55                   	push   %ebp
   121f2:	89 e5                	mov    %esp,%ebp
   121f4:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   121f7:	e8 0c fb ff ff       	call   11d08 <irq_enter_protection>
   121fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   121ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12202:	8b 00                	mov    (%eax),%eax
   12204:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   12207:	83 ec 0c             	sub    $0xc,%esp
   1220a:	ff 75 f4             	pushl  -0xc(%ebp)
   1220d:	e8 0e fb ff ff       	call   11d20 <irq_leave_protection>
   12212:	83 c4 10             	add    $0x10,%esp
    return count;
   12215:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   12218:	c9                   	leave  
   12219:	c3                   	ret    

0001221a <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   1221a:	55                   	push   %ebp
   1221b:	89 e5                	mov    %esp,%ebp
    return (bit_count + 7) / 8;
   1221d:	8b 45 08             	mov    0x8(%ebp),%eax
   12220:	83 c0 07             	add    $0x7,%eax
   12223:	8d 50 07             	lea    0x7(%eax),%edx
   12226:	85 c0                	test   %eax,%eax
   12228:	0f 48 c2             	cmovs  %edx,%eax
   1222b:	c1 f8 03             	sar    $0x3,%eax
}
   1222e:	5d                   	pop    %ebp
   1222f:	c3                   	ret    

00012230 <bitmap_init>:
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count ,int init_bit)
{
   12230:	55                   	push   %ebp
   12231:	89 e5                	mov    %esp,%ebp
   12233:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   12236:	8b 45 08             	mov    0x8(%ebp),%eax
   12239:	8b 55 10             	mov    0x10(%ebp),%edx
   1223c:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1223e:	8b 45 08             	mov    0x8(%ebp),%eax
   12241:	8b 55 0c             	mov    0xc(%ebp),%edx
   12244:	89 50 04             	mov    %edx,0x4(%eax)
    int bytes = bitmap_byte_count(count);
   12247:	ff 75 10             	pushl  0x10(%ebp)
   1224a:	e8 cb ff ff ff       	call   1221a <bitmap_byte_count>
   1224f:	83 c4 04             	add    $0x4,%esp
   12252:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bits, init_bit ? 0xff : 0x00, bytes);
   12255:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12259:	74 07                	je     12262 <bitmap_init+0x32>
   1225b:	b8 ff 00 00 00       	mov    $0xff,%eax
   12260:	eb 05                	jmp    12267 <bitmap_init+0x37>
   12262:	b8 00 00 00 00       	mov    $0x0,%eax
   12267:	83 ec 04             	sub    $0x4,%esp
   1226a:	ff 75 f4             	pushl  -0xc(%ebp)
   1226d:	50                   	push   %eax
   1226e:	ff 75 0c             	pushl  0xc(%ebp)
   12271:	e8 95 03 00 00       	call   1260b <kernel_memset>
   12276:	83 c4 10             	add    $0x10,%esp
}
   12279:	90                   	nop
   1227a:	c9                   	leave  
   1227b:	c3                   	ret    

0001227c <bitmap_get_bit>:

int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   1227c:	55                   	push   %ebp
   1227d:	89 e5                	mov    %esp,%ebp
   1227f:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   12280:	8b 45 08             	mov    0x8(%ebp),%eax
   12283:	8b 50 04             	mov    0x4(%eax),%edx
   12286:	8b 45 0c             	mov    0xc(%ebp),%eax
   12289:	8d 48 07             	lea    0x7(%eax),%ecx
   1228c:	85 c0                	test   %eax,%eax
   1228e:	0f 48 c1             	cmovs  %ecx,%eax
   12291:	c1 f8 03             	sar    $0x3,%eax
   12294:	01 d0                	add    %edx,%eax
   12296:	0f b6 00             	movzbl (%eax),%eax
   12299:	0f b6 d8             	movzbl %al,%ebx
   1229c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1229f:	99                   	cltd   
   122a0:	c1 ea 1d             	shr    $0x1d,%edx
   122a3:	01 d0                	add    %edx,%eax
   122a5:	83 e0 07             	and    $0x7,%eax
   122a8:	29 d0                	sub    %edx,%eax
   122aa:	ba 01 00 00 00       	mov    $0x1,%edx
   122af:	89 c1                	mov    %eax,%ecx
   122b1:	d3 e2                	shl    %cl,%edx
   122b3:	89 d0                	mov    %edx,%eax
   122b5:	21 d8                	and    %ebx,%eax
}
   122b7:	5b                   	pop    %ebx
   122b8:	5d                   	pop    %ebp
   122b9:	c3                   	ret    

000122ba <bitmap_set_bit>:
void bitmap_set_bit(bitmap_t *bitmap, int index, int count,int bit)
{
   122ba:	55                   	push   %ebp
   122bb:	89 e5                	mov    %esp,%ebp
   122bd:	56                   	push   %esi
   122be:	53                   	push   %ebx
   122bf:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   122c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122c9:	e9 a2 00 00 00       	jmp    12370 <bitmap_set_bit+0xb6>
    {
        if(bit)
   122ce:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   122d2:	74 4a                	je     1231e <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= (1 << (index % 8));
   122d4:	8b 45 08             	mov    0x8(%ebp),%eax
   122d7:	8b 50 04             	mov    0x4(%eax),%edx
   122da:	8b 45 0c             	mov    0xc(%ebp),%eax
   122dd:	8d 48 07             	lea    0x7(%eax),%ecx
   122e0:	85 c0                	test   %eax,%eax
   122e2:	0f 48 c1             	cmovs  %ecx,%eax
   122e5:	c1 f8 03             	sar    $0x3,%eax
   122e8:	89 c3                	mov    %eax,%ebx
   122ea:	89 d8                	mov    %ebx,%eax
   122ec:	01 d0                	add    %edx,%eax
   122ee:	0f b6 00             	movzbl (%eax),%eax
   122f1:	89 c6                	mov    %eax,%esi
   122f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   122f6:	99                   	cltd   
   122f7:	c1 ea 1d             	shr    $0x1d,%edx
   122fa:	01 d0                	add    %edx,%eax
   122fc:	83 e0 07             	and    $0x7,%eax
   122ff:	29 d0                	sub    %edx,%eax
   12301:	ba 01 00 00 00       	mov    $0x1,%edx
   12306:	89 c1                	mov    %eax,%ecx
   12308:	d3 e2                	shl    %cl,%edx
   1230a:	89 d0                	mov    %edx,%eax
   1230c:	89 f2                	mov    %esi,%edx
   1230e:	09 c2                	or     %eax,%edx
   12310:	8b 45 08             	mov    0x8(%ebp),%eax
   12313:	8b 40 04             	mov    0x4(%eax),%eax
   12316:	89 d9                	mov    %ebx,%ecx
   12318:	01 c8                	add    %ecx,%eax
   1231a:	88 10                	mov    %dl,(%eax)
   1231c:	eb 4a                	jmp    12368 <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1231e:	8b 45 08             	mov    0x8(%ebp),%eax
   12321:	8b 50 04             	mov    0x4(%eax),%edx
   12324:	8b 45 0c             	mov    0xc(%ebp),%eax
   12327:	8d 48 07             	lea    0x7(%eax),%ecx
   1232a:	85 c0                	test   %eax,%eax
   1232c:	0f 48 c1             	cmovs  %ecx,%eax
   1232f:	c1 f8 03             	sar    $0x3,%eax
   12332:	89 c3                	mov    %eax,%ebx
   12334:	89 d8                	mov    %ebx,%eax
   12336:	01 d0                	add    %edx,%eax
   12338:	0f b6 00             	movzbl (%eax),%eax
   1233b:	89 c6                	mov    %eax,%esi
   1233d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12340:	99                   	cltd   
   12341:	c1 ea 1d             	shr    $0x1d,%edx
   12344:	01 d0                	add    %edx,%eax
   12346:	83 e0 07             	and    $0x7,%eax
   12349:	29 d0                	sub    %edx,%eax
   1234b:	ba 01 00 00 00       	mov    $0x1,%edx
   12350:	89 c1                	mov    %eax,%ecx
   12352:	d3 e2                	shl    %cl,%edx
   12354:	89 d0                	mov    %edx,%eax
   12356:	f7 d0                	not    %eax
   12358:	89 f2                	mov    %esi,%edx
   1235a:	21 c2                	and    %eax,%edx
   1235c:	8b 45 08             	mov    0x8(%ebp),%eax
   1235f:	8b 40 04             	mov    0x4(%eax),%eax
   12362:	89 d9                	mov    %ebx,%ecx
   12364:	01 c8                	add    %ecx,%eax
   12366:	88 10                	mov    %dl,(%eax)
        }
        index++;
   12368:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   1236c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12370:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12373:	3b 45 10             	cmp    0x10(%ebp),%eax
   12376:	7d 0e                	jge    12386 <bitmap_set_bit+0xcc>
   12378:	8b 45 08             	mov    0x8(%ebp),%eax
   1237b:	8b 00                	mov    (%eax),%eax
   1237d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12380:	0f 8c 48 ff ff ff    	jl     122ce <bitmap_set_bit+0x14>
    }
}
   12386:	90                   	nop
   12387:	83 c4 10             	add    $0x10,%esp
   1238a:	5b                   	pop    %ebx
   1238b:	5e                   	pop    %esi
   1238c:	5d                   	pop    %ebp
   1238d:	c3                   	ret    

0001238e <bitmap_is_set>:
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   1238e:	55                   	push   %ebp
   1238f:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12391:	ff 75 0c             	pushl  0xc(%ebp)
   12394:	ff 75 08             	pushl  0x8(%ebp)
   12397:	e8 e0 fe ff ff       	call   1227c <bitmap_get_bit>
   1239c:	83 c4 08             	add    $0x8,%esp
   1239f:	85 c0                	test   %eax,%eax
   123a1:	0f 95 c0             	setne  %al
   123a4:	0f b6 c0             	movzbl %al,%eax
}
   123a7:	c9                   	leave  
   123a8:	c3                   	ret    

000123a9 <bitmap_alloc_nbits>:
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   123a9:	55                   	push   %ebp
   123aa:	89 e5                	mov    %esp,%ebp
   123ac:	83 ec 10             	sub    $0x10,%esp
    int index = 0;
   123af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   123b6:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
    while(index < bitmap->bit_count)
   123bd:	e9 8c 00 00 00       	jmp    1244e <bitmap_alloc_nbits+0xa5>
    {
        if(bitmap_get_bit(bitmap, index) != bit)
   123c2:	ff 75 fc             	pushl  -0x4(%ebp)
   123c5:	ff 75 08             	pushl  0x8(%ebp)
   123c8:	e8 af fe ff ff       	call   1227c <bitmap_get_bit>
   123cd:	83 c4 08             	add    $0x8,%esp
   123d0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   123d3:	74 06                	je     123db <bitmap_alloc_nbits+0x32>
        {
            index++;
   123d5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   123d9:	eb 73                	jmp    1244e <bitmap_alloc_nbits+0xa5>
        }
        ok_index = index;
   123db:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123de:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i = 0;
   123e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   123e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   123ef:	eb 27                	jmp    12418 <bitmap_alloc_nbits+0x6f>
        {
            if(bitmap_get_bit(bitmap, index++) != bit)
   123f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123f4:	8d 50 01             	lea    0x1(%eax),%edx
   123f7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   123fa:	50                   	push   %eax
   123fb:	ff 75 08             	pushl  0x8(%ebp)
   123fe:	e8 79 fe ff ff       	call   1227c <bitmap_get_bit>
   12403:	83 c4 08             	add    $0x8,%esp
   12406:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12409:	74 09                	je     12414 <bitmap_alloc_nbits+0x6b>
            {
                ok_index = -1;
   1240b:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12412:	eb 16                	jmp    1242a <bitmap_alloc_nbits+0x81>
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   12414:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12418:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1241b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1241e:	7d 0a                	jge    1242a <bitmap_alloc_nbits+0x81>
   12420:	8b 45 08             	mov    0x8(%ebp),%eax
   12423:	8b 00                	mov    (%eax),%eax
   12425:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12428:	7c c7                	jl     123f1 <bitmap_alloc_nbits+0x48>
            }
        }
        if(i >= count)
   1242a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1242d:	3b 45 10             	cmp    0x10(%ebp),%eax
   12430:	7c 1c                	jl     1244e <bitmap_alloc_nbits+0xa5>
        {
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12432:	8b 45 0c             	mov    0xc(%ebp),%eax
   12435:	f7 d0                	not    %eax
   12437:	50                   	push   %eax
   12438:	ff 75 10             	pushl  0x10(%ebp)
   1243b:	ff 75 f8             	pushl  -0x8(%ebp)
   1243e:	ff 75 08             	pushl  0x8(%ebp)
   12441:	e8 74 fe ff ff       	call   122ba <bitmap_set_bit>
   12446:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12449:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1244c:	eb 13                	jmp    12461 <bitmap_alloc_nbits+0xb8>
    while(index < bitmap->bit_count)
   1244e:	8b 45 08             	mov    0x8(%ebp),%eax
   12451:	8b 00                	mov    (%eax),%eax
   12453:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12456:	0f 8c 66 ff ff ff    	jl     123c2 <bitmap_alloc_nbits+0x19>
        }
    }        
    return -1;
   1245c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12461:	c9                   	leave  
   12462:	c3                   	ret    

00012463 <hlt>:
{
   12463:	55                   	push   %ebp
   12464:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12466:	f4                   	hlt    
}
   12467:	90                   	nop
   12468:	5d                   	pop    %ebp
   12469:	c3                   	ret    

0001246a <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"
void kernel_strcpy (char *dest, const char *src)
{
   1246a:	55                   	push   %ebp
   1246b:	89 e5                	mov    %esp,%ebp
    if(!dest || !src)
   1246d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12471:	74 27                	je     1249a <kernel_strcpy+0x30>
   12473:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12477:	74 21                	je     1249a <kernel_strcpy+0x30>
    {
        return;
    }
    while((*dest++ = *src++) != '\0');
   12479:	90                   	nop
   1247a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1247d:	8d 42 01             	lea    0x1(%edx),%eax
   12480:	89 45 0c             	mov    %eax,0xc(%ebp)
   12483:	8b 45 08             	mov    0x8(%ebp),%eax
   12486:	8d 48 01             	lea    0x1(%eax),%ecx
   12489:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1248c:	0f b6 12             	movzbl (%edx),%edx
   1248f:	88 10                	mov    %dl,(%eax)
   12491:	0f b6 00             	movzbl (%eax),%eax
   12494:	84 c0                	test   %al,%al
   12496:	75 e2                	jne    1247a <kernel_strcpy+0x10>
   12498:	eb 01                	jmp    1249b <kernel_strcpy+0x31>
        return;
   1249a:	90                   	nop
    //*dest = '\0';
}
   1249b:	5d                   	pop    %ebp
   1249c:	c3                   	ret    

0001249d <kernel_strncpy>:

void kernel_strncpy (char *dest, const char *src, int size)
{
   1249d:	55                   	push   %ebp
   1249e:	89 e5                	mov    %esp,%ebp
   124a0:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src)
   124a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124a7:	74 5b                	je     12504 <kernel_strncpy+0x67>
   124a9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124ad:	74 55                	je     12504 <kernel_strncpy+0x67>
    {
        return;
    }
    char *d = dest;
   124af:	8b 45 08             	mov    0x8(%ebp),%eax
   124b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   124b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   124b8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s))
   124bb:	eb 17                	jmp    124d4 <kernel_strncpy+0x37>
    {
        *d++ = *s++;
   124bd:	8b 55 f8             	mov    -0x8(%ebp),%edx
   124c0:	8d 42 01             	lea    0x1(%edx),%eax
   124c3:	89 45 f8             	mov    %eax,-0x8(%ebp)
   124c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124c9:	8d 48 01             	lea    0x1(%eax),%ecx
   124cc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   124cf:	0f b6 12             	movzbl (%edx),%edx
   124d2:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s))
   124d4:	8b 45 10             	mov    0x10(%ebp),%eax
   124d7:	8d 50 ff             	lea    -0x1(%eax),%edx
   124da:	89 55 10             	mov    %edx,0x10(%ebp)
   124dd:	85 c0                	test   %eax,%eax
   124df:	7e 0a                	jle    124eb <kernel_strncpy+0x4e>
   124e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124e4:	0f b6 00             	movzbl (%eax),%eax
   124e7:	84 c0                	test   %al,%al
   124e9:	75 d2                	jne    124bd <kernel_strncpy+0x20>
    }
    if(size == 0)
   124eb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   124ef:	75 0b                	jne    124fc <kernel_strncpy+0x5f>
    {
        *(d - 1) = '\0';
   124f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124f4:	83 e8 01             	sub    $0x1,%eax
   124f7:	c6 00 00             	movb   $0x0,(%eax)
   124fa:	eb 09                	jmp    12505 <kernel_strncpy+0x68>
    }
    else
    {
        *d = '\0';
   124fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124ff:	c6 00 00             	movb   $0x0,(%eax)
   12502:	eb 01                	jmp    12505 <kernel_strncpy+0x68>
        return;
   12504:	90                   	nop
    }
}
   12505:	c9                   	leave  
   12506:	c3                   	ret    

00012507 <kernel_strncmp>:

int kernel_strncmp (const char *str1, const char *str2, int size)
{
   12507:	55                   	push   %ebp
   12508:	89 e5                	mov    %esp,%ebp
    if(!str1 || !str2)
   1250a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1250e:	74 06                	je     12516 <kernel_strncmp+0xf>
   12510:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12514:	75 0f                	jne    12525 <kernel_strncmp+0x1e>
    {
        return 0;
   12516:	b8 00 00 00 00       	mov    $0x0,%eax
   1251b:	eb 62                	jmp    1257f <kernel_strncmp+0x78>
    }
    while(*str1 && *str2 && (*str1 == *str2) && size)
    {
        str1++;
   1251d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        str2++;
   12521:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*str1 && *str2 && (*str1 == *str2) && size)
   12525:	8b 45 08             	mov    0x8(%ebp),%eax
   12528:	0f b6 00             	movzbl (%eax),%eax
   1252b:	84 c0                	test   %al,%al
   1252d:	74 20                	je     1254f <kernel_strncmp+0x48>
   1252f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12532:	0f b6 00             	movzbl (%eax),%eax
   12535:	84 c0                	test   %al,%al
   12537:	74 16                	je     1254f <kernel_strncmp+0x48>
   12539:	8b 45 08             	mov    0x8(%ebp),%eax
   1253c:	0f b6 10             	movzbl (%eax),%edx
   1253f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12542:	0f b6 00             	movzbl (%eax),%eax
   12545:	38 c2                	cmp    %al,%dl
   12547:	75 06                	jne    1254f <kernel_strncmp+0x48>
   12549:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1254d:	75 ce                	jne    1251d <kernel_strncmp+0x16>
    }
    return !((*str1 == '\0') || (*str2 == '\0') || (*str1 == *str2));
   1254f:	8b 45 08             	mov    0x8(%ebp),%eax
   12552:	0f b6 00             	movzbl (%eax),%eax
   12555:	84 c0                	test   %al,%al
   12557:	74 21                	je     1257a <kernel_strncmp+0x73>
   12559:	8b 45 0c             	mov    0xc(%ebp),%eax
   1255c:	0f b6 00             	movzbl (%eax),%eax
   1255f:	84 c0                	test   %al,%al
   12561:	74 17                	je     1257a <kernel_strncmp+0x73>
   12563:	8b 45 08             	mov    0x8(%ebp),%eax
   12566:	0f b6 10             	movzbl (%eax),%edx
   12569:	8b 45 0c             	mov    0xc(%ebp),%eax
   1256c:	0f b6 00             	movzbl (%eax),%eax
   1256f:	38 c2                	cmp    %al,%dl
   12571:	74 07                	je     1257a <kernel_strncmp+0x73>
   12573:	b8 01 00 00 00       	mov    $0x1,%eax
   12578:	eb 05                	jmp    1257f <kernel_strncmp+0x78>
   1257a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1257f:	5d                   	pop    %ebp
   12580:	c3                   	ret    

00012581 <kernel_strlen>:

int kernel_strlen (const char *str)
{
   12581:	55                   	push   %ebp
   12582:	89 e5                	mov    %esp,%ebp
   12584:	83 ec 10             	sub    $0x10,%esp
    if(!str)
   12587:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1258b:	75 07                	jne    12594 <kernel_strlen+0x13>
    {
        return 0;
   1258d:	b8 00 00 00 00       	mov    $0x0,%eax
   12592:	eb 26                	jmp    125ba <kernel_strlen+0x39>
    }
    const char *s = str;
   12594:	8b 45 08             	mov    0x8(%ebp),%eax
   12597:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   1259a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while(*s++)
   125a1:	eb 04                	jmp    125a7 <kernel_strlen+0x26>
    {
        len++;
   125a3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(*s++)
   125a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125aa:	8d 50 01             	lea    0x1(%eax),%edx
   125ad:	89 55 fc             	mov    %edx,-0x4(%ebp)
   125b0:	0f b6 00             	movzbl (%eax),%eax
   125b3:	84 c0                	test   %al,%al
   125b5:	75 ec                	jne    125a3 <kernel_strlen+0x22>
    }
    return len;
   125b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   125ba:	c9                   	leave  
   125bb:	c3                   	ret    

000125bc <kernel_memcpy>:


void kernel_memcpy (void *dest, void *src, int size)
{
   125bc:	55                   	push   %ebp
   125bd:	89 e5                	mov    %esp,%ebp
   125bf:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src || size <= 0)
   125c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125c6:	74 40                	je     12608 <kernel_memcpy+0x4c>
   125c8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125cc:	74 3a                	je     12608 <kernel_memcpy+0x4c>
   125ce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125d2:	7e 34                	jle    12608 <kernel_memcpy+0x4c>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   125d4:	8b 45 08             	mov    0x8(%ebp),%eax
   125d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t *)src;
   125da:	8b 45 0c             	mov    0xc(%ebp),%eax
   125dd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   125e0:	eb 17                	jmp    125f9 <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   125e2:	8b 55 f8             	mov    -0x8(%ebp),%edx
   125e5:	8d 42 01             	lea    0x1(%edx),%eax
   125e8:	89 45 f8             	mov    %eax,-0x8(%ebp)
   125eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125ee:	8d 48 01             	lea    0x1(%eax),%ecx
   125f1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   125f4:	0f b6 12             	movzbl (%edx),%edx
   125f7:	88 10                	mov    %dl,(%eax)
    while(size--)
   125f9:	8b 45 10             	mov    0x10(%ebp),%eax
   125fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   125ff:	89 55 10             	mov    %edx,0x10(%ebp)
   12602:	85 c0                	test   %eax,%eax
   12604:	75 dc                	jne    125e2 <kernel_memcpy+0x26>
   12606:	eb 01                	jmp    12609 <kernel_memcpy+0x4d>
        return;
   12608:	90                   	nop
    }
}
   12609:	c9                   	leave  
   1260a:	c3                   	ret    

0001260b <kernel_memset>:

void kernel_memset (void *dest, int c, int size)
{
   1260b:	55                   	push   %ebp
   1260c:	89 e5                	mov    %esp,%ebp
   1260e:	83 ec 10             	sub    $0x10,%esp
    if(!dest || size <= 0)
   12611:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12615:	74 2b                	je     12642 <kernel_memset+0x37>
   12617:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1261b:	7e 25                	jle    12642 <kernel_memset+0x37>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   1261d:	8b 45 08             	mov    0x8(%ebp),%eax
   12620:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--)
   12623:	eb 0e                	jmp    12633 <kernel_memset+0x28>
    {
        *d++ = (uint8_t)c;
   12625:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12628:	8d 50 01             	lea    0x1(%eax),%edx
   1262b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1262e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12631:	88 10                	mov    %dl,(%eax)
    while(size--)
   12633:	8b 45 10             	mov    0x10(%ebp),%eax
   12636:	8d 50 ff             	lea    -0x1(%eax),%edx
   12639:	89 55 10             	mov    %edx,0x10(%ebp)
   1263c:	85 c0                	test   %eax,%eax
   1263e:	75 e5                	jne    12625 <kernel_memset+0x1a>
   12640:	eb 01                	jmp    12643 <kernel_memset+0x38>
        return;
   12642:	90                   	nop
    }
}
   12643:	c9                   	leave  
   12644:	c3                   	ret    

00012645 <kernel_memcmp>:

int kernel_memcmp (void *d1, void *d2, int size)
{
   12645:	55                   	push   %ebp
   12646:	89 e5                	mov    %esp,%ebp
   12648:	83 ec 10             	sub    $0x10,%esp
    if(!d1 || !d2 || !size)
   1264b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1264f:	74 0c                	je     1265d <kernel_memcmp+0x18>
   12651:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12655:	74 06                	je     1265d <kernel_memcmp+0x18>
   12657:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1265b:	75 07                	jne    12664 <kernel_memcmp+0x1f>
    {
        return 1;
   1265d:	b8 01 00 00 00       	mov    $0x1,%eax
   12662:	eb 43                	jmp    126a7 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t *)d1;
   12664:	8b 45 08             	mov    0x8(%ebp),%eax
   12667:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   1266a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1266d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   12670:	eb 23                	jmp    12695 <kernel_memcmp+0x50>
    {
        if(*p_d1++ != *p_d2++)
   12672:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12675:	8d 50 01             	lea    0x1(%eax),%edx
   12678:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1267b:	0f b6 08             	movzbl (%eax),%ecx
   1267e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12681:	8d 50 01             	lea    0x1(%eax),%edx
   12684:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12687:	0f b6 00             	movzbl (%eax),%eax
   1268a:	38 c1                	cmp    %al,%cl
   1268c:	74 07                	je     12695 <kernel_memcmp+0x50>
        {
            return 1;
   1268e:	b8 01 00 00 00       	mov    $0x1,%eax
   12693:	eb 12                	jmp    126a7 <kernel_memcmp+0x62>
    while(size--)
   12695:	8b 45 10             	mov    0x10(%ebp),%eax
   12698:	8d 50 ff             	lea    -0x1(%eax),%edx
   1269b:	89 55 10             	mov    %edx,0x10(%ebp)
   1269e:	85 c0                	test   %eax,%eax
   126a0:	75 d0                	jne    12672 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   126a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   126a7:	c9                   	leave  
   126a8:	c3                   	ret    

000126a9 <kernel_itoa>:

void kernel_itoa (char *buf, int num, int base)
{
   126a9:	55                   	push   %ebp
   126aa:	89 e5                	mov    %esp,%ebp
   126ac:	83 ec 10             	sub    $0x10,%esp
    int is_neg = 0;
   126af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    is_neg = num < 0 ? 1 : 0;
   126b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   126b9:	c1 e8 1f             	shr    $0x1f,%eax
   126bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static const char * num2ch = "0123456789abcdef";
    char *p = buf;
   126bf:	8b 45 08             	mov    0x8(%ebp),%eax
   126c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(base != 2 && base != 8 && base != 10 && base != 16)
   126c5:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   126c9:	74 1d                	je     126e8 <kernel_itoa+0x3f>
   126cb:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   126cf:	74 17                	je     126e8 <kernel_itoa+0x3f>
   126d1:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   126d5:	74 11                	je     126e8 <kernel_itoa+0x3f>
   126d7:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   126db:	74 0b                	je     126e8 <kernel_itoa+0x3f>
    {
        *p = '\0';
   126dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126e0:	c6 00 00             	movb   $0x0,(%eax)
        return;
   126e3:	e9 9e 00 00 00       	jmp    12786 <kernel_itoa+0xdd>
    }
    if(num < 0 && base == 10)
   126e8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126ec:	79 09                	jns    126f7 <kernel_itoa+0x4e>
   126ee:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   126f2:	75 03                	jne    126f7 <kernel_itoa+0x4e>
    {
        //*p++ = '-';
        num = -num;
   126f4:	f7 5d 0c             	negl   0xc(%ebp)
    }
    do{
        char ch = num2ch[num % base];
   126f7:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   126fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12700:	99                   	cltd   
   12701:	f7 7d 10             	idivl  0x10(%ebp)
   12704:	89 d0                	mov    %edx,%eax
   12706:	01 c8                	add    %ecx,%eax
   12708:	0f b6 00             	movzbl (%eax),%eax
   1270b:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   1270e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12711:	8d 50 01             	lea    0x1(%eax),%edx
   12714:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12717:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1271b:	88 10                	mov    %dl,(%eax)
        num /= base;
   1271d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12720:	99                   	cltd   
   12721:	f7 7d 10             	idivl  0x10(%ebp)
   12724:	89 45 0c             	mov    %eax,0xc(%ebp)
    }while (num);
   12727:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1272b:	75 ca                	jne    126f7 <kernel_itoa+0x4e>
    if(base == 10 && is_neg)
   1272d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12731:	75 12                	jne    12745 <kernel_itoa+0x9c>
   12733:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12737:	74 0c                	je     12745 <kernel_itoa+0x9c>
    {
        *p++ = '-';
   12739:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1273c:	8d 50 01             	lea    0x1(%eax),%edx
   1273f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12742:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    *p-- = '\0';
   12745:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12748:	8d 50 ff             	lea    -0x1(%eax),%edx
   1274b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1274e:	c6 00 00             	movb   $0x0,(%eax)

    char *start = buf;
   12751:	8b 45 08             	mov    0x8(%ebp),%eax
   12754:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p)
   12757:	eb 25                	jmp    1277e <kernel_itoa+0xd5>
    {
        char tmp = *start;
   12759:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1275c:	0f b6 00             	movzbl (%eax),%eax
   1275f:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   12762:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12765:	0f b6 10             	movzbl (%eax),%edx
   12768:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1276b:	88 10                	mov    %dl,(%eax)
        *p = tmp;
   1276d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12770:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   12774:	88 10                	mov    %dl,(%eax)
        p--;
   12776:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   1277a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p)
   1277e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12781:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   12784:	72 d3                	jb     12759 <kernel_itoa+0xb0>
    }
    
}
   12786:	c9                   	leave  
   12787:	c3                   	ret    

00012788 <kernel_sprintf>:
void kernel_sprintf (char *buf, const char *fmt, ...)
{
   12788:	55                   	push   %ebp
   12789:	89 e5                	mov    %esp,%ebp
   1278b:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   1278e:	8d 45 10             	lea    0x10(%ebp),%eax
   12791:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buf, fmt, args);
   12794:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12797:	83 ec 04             	sub    $0x4,%esp
   1279a:	50                   	push   %eax
   1279b:	ff 75 0c             	pushl  0xc(%ebp)
   1279e:	ff 75 08             	pushl  0x8(%ebp)
   127a1:	e8 06 00 00 00       	call   127ac <kernel_vsprintf>
   127a6:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   127a9:	90                   	nop
   127aa:	c9                   	leave  
   127ab:	c3                   	ret    

000127ac <kernel_vsprintf>:
void kernel_vsprintf (char *buf, const char *fmt, va_list args)
{
   127ac:	55                   	push   %ebp
   127ad:	89 e5                	mov    %esp,%ebp
   127af:	83 ec 20             	sub    $0x20,%esp
    enum{
        NORMAL,READ_FMT
    }state = NORMAL;
   127b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char * curr = buf;
   127b9:	8b 45 08             	mov    0x8(%ebp),%eax
   127bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++))
   127bf:	e9 17 01 00 00       	jmp    128db <kernel_vsprintf+0x12f>
    {
       switch(state)
   127c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127c7:	85 c0                	test   %eax,%eax
   127c9:	74 0a                	je     127d5 <kernel_vsprintf+0x29>
   127cb:	83 f8 01             	cmp    $0x1,%eax
   127ce:	74 2b                	je     127fb <kernel_vsprintf+0x4f>
   127d0:	e9 06 01 00 00       	jmp    128db <kernel_vsprintf+0x12f>
       {
        case NORMAL:
            if(ch == '%')
   127d5:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   127d9:	75 0c                	jne    127e7 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   127db:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   127e2:	e9 f4 00 00 00       	jmp    128db <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   127e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   127ea:	8d 50 01             	lea    0x1(%eax),%edx
   127ed:	89 55 f8             	mov    %edx,-0x8(%ebp)
   127f0:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   127f4:	88 10                	mov    %dl,(%eax)
            }
            break;
   127f6:	e9 e0 00 00 00       	jmp    128db <kernel_vsprintf+0x12f>
        case READ_FMT:
            if(ch == 'd')
   127fb:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   127ff:	75 31                	jne    12832 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args,int);
   12801:	8b 45 10             	mov    0x10(%ebp),%eax
   12804:	8d 50 04             	lea    0x4(%eax),%edx
   12807:	89 55 10             	mov    %edx,0x10(%ebp)
   1280a:	8b 00                	mov    (%eax),%eax
   1280c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr,num,10);
   1280f:	6a 0a                	push   $0xa
   12811:	ff 75 e4             	pushl  -0x1c(%ebp)
   12814:	ff 75 f8             	pushl  -0x8(%ebp)
   12817:	e8 8d fe ff ff       	call   126a9 <kernel_itoa>
   1281c:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1281f:	ff 75 f8             	pushl  -0x8(%ebp)
   12822:	e8 5a fd ff ff       	call   12581 <kernel_strlen>
   12827:	83 c4 04             	add    $0x4,%esp
   1282a:	01 45 f8             	add    %eax,-0x8(%ebp)
   1282d:	e9 a1 00 00 00       	jmp    128d3 <kernel_vsprintf+0x127>
            }
            else if(ch == 'x')
   12832:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12836:	75 2e                	jne    12866 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args,int);
   12838:	8b 45 10             	mov    0x10(%ebp),%eax
   1283b:	8d 50 04             	lea    0x4(%eax),%edx
   1283e:	89 55 10             	mov    %edx,0x10(%ebp)
   12841:	8b 00                	mov    (%eax),%eax
   12843:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr,num,16);
   12846:	6a 10                	push   $0x10
   12848:	ff 75 e8             	pushl  -0x18(%ebp)
   1284b:	ff 75 f8             	pushl  -0x8(%ebp)
   1284e:	e8 56 fe ff ff       	call   126a9 <kernel_itoa>
   12853:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   12856:	ff 75 f8             	pushl  -0x8(%ebp)
   12859:	e8 23 fd ff ff       	call   12581 <kernel_strlen>
   1285e:	83 c4 04             	add    $0x4,%esp
   12861:	01 45 f8             	add    %eax,-0x8(%ebp)
   12864:	eb 6d                	jmp    128d3 <kernel_vsprintf+0x127>
            }
            else if(ch == 'c')
   12866:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1286a:	75 1f                	jne    1288b <kernel_vsprintf+0xdf>
            {
                char ch = va_arg(args,int);
   1286c:	8b 45 10             	mov    0x10(%ebp),%eax
   1286f:	8d 50 04             	lea    0x4(%eax),%edx
   12872:	89 55 10             	mov    %edx,0x10(%ebp)
   12875:	8b 00                	mov    (%eax),%eax
   12877:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = ch;
   1287a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1287d:	8d 50 01             	lea    0x1(%eax),%edx
   12880:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12883:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12887:	88 10                	mov    %dl,(%eax)
   12889:	eb 48                	jmp    128d3 <kernel_vsprintf+0x127>
            }
            else if(ch == 's')
   1288b:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1288f:	75 42                	jne    128d3 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args,char *);
   12891:	8b 45 10             	mov    0x10(%ebp),%eax
   12894:	8d 50 04             	lea    0x4(%eax),%edx
   12897:	89 55 10             	mov    %edx,0x10(%ebp)
   1289a:	8b 00                	mov    (%eax),%eax
   1289c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   1289f:	ff 75 f4             	pushl  -0xc(%ebp)
   128a2:	e8 da fc ff ff       	call   12581 <kernel_strlen>
   128a7:	83 c4 04             	add    $0x4,%esp
   128aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--)
   128ad:	eb 17                	jmp    128c6 <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   128af:	8b 55 f4             	mov    -0xc(%ebp),%edx
   128b2:	8d 42 01             	lea    0x1(%edx),%eax
   128b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
   128b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128bb:	8d 48 01             	lea    0x1(%eax),%ecx
   128be:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   128c1:	0f b6 12             	movzbl (%edx),%edx
   128c4:	88 10                	mov    %dl,(%eax)
                while(len--)
   128c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   128c9:	8d 50 ff             	lea    -0x1(%eax),%edx
   128cc:	89 55 f0             	mov    %edx,-0x10(%ebp)
   128cf:	85 c0                	test   %eax,%eax
   128d1:	75 dc                	jne    128af <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   128d3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   128da:	90                   	nop
    while((ch = *fmt++))
   128db:	8b 45 0c             	mov    0xc(%ebp),%eax
   128de:	8d 50 01             	lea    0x1(%eax),%edx
   128e1:	89 55 0c             	mov    %edx,0xc(%ebp)
   128e4:	0f b6 00             	movzbl (%eax),%eax
   128e7:	88 45 ef             	mov    %al,-0x11(%ebp)
   128ea:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   128ee:	0f 85 d0 fe ff ff    	jne    127c4 <kernel_vsprintf+0x18>
       }
    }
}
   128f4:	90                   	nop
   128f5:	c9                   	leave  
   128f6:	c3                   	ret    

000128f7 <panic>:
void panic(const char *file,int line,const char *func,const char *cond)
{
   128f7:	55                   	push   %ebp
   128f8:	89 e5                	mov    %esp,%ebp
   128fa:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed: %s\n",cond);
   128fd:	83 ec 08             	sub    $0x8,%esp
   12900:	ff 75 14             	pushl  0x14(%ebp)
   12903:	68 7a 30 01 00       	push   $0x1307a
   12908:	e8 12 03 00 00       	call   12c1f <log_printf>
   1290d:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\n",file);
   12910:	83 ec 08             	sub    $0x8,%esp
   12913:	ff 75 08             	pushl  0x8(%ebp)
   12916:	68 8d 30 01 00       	push   $0x1308d
   1291b:	e8 ff 02 00 00       	call   12c1f <log_printf>
   12920:	83 c4 10             	add    $0x10,%esp
    log_printf("line: %d\n",line);
   12923:	83 ec 08             	sub    $0x8,%esp
   12926:	ff 75 0c             	pushl  0xc(%ebp)
   12929:	68 97 30 01 00       	push   $0x13097
   1292e:	e8 ec 02 00 00       	call   12c1f <log_printf>
   12933:	83 c4 10             	add    $0x10,%esp
    log_printf("function: %s\n",func);
   12936:	83 ec 08             	sub    $0x8,%esp
   12939:	ff 75 10             	pushl  0x10(%ebp)
   1293c:	68 a1 30 01 00       	push   $0x130a1
   12941:	e8 d9 02 00 00       	call   12c1f <log_printf>
   12946:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   12949:	e8 15 fb ff ff       	call   12463 <hlt>
   1294e:	eb f9                	jmp    12949 <panic+0x52>

00012950 <list_is_empty>:
{
   12950:	55                   	push   %ebp
   12951:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12953:	8b 45 08             	mov    0x8(%ebp),%eax
   12956:	8b 40 08             	mov    0x8(%eax),%eax
   12959:	85 c0                	test   %eax,%eax
   1295b:	0f 94 c0             	sete   %al
   1295e:	0f b6 c0             	movzbl %al,%eax
}
   12961:	5d                   	pop    %ebp
   12962:	c3                   	ret    

00012963 <list_init>:
#include "tools/list.h"

void list_init(list_t *list)
{
   12963:	55                   	push   %ebp
   12964:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12966:	8b 45 08             	mov    0x8(%ebp),%eax
   12969:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12970:	8b 45 08             	mov    0x8(%ebp),%eax
   12973:	8b 50 04             	mov    0x4(%eax),%edx
   12976:	8b 45 08             	mov    0x8(%ebp),%eax
   12979:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   1297b:	8b 45 08             	mov    0x8(%ebp),%eax
   1297e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12985:	90                   	nop
   12986:	5d                   	pop    %ebp
   12987:	c3                   	ret    

00012988 <list_insert_first>:

void list_insert_first(list_t * list,list_node_t * node)
{
   12988:	55                   	push   %ebp
   12989:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   1298b:	8b 45 08             	mov    0x8(%ebp),%eax
   1298e:	8b 10                	mov    (%eax),%edx
   12990:	8b 45 0c             	mov    0xc(%ebp),%eax
   12993:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   12996:	8b 45 0c             	mov    0xc(%ebp),%eax
   12999:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if(list_is_empty(list))
   1299f:	ff 75 08             	pushl  0x8(%ebp)
   129a2:	e8 a9 ff ff ff       	call   12950 <list_is_empty>
   129a7:	83 c4 04             	add    $0x4,%esp
   129aa:	85 c0                	test   %eax,%eax
   129ac:	74 15                	je     129c3 <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   129ae:	8b 45 08             	mov    0x8(%ebp),%eax
   129b1:	8b 55 0c             	mov    0xc(%ebp),%edx
   129b4:	89 10                	mov    %edx,(%eax)
   129b6:	8b 45 08             	mov    0x8(%ebp),%eax
   129b9:	8b 10                	mov    (%eax),%edx
   129bb:	8b 45 08             	mov    0x8(%ebp),%eax
   129be:	89 50 04             	mov    %edx,0x4(%eax)
   129c1:	eb 12                	jmp    129d5 <list_insert_first+0x4d>
    }
    else
    {
        list->first->pre = node;
   129c3:	8b 45 08             	mov    0x8(%ebp),%eax
   129c6:	8b 00                	mov    (%eax),%eax
   129c8:	8b 55 0c             	mov    0xc(%ebp),%edx
   129cb:	89 10                	mov    %edx,(%eax)
        list->first = node;
   129cd:	8b 45 08             	mov    0x8(%ebp),%eax
   129d0:	8b 55 0c             	mov    0xc(%ebp),%edx
   129d3:	89 10                	mov    %edx,(%eax)
    }
    list->count++;
   129d5:	8b 45 08             	mov    0x8(%ebp),%eax
   129d8:	8b 40 08             	mov    0x8(%eax),%eax
   129db:	8d 50 01             	lea    0x1(%eax),%edx
   129de:	8b 45 08             	mov    0x8(%ebp),%eax
   129e1:	89 50 08             	mov    %edx,0x8(%eax)
}
   129e4:	90                   	nop
   129e5:	c9                   	leave  
   129e6:	c3                   	ret    

000129e7 <list_insert_last>:

void list_insert_last(list_t * list,list_node_t * node)
{
   129e7:	55                   	push   %ebp
   129e8:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   129ea:	8b 45 08             	mov    0x8(%ebp),%eax
   129ed:	8b 50 04             	mov    0x4(%eax),%edx
   129f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   129f3:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   129f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   129f8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if(list_is_empty(list))
   129ff:	ff 75 08             	pushl  0x8(%ebp)
   12a02:	e8 49 ff ff ff       	call   12950 <list_is_empty>
   12a07:	83 c4 04             	add    $0x4,%esp
   12a0a:	85 c0                	test   %eax,%eax
   12a0c:	74 16                	je     12a24 <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   12a0e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a11:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a14:	89 50 04             	mov    %edx,0x4(%eax)
   12a17:	8b 45 08             	mov    0x8(%ebp),%eax
   12a1a:	8b 50 04             	mov    0x4(%eax),%edx
   12a1d:	8b 45 08             	mov    0x8(%ebp),%eax
   12a20:	89 10                	mov    %edx,(%eax)
   12a22:	eb 15                	jmp    12a39 <list_insert_last+0x52>
    }
    else
    {
        list->last->next = node;
   12a24:	8b 45 08             	mov    0x8(%ebp),%eax
   12a27:	8b 40 04             	mov    0x4(%eax),%eax
   12a2a:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a2d:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12a30:	8b 45 08             	mov    0x8(%ebp),%eax
   12a33:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a36:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list->count++;
   12a39:	8b 45 08             	mov    0x8(%ebp),%eax
   12a3c:	8b 40 08             	mov    0x8(%eax),%eax
   12a3f:	8d 50 01             	lea    0x1(%eax),%edx
   12a42:	8b 45 08             	mov    0x8(%ebp),%eax
   12a45:	89 50 08             	mov    %edx,0x8(%eax)
}
   12a48:	90                   	nop
   12a49:	c9                   	leave  
   12a4a:	c3                   	ret    

00012a4b <list_remove_first>:

list_node_t* list_remove_first(list_t * list)
{
   12a4b:	55                   	push   %ebp
   12a4c:	89 e5                	mov    %esp,%ebp
   12a4e:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list))
   12a51:	ff 75 08             	pushl  0x8(%ebp)
   12a54:	e8 f7 fe ff ff       	call   12950 <list_is_empty>
   12a59:	83 c4 04             	add    $0x4,%esp
   12a5c:	85 c0                	test   %eax,%eax
   12a5e:	74 07                	je     12a67 <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   12a60:	b8 00 00 00 00       	mov    $0x0,%eax
   12a65:	eb 59                	jmp    12ac0 <list_remove_first+0x75>
    }
    list_node_t * node = list->first;
   12a67:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6a:	8b 00                	mov    (%eax),%eax
   12a6c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = node->next;
   12a6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a72:	8b 50 04             	mov    0x4(%eax),%edx
   12a75:	8b 45 08             	mov    0x8(%ebp),%eax
   12a78:	89 10                	mov    %edx,(%eax)
    if(list->first == (list_node_t *)0)
   12a7a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a7d:	8b 00                	mov    (%eax),%eax
   12a7f:	85 c0                	test   %eax,%eax
   12a81:	75 0c                	jne    12a8f <list_remove_first+0x44>
    {
        list->last = (list_node_t *)0;
   12a83:	8b 45 08             	mov    0x8(%ebp),%eax
   12a86:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12a8d:	eb 0b                	jmp    12a9a <list_remove_first+0x4f>
    }
    else
    {
        list->first->pre = (list_node_t *)0;
   12a8f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a92:	8b 00                	mov    (%eax),%eax
   12a94:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   12a9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a9d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   12aa3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12aa6:	8b 10                	mov    (%eax),%edx
   12aa8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12aab:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   12aae:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab1:	8b 40 08             	mov    0x8(%eax),%eax
   12ab4:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ab7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aba:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12abd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12ac0:	c9                   	leave  
   12ac1:	c3                   	ret    

00012ac2 <list_remove>:

list_node_t* list_remove(list_t * list,list_node_t * node)
{
   12ac2:	55                   	push   %ebp
   12ac3:	89 e5                	mov    %esp,%ebp
    if(node == list->first)
   12ac5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac8:	8b 00                	mov    (%eax),%eax
   12aca:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12acd:	75 0b                	jne    12ada <list_remove+0x18>
    {
        list->first = node->next;
   12acf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ad2:	8b 50 04             	mov    0x4(%eax),%edx
   12ad5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad8:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last)
   12ada:	8b 45 08             	mov    0x8(%ebp),%eax
   12add:	8b 40 04             	mov    0x4(%eax),%eax
   12ae0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12ae3:	75 0b                	jne    12af0 <list_remove+0x2e>
    {
        list->last = node->pre;
   12ae5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ae8:	8b 10                	mov    (%eax),%edx
   12aea:	8b 45 08             	mov    0x8(%ebp),%eax
   12aed:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->pre)
   12af0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12af3:	8b 00                	mov    (%eax),%eax
   12af5:	85 c0                	test   %eax,%eax
   12af7:	74 0e                	je     12b07 <list_remove+0x45>
    {
        node->pre->next = node->next;
   12af9:	8b 45 0c             	mov    0xc(%ebp),%eax
   12afc:	8b 00                	mov    (%eax),%eax
   12afe:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b01:	8b 52 04             	mov    0x4(%edx),%edx
   12b04:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) 
   12b07:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b0a:	8b 40 04             	mov    0x4(%eax),%eax
   12b0d:	85 c0                	test   %eax,%eax
   12b0f:	74 0d                	je     12b1e <list_remove+0x5c>
    {
        node->next->pre = node->pre;
   12b11:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b14:	8b 40 04             	mov    0x4(%eax),%eax
   12b17:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b1a:	8b 12                	mov    (%edx),%edx
   12b1c:	89 10                	mov    %edx,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   12b1e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   12b27:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b2a:	8b 10                	mov    (%eax),%edx
   12b2c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b2f:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   12b32:	8b 45 08             	mov    0x8(%ebp),%eax
   12b35:	8b 40 08             	mov    0x8(%eax),%eax
   12b38:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b3b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3e:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12b41:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   12b44:	5d                   	pop    %ebp
   12b45:	c3                   	ret    

00012b46 <inb>:
{
   12b46:	55                   	push   %ebp
   12b47:	89 e5                	mov    %esp,%ebp
   12b49:	83 ec 14             	sub    $0x14,%esp
   12b4c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   12b53:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12b57:	89 c2                	mov    %eax,%edx
   12b59:	ec                   	in     (%dx),%al
   12b5a:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12b5d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12b61:	c9                   	leave  
   12b62:	c3                   	ret    

00012b63 <outb>:
{
   12b63:	55                   	push   %ebp
   12b64:	89 e5                	mov    %esp,%ebp
   12b66:	83 ec 08             	sub    $0x8,%esp
   12b69:	8b 55 08             	mov    0x8(%ebp),%edx
   12b6c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b6f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12b73:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   12b76:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12b7a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12b7e:	ee                   	out    %al,(%dx)
}
   12b7f:	90                   	nop
   12b80:	c9                   	leave  
   12b81:	c3                   	ret    

00012b82 <log_init>:
#include "cpu/irq.h"    
#include "ipc/mutex.h"
#define COM_PORT 0x3f8
static mutex_t log_mutex;
void log_init (void)
{
   12b82:	55                   	push   %ebp
   12b83:	89 e5                	mov    %esp,%ebp
   12b85:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&log_mutex);
   12b88:	83 ec 0c             	sub    $0xc,%esp
   12b8b:	68 c4 b0 01 00       	push   $0x1b0c4
   12b90:	e8 c1 f3 ff ff       	call   11f56 <mutex_init>
   12b95:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   12b98:	83 ec 08             	sub    $0x8,%esp
   12b9b:	6a 00                	push   $0x0
   12b9d:	68 f9 03 00 00       	push   $0x3f9
   12ba2:	e8 bc ff ff ff       	call   12b63 <outb>
   12ba7:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x80);
   12baa:	83 ec 08             	sub    $0x8,%esp
   12bad:	68 80 00 00 00       	push   $0x80
   12bb2:	68 fb 03 00 00       	push   $0x3fb
   12bb7:	e8 a7 ff ff ff       	call   12b63 <outb>
   12bbc:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 0, 0x03);
   12bbf:	83 ec 08             	sub    $0x8,%esp
   12bc2:	6a 03                	push   $0x3
   12bc4:	68 f8 03 00 00       	push   $0x3f8
   12bc9:	e8 95 ff ff ff       	call   12b63 <outb>
   12bce:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   12bd1:	83 ec 08             	sub    $0x8,%esp
   12bd4:	6a 00                	push   $0x0
   12bd6:	68 f9 03 00 00       	push   $0x3f9
   12bdb:	e8 83 ff ff ff       	call   12b63 <outb>
   12be0:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x03);
   12be3:	83 ec 08             	sub    $0x8,%esp
   12be6:	6a 03                	push   $0x3
   12be8:	68 fb 03 00 00       	push   $0x3fb
   12bed:	e8 71 ff ff ff       	call   12b63 <outb>
   12bf2:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 2, 0xC7);
   12bf5:	83 ec 08             	sub    $0x8,%esp
   12bf8:	68 c7 00 00 00       	push   $0xc7
   12bfd:	68 fa 03 00 00       	push   $0x3fa
   12c02:	e8 5c ff ff ff       	call   12b63 <outb>
   12c07:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 4, 0x0F);
   12c0a:	83 ec 08             	sub    $0x8,%esp
   12c0d:	6a 0f                	push   $0xf
   12c0f:	68 fc 03 00 00       	push   $0x3fc
   12c14:	e8 4a ff ff ff       	call   12b63 <outb>
   12c19:	83 c4 10             	add    $0x10,%esp
}
   12c1c:	90                   	nop
   12c1d:	c9                   	leave  
   12c1e:	c3                   	ret    

00012c1f <log_printf>:


void log_printf (const char *fmt, ...)
{
   12c1f:	55                   	push   %ebp
   12c20:	89 e5                	mov    %esp,%ebp
   12c22:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    kernel_memset(buf, 0, sizeof(buf));
   12c28:	83 ec 04             	sub    $0x4,%esp
   12c2b:	68 80 00 00 00       	push   $0x80
   12c30:	6a 00                	push   $0x0
   12c32:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12c38:	50                   	push   %eax
   12c39:	e8 cd f9 ff ff       	call   1260b <kernel_memset>
   12c3e:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12c41:	8d 45 0c             	lea    0xc(%ebp),%eax
   12c44:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(buf, fmt, args);
   12c4a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12c50:	83 ec 04             	sub    $0x4,%esp
   12c53:	50                   	push   %eax
   12c54:	ff 75 08             	pushl  0x8(%ebp)
   12c57:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12c5d:	50                   	push   %eax
   12c5e:	e8 49 fb ff ff       	call   127ac <kernel_vsprintf>
   12c63:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&log_mutex);
   12c66:	83 ec 0c             	sub    $0xc,%esp
   12c69:	68 c4 b0 01 00       	push   $0x1b0c4
   12c6e:	e8 0f f3 ff ff       	call   11f82 <mutex_lock>
   12c73:	83 c4 10             	add    $0x10,%esp
    const char *p = buf;
   12c76:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12c7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   12c7f:	eb 39                	jmp    12cba <log_printf+0x9b>
    {
        while ((inb(COM_PORT + 5) & (1 << 6)) == 0);
   12c81:	90                   	nop
   12c82:	83 ec 0c             	sub    $0xc,%esp
   12c85:	68 fd 03 00 00       	push   $0x3fd
   12c8a:	e8 b7 fe ff ff       	call   12b46 <inb>
   12c8f:	83 c4 10             	add    $0x10,%esp
   12c92:	0f b6 c0             	movzbl %al,%eax
   12c95:	83 e0 40             	and    $0x40,%eax
   12c98:	85 c0                	test   %eax,%eax
   12c9a:	74 e6                	je     12c82 <log_printf+0x63>
        outb(COM_PORT, *p);
   12c9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c9f:	0f b6 00             	movzbl (%eax),%eax
   12ca2:	0f b6 c0             	movzbl %al,%eax
   12ca5:	83 ec 08             	sub    $0x8,%esp
   12ca8:	50                   	push   %eax
   12ca9:	68 f8 03 00 00       	push   $0x3f8
   12cae:	e8 b0 fe ff ff       	call   12b63 <outb>
   12cb3:	83 c4 10             	add    $0x10,%esp
        p++;
   12cb6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    while (*p != '\0')
   12cba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12cbd:	0f b6 00             	movzbl (%eax),%eax
   12cc0:	84 c0                	test   %al,%al
   12cc2:	75 bd                	jne    12c81 <log_printf+0x62>
    }

    outb(COM_PORT, '\r');
   12cc4:	83 ec 08             	sub    $0x8,%esp
   12cc7:	6a 0d                	push   $0xd
   12cc9:	68 f8 03 00 00       	push   $0x3f8
   12cce:	e8 90 fe ff ff       	call   12b63 <outb>
   12cd3:	83 c4 10             	add    $0x10,%esp
    //outb(COM_PORT, '\n');
    mutex_unlock(&log_mutex);
   12cd6:	83 ec 0c             	sub    $0xc,%esp
   12cd9:	68 c4 b0 01 00       	push   $0x1b0c4
   12cde:	e8 32 f3 ff ff       	call   12015 <mutex_unlock>
   12ce3:	83 c4 10             	add    $0x10,%esp
}
   12ce6:	90                   	nop
   12ce7:	c9                   	leave  
   12ce8:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
    .text
	.global first_task_entry
	.extern first_task_main
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
	
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
#include "core/task.h"
#include "tools/log.h"

int first_task_main()
{
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 08             	sub    $0x8,%esp
    for(;;)
    {
        log_printf("first task\n");
80000016:	83 ec 0c             	sub    $0xc,%esp
80000019:	68 38 00 00 80       	push   $0x80000038
8000001e:	e8 fc 2b 01 80       	call   12c1f <log_printf>
80000023:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
80000026:	83 ec 0c             	sub    $0xc,%esp
80000029:	68 e8 03 00 00       	push   $0x3e8
8000002e:	e8 3e 12 01 80       	call   11271 <sys_sleep>
80000033:	83 c4 10             	add    $0x10,%esp
        log_printf("first task\n");
80000036:	eb de                	jmp    80000016 <first_task_main+0x6>
80000038:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
8000003e:	74 61                	je     800000a1 <first_task_main+0x91>
80000040:	73 6b                	jae    800000ad <first_task_main+0x9d>
80000042:	0a 00                	or     (%eax),%al
