
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000030e4 memsz 0x000030e4 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006e60 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001ae60 align 2**12
         filesz 0x000011bb memsz 0x000011bb flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d5d  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000384  00012d60  00012d60  00003d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005e60  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   000011bb  80000000  0001ae60  00006000  2**5
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001be8  00000000  00000000  000071bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004916  00000000  00000000  00008da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129c  00000000  00000000  0000d6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000e958  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001215  00000000  00000000  0000eb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000fd4d  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001380  00000000  00000000  0000fd60  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012d60 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 source/kernel/CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
0001038b l       .text	00000000 skip_save_tss
00010396 l       .text	00000000 switch_to_kernel_task
000103da l       .text	00000000 switch_to_user_task
000103a2 l       .text	00000000 skip_page_dir_kernel
000103e6 l       .text	00000000 skip_page_dir_user
00010487 l       .text	00000000 skip_page_dir_int
0001048e l       .text	00000000 modify_for_kernel
000104b1 l       .text	00000000 modify_for_user
000104e3 l       .text	00000000 restore_registers
00000000 l    df *ABS*	00000000 memory.c
000104fc l     F .text	0000000d down2
00010509 l     F .text	00000017 up2
00010520 l     F .text	0000000c write_cr3
0001052c l     F .text	0000000b pde_index
00010537 l     F .text	00000010 pte_index
00010547 l     F .text	00000010 pde_paddr
00010557 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010568 l     F .text	00000055 addr_alloc_init
000105bd l     F .text	00000067 addr_alloc_page
00010624 l     F .text	00000062 addr_free_page
000106ec l     F .text	0000003a total_mem_size
00014000 l     O .data	00000040 kernel_map.2214
00000000 l    df *ABS*	00000000 task.c
00010ac7 l     F .text	0000001b list_node_init
00010ae2 l     F .text	0000000b list_node_next
00010aed l     F .text	0000000b list_count
00010af8 l     F .text	0000000a list_first
00010b02 l     F .text	00000011 read_cr3
00010b13 l     F .text	0000000c write_cr3
00010b1f l     F .text	00000007 hlt
00010b26 l     F .text	00000017 write_tr
00017020 l     O .bss	000001cc task_manager
00017200 l     O .bss	00001000 idle_task_stack
00010b3d l     F .text	000000cf tss_init
00010dc4 l     F .text	0000000a idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
0001141b l     F .text	00000028 lgdt
00011443 l     F .text	0000001a far_jump
00018200 l     O .bss	00000800 gdt_table
00018a00 l     O .bss	00000014 gdt_mutex
00000000 l    df *ABS*	00000000 irq.c
0001166a l     F .text	0000001d inb
00011687 l     F .text	0000001f outb
000116a6 l     F .text	00000007 cli
000116ad l     F .text	00000007 sti
000116b4 l     F .text	00000028 lidt
000116dc l     F .text	00000007 hlt
000116e3 l     F .text	00000010 read_eflags
000116f3 l     F .text	0000000b write_eflags
00018a20 l     O .bss	00000400 idt_table
000116fe l     F .text	000000e3 dump_core_regs
000117e1 l     F .text	0000003e do_default_handler
00011a6b l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00011e7e l     F .text	0000001f outb
00018e20 l     O .bss	00000004 sys_tick
00011ec5 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00018e24 l     O .bss	00000010 sem
00018e34 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mutex.c
00011fc9 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
0001214a l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000124d7 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1917
00000000 l    df *ABS*	00000000 list.c
000129c4 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012bba l     F .text	0000001d inb
00012bd7 l     F .text	0000001f outb
00018e48 l     O .bss	00000014 log_mutex
00000000 l    df *ABS*	00000000 first_task.c
800000c0 l     O .first_task	00001000 init_task_stack
800010c0 l     O .first_task	000000c8 init_task
00011a17 g     F .text	0000001c do_handler_simd_floating_point
000122f0 g     F .text	0000003e bitmap_get_bit
00012630 g     F .text	0000004f kernel_memcpy
00010fba g     F .text	0000000a task_current
00011e1f g     F .text	0000000b irq_enable_global
000111ca g     F .text	0000003a mmu_set_page_dir_task
00012a5b g     F .text	00000064 list_insert_last
00011953 g     F .text	0000001c do_handler_segment_not_present
00010f5a g     F .text	00000035 task_set_ready
00012402 g     F .text	0000001b bitmap_is_set
0001267f g     F .text	0000003a kernel_memset
000100ac g       .text	00000000 exception_handler_nmi
00011638 g     F .text	0000001e cpu_init
00012bf6 g     F .text	0000009d log_init
00011f8f g     F .text	0000003a init_main
00010233 g       .text	00000000 exception_handler_alignment_check
000102ad g       .text	00000000 exception_handler_security
00011204 g     F .text	0000005c do_schedule_switch
000124de g     F .text	00000033 kernel_strcpy
00017000 g     O .bss	00000004 need_reschedule
00014000 g       .data	00000000 s_data
00011cfe g     F .text	0000008b irq_enable
0001004f g       .text	00000000 exception_handler_unknown
00010423 g       .text	00000000 quick_switch
000100cb g       .text	00000000 exception_handler_breakpoint
000118e3 g     F .text	0000001c do_handler_invalid_op
000118ab g     F .text	0000001c do_handler_overflow
0001026f g       .text	00000000 exception_handler_simd_floating_point
000119df g     F .text	0000001c do_handler_alignment_check
000107dd g     F .text	00000063 memory_create_map
000101da g       .text	00000000 exception_handler_general_protection
0001198b g     F .text	0000001c do_handler_general_protection
0001043a g       .text	00000000 get_full_context
00012265 g     F .text	00000029 sem_count
80000015 g     F .first_task	00000095 first_task_main
0001183b g     F .text	0000001c do_handler_divider
0001232e g     F .text	000000d4 bitmap_set_bit
0001191b g     F .text	0000001c do_handler_double_fault
80000010 g     F .first_task	00000005 init_task_entry
000119a7 g     F .text	0000001c do_handler_page_fault
00010166 g       .text	00000000 exception_handler_double_fault
00011e2a g     F .text	0000002b pic_send_eoi
00010f50 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00012178 g     F .text	0000006b sem_wait
00010aa5 g     F .text	00000022 memory_alloc_page_for
00011a4f g     F .text	0000001c do_handler_security
000101bd g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100ea g       .text	00000000 exception_handler_overflow
000102ca g       .text	00000000 simple_switch
0001002b g       .text	00000000 exception_handler_time
00011857 g     F .text	0000001c do_handler_debug
00018e60 g     O .bss	00002000 stack
00010f46 g     F .text	0000000a task_is_need_reschedule
000112bb g     F .text	0000005d sys_sleep
0001ae60 g       *ABS*	00000000 s_first_task
00010ce8 g     F .text	000000dc user_task_init
00010a03 g     F .text	000000a2 memory_alloc_for_page_dir
00011075 g     F .text	00000013 schedule_switch
0001032f g       .text	00000000 universal_task_switch
000121e3 g     F .text	00000082 sem_notify
00010183 g       .text	00000000 exception_handler_invalid_tss
00010e99 g     F .text	00000099 task_first_init
000119fb g     F .text	0000001c do_handler_machine_check
00010686 g     F .text	00000066 show_mem_info
00011592 g     F .text	00000039 gdt_free_desc
000129fc g     F .text	0000005f list_insert_first
0001129b g     F .text	00000020 task_set_wakeup
0001006e g       .text	00000000 exception_handler_divider
00012511 g     F .text	0000006a kernel_strncpy
00011e14 g     F .text	0000000b irq_disable_global
00010fc4 g     F .text	00000061 sys_sched_yield
0001c01b g       *ABS*	00000000 mem_free_start
00011f3d g     F .text	00000030 kernel_init
00012155 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00012820 g     F .text	0000014b kernel_vsprintf
00010f32 g     F .text	0000000a get_from_task
0001ae60 g       .bss	00000000 e_data
00012000 g     F .text	00000090 mutex_lock
00010250 g       .text	00000000 exception_handler_machine_check
00010f3c g     F .text	0000000a get_to_task
00011937 g     F .text	0000001c do_handler_invalid_tss
00010301 g       .text	00000000 create_and_switch_user
00000000 g       .text	00000000 kernel_base
0001c01b g       *ABS*	00000000 e_first_task
00011260 g     F .text	0000003b task_set_sleep
0001296b g     F .text	00000059 panic
00011cbe g     F .text	00000040 irq_install
000115cb g     F .text	0000006d init_gdt
00011873 g     F .text	0000001c do_handler_nmi
00011e55 g     F .text	00000018 irq_enter_protection
00011fd4 g     F .text	0000002c mutex_init
0001028e g       .text	00000000 exception_handler_virtualization
00011d89 g     F .text	0000008b irq_disable
000118ff g     F .text	0000001c do_handler_device_not_available
0001228e g     F .text	00000016 bitmap_byte_count
00011088 g     F .text	00000065 task_dispatch
00011f6d g     F .text	00000022 move_to_first_task
00011656 g     F .text	00000014 switch_to_tss
000118c7 g     F .text	0000001c do_handler_bounds
00010c0c g     F .text	000000dc kernel_task_init
00011025 g     F .text	00000050 task_next_run
000126b9 g     F .text	00000064 kernel_memcmp
000102e1 g       .text	00000000 manual_switch_to_user
00010840 g     F .text	000000a7 create_kernel_table
000129d7 g     F .text	00000025 list_init
000101f7 g       .text	00000000 exception_handler_page_fault
00010f8f g     F .text	0000002b task_set_block
0001181f g     F .text	0000001c do_handler_unknown
00011afe g     F .text	000001c0 irq_init
00012090 g     F .text	000000ba mutex_unlock
00011a33 g     F .text	0000001c do_handler_virtualization
00011e6d g     F .text	00000011 irq_leave_protection
000119c3 g     F .text	0000001c do_handler_x87_floating_point
000125f5 g     F .text	0000003b kernel_strlen
0001008d g       .text	00000000 exception_handler_debug
0001145d g     F .text	00000083 segment_desc_set
00010128 g       .text	00000000 exception_handler_invalid_op
00012abf g     F .text	00000077 list_remove_first
000130e4 g       .rodata	00000000 e_text
0001257b g     F .text	0000007a kernel_strncmp
000122a4 g     F .text	0000004c bitmap_init
000101a0 g       .text	00000000 exception_handler_segment_not_present
0001241d g     F .text	000000ba bitmap_alloc_nbits
00010dce g     F .text	000000cb task_manager_init
000110ed g     F .text	000000dd task_time_tick
0001096c g     F .text	00000097 memory_init
0001196f g     F .text	0000001c do_handler_stack_segment_fault
0001188f g     F .text	0000001c do_handler_breakpoint
00011318 g     F .text	00000103 schedule_next_task
000108e7 g     F .text	00000085 memory_create_user_space
00012c93 g     F .text	000000ca log_printf
00010214 g       .text	00000000 exception_handler_x87_floating_point
000127fc g     F .text	00000024 kernel_sprintf
00011527 g     F .text	0000006b gdt_alloc_desc
0001271d g     F .text	000000df kernel_itoa
00012b36 g     F .text	00000084 list_remove
00010473 g       .text	00000000 switch_from_interrupt
000114e0 g     F .text	00000047 gate_desc_set
00010109 g       .text	00000000 exception_handler_bounds
00010147 g       .text	00000000 exception_handler_device_not_available
00010726 g     F .text	000000b7 find_pte
00011e9d g     F .text	00000028 do_handler_time
00011f25 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .global _start
    .extern init_main
    .extern need_reschedule
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax

    push %eax 
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 31 1f 00 00       	call   11f3d <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   10019:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001b:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001d:	8e e8                	mov    %eax,%gs
    mov %ax, %ss    
   1001f:	8e d0                	mov    %eax,%ss
    
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 60 ae 01 00       	mov    $0x1ae60,%esp
    jmp init_main
   10026:	e9 64 1f 00 00       	jmp    11f8f <init_main>

0001002b <exception_handler_time>:

.text
    .extern do_handler_time
    .global exception_handler_time
exception_handler_time:
    push $0
   1002b:	6a 00                	push   $0x0

    push $0x20
   1002d:	6a 20                	push   $0x20
    pusha
   1002f:	60                   	pusha  
    push %ds
   10030:	1e                   	push   %ds
    push %es
   10031:	06                   	push   %es
    push %fs
   10032:	0f a0                	push   %fs
    push %gs
   10034:	0f a8                	push   %gs
    push %esp
   10036:	54                   	push   %esp
    call do_handler_time
   10037:	e8 61 1e 00 00       	call   11e9d <do_handler_time>
    add $(1*4), %esp
   1003c:	83 c4 04             	add    $0x4,%esp
    pop %gs
   1003f:	0f a9                	pop    %gs
    pop %fs
   10041:	0f a1                	pop    %fs
    pop %es
   10043:	07                   	pop    %es
    pop %ds
   10044:	1f                   	pop    %ds
    popa
   10045:	61                   	popa   

    add $(2*4), %esp
   10046:	83 c4 08             	add    $0x8,%esp
    call do_schedule_switch
   10049:	e8 b6 11 00 00       	call   11204 <do_schedule_switch>

    iret 
   1004e:	cf                   	iret   

0001004f <exception_handler_unknown>:

exception_handler unknown,-1,0
   1004f:	6a 00                	push   $0x0
   10051:	6a ff                	push   $0xffffffff
   10053:	60                   	pusha  
   10054:	1e                   	push   %ds
   10055:	06                   	push   %es
   10056:	0f a0                	push   %fs
   10058:	0f a8                	push   %gs
   1005a:	54                   	push   %esp
   1005b:	e8 bf 17 00 00       	call   1181f <do_handler_unknown>
   10060:	83 c4 04             	add    $0x4,%esp
   10063:	0f a9                	pop    %gs
   10065:	0f a1                	pop    %fs
   10067:	07                   	pop    %es
   10068:	1f                   	pop    %ds
   10069:	61                   	popa   
   1006a:	83 c4 08             	add    $0x8,%esp
   1006d:	cf                   	iret   

0001006e <exception_handler_divider>:
exception_handler divider,0,0
   1006e:	6a 00                	push   $0x0
   10070:	6a 00                	push   $0x0
   10072:	60                   	pusha  
   10073:	1e                   	push   %ds
   10074:	06                   	push   %es
   10075:	0f a0                	push   %fs
   10077:	0f a8                	push   %gs
   10079:	54                   	push   %esp
   1007a:	e8 bc 17 00 00       	call   1183b <do_handler_divider>
   1007f:	83 c4 04             	add    $0x4,%esp
   10082:	0f a9                	pop    %gs
   10084:	0f a1                	pop    %fs
   10086:	07                   	pop    %es
   10087:	1f                   	pop    %ds
   10088:	61                   	popa   
   10089:	83 c4 08             	add    $0x8,%esp
   1008c:	cf                   	iret   

0001008d <exception_handler_debug>:
exception_handler debug,1,0
   1008d:	6a 00                	push   $0x0
   1008f:	6a 01                	push   $0x1
   10091:	60                   	pusha  
   10092:	1e                   	push   %ds
   10093:	06                   	push   %es
   10094:	0f a0                	push   %fs
   10096:	0f a8                	push   %gs
   10098:	54                   	push   %esp
   10099:	e8 b9 17 00 00       	call   11857 <do_handler_debug>
   1009e:	83 c4 04             	add    $0x4,%esp
   100a1:	0f a9                	pop    %gs
   100a3:	0f a1                	pop    %fs
   100a5:	07                   	pop    %es
   100a6:	1f                   	pop    %ds
   100a7:	61                   	popa   
   100a8:	83 c4 08             	add    $0x8,%esp
   100ab:	cf                   	iret   

000100ac <exception_handler_nmi>:
exception_handler nmi,2,0
   100ac:	6a 00                	push   $0x0
   100ae:	6a 02                	push   $0x2
   100b0:	60                   	pusha  
   100b1:	1e                   	push   %ds
   100b2:	06                   	push   %es
   100b3:	0f a0                	push   %fs
   100b5:	0f a8                	push   %gs
   100b7:	54                   	push   %esp
   100b8:	e8 b6 17 00 00       	call   11873 <do_handler_nmi>
   100bd:	83 c4 04             	add    $0x4,%esp
   100c0:	0f a9                	pop    %gs
   100c2:	0f a1                	pop    %fs
   100c4:	07                   	pop    %es
   100c5:	1f                   	pop    %ds
   100c6:	61                   	popa   
   100c7:	83 c4 08             	add    $0x8,%esp
   100ca:	cf                   	iret   

000100cb <exception_handler_breakpoint>:
exception_handler breakpoint,3,0
   100cb:	6a 00                	push   $0x0
   100cd:	6a 03                	push   $0x3
   100cf:	60                   	pusha  
   100d0:	1e                   	push   %ds
   100d1:	06                   	push   %es
   100d2:	0f a0                	push   %fs
   100d4:	0f a8                	push   %gs
   100d6:	54                   	push   %esp
   100d7:	e8 b3 17 00 00       	call   1188f <do_handler_breakpoint>
   100dc:	83 c4 04             	add    $0x4,%esp
   100df:	0f a9                	pop    %gs
   100e1:	0f a1                	pop    %fs
   100e3:	07                   	pop    %es
   100e4:	1f                   	pop    %ds
   100e5:	61                   	popa   
   100e6:	83 c4 08             	add    $0x8,%esp
   100e9:	cf                   	iret   

000100ea <exception_handler_overflow>:
exception_handler overflow,4,0
   100ea:	6a 00                	push   $0x0
   100ec:	6a 04                	push   $0x4
   100ee:	60                   	pusha  
   100ef:	1e                   	push   %ds
   100f0:	06                   	push   %es
   100f1:	0f a0                	push   %fs
   100f3:	0f a8                	push   %gs
   100f5:	54                   	push   %esp
   100f6:	e8 b0 17 00 00       	call   118ab <do_handler_overflow>
   100fb:	83 c4 04             	add    $0x4,%esp
   100fe:	0f a9                	pop    %gs
   10100:	0f a1                	pop    %fs
   10102:	07                   	pop    %es
   10103:	1f                   	pop    %ds
   10104:	61                   	popa   
   10105:	83 c4 08             	add    $0x8,%esp
   10108:	cf                   	iret   

00010109 <exception_handler_bounds>:
exception_handler bounds,5,0
   10109:	6a 00                	push   $0x0
   1010b:	6a 05                	push   $0x5
   1010d:	60                   	pusha  
   1010e:	1e                   	push   %ds
   1010f:	06                   	push   %es
   10110:	0f a0                	push   %fs
   10112:	0f a8                	push   %gs
   10114:	54                   	push   %esp
   10115:	e8 ad 17 00 00       	call   118c7 <do_handler_bounds>
   1011a:	83 c4 04             	add    $0x4,%esp
   1011d:	0f a9                	pop    %gs
   1011f:	0f a1                	pop    %fs
   10121:	07                   	pop    %es
   10122:	1f                   	pop    %ds
   10123:	61                   	popa   
   10124:	83 c4 08             	add    $0x8,%esp
   10127:	cf                   	iret   

00010128 <exception_handler_invalid_op>:
exception_handler invalid_op,6,0
   10128:	6a 00                	push   $0x0
   1012a:	6a 06                	push   $0x6
   1012c:	60                   	pusha  
   1012d:	1e                   	push   %ds
   1012e:	06                   	push   %es
   1012f:	0f a0                	push   %fs
   10131:	0f a8                	push   %gs
   10133:	54                   	push   %esp
   10134:	e8 aa 17 00 00       	call   118e3 <do_handler_invalid_op>
   10139:	83 c4 04             	add    $0x4,%esp
   1013c:	0f a9                	pop    %gs
   1013e:	0f a1                	pop    %fs
   10140:	07                   	pop    %es
   10141:	1f                   	pop    %ds
   10142:	61                   	popa   
   10143:	83 c4 08             	add    $0x8,%esp
   10146:	cf                   	iret   

00010147 <exception_handler_device_not_available>:
exception_handler device_not_available,7,0
   10147:	6a 00                	push   $0x0
   10149:	6a 07                	push   $0x7
   1014b:	60                   	pusha  
   1014c:	1e                   	push   %ds
   1014d:	06                   	push   %es
   1014e:	0f a0                	push   %fs
   10150:	0f a8                	push   %gs
   10152:	54                   	push   %esp
   10153:	e8 a7 17 00 00       	call   118ff <do_handler_device_not_available>
   10158:	83 c4 04             	add    $0x4,%esp
   1015b:	0f a9                	pop    %gs
   1015d:	0f a1                	pop    %fs
   1015f:	07                   	pop    %es
   10160:	1f                   	pop    %ds
   10161:	61                   	popa   
   10162:	83 c4 08             	add    $0x8,%esp
   10165:	cf                   	iret   

00010166 <exception_handler_double_fault>:
exception_handler double_fault,8,1
   10166:	6a 08                	push   $0x8
   10168:	60                   	pusha  
   10169:	1e                   	push   %ds
   1016a:	06                   	push   %es
   1016b:	0f a0                	push   %fs
   1016d:	0f a8                	push   %gs
   1016f:	54                   	push   %esp
   10170:	e8 a6 17 00 00       	call   1191b <do_handler_double_fault>
   10175:	83 c4 04             	add    $0x4,%esp
   10178:	0f a9                	pop    %gs
   1017a:	0f a1                	pop    %fs
   1017c:	07                   	pop    %es
   1017d:	1f                   	pop    %ds
   1017e:	61                   	popa   
   1017f:	83 c4 08             	add    $0x8,%esp
   10182:	cf                   	iret   

00010183 <exception_handler_invalid_tss>:

exception_handler invalid_tss,10,1
   10183:	6a 0a                	push   $0xa
   10185:	60                   	pusha  
   10186:	1e                   	push   %ds
   10187:	06                   	push   %es
   10188:	0f a0                	push   %fs
   1018a:	0f a8                	push   %gs
   1018c:	54                   	push   %esp
   1018d:	e8 a5 17 00 00       	call   11937 <do_handler_invalid_tss>
   10192:	83 c4 04             	add    $0x4,%esp
   10195:	0f a9                	pop    %gs
   10197:	0f a1                	pop    %fs
   10199:	07                   	pop    %es
   1019a:	1f                   	pop    %ds
   1019b:	61                   	popa   
   1019c:	83 c4 08             	add    $0x8,%esp
   1019f:	cf                   	iret   

000101a0 <exception_handler_segment_not_present>:
exception_handler segment_not_present,11,1
   101a0:	6a 0b                	push   $0xb
   101a2:	60                   	pusha  
   101a3:	1e                   	push   %ds
   101a4:	06                   	push   %es
   101a5:	0f a0                	push   %fs
   101a7:	0f a8                	push   %gs
   101a9:	54                   	push   %esp
   101aa:	e8 a4 17 00 00       	call   11953 <do_handler_segment_not_present>
   101af:	83 c4 04             	add    $0x4,%esp
   101b2:	0f a9                	pop    %gs
   101b4:	0f a1                	pop    %fs
   101b6:	07                   	pop    %es
   101b7:	1f                   	pop    %ds
   101b8:	61                   	popa   
   101b9:	83 c4 08             	add    $0x8,%esp
   101bc:	cf                   	iret   

000101bd <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,12,1
   101bd:	6a 0c                	push   $0xc
   101bf:	60                   	pusha  
   101c0:	1e                   	push   %ds
   101c1:	06                   	push   %es
   101c2:	0f a0                	push   %fs
   101c4:	0f a8                	push   %gs
   101c6:	54                   	push   %esp
   101c7:	e8 a3 17 00 00       	call   1196f <do_handler_stack_segment_fault>
   101cc:	83 c4 04             	add    $0x4,%esp
   101cf:	0f a9                	pop    %gs
   101d1:	0f a1                	pop    %fs
   101d3:	07                   	pop    %es
   101d4:	1f                   	pop    %ds
   101d5:	61                   	popa   
   101d6:	83 c4 08             	add    $0x8,%esp
   101d9:	cf                   	iret   

000101da <exception_handler_general_protection>:
exception_handler general_protection,13,1
   101da:	6a 0d                	push   $0xd
   101dc:	60                   	pusha  
   101dd:	1e                   	push   %ds
   101de:	06                   	push   %es
   101df:	0f a0                	push   %fs
   101e1:	0f a8                	push   %gs
   101e3:	54                   	push   %esp
   101e4:	e8 a2 17 00 00       	call   1198b <do_handler_general_protection>
   101e9:	83 c4 04             	add    $0x4,%esp
   101ec:	0f a9                	pop    %gs
   101ee:	0f a1                	pop    %fs
   101f0:	07                   	pop    %es
   101f1:	1f                   	pop    %ds
   101f2:	61                   	popa   
   101f3:	83 c4 08             	add    $0x8,%esp
   101f6:	cf                   	iret   

000101f7 <exception_handler_page_fault>:
exception_handler page_fault,14,1
   101f7:	6a 0e                	push   $0xe
   101f9:	60                   	pusha  
   101fa:	1e                   	push   %ds
   101fb:	06                   	push   %es
   101fc:	0f a0                	push   %fs
   101fe:	0f a8                	push   %gs
   10200:	54                   	push   %esp
   10201:	e8 a1 17 00 00       	call   119a7 <do_handler_page_fault>
   10206:	83 c4 04             	add    $0x4,%esp
   10209:	0f a9                	pop    %gs
   1020b:	0f a1                	pop    %fs
   1020d:	07                   	pop    %es
   1020e:	1f                   	pop    %ds
   1020f:	61                   	popa   
   10210:	83 c4 08             	add    $0x8,%esp
   10213:	cf                   	iret   

00010214 <exception_handler_x87_floating_point>:
exception_handler x87_floating_point,16,0
   10214:	6a 00                	push   $0x0
   10216:	6a 10                	push   $0x10
   10218:	60                   	pusha  
   10219:	1e                   	push   %ds
   1021a:	06                   	push   %es
   1021b:	0f a0                	push   %fs
   1021d:	0f a8                	push   %gs
   1021f:	54                   	push   %esp
   10220:	e8 9e 17 00 00       	call   119c3 <do_handler_x87_floating_point>
   10225:	83 c4 04             	add    $0x4,%esp
   10228:	0f a9                	pop    %gs
   1022a:	0f a1                	pop    %fs
   1022c:	07                   	pop    %es
   1022d:	1f                   	pop    %ds
   1022e:	61                   	popa   
   1022f:	83 c4 08             	add    $0x8,%esp
   10232:	cf                   	iret   

00010233 <exception_handler_alignment_check>:
exception_handler alignment_check,17,1
   10233:	6a 11                	push   $0x11
   10235:	60                   	pusha  
   10236:	1e                   	push   %ds
   10237:	06                   	push   %es
   10238:	0f a0                	push   %fs
   1023a:	0f a8                	push   %gs
   1023c:	54                   	push   %esp
   1023d:	e8 9d 17 00 00       	call   119df <do_handler_alignment_check>
   10242:	83 c4 04             	add    $0x4,%esp
   10245:	0f a9                	pop    %gs
   10247:	0f a1                	pop    %fs
   10249:	07                   	pop    %es
   1024a:	1f                   	pop    %ds
   1024b:	61                   	popa   
   1024c:	83 c4 08             	add    $0x8,%esp
   1024f:	cf                   	iret   

00010250 <exception_handler_machine_check>:
exception_handler machine_check,18,0
   10250:	6a 00                	push   $0x0
   10252:	6a 12                	push   $0x12
   10254:	60                   	pusha  
   10255:	1e                   	push   %ds
   10256:	06                   	push   %es
   10257:	0f a0                	push   %fs
   10259:	0f a8                	push   %gs
   1025b:	54                   	push   %esp
   1025c:	e8 9a 17 00 00       	call   119fb <do_handler_machine_check>
   10261:	83 c4 04             	add    $0x4,%esp
   10264:	0f a9                	pop    %gs
   10266:	0f a1                	pop    %fs
   10268:	07                   	pop    %es
   10269:	1f                   	pop    %ds
   1026a:	61                   	popa   
   1026b:	83 c4 08             	add    $0x8,%esp
   1026e:	cf                   	iret   

0001026f <exception_handler_simd_floating_point>:
exception_handler simd_floating_point,19,0
   1026f:	6a 00                	push   $0x0
   10271:	6a 13                	push   $0x13
   10273:	60                   	pusha  
   10274:	1e                   	push   %ds
   10275:	06                   	push   %es
   10276:	0f a0                	push   %fs
   10278:	0f a8                	push   %gs
   1027a:	54                   	push   %esp
   1027b:	e8 97 17 00 00       	call   11a17 <do_handler_simd_floating_point>
   10280:	83 c4 04             	add    $0x4,%esp
   10283:	0f a9                	pop    %gs
   10285:	0f a1                	pop    %fs
   10287:	07                   	pop    %es
   10288:	1f                   	pop    %ds
   10289:	61                   	popa   
   1028a:	83 c4 08             	add    $0x8,%esp
   1028d:	cf                   	iret   

0001028e <exception_handler_virtualization>:
exception_handler virtualization,20,0
   1028e:	6a 00                	push   $0x0
   10290:	6a 14                	push   $0x14
   10292:	60                   	pusha  
   10293:	1e                   	push   %ds
   10294:	06                   	push   %es
   10295:	0f a0                	push   %fs
   10297:	0f a8                	push   %gs
   10299:	54                   	push   %esp
   1029a:	e8 94 17 00 00       	call   11a33 <do_handler_virtualization>
   1029f:	83 c4 04             	add    $0x4,%esp
   102a2:	0f a9                	pop    %gs
   102a4:	0f a1                	pop    %fs
   102a6:	07                   	pop    %es
   102a7:	1f                   	pop    %ds
   102a8:	61                   	popa   
   102a9:	83 c4 08             	add    $0x8,%esp
   102ac:	cf                   	iret   

000102ad <exception_handler_security>:
exception_handler security,21,1
   102ad:	6a 15                	push   $0x15
   102af:	60                   	pusha  
   102b0:	1e                   	push   %ds
   102b1:	06                   	push   %es
   102b2:	0f a0                	push   %fs
   102b4:	0f a8                	push   %gs
   102b6:	54                   	push   %esp
   102b7:	e8 93 17 00 00       	call   11a4f <do_handler_security>
   102bc:	83 c4 04             	add    $0x4,%esp
   102bf:	0f a9                	pop    %gs
   102c1:	0f a1                	pop    %fs
   102c3:	07                   	pop    %es
   102c4:	1f                   	pop    %ds
   102c5:	61                   	popa   
   102c6:	83 c4 08             	add    $0x8,%esp
   102c9:	cf                   	iret   

000102ca <simple_switch>:
*/

    .text
    .global simple_switch
simple_switch:
    mov 4(%esp), %eax
   102ca:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102ce:	8b 54 24 08          	mov    0x8(%esp),%edx

    
    push %ebp
   102d2:	55                   	push   %ebp
    push %ebx
   102d3:	53                   	push   %ebx
    push %esi
   102d4:	56                   	push   %esi
    push %edi
   102d5:	57                   	push   %edi
    pushf                # 保存EFLAGS寄存器
   102d6:	9c                   	pushf  

    mov %esp,(%eax)
   102d7:	89 20                	mov    %esp,(%eax)

    mov %edx,%esp
   102d9:	89 d4                	mov    %edx,%esp

    popf                 # 恢复EFLAGS寄存器
   102db:	9d                   	popf   
    pop %edi
   102dc:	5f                   	pop    %edi
    pop %esi
   102dd:	5e                   	pop    %esi
    pop %ebx
   102de:	5b                   	pop    %ebx
    pop %ebp
   102df:	5d                   	pop    %ebp
    

    ret
   102e0:	c3                   	ret    

000102e1 <manual_switch_to_user>:

# 手动构造iret栈帧切换到用户态
    .global manual_switch_to_user
manual_switch_to_user:
    # 参数：user_entry_point
    mov 4(%esp), %eax    # 用户程序入口地址
   102e1:	8b 44 24 04          	mov    0x4(%esp),%eax
    
    # 设置用户态段寄存器
    mov $0x23, %bx       # 用户数据段选择子
   102e5:	66 bb 23 00          	mov    $0x23,%bx
    mov %bx, %ds
   102e9:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   102eb:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   102ed:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   102ef:	8e eb                	mov    %ebx,%gs
    
    # 构造iret栈帧（从高地址到低地址压栈）
    push $0x23           # 用户栈段(SS)
   102f1:	6a 23                	push   $0x23
    push $0x7FFFFFFF     # 用户栈指针(ESP) 
   102f3:	68 ff ff ff 7f       	push   $0x7fffffff
    push $0x202          # EFLAGS（开启中断标志IF=1）
   102f8:	68 02 02 00 00       	push   $0x202
    push $0x1B           # 用户代码段(CS)
   102fd:	6a 1b                	push   $0x1b
    push %eax            # 用户程序入口(EIP)
   102ff:	50                   	push   %eax
    
    # 执行特权级切换
    iret
   10300:	cf                   	iret   

00010301 <create_and_switch_user>:

# 创建用户进程并切换（更完整的版本）
    .global create_and_switch_user
create_and_switch_user:
    # 参数：用户程序地址、用户栈地址
    mov 4(%esp), %eax    # 用户程序地址
   10301:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %ebx    # 用户栈地址
   10305:	8b 5c 24 08          	mov    0x8(%esp),%ebx
    
    # 清理寄存器（安全考虑）
    xor %ecx, %ecx
   10309:	31 c9                	xor    %ecx,%ecx
    xor %edx, %edx
   1030b:	31 d2                	xor    %edx,%edx
    xor %esi, %esi
   1030d:	31 f6                	xor    %esi,%esi
    xor %edi, %edi
   1030f:	31 ff                	xor    %edi,%edi
    xor %ebp, %ebp
   10311:	31 ed                	xor    %ebp,%ebp
    
    # 设置用户态段寄存器
    mov $0x23, %cx       # 用户数据段选择子
   10313:	66 b9 23 00          	mov    $0x23,%cx
    mov %cx, %ds
   10317:	8e d9                	mov    %ecx,%ds
    mov %cx, %es
   10319:	8e c1                	mov    %ecx,%es
    mov %cx, %fs
   1031b:	8e e1                	mov    %ecx,%fs
    mov %cx, %gs
   1031d:	8e e9                	mov    %ecx,%gs
    
    # 构造完整的iret栈帧
    push $0x23           # SS - 用户栈段
   1031f:	6a 23                	push   $0x23
    push %ebx            # ESP - 用户栈指针
   10321:	53                   	push   %ebx
    pushf                # 获取当前EFLAGS
   10322:	9c                   	pushf  
    pop %ecx
   10323:	59                   	pop    %ecx
    or $0x200, %ecx      # 设置IF标志（开启中断）
   10324:	81 c9 00 02 00 00    	or     $0x200,%ecx
    push %ecx            # EFLAGS
   1032a:	51                   	push   %ecx
    push $0x1B           # CS - 用户代码段
   1032b:	6a 1b                	push   $0x1b
    push %eax            # EIP - 用户程序入口
   1032d:	50                   	push   %eax
    
    # 跳转到用户态
    iret
   1032e:	cf                   	iret   

0001032f <universal_task_switch>:
# save_tss_ptr: 保存当前TSS的地址 (如果为0则不保存)
# new_task_type: 0=内核任务, 1=用户任务
    .global universal_task_switch
universal_task_switch:
    # 保存当前TSS (如果需要)
    mov 4(%esp), %eax    # save_tss_ptr
   1032f:	8b 44 24 04          	mov    0x4(%esp),%eax
    cmp $0, %eax
   10333:	83 f8 00             	cmp    $0x0,%eax
    je skip_save_tss
   10336:	74 53                	je     1038b <skip_save_tss>
    
    # 保存当前TSS到指定地址
    # TSS结构: pre_link(0), esp0(4), ss0(8), esp1(12), ss1(16), esp2(20), ss2(24), cr3(28), eip(32), eflags(36), eax(40), ecx(44), edx(48), ebx(52), esp(56), ebp(60), esi(64), edi(68), es(72), cs(76), ss(80), ds(84), fs(88), gs(92), ldt(96), iomap(100)
    
    # 保存当前寄存器到TSS
    mov %eax, 40(%eax)   # 保存eax到tss.eax
   10338:	89 40 28             	mov    %eax,0x28(%eax)
    mov %ebx, 52(%eax)   # 保存ebx到tss.ebx
   1033b:	89 58 34             	mov    %ebx,0x34(%eax)
    mov %ecx, 44(%eax)   # 保存ecx到tss.ecx
   1033e:	89 48 2c             	mov    %ecx,0x2c(%eax)
    mov %edx, 48(%eax)   # 保存edx到tss.edx
   10341:	89 50 30             	mov    %edx,0x30(%eax)
    mov %esi, 64(%eax)   # 保存esi到tss.esi
   10344:	89 70 40             	mov    %esi,0x40(%eax)
    mov %edi, 68(%eax)   # 保存edi到tss.edi
   10347:	89 78 44             	mov    %edi,0x44(%eax)
    mov %ebp, 60(%eax)   # 保存ebp到tss.ebp
   1034a:	89 68 3c             	mov    %ebp,0x3c(%eax)
    mov %esp, 56(%eax)   # 保存esp到tss.esp
   1034d:	89 60 38             	mov    %esp,0x38(%eax)
    
    # 保存返回地址作为EIP
    mov (%esp), %edx
   10350:	8b 14 24             	mov    (%esp),%edx
    mov %edx, 32(%eax)   # 保存eip到tss.eip
   10353:	89 50 20             	mov    %edx,0x20(%eax)
    
    # 保存EFLAGS
    pushf
   10356:	9c                   	pushf  
    pop %edx
   10357:	5a                   	pop    %edx
    mov %edx, 36(%eax)   # 保存eflags到tss.eflags
   10358:	89 50 24             	mov    %edx,0x24(%eax)
    
    # 保存段寄存器
    mov %cs, %dx
   1035b:	66 8c ca             	mov    %cs,%dx
    mov %dx, 76(%eax)    # 保存cs到tss.cs
   1035e:	66 89 50 4c          	mov    %dx,0x4c(%eax)
    mov %ds, %dx
   10362:	66 8c da             	mov    %ds,%dx
    mov %dx, 84(%eax)    # 保存ds到tss.ds
   10365:	66 89 50 54          	mov    %dx,0x54(%eax)
    mov %ss, %dx
   10369:	66 8c d2             	mov    %ss,%dx
    mov %dx, 80(%eax)    # 保存ss到tss.ss
   1036c:	66 89 50 50          	mov    %dx,0x50(%eax)
    mov %es, %dx
   10370:	66 8c c2             	mov    %es,%dx
    mov %dx, 72(%eax)    # 保存es到tss.es
   10373:	66 89 50 48          	mov    %dx,0x48(%eax)
    mov %fs, %dx
   10377:	66 8c e2             	mov    %fs,%dx
    mov %dx, 88(%eax)    # 保存fs到tss.fs
   1037a:	66 89 50 58          	mov    %dx,0x58(%eax)
    mov %gs, %dx
   1037e:	66 8c ea             	mov    %gs,%dx
    mov %dx, 92(%eax)    # 保存gs到tss.gs
   10381:	66 89 50 5c          	mov    %dx,0x5c(%eax)
    
    # 保存CR3
    mov %cr3, %edx
   10385:	0f 20 da             	mov    %cr3,%edx
    mov %edx, 28(%eax)   # 保存cr3到tss.cr3
   10388:	89 50 1c             	mov    %edx,0x1c(%eax)

0001038b <skip_save_tss>:

skip_save_tss:
    # 获取新任务参数
    mov 8(%esp), %eax    # new_task_type
   1038b:	8b 44 24 08          	mov    0x8(%esp),%eax
    cmp $0, %eax
   1038f:	83 f8 00             	cmp    $0x0,%eax
    je switch_to_kernel_task
   10392:	74 02                	je     10396 <switch_to_kernel_task>
    jmp switch_to_user_task
   10394:	eb 44                	jmp    103da <switch_to_user_task>

00010396 <switch_to_kernel_task>:

switch_to_kernel_task:
    # 切换到内核任务
    
    # 切换页目录
    mov 12(%esp), %eax   # new_cr3
   10396:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cmp $0, %eax
   1039a:	83 f8 00             	cmp    $0x0,%eax
    je skip_page_dir_kernel
   1039d:	74 03                	je     103a2 <skip_page_dir_kernel>
    mov %eax, %cr3
   1039f:	0f 22 d8             	mov    %eax,%cr3

000103a2 <skip_page_dir_kernel>:
skip_page_dir_kernel:
    
    # 设置内核段寄存器
    mov $0x10, %ax
   103a2:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   103a6:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   103a8:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   103aa:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   103ac:	8e e8                	mov    %eax,%gs
    mov %ax, %ss
   103ae:	8e d0                	mov    %eax,%ss
    
    # 恢复寄存器
    mov 36(%esp), %eax   # new_eax
   103b0:	8b 44 24 24          	mov    0x24(%esp),%eax
    mov 40(%esp), %ebx   # new_ebx
   103b4:	8b 5c 24 28          	mov    0x28(%esp),%ebx
    mov 44(%esp), %ecx   # new_ecx
   103b8:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
    mov 48(%esp), %edx   # new_edx
   103bc:	8b 54 24 30          	mov    0x30(%esp),%edx
    mov 52(%esp), %esi   # new_esi
   103c0:	8b 74 24 34          	mov    0x34(%esp),%esi
    mov 56(%esp), %edi   # new_edi
   103c4:	8b 7c 24 38          	mov    0x38(%esp),%edi
    mov 60(%esp), %ebp   # new_ebp
   103c8:	8b 6c 24 3c          	mov    0x3c(%esp),%ebp
    mov 32(%esp), %esp   # new_esp
   103cc:	8b 64 24 20          	mov    0x20(%esp),%esp
    
    # 恢复EFLAGS并跳转
    mov 24(%esp), %eax   # new_eflags (注意ESP已经变了)
   103d0:	8b 44 24 18          	mov    0x18(%esp),%eax
    push %eax
   103d4:	50                   	push   %eax
    popf
   103d5:	9d                   	popf   
    
    # 跳转到新任务
    jmp *20(%esp)        # new_eip
   103d6:	ff 64 24 14          	jmp    *0x14(%esp)

000103da <switch_to_user_task>:

switch_to_user_task:
    # 切换到用户任务
    
    # 切换页目录
    mov 12(%esp), %eax   # new_cr3
   103da:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cmp $0, %eax
   103de:	83 f8 00             	cmp    $0x0,%eax
    je skip_page_dir_user
   103e1:	74 03                	je     103e6 <skip_page_dir_user>
    mov %eax, %cr3
   103e3:	0f 22 d8             	mov    %eax,%cr3

000103e6 <skip_page_dir_user>:
skip_page_dir_user:
    
    # 构造iret栈帧（特权级切换需要5个值）
    pushl 28(%esp)       # new_ss (原来28+0，因为SS是第7个参数)
   103e6:	ff 74 24 1c          	pushl  0x1c(%esp)
    pushl 36(%esp)       # new_esp (原来32+4)
   103ea:	ff 74 24 24          	pushl  0x24(%esp)
    pushl 32(%esp)       # new_eflags (原来24+8)
   103ee:	ff 74 24 20          	pushl  0x20(%esp)
    pushl 28(%esp)       # new_cs (原来16+12)
   103f2:	ff 74 24 1c          	pushl  0x1c(%esp)
    pushl 36(%esp)       # new_eip (原来20+16)
   103f6:	ff 74 24 24          	pushl  0x24(%esp)
    
    # 设置用户段寄存器
    mov $0x23, %ax
   103fa:	66 b8 23 00          	mov    $0x23,%ax
    mov %ax, %ds
   103fe:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   10400:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   10402:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   10404:	8e e8                	mov    %eax,%gs
    
    # 恢复通用寄存器
    mov 56(%esp), %eax   # new_eax (原来36+20)
   10406:	8b 44 24 38          	mov    0x38(%esp),%eax
    mov 60(%esp), %ebx   # new_ebx (原来40+20)
   1040a:	8b 5c 24 3c          	mov    0x3c(%esp),%ebx
    mov 64(%esp), %ecx   # new_ecx (原来44+20)
   1040e:	8b 4c 24 40          	mov    0x40(%esp),%ecx
    mov 68(%esp), %edx   # new_edx (原来48+20)
   10412:	8b 54 24 44          	mov    0x44(%esp),%edx
    mov 72(%esp), %esi   # new_esi (原来52+20)
   10416:	8b 74 24 48          	mov    0x48(%esp),%esi
    mov 76(%esp), %edi   # new_edi (原来56+20)
   1041a:	8b 7c 24 4c          	mov    0x4c(%esp),%edi
    mov 80(%esp), %ebp   # new_ebp (原来60+20)
   1041e:	8b 6c 24 50          	mov    0x50(%esp),%ebp
    
    # 切换到用户态
    iret
   10422:	cf                   	iret   

00010423 <quick_switch>:

# 快速内核任务切换 (只保存/恢复栈指针)
# 参数: quick_switch(current_esp_ptr, new_esp)
    .global quick_switch
quick_switch:
    mov 4(%esp), %eax    # current_esp_ptr
   10423:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx    # new_esp
   10427:	8b 54 24 08          	mov    0x8(%esp),%edx
    
    # 保存调用者保存的寄存器
    push %ebp
   1042b:	55                   	push   %ebp
    push %ebx
   1042c:	53                   	push   %ebx
    push %esi
   1042d:	56                   	push   %esi
    push %edi
   1042e:	57                   	push   %edi
    pushf
   1042f:	9c                   	pushf  
    
    # 保存当前ESP
    mov %esp, (%eax)
   10430:	89 20                	mov    %esp,(%eax)
    
    # 切换到新任务
    mov %edx, %esp
   10432:	89 d4                	mov    %edx,%esp
    
    # 恢复新任务寄存器
    popf
   10434:	9d                   	popf   
    pop %edi
   10435:	5f                   	pop    %edi
    pop %esi
   10436:	5e                   	pop    %esi
    pop %ebx
   10437:	5b                   	pop    %ebx
    pop %ebp
   10438:	5d                   	pop    %ebp
    
    ret
   10439:	c3                   	ret    

0001043a <get_full_context>:

# 获取当前完整上下文
# 参数: get_full_context(context_ptr)
    .global get_full_context
get_full_context:
    mov 4(%esp), %eax    # context_ptr
   1043a:	8b 44 24 04          	mov    0x4(%esp),%eax
    
    # 保存所有寄存器
    mov %ebx, 0(%eax)
   1043e:	89 18                	mov    %ebx,(%eax)
    mov %ecx, 4(%eax)
   10440:	89 48 04             	mov    %ecx,0x4(%eax)
    mov %edx, 8(%eax)
   10443:	89 50 08             	mov    %edx,0x8(%eax)
    mov %esi, 12(%eax)
   10446:	89 70 0c             	mov    %esi,0xc(%eax)
    mov %edi, 16(%eax)
   10449:	89 78 10             	mov    %edi,0x10(%eax)
    mov %ebp, 20(%eax)
   1044c:	89 68 14             	mov    %ebp,0x14(%eax)
    mov %esp, 24(%eax)
   1044f:	89 60 18             	mov    %esp,0x18(%eax)
    
    # 保存返回地址作为EIP
    mov (%esp), %edx
   10452:	8b 14 24             	mov    (%esp),%edx
    mov %edx, 28(%eax)
   10455:	89 50 1c             	mov    %edx,0x1c(%eax)
    
    # 保存EFLAGS
    pushf
   10458:	9c                   	pushf  
    pop %edx
   10459:	5a                   	pop    %edx
    mov %edx, 32(%eax)
   1045a:	89 50 20             	mov    %edx,0x20(%eax)
    
    # 保存段寄存器
    mov %cs, %dx
   1045d:	66 8c ca             	mov    %cs,%dx
    mov %dx, 36(%eax)
   10460:	66 89 50 24          	mov    %dx,0x24(%eax)
    mov %ds, %dx
   10464:	66 8c da             	mov    %ds,%dx
    mov %dx, 38(%eax)
   10467:	66 89 50 26          	mov    %dx,0x26(%eax)
    mov %ss, %dx
   1046b:	66 8c d2             	mov    %ss,%dx
    mov %dx, 40(%eax)
   1046e:	66 89 50 28          	mov    %dx,0x28(%eax)
    
    ret
   10472:	c3                   	ret    

00010473 <switch_from_interrupt>:

# 从中断中切换任务 (修改中断返回帧)
# 参数: switch_from_interrupt(interrupt_frame_ptr, new_task_type, new_page_dir, new_cs, new_eip, new_eflags, new_ss, new_esp, new_ebx, new_ecx, new_edx, new_esi, new_edi, new_ebp)
    .global switch_from_interrupt
switch_from_interrupt:
    mov 4(%esp), %eax    # interrupt_frame_ptr
   10473:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx    # new_task_type
   10477:	8b 54 24 08          	mov    0x8(%esp),%edx
    
    # 切换页目录
    mov 12(%esp), %ebx   # new_page_dir
   1047b:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
    cmp $0, %ebx
   1047f:	83 fb 00             	cmp    $0x0,%ebx
    je skip_page_dir_int
   10482:	74 03                	je     10487 <skip_page_dir_int>
    mov %ebx, %cr3
   10484:	0f 22 db             	mov    %ebx,%cr3

00010487 <skip_page_dir_int>:
skip_page_dir_int:
    
    cmp $0, %edx         # 检查任务类型
   10487:	83 fa 00             	cmp    $0x0,%edx
    je modify_for_kernel
   1048a:	74 02                	je     1048e <modify_for_kernel>
    jmp modify_for_user
   1048c:	eb 23                	jmp    104b1 <modify_for_user>

0001048e <modify_for_kernel>:

modify_for_kernel:
    # 修改为内核任务返回
    # 假设中断帧格式: eip, cs, eflags, esp, ss (从低到高)
    mov 20(%esp), %ebx   # new_eip
   1048e:	8b 5c 24 14          	mov    0x14(%esp),%ebx
    mov %ebx, 0(%eax)    # 修改帧中的EIP
   10492:	89 18                	mov    %ebx,(%eax)
    mov $0x08, %bx       # 内核CS
   10494:	66 bb 08 00          	mov    $0x8,%bx
    mov %bx, 4(%eax)     # 修改帧中的CS
   10498:	66 89 58 04          	mov    %bx,0x4(%eax)
    mov 24(%esp), %ebx   # new_eflags
   1049c:	8b 5c 24 18          	mov    0x18(%esp),%ebx
    mov %ebx, 8(%eax)    # 修改帧中的EFLAGS
   104a0:	89 58 08             	mov    %ebx,0x8(%eax)
    
    # 设置内核段
    mov $0x10, %bx
   104a3:	66 bb 10 00          	mov    $0x10,%bx
    mov %bx, %ds
   104a7:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   104a9:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   104ab:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   104ad:	8e eb                	mov    %ebx,%gs
    
    jmp restore_registers
   104af:	eb 32                	jmp    104e3 <restore_registers>

000104b1 <modify_for_user>:

modify_for_user:
    # 修改为用户任务返回
    mov 20(%esp), %ebx   # new_eip
   104b1:	8b 5c 24 14          	mov    0x14(%esp),%ebx
    mov %ebx, 0(%eax)    # 修改帧中的EIP
   104b5:	89 18                	mov    %ebx,(%eax)
    mov 16(%esp), %bx    # new_cs
   104b7:	66 8b 5c 24 10       	mov    0x10(%esp),%bx
    mov %bx, 4(%eax)     # 修改帧中的CS
   104bc:	66 89 58 04          	mov    %bx,0x4(%eax)
    mov 24(%esp), %ebx   # new_eflags
   104c0:	8b 5c 24 18          	mov    0x18(%esp),%ebx
    mov %ebx, 8(%eax)    # 修改帧中的EFLAGS
   104c4:	89 58 08             	mov    %ebx,0x8(%eax)
    mov 32(%esp), %ebx   # new_esp
   104c7:	8b 5c 24 20          	mov    0x20(%esp),%ebx
    mov %ebx, 12(%eax)   # 修改帧中的ESP
   104cb:	89 58 0c             	mov    %ebx,0xc(%eax)
    mov 28(%esp), %bx    # new_ss
   104ce:	66 8b 5c 24 1c       	mov    0x1c(%esp),%bx
    mov %bx, 16(%eax)    # 修改帧中的SS
   104d3:	66 89 58 10          	mov    %bx,0x10(%eax)
    
    # 设置用户段
    mov $0x23, %bx
   104d7:	66 bb 23 00          	mov    $0x23,%bx
    mov %bx, %ds
   104db:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   104dd:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   104df:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   104e1:	8e eb                	mov    %ebx,%gs

000104e3 <restore_registers>:

restore_registers:
    # 恢复通用寄存器
    mov 36(%esp), %ebx   # new_ebx
   104e3:	8b 5c 24 24          	mov    0x24(%esp),%ebx
    mov 40(%esp), %ecx   # new_ecx
   104e7:	8b 4c 24 28          	mov    0x28(%esp),%ecx
    mov 44(%esp), %edx   # new_edx
   104eb:	8b 54 24 2c          	mov    0x2c(%esp),%edx
    mov 48(%esp), %esi   # new_esi
   104ef:	8b 74 24 30          	mov    0x30(%esp),%esi
    mov 52(%esp), %edi   # new_edi
   104f3:	8b 7c 24 34          	mov    0x34(%esp),%edi
    mov 56(%esp), %ebp   # new_ebp
   104f7:	8b 6c 24 38          	mov    0x38(%esp),%ebp
    
    ret                  # 返回到中断处理程序，让iret处理剩余工作
   104fb:	c3                   	ret    

000104fc <down2>:
#ifndef KLIB_H
#define KLIB_H
#include <stdarg.h>
#include "comm/types.h"
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   104fc:	55                   	push   %ebp
   104fd:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   104ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   10502:	f7 d8                	neg    %eax
   10504:	23 45 08             	and    0x8(%ebp),%eax
}
   10507:	5d                   	pop    %ebp
   10508:	c3                   	ret    

00010509 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   10509:	55                   	push   %ebp
   1050a:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   1050c:	8b 55 08             	mov    0x8(%ebp),%edx
   1050f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10512:	01 d0                	add    %edx,%eax
   10514:	8d 50 ff             	lea    -0x1(%eax),%edx
   10517:	8b 45 0c             	mov    0xc(%ebp),%eax
   1051a:	f7 d8                	neg    %eax
   1051c:	21 d0                	and    %edx,%eax
}
   1051e:	5d                   	pop    %ebp
   1051f:	c3                   	ret    

00010520 <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   10520:	55                   	push   %ebp
   10521:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10523:	8b 45 08             	mov    0x8(%ebp),%eax
   10526:	0f 22 d8             	mov    %eax,%cr3
}
   10529:	90                   	nop
   1052a:	5d                   	pop    %ebp
   1052b:	c3                   	ret    

0001052c <pde_index>:
        uint32_t phy_page_addr : 20;
    }
}pte_t;

static inline uint32_t pde_index(uint32_t vaddr)
{
   1052c:	55                   	push   %ebp
   1052d:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 22) & 0x3FF;
   1052f:	8b 45 08             	mov    0x8(%ebp),%eax
   10532:	c1 e8 16             	shr    $0x16,%eax
}
   10535:	5d                   	pop    %ebp
   10536:	c3                   	ret    

00010537 <pte_index>:

static inline uint32_t pte_index(uint32_t vaddr)
{
   10537:	55                   	push   %ebp
   10538:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;
   1053a:	8b 45 08             	mov    0x8(%ebp),%eax
   1053d:	c1 e8 0c             	shr    $0xc,%eax
   10540:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10545:	5d                   	pop    %ebp
   10546:	c3                   	ret    

00010547 <pde_paddr>:

static inline uint32_t pde_paddr(pde_t * pde)
{
   10547:	55                   	push   %ebp
   10548:	89 e5                	mov    %esp,%ebp
    return (pde->phy_pt_addr << 12) ;
   1054a:	8b 45 08             	mov    0x8(%ebp),%eax
   1054d:	8b 00                	mov    (%eax),%eax
   1054f:	c1 e8 0c             	shr    $0xc,%eax
   10552:	c1 e0 0c             	shl    $0xc,%eax
}
   10555:	5d                   	pop    %ebp
   10556:	c3                   	ret    

00010557 <mmu_set_page_dir>:
static inline uint32_t pte_paddr(pte_t * pte)
{
    return (pte->phy_page_addr << 12) ;
}
static inline void mmu_set_page_dir(uint32_t paddr)
{
   10557:	55                   	push   %ebp
   10558:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1055a:	ff 75 08             	pushl  0x8(%ebp)
   1055d:	e8 be ff ff ff       	call   10520 <write_cr3>
   10562:	83 c4 04             	add    $0x4,%esp
}
   10565:	90                   	nop
   10566:	c9                   	leave  
   10567:	c3                   	ret    

00010568 <addr_alloc_init>:
static addr_alloc_t paddr_alloc;

static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE)));
static void addr_alloc_init(addr_alloc_t *addr_alloc,uint8_t* bits, 
    uint32_t start, uint32_t size, uint32_t page_size)
{
   10568:	55                   	push   %ebp
   10569:	89 e5                	mov    %esp,%ebp
   1056b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&addr_alloc->mutex);
   1056e:	8b 45 08             	mov    0x8(%ebp),%eax
   10571:	83 ec 0c             	sub    $0xc,%esp
   10574:	50                   	push   %eax
   10575:	e8 5a 1a 00 00       	call   11fd4 <mutex_init>
   1057a:	83 c4 10             	add    $0x10,%esp
    
    addr_alloc->start = start;
   1057d:	8b 45 08             	mov    0x8(%ebp),%eax
   10580:	8b 55 10             	mov    0x10(%ebp),%edx
   10583:	89 50 1c             	mov    %edx,0x1c(%eax)
    addr_alloc->size = size;
   10586:	8b 45 08             	mov    0x8(%ebp),%eax
   10589:	8b 55 14             	mov    0x14(%ebp),%edx
   1058c:	89 50 20             	mov    %edx,0x20(%eax)
    addr_alloc->page_size = page_size;
   1058f:	8b 45 08             	mov    0x8(%ebp),%eax
   10592:	8b 55 18             	mov    0x18(%ebp),%edx
   10595:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&addr_alloc->bitmap, bits, size / page_size, 0);
   10598:	8b 45 14             	mov    0x14(%ebp),%eax
   1059b:	ba 00 00 00 00       	mov    $0x0,%edx
   105a0:	f7 75 18             	divl   0x18(%ebp)
   105a3:	89 c2                	mov    %eax,%edx
   105a5:	8b 45 08             	mov    0x8(%ebp),%eax
   105a8:	83 c0 14             	add    $0x14,%eax
   105ab:	6a 00                	push   $0x0
   105ad:	52                   	push   %edx
   105ae:	ff 75 0c             	pushl  0xc(%ebp)
   105b1:	50                   	push   %eax
   105b2:	e8 ed 1c 00 00       	call   122a4 <bitmap_init>
   105b7:	83 c4 10             	add    $0x10,%esp
    
}
   105ba:	90                   	nop
   105bb:	c9                   	leave  
   105bc:	c3                   	ret    

000105bd <addr_alloc_page>:

static uint32_t addr_alloc_page(addr_alloc_t *addr_alloc, int page_count)
{
   105bd:	55                   	push   %ebp
   105be:	89 e5                	mov    %esp,%ebp
   105c0:	83 ec 18             	sub    $0x18,%esp
    uint32_t  addr = 0;
   105c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&addr_alloc->mutex);
   105ca:	8b 45 08             	mov    0x8(%ebp),%eax
   105cd:	83 ec 0c             	sub    $0xc,%esp
   105d0:	50                   	push   %eax
   105d1:	e8 2a 1a 00 00       	call   12000 <mutex_lock>
   105d6:	83 c4 10             	add    $0x10,%esp
    int page_index = bitmap_alloc_nbits(&addr_alloc->bitmap, 0, page_count);
   105d9:	8b 45 08             	mov    0x8(%ebp),%eax
   105dc:	83 c0 14             	add    $0x14,%eax
   105df:	83 ec 04             	sub    $0x4,%esp
   105e2:	ff 75 0c             	pushl  0xc(%ebp)
   105e5:	6a 00                	push   $0x0
   105e7:	50                   	push   %eax
   105e8:	e8 30 1e 00 00       	call   1241d <bitmap_alloc_nbits>
   105ed:	83 c4 10             	add    $0x10,%esp
   105f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   105f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105f7:	78 17                	js     10610 <addr_alloc_page+0x53>
    {
        addr = addr_alloc->start + page_index * addr_alloc->page_size;
   105f9:	8b 45 08             	mov    0x8(%ebp),%eax
   105fc:	8b 50 1c             	mov    0x1c(%eax),%edx
   105ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10602:	8b 48 24             	mov    0x24(%eax),%ecx
   10605:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10608:	0f af c1             	imul   %ecx,%eax
   1060b:	01 d0                	add    %edx,%eax
   1060d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&addr_alloc->mutex);
   10610:	8b 45 08             	mov    0x8(%ebp),%eax
   10613:	83 ec 0c             	sub    $0xc,%esp
   10616:	50                   	push   %eax
   10617:	e8 74 1a 00 00       	call   12090 <mutex_unlock>
   1061c:	83 c4 10             	add    $0x10,%esp
    return addr;
   1061f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10622:	c9                   	leave  
   10623:	c3                   	ret    

00010624 <addr_free_page>:

static void addr_free_page(addr_alloc_t *addr_alloc, uint32_t addr, int page_count)
{
   10624:	55                   	push   %ebp
   10625:	89 e5                	mov    %esp,%ebp
   10627:	53                   	push   %ebx
   10628:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&addr_alloc->mutex);
   1062b:	8b 45 08             	mov    0x8(%ebp),%eax
   1062e:	83 ec 0c             	sub    $0xc,%esp
   10631:	50                   	push   %eax
   10632:	e8 c9 19 00 00       	call   12000 <mutex_lock>
   10637:	83 c4 10             	add    $0x10,%esp
    uint32_t page_index = (addr - addr_alloc->start) / addr_alloc->page_size;
   1063a:	8b 45 08             	mov    0x8(%ebp),%eax
   1063d:	8b 40 1c             	mov    0x1c(%eax),%eax
   10640:	8b 55 0c             	mov    0xc(%ebp),%edx
   10643:	89 d1                	mov    %edx,%ecx
   10645:	29 c1                	sub    %eax,%ecx
   10647:	8b 45 08             	mov    0x8(%ebp),%eax
   1064a:	8b 58 24             	mov    0x24(%eax),%ebx
   1064d:	89 c8                	mov    %ecx,%eax
   1064f:	ba 00 00 00 00       	mov    $0x0,%edx
   10654:	f7 f3                	div    %ebx
   10656:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&addr_alloc->bitmap, page_index, page_count,0);
   10659:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1065c:	8b 55 08             	mov    0x8(%ebp),%edx
   1065f:	83 c2 14             	add    $0x14,%edx
   10662:	6a 00                	push   $0x0
   10664:	ff 75 10             	pushl  0x10(%ebp)
   10667:	50                   	push   %eax
   10668:	52                   	push   %edx
   10669:	e8 c0 1c 00 00       	call   1232e <bitmap_set_bit>
   1066e:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&addr_alloc->mutex);
   10671:	8b 45 08             	mov    0x8(%ebp),%eax
   10674:	83 ec 0c             	sub    $0xc,%esp
   10677:	50                   	push   %eax
   10678:	e8 13 1a 00 00       	call   12090 <mutex_unlock>
   1067d:	83 c4 10             	add    $0x10,%esp
}
   10680:	90                   	nop
   10681:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10684:	c9                   	leave  
   10685:	c3                   	ret    

00010686 <show_mem_info>:

void show_mem_info(boot_info_t *boot_info)
{
   10686:	55                   	push   %ebp
   10687:	89 e5                	mov    %esp,%ebp
   10689:	53                   	push   %ebx
   1068a:	83 ec 14             	sub    $0x14,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   1068d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10694:	eb 42                	jmp    106d8 <show_mem_info+0x52>
    {
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   10696:	8b 45 08             	mov    0x8(%ebp),%eax
   10699:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1069c:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
        boot_info->ram_region_cfg[i].start + boot_info->ram_region_cfg[i].size,
   106a0:	8b 45 08             	mov    0x8(%ebp),%eax
   106a3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106a6:	8b 1c c8             	mov    (%eax,%ecx,8),%ebx
   106a9:	8b 45 08             	mov    0x8(%ebp),%eax
   106ac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106af:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   106b3:	01 c3                	add    %eax,%ebx
   106b5:	8b 45 08             	mov    0x8(%ebp),%eax
   106b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106bb:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106be:	83 ec 0c             	sub    $0xc,%esp
   106c1:	52                   	push   %edx
   106c2:	53                   	push   %ebx
   106c3:	50                   	push   %eax
   106c4:	ff 75 f4             	pushl  -0xc(%ebp)
   106c7:	68 60 2d 01 00       	push   $0x12d60
   106cc:	e8 c2 25 00 00       	call   12c93 <log_printf>
   106d1:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   106d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d8:	8b 45 08             	mov    0x8(%ebp),%eax
   106db:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   106e1:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106e4:	7c b0                	jl     10696 <show_mem_info+0x10>
        boot_info->ram_region_cfg[i].size);
    }
}
   106e6:	90                   	nop
   106e7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   106ea:	c9                   	leave  
   106eb:	c3                   	ret    

000106ec <total_mem_size>:
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   106ec:	55                   	push   %ebp
   106ed:	89 e5                	mov    %esp,%ebp
   106ef:	83 ec 10             	sub    $0x10,%esp
    uint32_t total_size = 0;
   106f2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   106f9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10700:	eb 11                	jmp    10713 <total_mem_size+0x27>
    {
        total_size += boot_info->ram_region_cfg[i].size;
   10702:	8b 45 08             	mov    0x8(%ebp),%eax
   10705:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10708:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1070c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   1070f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10713:	8b 45 08             	mov    0x8(%ebp),%eax
   10716:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   1071c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1071f:	7c e1                	jl     10702 <total_mem_size+0x16>
    }
    return total_size;
   10721:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10724:	c9                   	leave  
   10725:	c3                   	ret    

00010726 <find_pte>:

pte_t * find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   10726:	55                   	push   %ebp
   10727:	89 e5                	mov    %esp,%ebp
   10729:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table = (pte_t *)0;
   1072c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    pde_t *pde = page_dir + pde_index(vaddr);
   10733:	ff 75 0c             	pushl  0xc(%ebp)
   10736:	e8 f1 fd ff ff       	call   1052c <pde_index>
   1073b:	83 c4 04             	add    $0x4,%esp
   1073e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10745:	8b 45 08             	mov    0x8(%ebp),%eax
   10748:	01 d0                	add    %edx,%eax
   1074a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   1074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10750:	0f b6 00             	movzbl (%eax),%eax
   10753:	83 e0 01             	and    $0x1,%eax
   10756:	84 c0                	test   %al,%al
   10758:	74 10                	je     1076a <find_pte+0x44>
    {
        page_table = (pte_t *)pde_paddr(pde);
   1075a:	ff 75 f0             	pushl  -0x10(%ebp)
   1075d:	e8 e5 fd ff ff       	call   10547 <pde_paddr>
   10762:	83 c4 04             	add    $0x4,%esp
   10765:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10768:	eb 57                	jmp    107c1 <find_pte+0x9b>
    }
    else
    {
        if (alloc == 0)
   1076a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1076e:	75 07                	jne    10777 <find_pte+0x51>
        {
            return (pte_t *)0;
   10770:	b8 00 00 00 00       	mov    $0x0,%eax
   10775:	eb 64                	jmp    107db <find_pte+0xb5>
        }
        else
        {
            uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10777:	83 ec 08             	sub    $0x8,%esp
   1077a:	6a 01                	push   $0x1
   1077c:	68 00 50 01 00       	push   $0x15000
   10781:	e8 37 fe ff ff       	call   105bd <addr_alloc_page>
   10786:	83 c4 10             	add    $0x10,%esp
   10789:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (pg_paddr == 0)
   1078c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10790:	75 07                	jne    10799 <find_pte+0x73>
            {
                return (pte_t *)0;
   10792:	b8 00 00 00 00       	mov    $0x0,%eax
   10797:	eb 42                	jmp    107db <find_pte+0xb5>
            }
            pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   10799:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1079c:	83 c8 07             	or     $0x7,%eax
   1079f:	89 c2                	mov    %eax,%edx
   107a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a4:	89 10                	mov    %edx,(%eax)
            page_table = (pte_t *)pg_paddr;
   107a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
            kernel_memset(page_table, 0, MEM_PAGE_SIZE);        
   107ac:	83 ec 04             	sub    $0x4,%esp
   107af:	68 00 10 00 00       	push   $0x1000
   107b4:	6a 00                	push   $0x0
   107b6:	ff 75 f4             	pushl  -0xc(%ebp)
   107b9:	e8 c1 1e 00 00       	call   1267f <kernel_memset>
   107be:	83 c4 10             	add    $0x10,%esp
        }
    }
    return page_table + pte_index(vaddr);
   107c1:	83 ec 0c             	sub    $0xc,%esp
   107c4:	ff 75 0c             	pushl  0xc(%ebp)
   107c7:	e8 6b fd ff ff       	call   10537 <pte_index>
   107cc:	83 c4 10             	add    $0x10,%esp
   107cf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107d9:	01 d0                	add    %edx,%eax
    
    
}
   107db:	c9                   	leave  
   107dc:	c3                   	ret    

000107dd <memory_create_map>:
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   107dd:	55                   	push   %ebp
   107de:	89 e5                	mov    %esp,%ebp
   107e0:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < count; i++)
   107e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107ea:	eb 45                	jmp    10831 <memory_create_map+0x54>
    {
        //log_printf("create map %d: 0x%x - 0x%x, 0x%x, perm :%d\n", i, vaddr, vaddr + MEM_PAGE_SIZE, paddr,perm);
        pte_t * pte = find_pte(page_dir, vaddr,1);
   107ec:	83 ec 04             	sub    $0x4,%esp
   107ef:	6a 01                	push   $0x1
   107f1:	ff 75 0c             	pushl  0xc(%ebp)
   107f4:	ff 75 08             	pushl  0x8(%ebp)
   107f7:	e8 2a ff ff ff       	call   10726 <find_pte>
   107fc:	83 c4 10             	add    $0x10,%esp
   107ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   10802:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10806:	75 07                	jne    1080f <memory_create_map+0x32>
        {
            return -1;
   10808:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1080d:	eb 2f                	jmp    1083e <memory_create_map+0x61>
        }
        //log_printf("pte addr: 0x%x\n", pte);
        ASSERT(pte->present == 0);
        pte->v = paddr | perm | PTE_P;
   1080f:	8b 45 10             	mov    0x10(%ebp),%eax
   10812:	0b 45 18             	or     0x18(%ebp),%eax
   10815:	83 c8 01             	or     $0x1,%eax
   10818:	89 c2                	mov    %eax,%edx
   1081a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1081d:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   1081f:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   10826:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for(int i = 0; i < count; i++)
   1082d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10831:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10834:	3b 45 14             	cmp    0x14(%ebp),%eax
   10837:	7c b3                	jl     107ec <memory_create_map+0xf>
    }
    return 0;
   10839:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1083e:	c9                   	leave  
   1083f:	c3                   	ret    

00010840 <create_kernel_table>:
void create_kernel_table(void)
{
   10840:	55                   	push   %ebp
   10841:	89 e5                	mov    %esp,%ebp
   10843:	83 ec 28             	sub    $0x28,%esp
        {kernel_base,s_text,kernel_base,PTE_W},
        {s_text,e_text,s_text,0},
        {s_data,(void *)MEM_EBDA_START,s_data,PTE_W},
        {(void *)MEM_EXT_START,(void *)MEM_EXT_END,(void *)MEM_EXT_START,PTE_W}
    };
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   10846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1084d:	e9 86 00 00 00       	jmp    108d8 <create_kernel_table+0x98>
    {
        memory_map_t *map = &kernel_map[i];
   10852:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10855:	c1 e0 04             	shl    $0x4,%eax
   10858:	05 00 40 01 00       	add    $0x14000,%eax
   1085d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10860:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10863:	8b 00                	mov    (%eax),%eax
   10865:	68 00 10 00 00       	push   $0x1000
   1086a:	50                   	push   %eax
   1086b:	e8 8c fc ff ff       	call   104fc <down2>
   10870:	83 c4 08             	add    $0x8,%esp
   10873:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10876:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10879:	8b 40 04             	mov    0x4(%eax),%eax
   1087c:	68 00 10 00 00       	push   $0x1000
   10881:	50                   	push   %eax
   10882:	e8 82 fc ff ff       	call   10509 <up2>
   10887:	83 c4 08             	add    $0x8,%esp
   1088a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   1088d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10890:	8b 40 08             	mov    0x8(%eax),%eax
   10893:	68 00 10 00 00       	push   $0x1000
   10898:	50                   	push   %eax
   10899:	e8 5e fc ff ff       	call   104fc <down2>
   1089e:	83 c4 08             	add    $0x8,%esp
   108a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   108a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   108a7:	2b 45 ec             	sub    -0x14(%ebp),%eax
   108aa:	c1 e8 0c             	shr    $0xc,%eax
   108ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
        memory_create_map(kernel_page_dir,vstart, (uint32_t)map->pstart,page_count,map->perm);
   108b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108b3:	8b 40 0c             	mov    0xc(%eax),%eax
   108b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   108b9:	8b 52 08             	mov    0x8(%edx),%edx
   108bc:	83 ec 0c             	sub    $0xc,%esp
   108bf:	50                   	push   %eax
   108c0:	ff 75 e0             	pushl  -0x20(%ebp)
   108c3:	52                   	push   %edx
   108c4:	ff 75 ec             	pushl  -0x14(%ebp)
   108c7:	68 00 60 01 00       	push   $0x16000
   108cc:	e8 0c ff ff ff       	call   107dd <memory_create_map>
   108d1:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   108d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108db:	83 f8 03             	cmp    $0x3,%eax
   108de:	0f 86 6e ff ff ff    	jbe    10852 <create_kernel_table+0x12>
    }
}
   108e4:	90                   	nop
   108e5:	c9                   	leave  
   108e6:	c3                   	ret    

000108e7 <memory_create_user_space>:

uint32_t memory_create_user_space()
{
   108e7:	55                   	push   %ebp
   108e8:	89 e5                	mov    %esp,%ebp
   108ea:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   108ed:	83 ec 08             	sub    $0x8,%esp
   108f0:	6a 01                	push   $0x1
   108f2:	68 00 50 01 00       	push   $0x15000
   108f7:	e8 c1 fc ff ff       	call   105bd <addr_alloc_page>
   108fc:	83 c4 10             	add    $0x10,%esp
   108ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == (pde_t *)0)
   10902:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10906:	75 07                	jne    1090f <memory_create_user_space+0x28>
    {
        return 0;
   10908:	b8 00 00 00 00       	mov    $0x0,%eax
   1090d:	eb 5b                	jmp    1096a <memory_create_user_space+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   1090f:	83 ec 04             	sub    $0x4,%esp
   10912:	68 00 10 00 00       	push   $0x1000
   10917:	6a 00                	push   $0x0
   10919:	ff 75 f0             	pushl  -0x10(%ebp)
   1091c:	e8 5e 1d 00 00       	call   1267f <kernel_memset>
   10921:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10924:	83 ec 0c             	sub    $0xc,%esp
   10927:	68 00 00 00 80       	push   $0x80000000
   1092c:	e8 fb fb ff ff       	call   1052c <pde_index>
   10931:	83 c4 10             	add    $0x10,%esp
   10934:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i = 0; i < user_pde_start; i++)
   10937:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1093e:	eb 1f                	jmp    1095f <memory_create_user_space+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   10940:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10943:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1094a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1094d:	01 c2                	add    %eax,%edx
   1094f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10952:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10959:	89 02                	mov    %eax,(%edx)
    for(int i = 0; i < user_pde_start; i++)
   1095b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1095f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10962:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10965:	77 d9                	ja     10940 <memory_create_user_space+0x59>
    }
    return (uint32_t)page_dir;
   10967:	8b 45 f0             	mov    -0x10(%ebp),%eax
    
}
   1096a:	c9                   	leave  
   1096b:	c3                   	ret    

0001096c <memory_init>:
void memory_init(boot_info_t *boot_info)
{
   1096c:	55                   	push   %ebp
   1096d:	89 e5                	mov    %esp,%ebp
   1096f:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    //log_printf("mem init\n");
    show_mem_info(boot_info);
   10972:	83 ec 0c             	sub    $0xc,%esp
   10975:	ff 75 08             	pushl  0x8(%ebp)
   10978:	e8 09 fd ff ff       	call   10686 <show_mem_info>
   1097d:	83 c4 10             	add    $0x10,%esp

    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10980:	c7 45 f4 1b c0 01 00 	movl   $0x1c01b,-0xc(%ebp)
    uint32_t mem_up1MB_free_size = total_mem_size(boot_info) - MEM_EXT_START;
   10987:	83 ec 0c             	sub    $0xc,%esp
   1098a:	ff 75 08             	pushl  0x8(%ebp)
   1098d:	e8 5a fd ff ff       	call   106ec <total_mem_size>
   10992:	83 c4 10             	add    $0x10,%esp
   10995:	2d 00 00 10 00       	sub    $0x100000,%eax
   1099a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free_size = down2(mem_up1MB_free_size,MEM_PAGE_SIZE);
   1099d:	83 ec 08             	sub    $0x8,%esp
   109a0:	68 00 10 00 00       	push   $0x1000
   109a5:	ff 75 f0             	pushl  -0x10(%ebp)
   109a8:	e8 4f fb ff ff       	call   104fc <down2>
   109ad:	83 c4 10             	add    $0x10,%esp
   109b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //log_printf("free memory begin addr: 0x%x ,size 0x%x\n", MEM_EXT_START, mem_up1MB_free_size);
    
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free_size, MEM_PAGE_SIZE);
   109b3:	83 ec 0c             	sub    $0xc,%esp
   109b6:	68 00 10 00 00       	push   $0x1000
   109bb:	ff 75 f0             	pushl  -0x10(%ebp)
   109be:	68 00 00 10 00       	push   $0x100000
   109c3:	ff 75 f4             	pushl  -0xc(%ebp)
   109c6:	68 00 50 01 00       	push   $0x15000
   109cb:	e8 98 fb ff ff       	call   10568 <addr_alloc_init>
   109d0:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   109d3:	a1 20 50 01 00       	mov    0x15020,%eax
   109d8:	c1 e8 0c             	shr    $0xc,%eax
   109db:	83 ec 0c             	sub    $0xc,%esp
   109de:	50                   	push   %eax
   109df:	e8 aa 18 00 00       	call   1228e <bitmap_byte_count>
   109e4:	83 c4 10             	add    $0x10,%esp
   109e7:	01 45 f4             	add    %eax,-0xc(%ebp)
    
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);

    create_kernel_table();
   109ea:	e8 51 fe ff ff       	call   10840 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   109ef:	b8 00 60 01 00       	mov    $0x16000,%eax
   109f4:	83 ec 0c             	sub    $0xc,%esp
   109f7:	50                   	push   %eax
   109f8:	e8 5a fb ff ff       	call   10557 <mmu_set_page_dir>
   109fd:	83 c4 10             	add    $0x10,%esp
}
   10a00:	90                   	nop
   10a01:	c9                   	leave  
   10a02:	c3                   	ret    

00010a03 <memory_alloc_for_page_dir>:


int memory_alloc_for_page_dir(uint32_t page_dir,uint32_t vaddr,uint32_t size,int perm)
{
   10a03:	55                   	push   %ebp
   10a04:	89 e5                	mov    %esp,%ebp
   10a06:	83 ec 28             	sub    $0x28,%esp
    uint32_t current_vaddr = vaddr;
   10a09:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a0c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size,MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10a0f:	68 00 10 00 00       	push   $0x1000
   10a14:	ff 75 10             	pushl  0x10(%ebp)
   10a17:	e8 ed fa ff ff       	call   10509 <up2>
   10a1c:	83 c4 08             	add    $0x8,%esp
   10a1f:	c1 e8 0c             	shr    $0xc,%eax
   10a22:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i = 0; i < page_count; i++)
   10a25:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10a2c:	eb 68                	jmp    10a96 <memory_alloc_for_page_dir+0x93>
    {
        uint32_t paddr = addr_alloc_page(&paddr_alloc,1);
   10a2e:	83 ec 08             	sub    $0x8,%esp
   10a31:	6a 01                	push   $0x1
   10a33:	68 00 50 01 00       	push   $0x15000
   10a38:	e8 80 fb ff ff       	call   105bd <addr_alloc_page>
   10a3d:	83 c4 10             	add    $0x10,%esp
   10a40:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(paddr == 0)
   10a43:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10a47:	75 07                	jne    10a50 <memory_alloc_for_page_dir+0x4d>
        {
            return 0;
   10a49:	b8 00 00 00 00       	mov    $0x0,%eax
   10a4e:	eb 53                	jmp    10aa3 <memory_alloc_for_page_dir+0xa0>
        }
        int err = memory_create_map((pde_t *)page_dir,current_vaddr,paddr,1,perm);
   10a50:	8b 55 14             	mov    0x14(%ebp),%edx
   10a53:	8b 45 08             	mov    0x8(%ebp),%eax
   10a56:	83 ec 0c             	sub    $0xc,%esp
   10a59:	52                   	push   %edx
   10a5a:	6a 01                	push   $0x1
   10a5c:	ff 75 e8             	pushl  -0x18(%ebp)
   10a5f:	ff 75 f4             	pushl  -0xc(%ebp)
   10a62:	50                   	push   %eax
   10a63:	e8 75 fd ff ff       	call   107dd <memory_create_map>
   10a68:	83 c4 20             	add    $0x20,%esp
   10a6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if(err < 0)
   10a6e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a72:	79 17                	jns    10a8b <memory_alloc_for_page_dir+0x88>
        {
            log_printf("memory_alloc_for_page_dir error\n");
   10a74:	83 ec 0c             	sub    $0xc,%esp
   10a77:	68 80 2d 01 00       	push   $0x12d80
   10a7c:	e8 12 22 00 00       	call   12c93 <log_printf>
   10a81:	83 c4 10             	add    $0x10,%esp
            return 0;
   10a84:	b8 00 00 00 00       	mov    $0x0,%eax
   10a89:	eb 18                	jmp    10aa3 <memory_alloc_for_page_dir+0xa0>
        }
        current_vaddr += MEM_PAGE_SIZE;
   10a8b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for(int i = 0; i < page_count; i++)
   10a92:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a96:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a99:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a9c:	7c 90                	jl     10a2e <memory_alloc_for_page_dir+0x2b>
    }
    return 0;
   10a9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10aa3:	c9                   	leave  
   10aa4:	c3                   	ret    

00010aa5 <memory_alloc_page_for>:

int memory_alloc_page_for(uint32_t addr,uint32_t size,int perm)
{
   10aa5:	55                   	push   %ebp
   10aa6:	89 e5                	mov    %esp,%ebp
   10aa8:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3,addr,size,perm);
   10aab:	e8 0a 05 00 00       	call   10fba <task_current>
   10ab0:	8b 40 78             	mov    0x78(%eax),%eax
   10ab3:	ff 75 10             	pushl  0x10(%ebp)
   10ab6:	ff 75 0c             	pushl  0xc(%ebp)
   10ab9:	ff 75 08             	pushl  0x8(%ebp)
   10abc:	50                   	push   %eax
   10abd:	e8 41 ff ff ff       	call   10a03 <memory_alloc_for_page_dir>
   10ac2:	83 c4 10             	add    $0x10,%esp
}
   10ac5:	c9                   	leave  
   10ac6:	c3                   	ret    

00010ac7 <list_node_init>:
    struct _list_node_t* next;
}list_node_t;


static inline void list_node_init(list_node_t *node)
{
   10ac7:	55                   	push   %ebp
   10ac8:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10aca:	8b 45 08             	mov    0x8(%ebp),%eax
   10acd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10ad4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad7:	8b 50 04             	mov    0x4(%eax),%edx
   10ada:	8b 45 08             	mov    0x8(%ebp),%eax
   10add:	89 10                	mov    %edx,(%eax)
}
   10adf:	90                   	nop
   10ae0:	5d                   	pop    %ebp
   10ae1:	c3                   	ret    

00010ae2 <list_node_next>:
static inline list_node_t* list_node_pre(list_node_t* node)
{
    return node->pre;
} 
static inline list_node_t* list_node_next(list_node_t* node)
{
   10ae2:	55                   	push   %ebp
   10ae3:	89 e5                	mov    %esp,%ebp
    return node->next;
   10ae5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae8:	8b 40 04             	mov    0x4(%eax),%eax
}
   10aeb:	5d                   	pop    %ebp
   10aec:	c3                   	ret    

00010aed <list_count>:
{
    return list->count == 0;
}

static inline int list_count(list_t * list)
{
   10aed:	55                   	push   %ebp
   10aee:	89 e5                	mov    %esp,%ebp
    return list->count;
   10af0:	8b 45 08             	mov    0x8(%ebp),%eax
   10af3:	8b 40 08             	mov    0x8(%eax),%eax
}
   10af6:	5d                   	pop    %ebp
   10af7:	c3                   	ret    

00010af8 <list_first>:
static inline list_node_t* list_first(list_t * list)
{
   10af8:	55                   	push   %ebp
   10af9:	89 e5                	mov    %esp,%ebp
    return list->first;
   10afb:	8b 45 08             	mov    0x8(%ebp),%eax
   10afe:	8b 00                	mov    (%eax),%eax
}
   10b00:	5d                   	pop    %ebp
   10b01:	c3                   	ret    

00010b02 <read_cr3>:
{
   10b02:	55                   	push   %ebp
   10b03:	89 e5                	mov    %esp,%ebp
   10b05:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
   10b08:	0f 20 d8             	mov    %cr3,%eax
   10b0b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr3;
   10b0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10b11:	c9                   	leave  
   10b12:	c3                   	ret    

00010b13 <write_cr3>:
{
   10b13:	55                   	push   %ebp
   10b14:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10b16:	8b 45 08             	mov    0x8(%ebp),%eax
   10b19:	0f 22 d8             	mov    %eax,%cr3
}
   10b1c:	90                   	nop
   10b1d:	5d                   	pop    %ebp
   10b1e:	c3                   	ret    

00010b1f <hlt>:
    uint32_t addr[] = {offset ,selector};
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}

static inline void hlt(void)
{
   10b1f:	55                   	push   %ebp
   10b20:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10b22:	f4                   	hlt    
}
   10b23:	90                   	nop
   10b24:	5d                   	pop    %ebp
   10b25:	c3                   	ret    

00010b26 <write_tr>:

static inline void write_tr(uint16_t selector)
{
   10b26:	55                   	push   %ebp
   10b27:	89 e5                	mov    %esp,%ebp
   10b29:	83 ec 04             	sub    $0x4,%esp
   10b2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(selector));
   10b33:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10b37:	0f 00 d8             	ltr    %ax
}
   10b3a:	90                   	nop
   10b3b:	c9                   	leave  
   10b3c:	c3                   	ret    

00010b3d <tss_init>:
#include "cpu/mmu.h"
static task_manager_t task_manager;
int need_reschedule = 0;
static uint32_t idle_task_stack[1024];
static int tss_init(task_t *task,uint32_t entry,uint32_t esp, int kernel_or_user)
{
   10b3d:	55                   	push   %ebp
   10b3e:	89 e5                	mov    %esp,%ebp
   10b40:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(&task->tss,0,sizeof(tss_t));
   10b43:	8b 45 08             	mov    0x8(%ebp),%eax
   10b46:	83 c0 5c             	add    $0x5c,%eax
   10b49:	83 ec 04             	sub    $0x4,%esp
   10b4c:	6a 68                	push   $0x68
   10b4e:	6a 00                	push   $0x0
   10b50:	50                   	push   %eax
   10b51:	e8 29 1b 00 00       	call   1267f <kernel_memset>
   10b56:	83 c4 10             	add    $0x10,%esp
    task->kernel_stack = esp;
   10b59:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5c:	8b 55 10             	mov    0x10(%ebp),%edx
   10b5f:	89 50 10             	mov    %edx,0x10(%eax)
    //0表示内核任务，1表示用户任务
    if(kernel_or_user == 0)
   10b62:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b66:	75 36                	jne    10b9e <tss_init+0x61>
    {
        task->tss.cs = 0x08;    // 内核代码段
   10b68:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6b:	c7 80 a8 00 00 00 08 	movl   $0x8,0xa8(%eax)
   10b72:	00 00 00 
        task->tss.ds = 0x10;    // 内核数据段
   10b75:	8b 45 08             	mov    0x8(%ebp),%eax
   10b78:	c7 80 b0 00 00 00 10 	movl   $0x10,0xb0(%eax)
   10b7f:	00 00 00 
        task->tss.ss = 0x10;    // 内核栈段
   10b82:	8b 45 08             	mov    0x8(%ebp),%eax
   10b85:	c7 80 ac 00 00 00 10 	movl   $0x10,0xac(%eax)
   10b8c:	00 00 00 
        task->tss.eflags = 0x202; // 开启中断
   10b8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b92:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   10b99:	02 00 00 
   10b9c:	eb 34                	jmp    10bd2 <tss_init+0x95>
    }
    else
    {
        task->tss.cs = 0x1B;    // 用户代码段
   10b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba1:	c7 80 a8 00 00 00 1b 	movl   $0x1b,0xa8(%eax)
   10ba8:	00 00 00 
        task->tss.ds = 0x23;    // 用户数据段
   10bab:	8b 45 08             	mov    0x8(%ebp),%eax
   10bae:	c7 80 b0 00 00 00 23 	movl   $0x23,0xb0(%eax)
   10bb5:	00 00 00 
        task->tss.ss = 0x23;    // 用户栈段
   10bb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbb:	c7 80 ac 00 00 00 23 	movl   $0x23,0xac(%eax)
   10bc2:	00 00 00 
        task->tss.eflags = 0x202; // 开启中断
   10bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc8:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   10bcf:	02 00 00 
    }
    task->tss.esp = esp;
   10bd2:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd5:	8b 55 10             	mov    0x10(%ebp),%edx
   10bd8:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.eip = entry;
   10bde:	8b 45 08             	mov    0x8(%ebp),%eax
   10be1:	8b 55 0c             	mov    0xc(%ebp),%edx
   10be4:	89 50 7c             	mov    %edx,0x7c(%eax)
    uint32_t page_dir = memory_create_user_space();
   10be7:	e8 fb fc ff ff       	call   108e7 <memory_create_user_space>
   10bec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(page_dir == 0)
   10bef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10bf3:	75 07                	jne    10bfc <tss_init+0xbf>
    {
        return -1;
   10bf5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bfa:	eb 0e                	jmp    10c0a <tss_init+0xcd>
    }
    task->tss.cr3 = page_dir;
   10bfc:	8b 45 08             	mov    0x8(%ebp),%eax
   10bff:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10c02:	89 50 78             	mov    %edx,0x78(%eax)
    return 0;
   10c05:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c0a:	c9                   	leave  
   10c0b:	c3                   	ret    

00010c0c <kernel_task_init>:
int kernel_task_init(task_t *task,const char *name,uint32_t entry,uint32_t esp)
{
   10c0c:	55                   	push   %ebp
   10c0d:	89 e5                	mov    %esp,%ebp
   10c0f:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task *)0);
    tss_init(task,entry,esp,0);
   10c12:	6a 00                	push   $0x0
   10c14:	ff 75 14             	pushl  0x14(%ebp)
   10c17:	ff 75 10             	pushl  0x10(%ebp)
   10c1a:	ff 75 08             	pushl  0x8(%ebp)
   10c1d:	e8 1b ff ff ff       	call   10b3d <tss_init>
   10c22:	83 c4 10             	add    $0x10,%esp

    task->task_type = TASK_KERNEL;
   10c25:	8b 45 08             	mov    0x8(%ebp),%eax
   10c28:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10c2f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c32:	83 c0 24             	add    $0x24,%eax
   10c35:	83 ec 04             	sub    $0x4,%esp
   10c38:	6a 20                	push   $0x20
   10c3a:	ff 75 0c             	pushl  0xc(%ebp)
   10c3d:	50                   	push   %eax
   10c3e:	e8 ce 18 00 00       	call   12511 <kernel_strncpy>
   10c43:	83 c4 10             	add    $0x10,%esp
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10c46:	8b 45 08             	mov    0x8(%ebp),%eax
   10c49:	c7 40 20 0a 00 00 00 	movl   $0xa,0x20(%eax)
    task->slice_ticks = task->time_ticks;
   10c50:	8b 45 08             	mov    0x8(%ebp),%eax
   10c53:	8b 50 20             	mov    0x20(%eax),%edx
   10c56:	8b 45 08             	mov    0x8(%ebp),%eax
   10c59:	89 50 1c             	mov    %edx,0x1c(%eax)
    task->sleep_ticks = 0;
   10c5c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    task->state = TASK_CREATED;
   10c66:	8b 45 08             	mov    0x8(%ebp),%eax
   10c69:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    
    list_node_init(&task->run_node);
   10c70:	8b 45 08             	mov    0x8(%ebp),%eax
   10c73:	83 c0 44             	add    $0x44,%eax
   10c76:	83 ec 0c             	sub    $0xc,%esp
   10c79:	50                   	push   %eax
   10c7a:	e8 48 fe ff ff       	call   10ac7 <list_node_init>
   10c7f:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   10c82:	8b 45 08             	mov    0x8(%ebp),%eax
   10c85:	83 c0 4c             	add    $0x4c,%eax
   10c88:	83 ec 0c             	sub    $0xc,%esp
   10c8b:	50                   	push   %eax
   10c8c:	e8 36 fe ff ff       	call   10ac7 <list_node_init>
   10c91:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10c94:	8b 45 08             	mov    0x8(%ebp),%eax
   10c97:	83 c0 54             	add    $0x54,%eax
   10c9a:	83 ec 0c             	sub    $0xc,%esp
   10c9d:	50                   	push   %eax
   10c9e:	e8 24 fe ff ff       	call   10ac7 <list_node_init>
   10ca3:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   10ca6:	e8 aa 11 00 00       	call   11e55 <irq_enter_protection>
   10cab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   10cae:	83 ec 0c             	sub    $0xc,%esp
   10cb1:	ff 75 08             	pushl  0x8(%ebp)
   10cb4:	e8 a1 02 00 00       	call   10f5a <task_set_ready>
   10cb9:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   10cbc:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbf:	83 c0 4c             	add    $0x4c,%eax
   10cc2:	83 ec 08             	sub    $0x8,%esp
   10cc5:	50                   	push   %eax
   10cc6:	68 48 70 01 00       	push   $0x17048
   10ccb:	e8 8b 1d 00 00       	call   12a5b <list_insert_last>
   10cd0:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10cd3:	83 ec 0c             	sub    $0xc,%esp
   10cd6:	ff 75 f4             	pushl  -0xc(%ebp)
   10cd9:	e8 8f 11 00 00       	call   11e6d <irq_leave_protection>
   10cde:	83 c4 10             	add    $0x10,%esp
    return 0;
   10ce1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ce6:	c9                   	leave  
   10ce7:	c3                   	ret    

00010ce8 <user_task_init>:


int user_task_init(task_t *task,const char *name,uint32_t entry,uint32_t esp)
{
   10ce8:	55                   	push   %ebp
   10ce9:	89 e5                	mov    %esp,%ebp
   10ceb:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task *)0);
    task->task_type = TASK_USER;
   10cee:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf1:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    tss_init(task,entry,esp,1);
   10cf8:	6a 01                	push   $0x1
   10cfa:	ff 75 14             	pushl  0x14(%ebp)
   10cfd:	ff 75 10             	pushl  0x10(%ebp)
   10d00:	ff 75 08             	pushl  0x8(%ebp)
   10d03:	e8 35 fe ff ff       	call   10b3d <tss_init>
   10d08:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10d0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0e:	83 c0 24             	add    $0x24,%eax
   10d11:	83 ec 04             	sub    $0x4,%esp
   10d14:	6a 20                	push   $0x20
   10d16:	ff 75 0c             	pushl  0xc(%ebp)
   10d19:	50                   	push   %eax
   10d1a:	e8 f2 17 00 00       	call   12511 <kernel_strncpy>
   10d1f:	83 c4 10             	add    $0x10,%esp
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10d22:	8b 45 08             	mov    0x8(%ebp),%eax
   10d25:	c7 40 20 0a 00 00 00 	movl   $0xa,0x20(%eax)
    task->slice_ticks = task->time_ticks;
   10d2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2f:	8b 50 20             	mov    0x20(%eax),%edx
   10d32:	8b 45 08             	mov    0x8(%ebp),%eax
   10d35:	89 50 1c             	mov    %edx,0x1c(%eax)
    task->sleep_ticks = 0;
   10d38:	8b 45 08             	mov    0x8(%ebp),%eax
   10d3b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    task->state = TASK_CREATED;
   10d42:	8b 45 08             	mov    0x8(%ebp),%eax
   10d45:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    
    list_node_init(&task->run_node);
   10d4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d4f:	83 c0 44             	add    $0x44,%eax
   10d52:	83 ec 0c             	sub    $0xc,%esp
   10d55:	50                   	push   %eax
   10d56:	e8 6c fd ff ff       	call   10ac7 <list_node_init>
   10d5b:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   10d5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d61:	83 c0 4c             	add    $0x4c,%eax
   10d64:	83 ec 0c             	sub    $0xc,%esp
   10d67:	50                   	push   %eax
   10d68:	e8 5a fd ff ff       	call   10ac7 <list_node_init>
   10d6d:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10d70:	8b 45 08             	mov    0x8(%ebp),%eax
   10d73:	83 c0 54             	add    $0x54,%eax
   10d76:	83 ec 0c             	sub    $0xc,%esp
   10d79:	50                   	push   %eax
   10d7a:	e8 48 fd ff ff       	call   10ac7 <list_node_init>
   10d7f:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   10d82:	e8 ce 10 00 00       	call   11e55 <irq_enter_protection>
   10d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   10d8a:	83 ec 0c             	sub    $0xc,%esp
   10d8d:	ff 75 08             	pushl  0x8(%ebp)
   10d90:	e8 c5 01 00 00       	call   10f5a <task_set_ready>
   10d95:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   10d98:	8b 45 08             	mov    0x8(%ebp),%eax
   10d9b:	83 c0 4c             	add    $0x4c,%eax
   10d9e:	83 ec 08             	sub    $0x8,%esp
   10da1:	50                   	push   %eax
   10da2:	68 48 70 01 00       	push   $0x17048
   10da7:	e8 af 1c 00 00       	call   12a5b <list_insert_last>
   10dac:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10daf:	83 ec 0c             	sub    $0xc,%esp
   10db2:	ff 75 f4             	pushl  -0xc(%ebp)
   10db5:	e8 b3 10 00 00       	call   11e6d <irq_leave_protection>
   10dba:	83 c4 10             	add    $0x10,%esp
    return 0;
   10dbd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10dc2:	c9                   	leave  
   10dc3:	c3                   	ret    

00010dc4 <idle_task_entry>:
void simple_switch(uint32_t ** from,uint32_t *to);
void interrupt_switch(uint32_t ** from,uint32_t *to);
static void idle_task_entry(void)
{
   10dc4:	55                   	push   %ebp
   10dc5:	89 e5                	mov    %esp,%ebp
    while(1)
    {
        hlt();
   10dc7:	e8 53 fd ff ff       	call   10b1f <hlt>
   10dcc:	eb f9                	jmp    10dc7 <idle_task_entry+0x3>

00010dce <task_manager_init>:
    }
}
void task_manager_init()
{
   10dce:	55                   	push   %ebp
   10dcf:	89 e5                	mov    %esp,%ebp
   10dd1:	83 ec 18             	sub    $0x18,%esp
    int sel = gdt_alloc_desc();
   10dd4:	e8 4e 07 00 00       	call   11527 <gdt_alloc_desc>
   10dd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(0x1B,0,0xFFFFFFFF,SEG_P_PRESENT | SEG_DPL_3 | SEG_S_NORMAL |
   10ddc:	68 fa 00 00 00       	push   $0xfa
   10de1:	6a ff                	push   $0xffffffff
   10de3:	6a 00                	push   $0x0
   10de5:	6a 1b                	push   $0x1b
   10de7:	e8 71 06 00 00       	call   1145d <segment_desc_set>
   10dec:	83 c4 10             	add    $0x10,%esp
        SEG_TYPE_CODE | SEG_TYPE_RW | SEG_DPL_3);
    task_manager.app_code_sel = sel | SEG_CPL_3;
   10def:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10df2:	83 c8 03             	or     $0x3,%eax
   10df5:	a3 e4 71 01 00       	mov    %eax,0x171e4
    sel = gdt_alloc_desc();
   10dfa:	e8 28 07 00 00       	call   11527 <gdt_alloc_desc>
   10dff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(0x23,0,0xFFFFFFFF,SEG_P_PRESENT | SEG_DPL_3 | SEG_S_NORMAL |
   10e02:	68 f2 00 00 00       	push   $0xf2
   10e07:	6a ff                	push   $0xffffffff
   10e09:	6a 00                	push   $0x0
   10e0b:	6a 23                	push   $0x23
   10e0d:	e8 4b 06 00 00       	call   1145d <segment_desc_set>
   10e12:	83 c4 10             	add    $0x10,%esp
        SEG_TYPE_DATA | SEG_TYPE_RW | SEG_DPL_3);
    task_manager.app_data_sel = sel | SEG_CPL_3;
   10e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e18:	83 c8 03             	or     $0x3,%eax
   10e1b:	a3 e8 71 01 00       	mov    %eax,0x171e8
    
    list_init(&task_manager.ready_list);
   10e20:	83 ec 0c             	sub    $0xc,%esp
   10e23:	68 30 70 01 00       	push   $0x17030
   10e28:	e8 aa 1b 00 00       	call   129d7 <list_init>
   10e2d:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10e30:	83 ec 0c             	sub    $0xc,%esp
   10e33:	68 48 70 01 00       	push   $0x17048
   10e38:	e8 9a 1b 00 00       	call   129d7 <list_init>
   10e3d:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10e40:	83 ec 0c             	sub    $0xc,%esp
   10e43:	68 3c 70 01 00       	push   $0x1703c
   10e48:	e8 8a 1b 00 00       	call   129d7 <list_init>
   10e4d:	83 c4 10             	add    $0x10,%esp

    task_manager.current_task = (task_t *)0;
   10e50:	c7 05 2c 70 01 00 00 	movl   $0x0,0x1702c
   10e57:	00 00 00 
    task_manager.from_task = (task_t *)0;
   10e5a:	c7 05 24 70 01 00 00 	movl   $0x0,0x17024
   10e61:	00 00 00 
    task_manager.to_task = (task_t *)0;
   10e64:	c7 05 28 70 01 00 00 	movl   $0x0,0x17028
   10e6b:	00 00 00 
    task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE ;
   10e6e:	c7 05 20 70 01 00 00 	movl   $0x0,0x17020
   10e75:	00 00 00 

    kernel_task_init(&task_manager.idle_task,"idle_task",idle_task_entry,(uint32_t)&idle_task_stack[1024]);
   10e78:	ba 00 82 01 00       	mov    $0x18200,%edx
   10e7d:	b8 c4 0d 01 00       	mov    $0x10dc4,%eax
   10e82:	52                   	push   %edx
   10e83:	50                   	push   %eax
   10e84:	68 a1 2d 01 00       	push   $0x12da1
   10e89:	68 1c 71 01 00       	push   $0x1711c
   10e8e:	e8 79 fd ff ff       	call   10c0c <kernel_task_init>
   10e93:	83 c4 10             	add    $0x10,%esp
}
   10e96:	90                   	nop
   10e97:	c9                   	leave  
   10e98:	c3                   	ret    

00010e99 <task_first_init>:

void task_first_init()
{
   10e99:	55                   	push   %ebp
   10e9a:	89 e5                	mov    %esp,%ebp
   10e9c:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[];
    extern uint8_t e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10e9f:	ba 1b c0 01 00       	mov    $0x1c01b,%edx
   10ea4:	b8 60 ae 01 00       	mov    $0x1ae60,%eax
   10ea9:	29 c2                	sub    %eax,%edx
   10eab:	89 d0                	mov    %edx,%eax
   10ead:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10eb0:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    
    uint32_t first_start = (uint32_t)first_task_entry;
   10eb7:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    kernel_task_init(&task_manager.first_task,"first_task",first_start,0);
   10ebe:	6a 00                	push   $0x0
   10ec0:	ff 75 ec             	pushl  -0x14(%ebp)
   10ec3:	68 ab 2d 01 00       	push   $0x12dab
   10ec8:	68 54 70 01 00       	push   $0x17054
   10ecd:	e8 3a fd ff ff       	call   10c0c <kernel_task_init>
   10ed2:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10ed5:	a1 18 71 01 00       	mov    0x17118,%eax
   10eda:	0f b7 c0             	movzwl %ax,%eax
   10edd:	83 ec 0c             	sub    $0xc,%esp
   10ee0:	50                   	push   %eax
   10ee1:	e8 40 fc ff ff       	call   10b26 <write_tr>
   10ee6:	83 c4 10             	add    $0x10,%esp
    task_manager.current_task = &task_manager.first_task;
   10ee9:	c7 05 2c 70 01 00 54 	movl   $0x17054,0x1702c
   10ef0:	70 01 00 
    mmu_set_page_dir_task(task_manager.current_task);
   10ef3:	a1 2c 70 01 00       	mov    0x1702c,%eax
   10ef8:	83 ec 0c             	sub    $0xc,%esp
   10efb:	50                   	push   %eax
   10efc:	e8 c9 02 00 00       	call   111ca <mmu_set_page_dir_task>
   10f01:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start,alloc_size,PTE_P | PTE_W);
   10f04:	83 ec 04             	sub    $0x4,%esp
   10f07:	6a 03                	push   $0x3
   10f09:	ff 75 f0             	pushl  -0x10(%ebp)
   10f0c:	ff 75 ec             	pushl  -0x14(%ebp)
   10f0f:	e8 91 fb ff ff       	call   10aa5 <memory_alloc_page_for>
   10f14:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start,s_first_task,copy_size);
   10f17:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10f1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10f1d:	83 ec 04             	sub    $0x4,%esp
   10f20:	52                   	push   %edx
   10f21:	68 60 ae 01 00       	push   $0x1ae60
   10f26:	50                   	push   %eax
   10f27:	e8 04 17 00 00       	call   12630 <kernel_memcpy>
   10f2c:	83 c4 10             	add    $0x10,%esp

}
   10f2f:	90                   	nop
   10f30:	c9                   	leave  
   10f31:	c3                   	ret    

00010f32 <get_from_task>:
task_t * get_from_task()
{
   10f32:	55                   	push   %ebp
   10f33:	89 e5                	mov    %esp,%ebp
    return task_manager.from_task;
   10f35:	a1 24 70 01 00       	mov    0x17024,%eax
}
   10f3a:	5d                   	pop    %ebp
   10f3b:	c3                   	ret    

00010f3c <get_to_task>:
task_t * get_to_task()
{
   10f3c:	55                   	push   %ebp
   10f3d:	89 e5                	mov    %esp,%ebp
    return task_manager.to_task;
   10f3f:	a1 28 70 01 00       	mov    0x17028,%eax
}
   10f44:	5d                   	pop    %ebp
   10f45:	c3                   	ret    

00010f46 <task_is_need_reschedule>:
uint32_t task_is_need_reschedule()
{
   10f46:	55                   	push   %ebp
   10f47:	89 e5                	mov    %esp,%ebp
    return task_manager.need_reschedule;
   10f49:	a1 20 70 01 00       	mov    0x17020,%eax
}
   10f4e:	5d                   	pop    %ebp
   10f4f:	c3                   	ret    

00010f50 <task_first_task>:
task_t * task_first_task()
{
   10f50:	55                   	push   %ebp
   10f51:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10f53:	b8 54 70 01 00       	mov    $0x17054,%eax
}
   10f58:	5d                   	pop    %ebp
   10f59:	c3                   	ret    

00010f5a <task_set_ready>:

void task_set_ready(task_t *task)
{
   10f5a:	55                   	push   %ebp
   10f5b:	89 e5                	mov    %esp,%ebp
   10f5d:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   10f60:	81 7d 08 1c 71 01 00 	cmpl   $0x1711c,0x8(%ebp)
   10f67:	74 23                	je     10f8c <task_set_ready+0x32>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   10f69:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6c:	83 c0 44             	add    $0x44,%eax
   10f6f:	83 ec 08             	sub    $0x8,%esp
   10f72:	50                   	push   %eax
   10f73:	68 30 70 01 00       	push   $0x17030
   10f78:	e8 de 1a 00 00       	call   12a5b <list_insert_last>
   10f7d:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;  
   10f80:	8b 45 08             	mov    0x8(%ebp),%eax
   10f83:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
   10f8a:	eb 01                	jmp    10f8d <task_set_ready+0x33>
        return;
   10f8c:	90                   	nop
}
   10f8d:	c9                   	leave  
   10f8e:	c3                   	ret    

00010f8f <task_set_block>:

void task_set_block(task_t *task)
{
   10f8f:	55                   	push   %ebp
   10f90:	89 e5                	mov    %esp,%ebp
   10f92:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   10f95:	81 7d 08 1c 71 01 00 	cmpl   $0x1711c,0x8(%ebp)
   10f9c:	74 19                	je     10fb7 <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   10f9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa1:	83 c0 44             	add    $0x44,%eax
   10fa4:	83 ec 08             	sub    $0x8,%esp
   10fa7:	50                   	push   %eax
   10fa8:	68 30 70 01 00       	push   $0x17030
   10fad:	e8 84 1b 00 00       	call   12b36 <list_remove>
   10fb2:	83 c4 10             	add    $0x10,%esp
   10fb5:	eb 01                	jmp    10fb8 <task_set_block+0x29>
        return;
   10fb7:	90                   	nop
}
   10fb8:	c9                   	leave  
   10fb9:	c3                   	ret    

00010fba <task_current>:

task_t * task_current()
{
   10fba:	55                   	push   %ebp
   10fbb:	89 e5                	mov    %esp,%ebp
    return task_manager.current_task;
   10fbd:	a1 2c 70 01 00       	mov    0x1702c,%eax
}
   10fc2:	5d                   	pop    %ebp
   10fc3:	c3                   	ret    

00010fc4 <sys_sched_yield>:
int sys_sched_yield()
{
   10fc4:	55                   	push   %ebp
   10fc5:	89 e5                	mov    %esp,%ebp
   10fc7:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10fca:	e8 86 0e 00 00       	call   11e55 <irq_enter_protection>
   10fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&task_manager.ready_list) > 1)
   10fd2:	83 ec 0c             	sub    $0xc,%esp
   10fd5:	68 30 70 01 00       	push   $0x17030
   10fda:	e8 0e fb ff ff       	call   10aed <list_count>
   10fdf:	83 c4 10             	add    $0x10,%esp
   10fe2:	83 f8 01             	cmp    $0x1,%eax
   10fe5:	7e 29                	jle    11010 <sys_sched_yield+0x4c>
    {
        task_t * current_task = task_current();
   10fe7:	e8 ce ff ff ff       	call   10fba <task_current>
   10fec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(current_task);
   10fef:	83 ec 0c             	sub    $0xc,%esp
   10ff2:	ff 75 f0             	pushl  -0x10(%ebp)
   10ff5:	e8 95 ff ff ff       	call   10f8f <task_set_block>
   10ffa:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   10ffd:	83 ec 0c             	sub    $0xc,%esp
   11000:	ff 75 f0             	pushl  -0x10(%ebp)
   11003:	e8 52 ff ff ff       	call   10f5a <task_set_ready>
   11008:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   1100b:	e8 78 00 00 00       	call   11088 <task_dispatch>
    }
    irq_leave_protection(state);
   11010:	83 ec 0c             	sub    $0xc,%esp
   11013:	ff 75 f4             	pushl  -0xc(%ebp)
   11016:	e8 52 0e 00 00       	call   11e6d <irq_leave_protection>
   1101b:	83 c4 10             	add    $0x10,%esp
    return 0;
   1101e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11023:	c9                   	leave  
   11024:	c3                   	ret    

00011025 <task_next_run>:

task_t * task_next_run()
{
   11025:	55                   	push   %ebp
   11026:	89 e5                	mov    %esp,%ebp
   11028:	83 ec 10             	sub    $0x10,%esp
    if(list_count(&task_manager.ready_list) == 0)
   1102b:	68 30 70 01 00       	push   $0x17030
   11030:	e8 b8 fa ff ff       	call   10aed <list_count>
   11035:	83 c4 04             	add    $0x4,%esp
   11038:	85 c0                	test   %eax,%eax
   1103a:	75 07                	jne    11043 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   1103c:	b8 1c 71 01 00       	mov    $0x1711c,%eax
   11041:	eb 30                	jmp    11073 <task_next_run+0x4e>
    }
    list_node_t * node = list_first(&task_manager.ready_list);
   11043:	68 30 70 01 00       	push   $0x17030
   11048:	e8 ab fa ff ff       	call   10af8 <list_first>
   1104d:	83 c4 04             	add    $0x4,%esp
   11050:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(node)
   11053:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11057:	74 15                	je     1106e <task_next_run+0x49>
    {
        return list_node_parent(node,task_t,run_node);
   11059:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1105d:	74 08                	je     11067 <task_next_run+0x42>
   1105f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11062:	83 e8 44             	sub    $0x44,%eax
   11065:	eb 0c                	jmp    11073 <task_next_run+0x4e>
   11067:	b8 00 00 00 00       	mov    $0x0,%eax
   1106c:	eb 05                	jmp    11073 <task_next_run+0x4e>
    }
    return (task_t *)0;
   1106e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11073:	c9                   	leave  
   11074:	c3                   	ret    

00011075 <schedule_switch>:

void schedule_switch()
{
   11075:	55                   	push   %ebp
   11076:	89 e5                	mov    %esp,%ebp
   11078:	83 ec 08             	sub    $0x8,%esp
    task_dispatch();
   1107b:	e8 08 00 00 00       	call   11088 <task_dispatch>
    do_schedule_switch();
   11080:	e8 7f 01 00 00       	call   11204 <do_schedule_switch>
}
   11085:	90                   	nop
   11086:	c9                   	leave  
   11087:	c3                   	ret    

00011088 <task_dispatch>:
void task_dispatch()
{
   11088:	55                   	push   %ebp
   11089:	89 e5                	mov    %esp,%ebp
   1108b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1108e:	e8 c2 0d 00 00       	call   11e55 <irq_enter_protection>
   11093:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * next_task = task_next_run();
   11096:	e8 8a ff ff ff       	call   11025 <task_next_run>
   1109b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next_task != task_current())
   1109e:	e8 17 ff ff ff       	call   10fba <task_current>
   110a3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   110a6:	74 34                	je     110dc <task_dispatch+0x54>
    {
        task_t * from = task_current();
   110a8:	e8 0d ff ff ff       	call   10fba <task_current>
   110ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.current_task = next_task;
   110b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   110b3:	a3 2c 70 01 00       	mov    %eax,0x1702c
        next_task->state = TASK_RUNNING;
   110b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   110bb:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        task_manager.need_reschedule = TASK_NEED_RESCHEDULE;
   110c2:	c7 05 20 70 01 00 01 	movl   $0x1,0x17020
   110c9:	00 00 00 
        task_manager.from_task = from;
   110cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   110cf:	a3 24 70 01 00       	mov    %eax,0x17024
        task_manager.to_task = next_task;
   110d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   110d7:	a3 28 70 01 00       	mov    %eax,0x17028
    }
    irq_leave_protection(state);
   110dc:	83 ec 0c             	sub    $0xc,%esp
   110df:	ff 75 f4             	pushl  -0xc(%ebp)
   110e2:	e8 86 0d 00 00       	call   11e6d <irq_leave_protection>
   110e7:	83 c4 10             	add    $0x10,%esp
}
   110ea:	90                   	nop
   110eb:	c9                   	leave  
   110ec:	c3                   	ret    

000110ed <task_time_tick>:

void task_time_tick()
{
   110ed:	55                   	push   %ebp
   110ee:	89 e5                	mov    %esp,%ebp
   110f0:	83 ec 18             	sub    $0x18,%esp
    if(task_manager.need_reschedule)
   110f3:	a1 20 70 01 00       	mov    0x17020,%eax
   110f8:	85 c0                	test   %eax,%eax
   110fa:	0f 85 c7 00 00 00    	jne    111c7 <task_time_tick+0xda>
    {
        return; 
    }
    list_node_t * curr = list_first(&task_manager.sleep_list);
   11100:	68 3c 70 01 00       	push   $0x1703c
   11105:	e8 ee f9 ff ff       	call   10af8 <list_first>
   1110a:	83 c4 04             	add    $0x4,%esp
   1110d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   11110:	eb 5f                	jmp    11171 <task_time_tick+0x84>
    {
        list_node_t * next = list_node_next(curr);
   11112:	ff 75 f4             	pushl  -0xc(%ebp)
   11115:	e8 c8 f9 ff ff       	call   10ae2 <list_node_next>
   1111a:	83 c4 04             	add    $0x4,%esp
   1111d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   11120:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11124:	74 08                	je     1112e <task_time_tick+0x41>
   11126:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11129:	83 e8 44             	sub    $0x44,%eax
   1112c:	eb 05                	jmp    11133 <task_time_tick+0x46>
   1112e:	b8 00 00 00 00       	mov    $0x0,%eax
   11133:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task->sleep_ticks--;
   11136:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11139:	8b 40 18             	mov    0x18(%eax),%eax
   1113c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1113f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11142:	89 50 18             	mov    %edx,0x18(%eax)
        if(task->sleep_ticks <= 0)
   11145:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11148:	8b 40 18             	mov    0x18(%eax),%eax
   1114b:	85 c0                	test   %eax,%eax
   1114d:	7f 1c                	jg     1116b <task_time_tick+0x7e>
        {
            task_set_wakeup(task);
   1114f:	83 ec 0c             	sub    $0xc,%esp
   11152:	ff 75 e8             	pushl  -0x18(%ebp)
   11155:	e8 41 01 00 00       	call   1129b <task_set_wakeup>
   1115a:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1115d:	83 ec 0c             	sub    $0xc,%esp
   11160:	ff 75 e8             	pushl  -0x18(%ebp)
   11163:	e8 f2 fd ff ff       	call   10f5a <task_set_ready>
   11168:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   1116b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1116e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   11171:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11175:	75 9b                	jne    11112 <task_time_tick+0x25>
    }
    task_t * current_task = task_current();
   11177:	e8 3e fe ff ff       	call   10fba <task_current>
   1117c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current_task->slice_ticks--;
   1117f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11182:	8b 40 1c             	mov    0x1c(%eax),%eax
   11185:	8d 50 ff             	lea    -0x1(%eax),%edx
   11188:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1118b:	89 50 1c             	mov    %edx,0x1c(%eax)
    if(current_task->slice_ticks <= 0)
   1118e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11191:	8b 40 1c             	mov    0x1c(%eax),%eax
   11194:	85 c0                	test   %eax,%eax
   11196:	7f 30                	jg     111c8 <task_time_tick+0xdb>
    {
        current_task->slice_ticks = current_task->time_ticks;
   11198:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1119b:	8b 50 20             	mov    0x20(%eax),%edx
   1119e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111a1:	89 50 1c             	mov    %edx,0x1c(%eax)
        task_set_block(current_task);
   111a4:	83 ec 0c             	sub    $0xc,%esp
   111a7:	ff 75 f0             	pushl  -0x10(%ebp)
   111aa:	e8 e0 fd ff ff       	call   10f8f <task_set_block>
   111af:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   111b2:	83 ec 0c             	sub    $0xc,%esp
   111b5:	ff 75 f0             	pushl  -0x10(%ebp)
   111b8:	e8 9d fd ff ff       	call   10f5a <task_set_ready>
   111bd:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   111c0:	e8 c3 fe ff ff       	call   11088 <task_dispatch>
   111c5:	eb 01                	jmp    111c8 <task_time_tick+0xdb>
        return; 
   111c7:	90                   	nop
    }
}
   111c8:	c9                   	leave  
   111c9:	c3                   	ret    

000111ca <mmu_set_page_dir_task>:

void mmu_set_page_dir_task(task_t * to_task)
{
   111ca:	55                   	push   %ebp
   111cb:	89 e5                	mov    %esp,%ebp
   111cd:	53                   	push   %ebx
    if(to_task == (task_t *)0)
   111ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111d2:	74 2a                	je     111fe <mmu_set_page_dir_task+0x34>
    {
        return;
    }
    if(to_task->tss.cr3 != read_cr3() && to_task->tss.cr3 != 0)
   111d4:	8b 45 08             	mov    0x8(%ebp),%eax
   111d7:	8b 58 78             	mov    0x78(%eax),%ebx
   111da:	e8 23 f9 ff ff       	call   10b02 <read_cr3>
   111df:	39 c3                	cmp    %eax,%ebx
   111e1:	74 1c                	je     111ff <mmu_set_page_dir_task+0x35>
   111e3:	8b 45 08             	mov    0x8(%ebp),%eax
   111e6:	8b 40 78             	mov    0x78(%eax),%eax
   111e9:	85 c0                	test   %eax,%eax
   111eb:	74 12                	je     111ff <mmu_set_page_dir_task+0x35>
    {
        write_cr3(to_task->tss.cr3);
   111ed:	8b 45 08             	mov    0x8(%ebp),%eax
   111f0:	8b 40 78             	mov    0x78(%eax),%eax
   111f3:	50                   	push   %eax
   111f4:	e8 1a f9 ff ff       	call   10b13 <write_cr3>
   111f9:	83 c4 04             	add    $0x4,%esp
   111fc:	eb 01                	jmp    111ff <mmu_set_page_dir_task+0x35>
        return;
   111fe:	90                   	nop
    }
}
   111ff:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11202:	c9                   	leave  
   11203:	c3                   	ret    

00011204 <do_schedule_switch>:
void do_schedule_switch(void)
{
   11204:	55                   	push   %ebp
   11205:	89 e5                	mov    %esp,%ebp
   11207:	83 ec 08             	sub    $0x8,%esp
    if (task_manager.need_reschedule) {
   1120a:	a1 20 70 01 00       	mov    0x17020,%eax
   1120f:	85 c0                	test   %eax,%eax
   11211:	74 4a                	je     1125d <do_schedule_switch+0x59>
        task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE;
   11213:	c7 05 20 70 01 00 00 	movl   $0x0,0x17020
   1121a:	00 00 00 
        if (task_manager.from_task && task_manager.from_task != task_manager.to_task) {
   1121d:	a1 24 70 01 00       	mov    0x17024,%eax
   11222:	85 c0                	test   %eax,%eax
   11224:	74 37                	je     1125d <do_schedule_switch+0x59>
   11226:	8b 15 24 70 01 00    	mov    0x17024,%edx
   1122c:	a1 28 70 01 00       	mov    0x17028,%eax
   11231:	39 c2                	cmp    %eax,%edx
   11233:	74 28                	je     1125d <do_schedule_switch+0x59>
            // 在这里进行任务切换
            // 使用简单的栈切换，避免复杂的中断上下文切换
            mmu_set_page_dir_task(task_manager.to_task);
   11235:	a1 28 70 01 00       	mov    0x17028,%eax
   1123a:	50                   	push   %eax
   1123b:	e8 8a ff ff ff       	call   111ca <mmu_set_page_dir_task>
   11240:	83 c4 04             	add    $0x4,%esp
            simple_switch(&task_manager.from_task->stack, task_manager.to_task->stack);
   11243:	a1 28 70 01 00       	mov    0x17028,%eax
   11248:	8b 00                	mov    (%eax),%eax
   1124a:	8b 15 24 70 01 00    	mov    0x17024,%edx
   11250:	83 ec 08             	sub    $0x8,%esp
   11253:	50                   	push   %eax
   11254:	52                   	push   %edx
   11255:	e8 70 f0 ff ff       	call   102ca <simple_switch>
   1125a:	83 c4 10             	add    $0x10,%esp
        }
    }
}
   1125d:	90                   	nop
   1125e:	c9                   	leave  
   1125f:	c3                   	ret    

00011260 <task_set_sleep>:

void task_set_sleep(task_t *task,uint32_t ticks)
{
   11260:	55                   	push   %ebp
   11261:	89 e5                	mov    %esp,%ebp
   11263:	83 ec 08             	sub    $0x8,%esp
    if(ticks == 0)
   11266:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1126a:	74 2c                	je     11298 <task_set_sleep+0x38>
    {
        return;
    }
    task->sleep_ticks = ticks;
   1126c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1126f:	8b 45 08             	mov    0x8(%ebp),%eax
   11272:	89 50 18             	mov    %edx,0x18(%eax)
    task->state = TASK_SLEEP;
   11275:	8b 45 08             	mov    0x8(%ebp),%eax
   11278:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
    list_insert_last(&task_manager.sleep_list,&task->run_node);
   1127f:	8b 45 08             	mov    0x8(%ebp),%eax
   11282:	83 c0 44             	add    $0x44,%eax
   11285:	83 ec 08             	sub    $0x8,%esp
   11288:	50                   	push   %eax
   11289:	68 3c 70 01 00       	push   $0x1703c
   1128e:	e8 c8 17 00 00       	call   12a5b <list_insert_last>
   11293:	83 c4 10             	add    $0x10,%esp
   11296:	eb 01                	jmp    11299 <task_set_sleep+0x39>
        return;
   11298:	90                   	nop
}
   11299:	c9                   	leave  
   1129a:	c3                   	ret    

0001129b <task_set_wakeup>:

void task_set_wakeup(task_t *task)
{
   1129b:	55                   	push   %ebp
   1129c:	89 e5                	mov    %esp,%ebp
   1129e:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   112a1:	8b 45 08             	mov    0x8(%ebp),%eax
   112a4:	83 c0 44             	add    $0x44,%eax
   112a7:	83 ec 08             	sub    $0x8,%esp
   112aa:	50                   	push   %eax
   112ab:	68 3c 70 01 00       	push   $0x1703c
   112b0:	e8 81 18 00 00       	call   12b36 <list_remove>
   112b5:	83 c4 10             	add    $0x10,%esp

    //task->state = TASK_READY;
}
   112b8:	90                   	nop
   112b9:	c9                   	leave  
   112ba:	c3                   	ret    

000112bb <sys_sleep>:

void sys_sleep(uint32_t ms)
{
   112bb:	55                   	push   %ebp
   112bc:	89 e5                	mov    %esp,%ebp
   112be:	53                   	push   %ebx
   112bf:	83 ec 14             	sub    $0x14,%esp
    irq_state_t state = irq_enter_protection();
   112c2:	e8 8e 0b 00 00       	call   11e55 <irq_enter_protection>
   112c7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    
    task_set_block(task_current());
   112ca:	e8 eb fc ff ff       	call   10fba <task_current>
   112cf:	83 ec 0c             	sub    $0xc,%esp
   112d2:	50                   	push   %eax
   112d3:	e8 b7 fc ff ff       	call   10f8f <task_set_block>
   112d8:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_current(),(ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   112db:	8b 45 08             	mov    0x8(%ebp),%eax
   112de:	83 c0 18             	add    $0x18,%eax
   112e1:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   112e6:	f7 e2                	mul    %edx
   112e8:	89 d3                	mov    %edx,%ebx
   112ea:	c1 eb 03             	shr    $0x3,%ebx
   112ed:	e8 c8 fc ff ff       	call   10fba <task_current>
   112f2:	83 ec 08             	sub    $0x8,%esp
   112f5:	53                   	push   %ebx
   112f6:	50                   	push   %eax
   112f7:	e8 64 ff ff ff       	call   11260 <task_set_sleep>
   112fc:	83 c4 10             	add    $0x10,%esp

    schedule_switch();
   112ff:	e8 71 fd ff ff       	call   11075 <schedule_switch>
    irq_leave_protection(state);
   11304:	83 ec 0c             	sub    $0xc,%esp
   11307:	ff 75 f4             	pushl  -0xc(%ebp)
   1130a:	e8 5e 0b 00 00       	call   11e6d <irq_leave_protection>
   1130f:	83 c4 10             	add    $0x10,%esp
}
   11312:	90                   	nop
   11313:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11316:	c9                   	leave  
   11317:	c3                   	ret    

00011318 <schedule_next_task>:

void universal_task_switch();
void schedule_next_task(task_t *current_task,task_t *next_task) {
   11318:	55                   	push   %ebp
   11319:	89 e5                	mov    %esp,%ebp
   1131b:	57                   	push   %edi
   1131c:	56                   	push   %esi
   1131d:	53                   	push   %ebx
   1131e:	83 ec 4c             	sub    $0x4c,%esp
    if (next_task && next_task != current_task) {
   11321:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11325:	0f 84 e7 00 00 00    	je     11412 <schedule_next_task+0xfa>
   1132b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1132e:	3b 45 08             	cmp    0x8(%ebp),%eax
   11331:	0f 84 db 00 00 00    	je     11412 <schedule_next_task+0xfa>
        task_t *old = current_task;
   11337:	8b 45 08             	mov    0x8(%ebp),%eax
   1133a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        current_task = next_task;
   1133d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11340:	89 45 08             	mov    %eax,0x8(%ebp)
        
        // 一个函数搞定所有切换！
        universal_task_switch(
   11343:	8b 45 0c             	mov    0xc(%ebp),%eax
   11346:	8b b8 98 00 00 00    	mov    0x98(%eax),%edi
   1134c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1134f:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   11355:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   11358:	8b 45 0c             	mov    0xc(%ebp),%eax
   1135b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
   11361:	89 45 d0             	mov    %eax,-0x30(%ebp)
   11364:	8b 45 0c             	mov    0xc(%ebp),%eax
   11367:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
   1136d:	89 45 cc             	mov    %eax,-0x34(%ebp)
   11370:	8b 45 0c             	mov    0xc(%ebp),%eax
   11373:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
   11379:	89 45 c8             	mov    %eax,-0x38(%ebp)
   1137c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1137f:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
   11385:	89 45 c4             	mov    %eax,-0x3c(%ebp)
   11388:	8b 45 0c             	mov    0xc(%ebp),%eax
   1138b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
   11391:	89 45 c0             	mov    %eax,-0x40(%ebp)
   11394:	8b 45 0c             	mov    0xc(%ebp),%eax
   11397:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
   1139d:	89 45 bc             	mov    %eax,-0x44(%ebp)
   113a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113a3:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
   113a9:	89 45 b8             	mov    %eax,-0x48(%ebp)
   113ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   113af:	8b 80 80 00 00 00    	mov    0x80(%eax),%eax
   113b5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
   113b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   113bb:	8b 70 7c             	mov    0x7c(%eax),%esi
   113be:	8b 45 0c             	mov    0xc(%ebp),%eax
   113c1:	8b 98 a8 00 00 00    	mov    0xa8(%eax),%ebx
   113c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   113ca:	8b 48 78             	mov    0x78(%eax),%ecx
            old ? &old->tss : (void *)0,               // 保存当前任务的TSS指针
            next_task->task_type,                       // 任务类型 (0=内核, 1=用户)
   113cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   113d0:	8b 50 08             	mov    0x8(%eax),%edx
        universal_task_switch(
   113d3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   113d7:	74 08                	je     113e1 <schedule_next_task+0xc9>
   113d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   113dc:	83 c0 5c             	add    $0x5c,%eax
   113df:	eb 05                	jmp    113e6 <schedule_next_task+0xce>
   113e1:	b8 00 00 00 00       	mov    $0x0,%eax
   113e6:	83 ec 04             	sub    $0x4,%esp
   113e9:	57                   	push   %edi
   113ea:	ff 75 d4             	pushl  -0x2c(%ebp)
   113ed:	ff 75 d0             	pushl  -0x30(%ebp)
   113f0:	ff 75 cc             	pushl  -0x34(%ebp)
   113f3:	ff 75 c8             	pushl  -0x38(%ebp)
   113f6:	ff 75 c4             	pushl  -0x3c(%ebp)
   113f9:	ff 75 c0             	pushl  -0x40(%ebp)
   113fc:	ff 75 bc             	pushl  -0x44(%ebp)
   113ff:	ff 75 b8             	pushl  -0x48(%ebp)
   11402:	ff 75 b4             	pushl  -0x4c(%ebp)
   11405:	56                   	push   %esi
   11406:	53                   	push   %ebx
   11407:	51                   	push   %ecx
   11408:	52                   	push   %edx
   11409:	50                   	push   %eax
   1140a:	e8 20 ef ff ff       	call   1032f <universal_task_switch>
   1140f:	83 c4 40             	add    $0x40,%esp
            next_task->tss.esi,                         // 新任务ESI寄存器
            next_task->tss.edi,                         // 新任务EDI寄存器
            next_task->tss.ebp                          // 新任务EBP寄存器
        );
    }
}
   11412:	90                   	nop
   11413:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11416:	5b                   	pop    %ebx
   11417:	5e                   	pop    %esi
   11418:	5f                   	pop    %edi
   11419:	5d                   	pop    %ebp
   1141a:	c3                   	ret    

0001141b <lgdt>:
{
   1141b:	55                   	push   %ebp
   1141c:	89 e5                	mov    %esp,%ebp
   1141e:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   11421:	8b 45 08             	mov    0x8(%ebp),%eax
   11424:	c1 e8 10             	shr    $0x10,%eax
   11427:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   1142b:	8b 45 08             	mov    0x8(%ebp),%eax
   1142e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   11432:	8b 45 0c             	mov    0xc(%ebp),%eax
   11435:	83 e8 01             	sub    $0x1,%eax
   11438:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1143c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11440:	90                   	nop
   11441:	c9                   	leave  
   11442:	c3                   	ret    

00011443 <far_jump>:
{
   11443:	55                   	push   %ebp
   11444:	89 e5                	mov    %esp,%ebp
   11446:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset ,selector};
   11449:	8b 45 0c             	mov    0xc(%ebp),%eax
   1144c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1144f:	8b 45 08             	mov    0x8(%ebp),%eax
   11452:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11455:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11458:	ff 28                	ljmp   *(%eax)
}
   1145a:	90                   	nop
   1145b:	c9                   	leave  
   1145c:	c3                   	ret    

0001145d <segment_desc_set>:
#include "ipc/mutex.h"
static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t gdt_mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   1145d:	55                   	push   %ebp
   1145e:	89 e5                	mov    %esp,%ebp
   11460:	83 ec 14             	sub    $0x14,%esp
   11463:	8b 45 14             	mov    0x14(%ebp),%eax
   11466:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   1146a:	8b 45 08             	mov    0x8(%ebp),%eax
   1146d:	83 e0 f8             	and    $0xfffffff8,%eax
   11470:	05 00 82 01 00       	add    $0x18200,%eax
   11475:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(limit > 0xfffff)
   11478:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1147f:	76 0f                	jbe    11490 <segment_desc_set+0x33>
    {
        limit /= 0x1000;
   11481:	8b 45 10             	mov    0x10(%ebp),%eax
   11484:	c1 e8 0c             	shr    $0xc,%eax
   11487:	89 45 10             	mov    %eax,0x10(%ebp)
        attr |= SEG_G;
   1148a:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   11490:	8b 45 10             	mov    0x10(%ebp),%eax
   11493:	89 c2                	mov    %eax,%edx
   11495:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11498:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   1149b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1149e:	89 c2                	mov    %eax,%edx
   114a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114a3:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   114a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   114aa:	c1 e8 10             	shr    $0x10,%eax
   114ad:	89 c2                	mov    %eax,%edx
   114af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114b2:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0x0f) << 8);
   114b5:	8b 45 10             	mov    0x10(%ebp),%eax
   114b8:	c1 e8 10             	shr    $0x10,%eax
   114bb:	c1 e0 08             	shl    $0x8,%eax
   114be:	66 25 00 0f          	and    $0xf00,%ax
   114c2:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   114c6:	89 c2                	mov    %eax,%edx
   114c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114cb:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   114cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   114d2:	c1 e8 18             	shr    $0x18,%eax
   114d5:	89 c2                	mov    %eax,%edx
   114d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114da:	88 50 07             	mov    %dl,0x7(%eax)
}
   114dd:	90                   	nop
   114de:	c9                   	leave  
   114df:	c3                   	ret    

000114e0 <gate_desc_set>:
void gate_desc_set(gate_desc_t * gate_desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   114e0:	55                   	push   %ebp
   114e1:	89 e5                	mov    %esp,%ebp
   114e3:	83 ec 08             	sub    $0x8,%esp
   114e6:	8b 55 0c             	mov    0xc(%ebp),%edx
   114e9:	8b 45 14             	mov    0x14(%ebp),%eax
   114ec:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   114f0:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    gate_desc->selector = selector;
   114f4:	8b 45 08             	mov    0x8(%ebp),%eax
   114f7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114fb:	66 89 50 02          	mov    %dx,0x2(%eax)
    gate_desc->offset15_0 = offset & 0xffff;
   114ff:	8b 45 10             	mov    0x10(%ebp),%eax
   11502:	89 c2                	mov    %eax,%edx
   11504:	8b 45 08             	mov    0x8(%ebp),%eax
   11507:	66 89 10             	mov    %dx,(%eax)
    gate_desc->offset31_16 = (offset >> 16) & 0xffff;
   1150a:	8b 45 10             	mov    0x10(%ebp),%eax
   1150d:	c1 e8 10             	shr    $0x10,%eax
   11510:	89 c2                	mov    %eax,%edx
   11512:	8b 45 08             	mov    0x8(%ebp),%eax
   11515:	66 89 50 06          	mov    %dx,0x6(%eax)
    gate_desc->attr = attr;
   11519:	8b 45 08             	mov    0x8(%ebp),%eax
   1151c:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11520:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   11524:	90                   	nop
   11525:	c9                   	leave  
   11526:	c3                   	ret    

00011527 <gdt_alloc_desc>:

int gdt_alloc_desc(void)
{
   11527:	55                   	push   %ebp
   11528:	89 e5                	mov    %esp,%ebp
   1152a:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&gdt_mutex);
   1152d:	83 ec 0c             	sub    $0xc,%esp
   11530:	68 00 8a 01 00       	push   $0x18a00
   11535:	e8 c6 0a 00 00       	call   12000 <mutex_lock>
   1153a:	83 c4 10             	add    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1153d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11544:	eb 2c                	jmp    11572 <gdt_alloc_desc+0x4b>
    {
        if(gdt_table[i].attr == 0)
   11546:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11549:	0f b7 04 c5 05 82 01 	movzwl 0x18205(,%eax,8),%eax
   11550:	00 
   11551:	66 85 c0             	test   %ax,%ax
   11554:	75 18                	jne    1156e <gdt_alloc_desc+0x47>
        {
            mutex_unlock(&gdt_mutex);
   11556:	83 ec 0c             	sub    $0xc,%esp
   11559:	68 00 8a 01 00       	push   $0x18a00
   1155e:	e8 2d 0b 00 00       	call   12090 <mutex_unlock>
   11563:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   11566:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11569:	c1 e0 03             	shl    $0x3,%eax
   1156c:	eb 22                	jmp    11590 <gdt_alloc_desc+0x69>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1156e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11572:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11579:	7e cb                	jle    11546 <gdt_alloc_desc+0x1f>
        }
        
    }
    mutex_unlock(&gdt_mutex);
   1157b:	83 ec 0c             	sub    $0xc,%esp
   1157e:	68 00 8a 01 00       	push   $0x18a00
   11583:	e8 08 0b 00 00       	call   12090 <mutex_unlock>
   11588:	83 c4 10             	add    $0x10,%esp
    return -1;
   1158b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11590:	c9                   	leave  
   11591:	c3                   	ret    

00011592 <gdt_free_desc>:

void gdt_free_desc(int selector)
{
   11592:	55                   	push   %ebp
   11593:	89 e5                	mov    %esp,%ebp
   11595:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&gdt_mutex);
   11598:	83 ec 0c             	sub    $0xc,%esp
   1159b:	68 00 8a 01 00       	push   $0x18a00
   115a0:	e8 5b 0a 00 00       	call   12000 <mutex_lock>
   115a5:	83 c4 10             	add    $0x10,%esp
    gdt_table[selector / sizeof(segment_desc_t)].attr = 0;
   115a8:	8b 45 08             	mov    0x8(%ebp),%eax
   115ab:	c1 e8 03             	shr    $0x3,%eax
   115ae:	66 c7 04 c5 05 82 01 	movw   $0x0,0x18205(,%eax,8)
   115b5:	00 00 00 
    mutex_unlock(&gdt_mutex);
   115b8:	83 ec 0c             	sub    $0xc,%esp
   115bb:	68 00 8a 01 00       	push   $0x18a00
   115c0:	e8 cb 0a 00 00       	call   12090 <mutex_unlock>
   115c5:	83 c4 10             	add    $0x10,%esp
}
   115c8:	90                   	nop
   115c9:	c9                   	leave  
   115ca:	c3                   	ret    

000115cb <init_gdt>:
void init_gdt(void)
{
   115cb:	55                   	push   %ebp
   115cc:	89 e5                	mov    %esp,%ebp
   115ce:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   115d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   115d8:	eb 19                	jmp    115f3 <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   115da:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115dd:	c1 e0 03             	shl    $0x3,%eax
   115e0:	6a 00                	push   $0x0
   115e2:	6a 00                	push   $0x0
   115e4:	6a 00                	push   $0x0
   115e6:	50                   	push   %eax
   115e7:	e8 71 fe ff ff       	call   1145d <segment_desc_set>
   115ec:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   115ef:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   115f3:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   115fa:	7e de                	jle    115da <init_gdt+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   115fc:	68 9a 40 00 00       	push   $0x409a
   11601:	6a ff                	push   $0xffffffff
   11603:	6a 00                	push   $0x0
   11605:	6a 08                	push   $0x8
   11607:	e8 51 fe ff ff       	call   1145d <segment_desc_set>
   1160c:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   1160f:	68 92 40 00 00       	push   $0x4092
   11614:	6a ff                	push   $0xffffffff
   11616:	6a 00                	push   $0x0
   11618:	6a 10                	push   $0x10
   1161a:	e8 3e fe ff ff       	call   1145d <segment_desc_set>
   1161f:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11622:	b8 00 82 01 00       	mov    $0x18200,%eax
   11627:	68 00 08 00 00       	push   $0x800
   1162c:	50                   	push   %eax
   1162d:	e8 e9 fd ff ff       	call   1141b <lgdt>
   11632:	83 c4 08             	add    $0x8,%esp
}
   11635:	90                   	nop
   11636:	c9                   	leave  
   11637:	c3                   	ret    

00011638 <cpu_init>:

void cpu_init(void)
{
   11638:	55                   	push   %ebp
   11639:	89 e5                	mov    %esp,%ebp
   1163b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&gdt_mutex);
   1163e:	83 ec 0c             	sub    $0xc,%esp
   11641:	68 00 8a 01 00       	push   $0x18a00
   11646:	e8 89 09 00 00       	call   11fd4 <mutex_init>
   1164b:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   1164e:	e8 78 ff ff ff       	call   115cb <init_gdt>
    
}
   11653:	90                   	nop
   11654:	c9                   	leave  
   11655:	c3                   	ret    

00011656 <switch_to_tss>:

void switch_to_tss (int tss_sel)
{
   11656:	55                   	push   %ebp
   11657:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   11659:	8b 45 08             	mov    0x8(%ebp),%eax
   1165c:	6a 00                	push   $0x0
   1165e:	50                   	push   %eax
   1165f:	e8 df fd ff ff       	call   11443 <far_jump>
   11664:	83 c4 08             	add    $0x8,%esp
   11667:	90                   	nop
   11668:	c9                   	leave  
   11669:	c3                   	ret    

0001166a <inb>:
{
   1166a:	55                   	push   %ebp
   1166b:	89 e5                	mov    %esp,%ebp
   1166d:	83 ec 14             	sub    $0x14,%esp
   11670:	8b 45 08             	mov    0x8(%ebp),%eax
   11673:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   11677:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1167b:	89 c2                	mov    %eax,%edx
   1167d:	ec                   	in     (%dx),%al
   1167e:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11681:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11685:	c9                   	leave  
   11686:	c3                   	ret    

00011687 <outb>:
{
   11687:	55                   	push   %ebp
   11688:	89 e5                	mov    %esp,%ebp
   1168a:	83 ec 08             	sub    $0x8,%esp
   1168d:	8b 55 08             	mov    0x8(%ebp),%edx
   11690:	8b 45 0c             	mov    0xc(%ebp),%eax
   11693:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11697:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   1169a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1169e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   116a2:	ee                   	out    %al,(%dx)
}
   116a3:	90                   	nop
   116a4:	c9                   	leave  
   116a5:	c3                   	ret    

000116a6 <cli>:
{
   116a6:	55                   	push   %ebp
   116a7:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   116a9:	fa                   	cli    
}
   116aa:	90                   	nop
   116ab:	5d                   	pop    %ebp
   116ac:	c3                   	ret    

000116ad <sti>:
{
   116ad:	55                   	push   %ebp
   116ae:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   116b0:	fb                   	sti    
}
   116b1:	90                   	nop
   116b2:	5d                   	pop    %ebp
   116b3:	c3                   	ret    

000116b4 <lidt>:
{
   116b4:	55                   	push   %ebp
   116b5:	89 e5                	mov    %esp,%ebp
   116b7:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   116ba:	8b 45 08             	mov    0x8(%ebp),%eax
   116bd:	c1 e8 10             	shr    $0x10,%eax
   116c0:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   116c4:	8b 45 08             	mov    0x8(%ebp),%eax
   116c7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   116cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   116ce:	83 e8 01             	sub    $0x1,%eax
   116d1:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[i]"::[i]"m"(idt));
   116d5:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   116d9:	90                   	nop
   116da:	c9                   	leave  
   116db:	c3                   	ret    

000116dc <hlt>:
{
   116dc:	55                   	push   %ebp
   116dd:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   116df:	f4                   	hlt    
}
   116e0:	90                   	nop
   116e1:	5d                   	pop    %ebp
   116e2:	c3                   	ret    

000116e3 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   116e3:	55                   	push   %ebp
   116e4:	89 e5                	mov    %esp,%ebp
   116e6:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   116e9:	9c                   	pushf  
   116ea:	58                   	pop    %eax
   116eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   116ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116f1:	c9                   	leave  
   116f2:	c3                   	ret    

000116f3 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   116f3:	55                   	push   %ebp
   116f4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   116f6:	8b 45 08             	mov    0x8(%ebp),%eax
   116f9:	50                   	push   %eax
   116fa:	9d                   	popf   
}
   116fb:	90                   	nop
   116fc:	5d                   	pop    %ebp
   116fd:	c3                   	ret    

000116fe <dump_core_regs>:
#include "os_cfg.h"
#include "tools/log.h"
#define IRQ_TABLE_NU 128
static gate_desc_t idt_table[IRQ_TABLE_NU];
static dump_core_regs(exception_frame_t *frame)
{
   116fe:	55                   	push   %ebp
   116ff:	89 e5                	mov    %esp,%ebp
   11701:	57                   	push   %edi
   11702:	56                   	push   %esi
   11703:	53                   	push   %ebx
   11704:	83 ec 0c             	sub    $0xc,%esp
    log_printf("IRQ: %d, error code: %d\n",frame->irq_num,frame->error_code);
   11707:	8b 45 08             	mov    0x8(%ebp),%eax
   1170a:	8b 50 34             	mov    0x34(%eax),%edx
   1170d:	8b 45 08             	mov    0x8(%ebp),%eax
   11710:	8b 40 30             	mov    0x30(%eax),%eax
   11713:	83 ec 04             	sub    $0x4,%esp
   11716:	52                   	push   %edx
   11717:	50                   	push   %eax
   11718:	68 b8 2d 01 00       	push   $0x12db8
   1171d:	e8 71 15 00 00       	call   12c93 <log_printf>
   11722:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d DS: %d ES: %d SS: %d FS: %d GS: %d\n",frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
   11725:	8b 45 08             	mov    0x8(%ebp),%eax
   11728:	8b 38                	mov    (%eax),%edi
   1172a:	8b 45 08             	mov    0x8(%ebp),%eax
   1172d:	8b 70 04             	mov    0x4(%eax),%esi
   11730:	8b 45 08             	mov    0x8(%ebp),%eax
   11733:	8b 58 0c             	mov    0xc(%eax),%ebx
   11736:	8b 45 08             	mov    0x8(%ebp),%eax
   11739:	8b 48 08             	mov    0x8(%eax),%ecx
   1173c:	8b 45 08             	mov    0x8(%ebp),%eax
   1173f:	8b 50 0c             	mov    0xc(%eax),%edx
   11742:	8b 45 08             	mov    0x8(%ebp),%eax
   11745:	8b 40 3c             	mov    0x3c(%eax),%eax
   11748:	83 ec 04             	sub    $0x4,%esp
   1174b:	57                   	push   %edi
   1174c:	56                   	push   %esi
   1174d:	53                   	push   %ebx
   1174e:	51                   	push   %ecx
   1174f:	52                   	push   %edx
   11750:	50                   	push   %eax
   11751:	68 d4 2d 01 00       	push   $0x12dd4
   11756:	e8 38 15 00 00       	call   12c93 <log_printf>
   1175b:	83 c4 20             	add    $0x20,%esp
    log_printf("EAX: 0x%x EBX: 0x%x ECX: 0x%x EDX: 0x%x\n",frame->eax,frame->ebx,frame->ecx,frame->edx);
   1175e:	8b 45 08             	mov    0x8(%ebp),%eax
   11761:	8b 58 24             	mov    0x24(%eax),%ebx
   11764:	8b 45 08             	mov    0x8(%ebp),%eax
   11767:	8b 48 28             	mov    0x28(%eax),%ecx
   1176a:	8b 45 08             	mov    0x8(%ebp),%eax
   1176d:	8b 50 20             	mov    0x20(%eax),%edx
   11770:	8b 45 08             	mov    0x8(%ebp),%eax
   11773:	8b 40 2c             	mov    0x2c(%eax),%eax
   11776:	83 ec 0c             	sub    $0xc,%esp
   11779:	53                   	push   %ebx
   1177a:	51                   	push   %ecx
   1177b:	52                   	push   %edx
   1177c:	50                   	push   %eax
   1177d:	68 00 2e 01 00       	push   $0x12e00
   11782:	e8 0c 15 00 00       	call   12c93 <log_printf>
   11787:	83 c4 20             	add    $0x20,%esp
    log_printf("EIP: 0x%x EFLAGS: 0x%x ESP: 0x%x EBP: 0x%x\n",frame->eip,frame->eflags,frame->esp,frame->ebp);
   1178a:	8b 45 08             	mov    0x8(%ebp),%eax
   1178d:	8b 58 18             	mov    0x18(%eax),%ebx
   11790:	8b 45 08             	mov    0x8(%ebp),%eax
   11793:	8b 48 1c             	mov    0x1c(%eax),%ecx
   11796:	8b 45 08             	mov    0x8(%ebp),%eax
   11799:	8b 50 40             	mov    0x40(%eax),%edx
   1179c:	8b 45 08             	mov    0x8(%ebp),%eax
   1179f:	8b 40 38             	mov    0x38(%eax),%eax
   117a2:	83 ec 0c             	sub    $0xc,%esp
   117a5:	53                   	push   %ebx
   117a6:	51                   	push   %ecx
   117a7:	52                   	push   %edx
   117a8:	50                   	push   %eax
   117a9:	68 2c 2e 01 00       	push   $0x12e2c
   117ae:	e8 e0 14 00 00       	call   12c93 <log_printf>
   117b3:	83 c4 20             	add    $0x20,%esp
    log_printf("EDI: 0x%x ESI: 0x%x EDI: 0x%x\n",frame->edi,frame->esi,frame->edi);
   117b6:	8b 45 08             	mov    0x8(%ebp),%eax
   117b9:	8b 48 10             	mov    0x10(%eax),%ecx
   117bc:	8b 45 08             	mov    0x8(%ebp),%eax
   117bf:	8b 50 14             	mov    0x14(%eax),%edx
   117c2:	8b 45 08             	mov    0x8(%ebp),%eax
   117c5:	8b 40 10             	mov    0x10(%eax),%eax
   117c8:	51                   	push   %ecx
   117c9:	52                   	push   %edx
   117ca:	50                   	push   %eax
   117cb:	68 58 2e 01 00       	push   $0x12e58
   117d0:	e8 be 14 00 00       	call   12c93 <log_printf>
   117d5:	83 c4 10             	add    $0x10,%esp
}
   117d8:	90                   	nop
   117d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
   117dc:	5b                   	pop    %ebx
   117dd:	5e                   	pop    %esi
   117de:	5f                   	pop    %edi
   117df:	5d                   	pop    %ebp
   117e0:	c3                   	ret    

000117e1 <do_default_handler>:
static void do_default_handler(exception_frame_t *frame,const char *message)
{
   117e1:	55                   	push   %ebp
   117e2:	89 e5                	mov    %esp,%ebp
   117e4:	83 ec 08             	sub    $0x8,%esp
    log_printf("---------------------\n");
   117e7:	83 ec 0c             	sub    $0xc,%esp
   117ea:	68 77 2e 01 00       	push   $0x12e77
   117ef:	e8 9f 14 00 00       	call   12c93 <log_printf>
   117f4:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s\n",message);
   117f7:	83 ec 08             	sub    $0x8,%esp
   117fa:	ff 75 0c             	pushl  0xc(%ebp)
   117fd:	68 8e 2e 01 00       	push   $0x12e8e
   11802:	e8 8c 14 00 00       	call   12c93 <log_printf>
   11807:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   1180a:	83 ec 0c             	sub    $0xc,%esp
   1180d:	ff 75 08             	pushl  0x8(%ebp)
   11810:	e8 e9 fe ff ff       	call   116fe <dump_core_regs>
   11815:	83 c4 10             	add    $0x10,%esp
    for(;;)
    {
        hlt();
   11818:	e8 bf fe ff ff       	call   116dc <hlt>
   1181d:	eb f9                	jmp    11818 <do_default_handler+0x37>

0001181f <do_handler_unknown>:
    }
}
void do_handler_unknown(exception_frame_t *frame)
{
   1181f:	55                   	push   %ebp
   11820:	89 e5                	mov    %esp,%ebp
   11822:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"unknown exception");
   11825:	83 ec 08             	sub    $0x8,%esp
   11828:	68 a9 2e 01 00       	push   $0x12ea9
   1182d:	ff 75 08             	pushl  0x8(%ebp)
   11830:	e8 ac ff ff ff       	call   117e1 <do_default_handler>
   11835:	83 c4 10             	add    $0x10,%esp
}
   11838:	90                   	nop
   11839:	c9                   	leave  
   1183a:	c3                   	ret    

0001183b <do_handler_divider>:
void do_handler_divider(exception_frame_t *frame)
{
   1183b:	55                   	push   %ebp
   1183c:	89 e5                	mov    %esp,%ebp
   1183e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"divider exception");
   11841:	83 ec 08             	sub    $0x8,%esp
   11844:	68 bb 2e 01 00       	push   $0x12ebb
   11849:	ff 75 08             	pushl  0x8(%ebp)
   1184c:	e8 90 ff ff ff       	call   117e1 <do_default_handler>
   11851:	83 c4 10             	add    $0x10,%esp
}
   11854:	90                   	nop
   11855:	c9                   	leave  
   11856:	c3                   	ret    

00011857 <do_handler_debug>:
void do_handler_debug(exception_frame_t *frame)
{
   11857:	55                   	push   %ebp
   11858:	89 e5                	mov    %esp,%ebp
   1185a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"debug exception");
   1185d:	83 ec 08             	sub    $0x8,%esp
   11860:	68 cd 2e 01 00       	push   $0x12ecd
   11865:	ff 75 08             	pushl  0x8(%ebp)
   11868:	e8 74 ff ff ff       	call   117e1 <do_default_handler>
   1186d:	83 c4 10             	add    $0x10,%esp
}
   11870:	90                   	nop
   11871:	c9                   	leave  
   11872:	c3                   	ret    

00011873 <do_handler_nmi>:
void do_handler_nmi(exception_frame_t *frame)   
{
   11873:	55                   	push   %ebp
   11874:	89 e5                	mov    %esp,%ebp
   11876:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"nmi exception");
   11879:	83 ec 08             	sub    $0x8,%esp
   1187c:	68 dd 2e 01 00       	push   $0x12edd
   11881:	ff 75 08             	pushl  0x8(%ebp)
   11884:	e8 58 ff ff ff       	call   117e1 <do_default_handler>
   11889:	83 c4 10             	add    $0x10,%esp
}
   1188c:	90                   	nop
   1188d:	c9                   	leave  
   1188e:	c3                   	ret    

0001188f <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t *frame)
{
   1188f:	55                   	push   %ebp
   11890:	89 e5                	mov    %esp,%ebp
   11892:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"breakpoint exception");
   11895:	83 ec 08             	sub    $0x8,%esp
   11898:	68 eb 2e 01 00       	push   $0x12eeb
   1189d:	ff 75 08             	pushl  0x8(%ebp)
   118a0:	e8 3c ff ff ff       	call   117e1 <do_default_handler>
   118a5:	83 c4 10             	add    $0x10,%esp
}
   118a8:	90                   	nop
   118a9:	c9                   	leave  
   118aa:	c3                   	ret    

000118ab <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   118ab:	55                   	push   %ebp
   118ac:	89 e5                	mov    %esp,%ebp
   118ae:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"overflow exception");
   118b1:	83 ec 08             	sub    $0x8,%esp
   118b4:	68 00 2f 01 00       	push   $0x12f00
   118b9:	ff 75 08             	pushl  0x8(%ebp)
   118bc:	e8 20 ff ff ff       	call   117e1 <do_default_handler>
   118c1:	83 c4 10             	add    $0x10,%esp
}
   118c4:	90                   	nop
   118c5:	c9                   	leave  
   118c6:	c3                   	ret    

000118c7 <do_handler_bounds>:
void do_handler_bounds(exception_frame_t *frame)
{
   118c7:	55                   	push   %ebp
   118c8:	89 e5                	mov    %esp,%ebp
   118ca:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"bounds exception");
   118cd:	83 ec 08             	sub    $0x8,%esp
   118d0:	68 13 2f 01 00       	push   $0x12f13
   118d5:	ff 75 08             	pushl  0x8(%ebp)
   118d8:	e8 04 ff ff ff       	call   117e1 <do_default_handler>
   118dd:	83 c4 10             	add    $0x10,%esp
}
   118e0:	90                   	nop
   118e1:	c9                   	leave  
   118e2:	c3                   	ret    

000118e3 <do_handler_invalid_op>:
void do_handler_invalid_op(exception_frame_t *frame)
{
   118e3:	55                   	push   %ebp
   118e4:	89 e5                	mov    %esp,%ebp
   118e6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid operation exception");
   118e9:	83 ec 08             	sub    $0x8,%esp
   118ec:	68 24 2f 01 00       	push   $0x12f24
   118f1:	ff 75 08             	pushl  0x8(%ebp)
   118f4:	e8 e8 fe ff ff       	call   117e1 <do_default_handler>
   118f9:	83 c4 10             	add    $0x10,%esp
}
   118fc:	90                   	nop
   118fd:	c9                   	leave  
   118fe:	c3                   	ret    

000118ff <do_handler_device_not_available>:
void do_handler_device_not_available(exception_frame_t *frame)
{
   118ff:	55                   	push   %ebp
   11900:	89 e5                	mov    %esp,%ebp
   11902:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"device not available exception");
   11905:	83 ec 08             	sub    $0x8,%esp
   11908:	68 40 2f 01 00       	push   $0x12f40
   1190d:	ff 75 08             	pushl  0x8(%ebp)
   11910:	e8 cc fe ff ff       	call   117e1 <do_default_handler>
   11915:	83 c4 10             	add    $0x10,%esp
}
   11918:	90                   	nop
   11919:	c9                   	leave  
   1191a:	c3                   	ret    

0001191b <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   1191b:	55                   	push   %ebp
   1191c:	89 e5                	mov    %esp,%ebp
   1191e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"double fault exception");
   11921:	83 ec 08             	sub    $0x8,%esp
   11924:	68 5f 2f 01 00       	push   $0x12f5f
   11929:	ff 75 08             	pushl  0x8(%ebp)
   1192c:	e8 b0 fe ff ff       	call   117e1 <do_default_handler>
   11931:	83 c4 10             	add    $0x10,%esp
}
   11934:	90                   	nop
   11935:	c9                   	leave  
   11936:	c3                   	ret    

00011937 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   11937:	55                   	push   %ebp
   11938:	89 e5                	mov    %esp,%ebp
   1193a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid tss exception");
   1193d:	83 ec 08             	sub    $0x8,%esp
   11940:	68 76 2f 01 00       	push   $0x12f76
   11945:	ff 75 08             	pushl  0x8(%ebp)
   11948:	e8 94 fe ff ff       	call   117e1 <do_default_handler>
   1194d:	83 c4 10             	add    $0x10,%esp
}
   11950:	90                   	nop
   11951:	c9                   	leave  
   11952:	c3                   	ret    

00011953 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   11953:	55                   	push   %ebp
   11954:	89 e5                	mov    %esp,%ebp
   11956:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"segment not present exception");
   11959:	83 ec 08             	sub    $0x8,%esp
   1195c:	68 8c 2f 01 00       	push   $0x12f8c
   11961:	ff 75 08             	pushl  0x8(%ebp)
   11964:	e8 78 fe ff ff       	call   117e1 <do_default_handler>
   11969:	83 c4 10             	add    $0x10,%esp
}
   1196c:	90                   	nop
   1196d:	c9                   	leave  
   1196e:	c3                   	ret    

0001196f <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   1196f:	55                   	push   %ebp
   11970:	89 e5                	mov    %esp,%ebp
   11972:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"stack segment fault exception");
   11975:	83 ec 08             	sub    $0x8,%esp
   11978:	68 aa 2f 01 00       	push   $0x12faa
   1197d:	ff 75 08             	pushl  0x8(%ebp)
   11980:	e8 5c fe ff ff       	call   117e1 <do_default_handler>
   11985:	83 c4 10             	add    $0x10,%esp
}
   11988:	90                   	nop
   11989:	c9                   	leave  
   1198a:	c3                   	ret    

0001198b <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   1198b:	55                   	push   %ebp
   1198c:	89 e5                	mov    %esp,%ebp
   1198e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"general protection exception");
   11991:	83 ec 08             	sub    $0x8,%esp
   11994:	68 c8 2f 01 00       	push   $0x12fc8
   11999:	ff 75 08             	pushl  0x8(%ebp)
   1199c:	e8 40 fe ff ff       	call   117e1 <do_default_handler>
   119a1:	83 c4 10             	add    $0x10,%esp
}
   119a4:	90                   	nop
   119a5:	c9                   	leave  
   119a6:	c3                   	ret    

000119a7 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   119a7:	55                   	push   %ebp
   119a8:	89 e5                	mov    %esp,%ebp
   119aa:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"page fault exception");
   119ad:	83 ec 08             	sub    $0x8,%esp
   119b0:	68 e5 2f 01 00       	push   $0x12fe5
   119b5:	ff 75 08             	pushl  0x8(%ebp)
   119b8:	e8 24 fe ff ff       	call   117e1 <do_default_handler>
   119bd:	83 c4 10             	add    $0x10,%esp
}
   119c0:	90                   	nop
   119c1:	c9                   	leave  
   119c2:	c3                   	ret    

000119c3 <do_handler_x87_floating_point>:
void do_handler_x87_floating_point(exception_frame_t *frame)
{   
   119c3:	55                   	push   %ebp
   119c4:	89 e5                	mov    %esp,%ebp
   119c6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"x87 floating point exception");
   119c9:	83 ec 08             	sub    $0x8,%esp
   119cc:	68 fa 2f 01 00       	push   $0x12ffa
   119d1:	ff 75 08             	pushl  0x8(%ebp)
   119d4:	e8 08 fe ff ff       	call   117e1 <do_default_handler>
   119d9:	83 c4 10             	add    $0x10,%esp
}
   119dc:	90                   	nop
   119dd:	c9                   	leave  
   119de:	c3                   	ret    

000119df <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   119df:	55                   	push   %ebp
   119e0:	89 e5                	mov    %esp,%ebp
   119e2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"alignment check exception");
   119e5:	83 ec 08             	sub    $0x8,%esp
   119e8:	68 17 30 01 00       	push   $0x13017
   119ed:	ff 75 08             	pushl  0x8(%ebp)
   119f0:	e8 ec fd ff ff       	call   117e1 <do_default_handler>
   119f5:	83 c4 10             	add    $0x10,%esp
}
   119f8:	90                   	nop
   119f9:	c9                   	leave  
   119fa:	c3                   	ret    

000119fb <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   119fb:	55                   	push   %ebp
   119fc:	89 e5                	mov    %esp,%ebp
   119fe:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"machine check exception");
   11a01:	83 ec 08             	sub    $0x8,%esp
   11a04:	68 31 30 01 00       	push   $0x13031
   11a09:	ff 75 08             	pushl  0x8(%ebp)
   11a0c:	e8 d0 fd ff ff       	call   117e1 <do_default_handler>
   11a11:	83 c4 10             	add    $0x10,%esp
}
   11a14:	90                   	nop
   11a15:	c9                   	leave  
   11a16:	c3                   	ret    

00011a17 <do_handler_simd_floating_point>:
void do_handler_simd_floating_point(exception_frame_t *frame)
{
   11a17:	55                   	push   %ebp
   11a18:	89 e5                	mov    %esp,%ebp
   11a1a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"simd floating point exception");
   11a1d:	83 ec 08             	sub    $0x8,%esp
   11a20:	68 49 30 01 00       	push   $0x13049
   11a25:	ff 75 08             	pushl  0x8(%ebp)
   11a28:	e8 b4 fd ff ff       	call   117e1 <do_default_handler>
   11a2d:	83 c4 10             	add    $0x10,%esp
}
   11a30:	90                   	nop
   11a31:	c9                   	leave  
   11a32:	c3                   	ret    

00011a33 <do_handler_virtualization>:
void do_handler_virtualization(exception_frame_t *frame)
{
   11a33:	55                   	push   %ebp
   11a34:	89 e5                	mov    %esp,%ebp
   11a36:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"virtualization exception");
   11a39:	83 ec 08             	sub    $0x8,%esp
   11a3c:	68 67 30 01 00       	push   $0x13067
   11a41:	ff 75 08             	pushl  0x8(%ebp)
   11a44:	e8 98 fd ff ff       	call   117e1 <do_default_handler>
   11a49:	83 c4 10             	add    $0x10,%esp
}
   11a4c:	90                   	nop
   11a4d:	c9                   	leave  
   11a4e:	c3                   	ret    

00011a4f <do_handler_security>:
void do_handler_security(exception_frame_t *frame)
{
   11a4f:	55                   	push   %ebp
   11a50:	89 e5                	mov    %esp,%ebp
   11a52:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"security exception");
   11a55:	83 ec 08             	sub    $0x8,%esp
   11a58:	68 80 30 01 00       	push   $0x13080
   11a5d:	ff 75 08             	pushl  0x8(%ebp)
   11a60:	e8 7c fd ff ff       	call   117e1 <do_default_handler>
   11a65:	83 c4 10             	add    $0x10,%esp
}
   11a68:	90                   	nop
   11a69:	c9                   	leave  
   11a6a:	c3                   	ret    

00011a6b <init_pic>:

static void init_pic(void)
{
   11a6b:	55                   	push   %ebp
   11a6c:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11a6e:	6a 11                	push   $0x11
   11a70:	6a 20                	push   $0x20
   11a72:	e8 10 fc ff ff       	call   11687 <outb>
   11a77:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2,IRQ_PIC_START);
   11a7a:	6a 20                	push   $0x20
   11a7c:	6a 21                	push   $0x21
   11a7e:	e8 04 fc ff ff       	call   11687 <outb>
   11a83:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3,1 << IRQ2_NMI);
   11a86:	6a 04                	push   $0x4
   11a88:	6a 21                	push   $0x21
   11a8a:	e8 f8 fb ff ff       	call   11687 <outb>
   11a8f:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4,PIC_ICW4_8086);
   11a92:	6a 01                	push   $0x1
   11a94:	6a 21                	push   $0x21
   11a96:	e8 ec fb ff ff       	call   11687 <outb>
   11a9b:	83 c4 08             	add    $0x8,%esp


    outb(PIC1_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11a9e:	6a 11                	push   $0x11
   11aa0:	68 a0 00 00 00       	push   $0xa0
   11aa5:	e8 dd fb ff ff       	call   11687 <outb>
   11aaa:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2,IRQ_PIC_START + 8);
   11aad:	6a 28                	push   $0x28
   11aaf:	68 a1 00 00 00       	push   $0xa1
   11ab4:	e8 ce fb ff ff       	call   11687 <outb>
   11ab9:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3,2);
   11abc:	6a 02                	push   $0x2
   11abe:	68 a1 00 00 00       	push   $0xa1
   11ac3:	e8 bf fb ff ff       	call   11687 <outb>
   11ac8:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4,PIC_ICW4_8086);
   11acb:	6a 01                	push   $0x1
   11acd:	68 a1 00 00 00       	push   $0xa1
   11ad2:	e8 b0 fb ff ff       	call   11687 <outb>
   11ad7:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR,0xff & ~ (1 << 2));
   11ada:	68 fb 00 00 00       	push   $0xfb
   11adf:	6a 21                	push   $0x21
   11ae1:	e8 a1 fb ff ff       	call   11687 <outb>
   11ae6:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR,0xff);
   11ae9:	68 ff 00 00 00       	push   $0xff
   11aee:	68 a1 00 00 00       	push   $0xa1
   11af3:	e8 8f fb ff ff       	call   11687 <outb>
   11af8:	83 c4 08             	add    $0x8,%esp
}
   11afb:	90                   	nop
   11afc:	c9                   	leave  
   11afd:	c3                   	ret    

00011afe <irq_init>:

void irq_init(void)
{
   11afe:	55                   	push   %ebp
   11aff:	89 e5                	mov    %esp,%ebp
   11b01:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   11b04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11b0b:	eb 25                	jmp    11b32 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   11b0d:	ba 4f 00 01 00       	mov    $0x1004f,%edx
   11b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b15:	c1 e0 03             	shl    $0x3,%eax
   11b18:	05 20 8a 01 00       	add    $0x18a20,%eax
   11b1d:	68 00 8e 00 00       	push   $0x8e00
   11b22:	52                   	push   %edx
   11b23:	6a 08                	push   $0x8
   11b25:	50                   	push   %eax
   11b26:	e8 b5 f9 ff ff       	call   114e0 <gate_desc_set>
   11b2b:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   11b2e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11b32:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11b36:	7e d5                	jle    11b0d <irq_init+0xf>
        GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    }
    //irq_install(IRQ0_DE,do_handler_divider); 用这个的话能进入do_handler_divider 但是跳不到.S的地方出栈
    irq_install(IRQ0_DE,exception_handler_divider);
   11b38:	83 ec 08             	sub    $0x8,%esp
   11b3b:	68 6e 00 01 00       	push   $0x1006e
   11b40:	6a 00                	push   $0x0
   11b42:	e8 77 01 00 00       	call   11cbe <irq_install>
   11b47:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB,exception_handler_debug);
   11b4a:	83 ec 08             	sub    $0x8,%esp
   11b4d:	68 8d 00 01 00       	push   $0x1008d
   11b52:	6a 01                	push   $0x1
   11b54:	e8 65 01 00 00       	call   11cbe <irq_install>
   11b59:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI,exception_handler_nmi);
   11b5c:	83 ec 08             	sub    $0x8,%esp
   11b5f:	68 ac 00 01 00       	push   $0x100ac
   11b64:	6a 02                	push   $0x2
   11b66:	e8 53 01 00 00       	call   11cbe <irq_install>
   11b6b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP,exception_handler_breakpoint);
   11b6e:	83 ec 08             	sub    $0x8,%esp
   11b71:	68 cb 00 01 00       	push   $0x100cb
   11b76:	6a 03                	push   $0x3
   11b78:	e8 41 01 00 00       	call   11cbe <irq_install>
   11b7d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF,exception_handler_overflow);
   11b80:	83 ec 08             	sub    $0x8,%esp
   11b83:	68 ea 00 01 00       	push   $0x100ea
   11b88:	6a 04                	push   $0x4
   11b8a:	e8 2f 01 00 00       	call   11cbe <irq_install>
   11b8f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR,exception_handler_bounds);
   11b92:	83 ec 08             	sub    $0x8,%esp
   11b95:	68 09 01 01 00       	push   $0x10109
   11b9a:	6a 05                	push   $0x5
   11b9c:	e8 1d 01 00 00       	call   11cbe <irq_install>
   11ba1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD,exception_handler_invalid_op);
   11ba4:	83 ec 08             	sub    $0x8,%esp
   11ba7:	68 28 01 01 00       	push   $0x10128
   11bac:	6a 06                	push   $0x6
   11bae:	e8 0b 01 00 00       	call   11cbe <irq_install>
   11bb3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM,exception_handler_device_not_available);
   11bb6:	83 ec 08             	sub    $0x8,%esp
   11bb9:	68 47 01 01 00       	push   $0x10147
   11bbe:	6a 07                	push   $0x7
   11bc0:	e8 f9 00 00 00       	call   11cbe <irq_install>
   11bc5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF,exception_handler_double_fault);
   11bc8:	83 ec 08             	sub    $0x8,%esp
   11bcb:	68 66 01 01 00       	push   $0x10166
   11bd0:	6a 08                	push   $0x8
   11bd2:	e8 e7 00 00 00       	call   11cbe <irq_install>
   11bd7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS,exception_handler_invalid_tss);
   11bda:	83 ec 08             	sub    $0x8,%esp
   11bdd:	68 83 01 01 00       	push   $0x10183
   11be2:	6a 0a                	push   $0xa
   11be4:	e8 d5 00 00 00       	call   11cbe <irq_install>
   11be9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP,exception_handler_segment_not_present);
   11bec:	83 ec 08             	sub    $0x8,%esp
   11bef:	68 a0 01 01 00       	push   $0x101a0
   11bf4:	6a 0b                	push   $0xb
   11bf6:	e8 c3 00 00 00       	call   11cbe <irq_install>
   11bfb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS,exception_handler_stack_segment_fault);
   11bfe:	83 ec 08             	sub    $0x8,%esp
   11c01:	68 bd 01 01 00       	push   $0x101bd
   11c06:	6a 0c                	push   $0xc
   11c08:	e8 b1 00 00 00       	call   11cbe <irq_install>
   11c0d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP,exception_handler_general_protection);
   11c10:	83 ec 08             	sub    $0x8,%esp
   11c13:	68 da 01 01 00       	push   $0x101da
   11c18:	6a 0d                	push   $0xd
   11c1a:	e8 9f 00 00 00       	call   11cbe <irq_install>
   11c1f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF,exception_handler_page_fault);
   11c22:	83 ec 08             	sub    $0x8,%esp
   11c25:	68 f7 01 01 00       	push   $0x101f7
   11c2a:	6a 0e                	push   $0xe
   11c2c:	e8 8d 00 00 00       	call   11cbe <irq_install>
   11c31:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF,exception_handler_x87_floating_point);
   11c34:	83 ec 08             	sub    $0x8,%esp
   11c37:	68 14 02 01 00       	push   $0x10214
   11c3c:	6a 10                	push   $0x10
   11c3e:	e8 7b 00 00 00       	call   11cbe <irq_install>
   11c43:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC,exception_handler_alignment_check);
   11c46:	83 ec 08             	sub    $0x8,%esp
   11c49:	68 33 02 01 00       	push   $0x10233
   11c4e:	6a 11                	push   $0x11
   11c50:	e8 69 00 00 00       	call   11cbe <irq_install>
   11c55:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC,exception_handler_machine_check);
   11c58:	83 ec 08             	sub    $0x8,%esp
   11c5b:	68 50 02 01 00       	push   $0x10250
   11c60:	6a 12                	push   $0x12
   11c62:	e8 57 00 00 00       	call   11cbe <irq_install>
   11c67:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM,exception_handler_simd_floating_point);
   11c6a:	83 ec 08             	sub    $0x8,%esp
   11c6d:	68 6f 02 01 00       	push   $0x1026f
   11c72:	6a 13                	push   $0x13
   11c74:	e8 45 00 00 00       	call   11cbe <irq_install>
   11c79:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE,exception_handler_virtualization);
   11c7c:	83 ec 08             	sub    $0x8,%esp
   11c7f:	68 8e 02 01 00       	push   $0x1028e
   11c84:	6a 14                	push   $0x14
   11c86:	e8 33 00 00 00       	call   11cbe <irq_install>
   11c8b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP,exception_handler_security);
   11c8e:	83 ec 08             	sub    $0x8,%esp
   11c91:	68 ad 02 01 00       	push   $0x102ad
   11c96:	6a 15                	push   $0x15
   11c98:	e8 21 00 00 00       	call   11cbe <irq_install>
   11c9d:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11ca0:	b8 20 8a 01 00       	mov    $0x18a20,%eax
   11ca5:	83 ec 08             	sub    $0x8,%esp
   11ca8:	68 00 04 00 00       	push   $0x400
   11cad:	50                   	push   %eax
   11cae:	e8 01 fa ff ff       	call   116b4 <lidt>
   11cb3:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11cb6:	e8 b0 fd ff ff       	call   11a6b <init_pic>
}
   11cbb:	90                   	nop
   11cbc:	c9                   	leave  
   11cbd:	c3                   	ret    

00011cbe <irq_install>:

int irq_install(int irq_num,irq_handler_t handler)
{
   11cbe:	55                   	push   %ebp
   11cbf:	89 e5                	mov    %esp,%ebp
   11cc1:	83 ec 08             	sub    $0x8,%esp
    if(irq_num < 0 || irq_num >= IRQ_TABLE_NU)
   11cc4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cc8:	78 06                	js     11cd0 <irq_install+0x12>
   11cca:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11cce:	7e 07                	jle    11cd7 <irq_install+0x19>
    {
        return -1;
   11cd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11cd5:	eb 25                	jmp    11cfc <irq_install+0x3e>
    }
    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   11cd7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cda:	8b 55 08             	mov    0x8(%ebp),%edx
   11cdd:	c1 e2 03             	shl    $0x3,%edx
   11ce0:	81 c2 20 8a 01 00    	add    $0x18a20,%edx
   11ce6:	68 00 8e 00 00       	push   $0x8e00
   11ceb:	50                   	push   %eax
   11cec:	6a 08                	push   $0x8
   11cee:	52                   	push   %edx
   11cef:	e8 ec f7 ff ff       	call   114e0 <gate_desc_set>
   11cf4:	83 c4 10             	add    $0x10,%esp
    GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    return 0;
   11cf7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11cfc:	c9                   	leave  
   11cfd:	c3                   	ret    

00011cfe <irq_enable>:

void irq_enable(int irq_num)
{
   11cfe:	55                   	push   %ebp
   11cff:	89 e5                	mov    %esp,%ebp
   11d01:	53                   	push   %ebx
   11d02:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   11d05:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11d09:	7e 78                	jle    11d83 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11d0b:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   11d0f:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11d13:	7f 32                	jg     11d47 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11d15:	6a 21                	push   $0x21
   11d17:	e8 4e f9 ff ff       	call   1166a <inb>
   11d1c:	83 c4 04             	add    $0x4,%esp
   11d1f:	89 c2                	mov    %eax,%edx
   11d21:	8b 45 08             	mov    0x8(%ebp),%eax
   11d24:	bb 01 00 00 00       	mov    $0x1,%ebx
   11d29:	89 c1                	mov    %eax,%ecx
   11d2b:	d3 e3                	shl    %cl,%ebx
   11d2d:	89 d8                	mov    %ebx,%eax
   11d2f:	f7 d0                	not    %eax
   11d31:	21 d0                	and    %edx,%eax
   11d33:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   11d36:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11d3a:	50                   	push   %eax
   11d3b:	6a 21                	push   $0x21
   11d3d:	e8 45 f9 ff ff       	call   11687 <outb>
   11d42:	83 c4 08             	add    $0x8,%esp
   11d45:	eb 3d                	jmp    11d84 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   11d47:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num));
   11d4b:	68 a1 00 00 00       	push   $0xa1
   11d50:	e8 15 f9 ff ff       	call   1166a <inb>
   11d55:	83 c4 04             	add    $0x4,%esp
   11d58:	89 c2                	mov    %eax,%edx
   11d5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5d:	bb 01 00 00 00       	mov    $0x1,%ebx
   11d62:	89 c1                	mov    %eax,%ecx
   11d64:	d3 e3                	shl    %cl,%ebx
   11d66:	89 d8                	mov    %ebx,%eax
   11d68:	f7 d0                	not    %eax
   11d6a:	21 d0                	and    %edx,%eax
   11d6c:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   11d6f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11d73:	50                   	push   %eax
   11d74:	68 a1 00 00 00       	push   $0xa1
   11d79:	e8 09 f9 ff ff       	call   11687 <outb>
   11d7e:	83 c4 08             	add    $0x8,%esp
   11d81:	eb 01                	jmp    11d84 <irq_enable+0x86>
        return;
   11d83:	90                   	nop
    }
}
   11d84:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11d87:	c9                   	leave  
   11d88:	c3                   	ret    

00011d89 <irq_disable>:

void irq_disable(int irq_num)
{
   11d89:	55                   	push   %ebp
   11d8a:	89 e5                	mov    %esp,%ebp
   11d8c:	53                   	push   %ebx
   11d8d:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   11d90:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11d94:	7e 78                	jle    11e0e <irq_disable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11d96:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   11d9a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11d9e:	7f 32                	jg     11dd2 <irq_disable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) | ~(1 << irq_num);
   11da0:	6a 21                	push   $0x21
   11da2:	e8 c3 f8 ff ff       	call   1166a <inb>
   11da7:	83 c4 04             	add    $0x4,%esp
   11daa:	89 c3                	mov    %eax,%ebx
   11dac:	8b 45 08             	mov    0x8(%ebp),%eax
   11daf:	ba 01 00 00 00       	mov    $0x1,%edx
   11db4:	89 c1                	mov    %eax,%ecx
   11db6:	d3 e2                	shl    %cl,%edx
   11db8:	89 d0                	mov    %edx,%eax
   11dba:	f7 d0                	not    %eax
   11dbc:	09 d8                	or     %ebx,%eax
   11dbe:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   11dc1:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11dc5:	50                   	push   %eax
   11dc6:	6a 21                	push   $0x21
   11dc8:	e8 ba f8 ff ff       	call   11687 <outb>
   11dcd:	83 c4 08             	add    $0x8,%esp
   11dd0:	eb 3d                	jmp    11e0f <irq_disable+0x86>
    }
    else
    {
        irq_num -= 8;
   11dd2:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | ~(1 << (irq_num));
   11dd6:	68 a1 00 00 00       	push   $0xa1
   11ddb:	e8 8a f8 ff ff       	call   1166a <inb>
   11de0:	83 c4 04             	add    $0x4,%esp
   11de3:	89 c3                	mov    %eax,%ebx
   11de5:	8b 45 08             	mov    0x8(%ebp),%eax
   11de8:	ba 01 00 00 00       	mov    $0x1,%edx
   11ded:	89 c1                	mov    %eax,%ecx
   11def:	d3 e2                	shl    %cl,%edx
   11df1:	89 d0                	mov    %edx,%eax
   11df3:	f7 d0                	not    %eax
   11df5:	09 d8                	or     %ebx,%eax
   11df7:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   11dfa:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11dfe:	50                   	push   %eax
   11dff:	68 a1 00 00 00       	push   $0xa1
   11e04:	e8 7e f8 ff ff       	call   11687 <outb>
   11e09:	83 c4 08             	add    $0x8,%esp
   11e0c:	eb 01                	jmp    11e0f <irq_disable+0x86>
        return;
   11e0e:	90                   	nop
    }
}
   11e0f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11e12:	c9                   	leave  
   11e13:	c3                   	ret    

00011e14 <irq_disable_global>:
void irq_disable_global(void)
{
   11e14:	55                   	push   %ebp
   11e15:	89 e5                	mov    %esp,%ebp
    cli();
   11e17:	e8 8a f8 ff ff       	call   116a6 <cli>
}
   11e1c:	90                   	nop
   11e1d:	5d                   	pop    %ebp
   11e1e:	c3                   	ret    

00011e1f <irq_enable_global>:

void irq_enable_global(void)
{
   11e1f:	55                   	push   %ebp
   11e20:	89 e5                	mov    %esp,%ebp
    sti();
   11e22:	e8 86 f8 ff ff       	call   116ad <sti>
}
   11e27:	90                   	nop
   11e28:	5d                   	pop    %ebp
   11e29:	c3                   	ret    

00011e2a <pic_send_eoi>:
void pic_send_eoi(int irq_num)
{
   11e2a:	55                   	push   %ebp
   11e2b:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11e2d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num >= 8)
   11e31:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e35:	7e 0f                	jle    11e46 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   11e37:	6a 20                	push   $0x20
   11e39:	68 a0 00 00 00       	push   $0xa0
   11e3e:	e8 44 f8 ff ff       	call   11687 <outb>
   11e43:	83 c4 08             	add    $0x8,%esp
    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   11e46:	6a 20                	push   $0x20
   11e48:	6a 20                	push   $0x20
   11e4a:	e8 38 f8 ff ff       	call   11687 <outb>
   11e4f:	83 c4 08             	add    $0x8,%esp
}
   11e52:	90                   	nop
   11e53:	c9                   	leave  
   11e54:	c3                   	ret    

00011e55 <irq_enter_protection>:

irq_state_t irq_enter_protection(void)
{
   11e55:	55                   	push   %ebp
   11e56:	89 e5                	mov    %esp,%ebp
   11e58:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11e5b:	e8 83 f8 ff ff       	call   116e3 <read_eflags>
   11e60:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11e63:	e8 ac ff ff ff       	call   11e14 <irq_disable_global>
    return state;
   11e68:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11e6b:	c9                   	leave  
   11e6c:	c3                   	ret    

00011e6d <irq_leave_protection>:

void irq_leave_protection(irq_state_t state)
{
   11e6d:	55                   	push   %ebp
   11e6e:	89 e5                	mov    %esp,%ebp
    
    write_eflags(state);
   11e70:	ff 75 08             	pushl  0x8(%ebp)
   11e73:	e8 7b f8 ff ff       	call   116f3 <write_eflags>
   11e78:	83 c4 04             	add    $0x4,%esp
}
   11e7b:	90                   	nop
   11e7c:	c9                   	leave  
   11e7d:	c3                   	ret    

00011e7e <outb>:
{
   11e7e:	55                   	push   %ebp
   11e7f:	89 e5                	mov    %esp,%ebp
   11e81:	83 ec 08             	sub    $0x8,%esp
   11e84:	8b 55 08             	mov    0x8(%ebp),%edx
   11e87:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e8a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11e8e:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   11e91:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11e95:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11e99:	ee                   	out    %al,(%dx)
}
   11e9a:	90                   	nop
   11e9b:	c9                   	leave  
   11e9c:	c3                   	ret    

00011e9d <do_handler_time>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
void do_handler_time(exception_frame_t *frame)
{
   11e9d:	55                   	push   %ebp
   11e9e:	89 e5                	mov    %esp,%ebp
   11ea0:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11ea3:	a1 20 8e 01 00       	mov    0x18e20,%eax
   11ea8:	83 c0 01             	add    $0x1,%eax
   11eab:	a3 20 8e 01 00       	mov    %eax,0x18e20
    pic_send_eoi(IRQ0_TIMER);
   11eb0:	83 ec 0c             	sub    $0xc,%esp
   11eb3:	6a 20                	push   $0x20
   11eb5:	e8 70 ff ff ff       	call   11e2a <pic_send_eoi>
   11eba:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   11ebd:	e8 2b f2 ff ff       	call   110ed <task_time_tick>
    
}
   11ec2:	90                   	nop
   11ec3:	c9                   	leave  
   11ec4:	c3                   	ret    

00011ec5 <init_pit>:
static void init_pit(void)
{
   11ec5:	55                   	push   %ebp
   11ec6:	89 e5                	mov    %esp,%ebp
   11ec8:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = (PIT_OSC_FREQ * OS_TICK_MS )/ 1000.0;
   11ecb:	c7 45 f4 85 74 00 00 	movl   $0x7485,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT,PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11ed2:	6a 36                	push   $0x36
   11ed4:	6a 43                	push   $0x43
   11ed6:	e8 a3 ff ff ff       	call   11e7e <outb>
   11edb:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,reload_count & 0xff);
   11ede:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ee1:	0f b6 c0             	movzbl %al,%eax
   11ee4:	50                   	push   %eax
   11ee5:	6a 40                	push   $0x40
   11ee7:	e8 92 ff ff ff       	call   11e7e <outb>
   11eec:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,(reload_count >> 8) & 0xff);
   11eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ef2:	c1 e8 08             	shr    $0x8,%eax
   11ef5:	0f b6 c0             	movzbl %al,%eax
   11ef8:	50                   	push   %eax
   11ef9:	6a 40                	push   $0x40
   11efb:	e8 7e ff ff ff       	call   11e7e <outb>
   11f00:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER,exception_handler_time);
   11f03:	83 ec 08             	sub    $0x8,%esp
   11f06:	68 2b 00 01 00       	push   $0x1002b
   11f0b:	6a 20                	push   $0x20
   11f0d:	e8 ac fd ff ff       	call   11cbe <irq_install>
   11f12:	83 c4 10             	add    $0x10,%esp

    irq_enable(IRQ0_TIMER);
   11f15:	83 ec 0c             	sub    $0xc,%esp
   11f18:	6a 20                	push   $0x20
   11f1a:	e8 df fd ff ff       	call   11cfe <irq_enable>
   11f1f:	83 c4 10             	add    $0x10,%esp
}
   11f22:	90                   	nop
   11f23:	c9                   	leave  
   11f24:	c3                   	ret    

00011f25 <time_init>:
void time_init(void)
{
   11f25:	55                   	push   %ebp
   11f26:	89 e5                	mov    %esp,%ebp
   11f28:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11f2b:	c7 05 20 8e 01 00 00 	movl   $0x0,0x18e20
   11f32:	00 00 00 
    init_pit();
   11f35:	e8 8b ff ff ff       	call   11ec5 <init_pit>
}
   11f3a:	90                   	nop
   11f3b:	c9                   	leave  
   11f3c:	c3                   	ret    

00011f3d <kernel_init>:
#include "ipc/sem.h"
#include "ipc/mutex.h"
#include "core/memory.h"
#include "dev/time.h"
void kernel_init(boot_info_t * boot_info)
{
   11f3d:	55                   	push   %ebp
   11f3e:	89 e5                	mov    %esp,%ebp
   11f40:	83 ec 08             	sub    $0x8,%esp
    //ASSERT(boot_info->ram_region_count != 2);
    cpu_init();
   11f43:	e8 f0 f6 ff ff       	call   11638 <cpu_init>
    log_init(); 
   11f48:	e8 a9 0c 00 00       	call   12bf6 <log_init>
    memory_init(boot_info);
   11f4d:	83 ec 0c             	sub    $0xc,%esp
   11f50:	ff 75 08             	pushl  0x8(%ebp)
   11f53:	e8 14 ea ff ff       	call   1096c <memory_init>
   11f58:	83 c4 10             	add    $0x10,%esp
    
    irq_init();
   11f5b:	e8 9e fb ff ff       	call   11afe <irq_init>
    time_init();
   11f60:	e8 c0 ff ff ff       	call   11f25 <time_init>

    task_manager_init();
   11f65:	e8 64 ee ff ff       	call   10dce <task_manager_init>
}
   11f6a:	90                   	nop
   11f6b:	c9                   	leave  
   11f6c:	c3                   	ret    

00011f6d <move_to_first_task>:
//         mutex_unlock(&mutex);
//     }
// }

void move_to_first_task(void)
{
   11f6d:	55                   	push   %ebp
   11f6e:	89 e5                	mov    %esp,%ebp
   11f70:	83 ec 18             	sub    $0x18,%esp
    // void first_task_entry(void);
    // first_task_entry();
    task_t *curr = task_current();
   11f73:	e8 42 f0 ff ff       	call   10fba <task_current>
   11f78:	89 45 f4             	mov    %eax,-0xc(%ebp)
    tss_t *tss = &curr->tss;
   11f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f7e:	83 c0 5c             	add    $0x5c,%eax
   11f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
    __asm__ __volatile__("jmp *%[ip]"::[ip]"r"(tss->eip));
   11f84:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f87:	8b 40 20             	mov    0x20(%eax),%eax
   11f8a:	ff e0                	jmp    *%eax
}
   11f8c:	90                   	nop
   11f8d:	c9                   	leave  
   11f8e:	c3                   	ret    

00011f8f <init_main>:
void init_main(void)
{
   11f8f:	55                   	push   %ebp
   11f90:	89 e5                	mov    %esp,%ebp
   11f92:	83 ec 08             	sub    $0x8,%esp
    irq_disable_global();
   11f95:	e8 7a fe ff ff       	call   11e14 <irq_disable_global>
    sem_init(&sem,0);
   11f9a:	83 ec 08             	sub    $0x8,%esp
   11f9d:	6a 00                	push   $0x0
   11f9f:	68 24 8e 01 00       	push   $0x18e24
   11fa4:	e8 ac 01 00 00       	call   12155 <sem_init>
   11fa9:	83 c4 10             	add    $0x10,%esp
    log_printf("init main\n");
   11fac:	83 ec 0c             	sub    $0xc,%esp
   11faf:	68 93 30 01 00       	push   $0x13093
   11fb4:	e8 da 0c 00 00       	call   12c93 <log_printf>
   11fb9:	83 c4 10             	add    $0x10,%esp
    //user_task_init(&init_task,"init_task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
    // task_init(&test_task,"test_task",(uint32_t)test_task_entry,(uint32_t)&test_task_stack[1024]);
    task_first_init();
   11fbc:	e8 d8 ee ff ff       	call   10e99 <task_first_init>
    move_to_first_task();
   11fc1:	e8 a7 ff ff ff       	call   11f6d <move_to_first_task>
    //     mutex_lock(&mutex);
    //     log_printf("init main count = %d\n", count++);
    //     sys_sleep(3000);
    //     mutex_unlock(&mutex);
    // }
}
   11fc6:	90                   	nop
   11fc7:	c9                   	leave  
   11fc8:	c3                   	ret    

00011fc9 <list_count>:
{
   11fc9:	55                   	push   %ebp
   11fca:	89 e5                	mov    %esp,%ebp
    return list->count;
   11fcc:	8b 45 08             	mov    0x8(%ebp),%eax
   11fcf:	8b 40 08             	mov    0x8(%eax),%eax
}
   11fd2:	5d                   	pop    %ebp
   11fd3:	c3                   	ret    

00011fd4 <mutex_init>:
 */
#include "ipc/mutex.h"
#include "cpu/irq.h"

void mutex_init(mutex_t *mutex)
{
   11fd4:	55                   	push   %ebp
   11fd5:	89 e5                	mov    %esp,%ebp
   11fd7:	83 ec 08             	sub    $0x8,%esp
    mutex->owner = (task_t *)0;
   11fda:	8b 45 08             	mov    0x8(%ebp),%eax
   11fdd:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mutex->locked_count = 0;
   11fe4:	8b 45 08             	mov    0x8(%ebp),%eax
   11fe7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    list_init(&mutex->wait_list);
   11fee:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff1:	83 ec 0c             	sub    $0xc,%esp
   11ff4:	50                   	push   %eax
   11ff5:	e8 dd 09 00 00       	call   129d7 <list_init>
   11ffa:	83 c4 10             	add    $0x10,%esp
}
   11ffd:	90                   	nop
   11ffe:	c9                   	leave  
   11fff:	c3                   	ret    

00012000 <mutex_lock>:

void mutex_lock(mutex_t *mutex)
{
   12000:	55                   	push   %ebp
   12001:	89 e5                	mov    %esp,%ebp
   12003:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12006:	e8 4a fe ff ff       	call   11e55 <irq_enter_protection>
   1200b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   1200e:	e8 a7 ef ff ff       	call   10fba <task_current>
   12013:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->locked_count == 0)
   12016:	8b 45 08             	mov    0x8(%ebp),%eax
   12019:	8b 40 10             	mov    0x10(%eax),%eax
   1201c:	85 c0                	test   %eax,%eax
   1201e:	75 1a                	jne    1203a <mutex_lock+0x3a>
    {
        mutex->locked_count++;
   12020:	8b 45 08             	mov    0x8(%ebp),%eax
   12023:	8b 40 10             	mov    0x10(%eax),%eax
   12026:	8d 50 01             	lea    0x1(%eax),%edx
   12029:	8b 45 08             	mov    0x8(%ebp),%eax
   1202c:	89 50 10             	mov    %edx,0x10(%eax)
        mutex->owner = curr;
   1202f:	8b 45 08             	mov    0x8(%ebp),%eax
   12032:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12035:	89 50 0c             	mov    %edx,0xc(%eax)
   12038:	eb 45                	jmp    1207f <mutex_lock+0x7f>
    }else if(mutex->owner == curr)
   1203a:	8b 45 08             	mov    0x8(%ebp),%eax
   1203d:	8b 40 0c             	mov    0xc(%eax),%eax
   12040:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12043:	75 11                	jne    12056 <mutex_lock+0x56>
    {
        mutex->locked_count++;
   12045:	8b 45 08             	mov    0x8(%ebp),%eax
   12048:	8b 40 10             	mov    0x10(%eax),%eax
   1204b:	8d 50 01             	lea    0x1(%eax),%edx
   1204e:	8b 45 08             	mov    0x8(%ebp),%eax
   12051:	89 50 10             	mov    %edx,0x10(%eax)
   12054:	eb 29                	jmp    1207f <mutex_lock+0x7f>
    }else
    {
        task_set_block(curr);
   12056:	83 ec 0c             	sub    $0xc,%esp
   12059:	ff 75 f0             	pushl  -0x10(%ebp)
   1205c:	e8 2e ef ff ff       	call   10f8f <task_set_block>
   12061:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list,&curr->wait_node);
   12064:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12067:	8d 50 54             	lea    0x54(%eax),%edx
   1206a:	8b 45 08             	mov    0x8(%ebp),%eax
   1206d:	83 ec 08             	sub    $0x8,%esp
   12070:	52                   	push   %edx
   12071:	50                   	push   %eax
   12072:	e8 e4 09 00 00       	call   12a5b <list_insert_last>
   12077:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   1207a:	e8 f6 ef ff ff       	call   11075 <schedule_switch>
    }
    irq_leave_protection(state);
   1207f:	83 ec 0c             	sub    $0xc,%esp
   12082:	ff 75 f4             	pushl  -0xc(%ebp)
   12085:	e8 e3 fd ff ff       	call   11e6d <irq_leave_protection>
   1208a:	83 c4 10             	add    $0x10,%esp
}
   1208d:	90                   	nop
   1208e:	c9                   	leave  
   1208f:	c3                   	ret    

00012090 <mutex_unlock>:

void mutex_unlock(mutex_t *mutex)
{
   12090:	55                   	push   %ebp
   12091:	89 e5                	mov    %esp,%ebp
   12093:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12096:	e8 ba fd ff ff       	call   11e55 <irq_enter_protection>
   1209b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   1209e:	e8 17 ef ff ff       	call   10fba <task_current>
   120a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->owner == curr)
   120a6:	8b 45 08             	mov    0x8(%ebp),%eax
   120a9:	8b 40 0c             	mov    0xc(%eax),%eax
   120ac:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   120af:	0f 85 84 00 00 00    	jne    12139 <mutex_unlock+0xa9>
    {
        if(--mutex->locked_count == 0)
   120b5:	8b 45 08             	mov    0x8(%ebp),%eax
   120b8:	8b 40 10             	mov    0x10(%eax),%eax
   120bb:	8d 50 ff             	lea    -0x1(%eax),%edx
   120be:	8b 45 08             	mov    0x8(%ebp),%eax
   120c1:	89 50 10             	mov    %edx,0x10(%eax)
   120c4:	8b 45 08             	mov    0x8(%ebp),%eax
   120c7:	8b 40 10             	mov    0x10(%eax),%eax
   120ca:	85 c0                	test   %eax,%eax
   120cc:	75 6b                	jne    12139 <mutex_unlock+0xa9>
        {
            mutex->owner = (task_t *)0;
   120ce:	8b 45 08             	mov    0x8(%ebp),%eax
   120d1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            if(list_count(&mutex->wait_list))
   120d8:	8b 45 08             	mov    0x8(%ebp),%eax
   120db:	83 ec 0c             	sub    $0xc,%esp
   120de:	50                   	push   %eax
   120df:	e8 e5 fe ff ff       	call   11fc9 <list_count>
   120e4:	83 c4 10             	add    $0x10,%esp
   120e7:	85 c0                	test   %eax,%eax
   120e9:	74 4e                	je     12139 <mutex_unlock+0xa9>
            {
                list_node_t * node = list_remove_first(&mutex->wait_list);
   120eb:	8b 45 08             	mov    0x8(%ebp),%eax
   120ee:	83 ec 0c             	sub    $0xc,%esp
   120f1:	50                   	push   %eax
   120f2:	e8 c8 09 00 00       	call   12abf <list_remove_first>
   120f7:	83 c4 10             	add    $0x10,%esp
   120fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node,task_t,wait_node);
   120fd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12101:	74 08                	je     1210b <mutex_unlock+0x7b>
   12103:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12106:	83 e8 54             	sub    $0x54,%eax
   12109:	eb 05                	jmp    12110 <mutex_unlock+0x80>
   1210b:	b8 00 00 00 00       	mov    $0x0,%eax
   12110:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   12113:	83 ec 0c             	sub    $0xc,%esp
   12116:	ff 75 e8             	pushl  -0x18(%ebp)
   12119:	e8 3c ee ff ff       	call   10f5a <task_set_ready>
   1211e:	83 c4 10             	add    $0x10,%esp
                mutex->locked_count = 1;
   12121:	8b 45 08             	mov    0x8(%ebp),%eax
   12124:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
                mutex->owner = task;
   1212b:	8b 45 08             	mov    0x8(%ebp),%eax
   1212e:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12131:	89 50 0c             	mov    %edx,0xc(%eax)
                schedule_switch();
   12134:	e8 3c ef ff ff       	call   11075 <schedule_switch>
            }
        }
    }
    irq_leave_protection(state);
   12139:	83 ec 0c             	sub    $0xc,%esp
   1213c:	ff 75 f4             	pushl  -0xc(%ebp)
   1213f:	e8 29 fd ff ff       	call   11e6d <irq_leave_protection>
   12144:	83 c4 10             	add    $0x10,%esp
}
   12147:	90                   	nop
   12148:	c9                   	leave  
   12149:	c3                   	ret    

0001214a <list_count>:
{
   1214a:	55                   	push   %ebp
   1214b:	89 e5                	mov    %esp,%ebp
    return list->count;
   1214d:	8b 45 08             	mov    0x8(%ebp),%eax
   12150:	8b 40 08             	mov    0x8(%eax),%eax
}
   12153:	5d                   	pop    %ebp
   12154:	c3                   	ret    

00012155 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"
void sem_init(sem_t *sem,int count)
{
   12155:	55                   	push   %ebp
   12156:	89 e5                	mov    %esp,%ebp
   12158:	83 ec 08             	sub    $0x8,%esp
    sem->count = count;
   1215b:	8b 45 08             	mov    0x8(%ebp),%eax
   1215e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12161:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   12163:	8b 45 08             	mov    0x8(%ebp),%eax
   12166:	83 c0 04             	add    $0x4,%eax
   12169:	83 ec 0c             	sub    $0xc,%esp
   1216c:	50                   	push   %eax
   1216d:	e8 65 08 00 00       	call   129d7 <list_init>
   12172:	83 c4 10             	add    $0x10,%esp
}
   12175:	90                   	nop
   12176:	c9                   	leave  
   12177:	c3                   	ret    

00012178 <sem_wait>:

void sem_wait(sem_t *sem)
{
   12178:	55                   	push   %ebp
   12179:	89 e5                	mov    %esp,%ebp
   1217b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1217e:	e8 d2 fc ff ff       	call   11e55 <irq_enter_protection>
   12183:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(sem->count > 0)
   12186:	8b 45 08             	mov    0x8(%ebp),%eax
   12189:	8b 00                	mov    (%eax),%eax
   1218b:	85 c0                	test   %eax,%eax
   1218d:	7e 0f                	jle    1219e <sem_wait+0x26>
    {
        sem->count--;
   1218f:	8b 45 08             	mov    0x8(%ebp),%eax
   12192:	8b 00                	mov    (%eax),%eax
   12194:	8d 50 ff             	lea    -0x1(%eax),%edx
   12197:	8b 45 08             	mov    0x8(%ebp),%eax
   1219a:	89 10                	mov    %edx,(%eax)
   1219c:	eb 34                	jmp    121d2 <sem_wait+0x5a>
    }
    else
    {
        task_t *curr = task_current();
   1219e:	e8 17 ee ff ff       	call   10fba <task_current>
   121a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   121a6:	83 ec 0c             	sub    $0xc,%esp
   121a9:	ff 75 f0             	pushl  -0x10(%ebp)
   121ac:	e8 de ed ff ff       	call   10f8f <task_set_block>
   121b1:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list,&curr->wait_node);
   121b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121b7:	8d 50 54             	lea    0x54(%eax),%edx
   121ba:	8b 45 08             	mov    0x8(%ebp),%eax
   121bd:	83 c0 04             	add    $0x4,%eax
   121c0:	83 ec 08             	sub    $0x8,%esp
   121c3:	52                   	push   %edx
   121c4:	50                   	push   %eax
   121c5:	e8 91 08 00 00       	call   12a5b <list_insert_last>
   121ca:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   121cd:	e8 a3 ee ff ff       	call   11075 <schedule_switch>
    }
    irq_leave_protection(state);
   121d2:	83 ec 0c             	sub    $0xc,%esp
   121d5:	ff 75 f4             	pushl  -0xc(%ebp)
   121d8:	e8 90 fc ff ff       	call   11e6d <irq_leave_protection>
   121dd:	83 c4 10             	add    $0x10,%esp
}
   121e0:	90                   	nop
   121e1:	c9                   	leave  
   121e2:	c3                   	ret    

000121e3 <sem_notify>:


void sem_notify(sem_t *sem)
{
   121e3:	55                   	push   %ebp
   121e4:	89 e5                	mov    %esp,%ebp
   121e6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   121e9:	e8 67 fc ff ff       	call   11e55 <irq_enter_protection>
   121ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&sem->wait_list) > 0)
   121f1:	8b 45 08             	mov    0x8(%ebp),%eax
   121f4:	83 c0 04             	add    $0x4,%eax
   121f7:	83 ec 0c             	sub    $0xc,%esp
   121fa:	50                   	push   %eax
   121fb:	e8 4a ff ff ff       	call   1214a <list_count>
   12200:	83 c4 10             	add    $0x10,%esp
   12203:	85 c0                	test   %eax,%eax
   12205:	7e 40                	jle    12247 <sem_notify+0x64>
    {
        list_node_t * node = list_remove_first(&sem->wait_list);
   12207:	8b 45 08             	mov    0x8(%ebp),%eax
   1220a:	83 c0 04             	add    $0x4,%eax
   1220d:	83 ec 0c             	sub    $0xc,%esp
   12210:	50                   	push   %eax
   12211:	e8 a9 08 00 00       	call   12abf <list_remove_first>
   12216:	83 c4 10             	add    $0x10,%esp
   12219:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node,task_t,wait_node);
   1221c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12220:	74 08                	je     1222a <sem_notify+0x47>
   12222:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12225:	83 e8 54             	sub    $0x54,%eax
   12228:	eb 05                	jmp    1222f <sem_notify+0x4c>
   1222a:	b8 00 00 00 00       	mov    $0x0,%eax
   1222f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12232:	83 ec 0c             	sub    $0xc,%esp
   12235:	ff 75 ec             	pushl  -0x14(%ebp)
   12238:	e8 1d ed ff ff       	call   10f5a <task_set_ready>
   1223d:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   12240:	e8 30 ee ff ff       	call   11075 <schedule_switch>
   12245:	eb 0d                	jmp    12254 <sem_notify+0x71>
    }
    else
    {
        sem->count++;
   12247:	8b 45 08             	mov    0x8(%ebp),%eax
   1224a:	8b 00                	mov    (%eax),%eax
   1224c:	8d 50 01             	lea    0x1(%eax),%edx
   1224f:	8b 45 08             	mov    0x8(%ebp),%eax
   12252:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);
   12254:	83 ec 0c             	sub    $0xc,%esp
   12257:	ff 75 f4             	pushl  -0xc(%ebp)
   1225a:	e8 0e fc ff ff       	call   11e6d <irq_leave_protection>
   1225f:	83 c4 10             	add    $0x10,%esp
}
   12262:	90                   	nop
   12263:	c9                   	leave  
   12264:	c3                   	ret    

00012265 <sem_count>:
int sem_count(sem_t *sem)
{
   12265:	55                   	push   %ebp
   12266:	89 e5                	mov    %esp,%ebp
   12268:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1226b:	e8 e5 fb ff ff       	call   11e55 <irq_enter_protection>
   12270:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12273:	8b 45 08             	mov    0x8(%ebp),%eax
   12276:	8b 00                	mov    (%eax),%eax
   12278:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   1227b:	83 ec 0c             	sub    $0xc,%esp
   1227e:	ff 75 f4             	pushl  -0xc(%ebp)
   12281:	e8 e7 fb ff ff       	call   11e6d <irq_leave_protection>
   12286:	83 c4 10             	add    $0x10,%esp
    return count;
   12289:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1228c:	c9                   	leave  
   1228d:	c3                   	ret    

0001228e <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   1228e:	55                   	push   %ebp
   1228f:	89 e5                	mov    %esp,%ebp
    return (bit_count + 7) / 8;
   12291:	8b 45 08             	mov    0x8(%ebp),%eax
   12294:	83 c0 07             	add    $0x7,%eax
   12297:	8d 50 07             	lea    0x7(%eax),%edx
   1229a:	85 c0                	test   %eax,%eax
   1229c:	0f 48 c2             	cmovs  %edx,%eax
   1229f:	c1 f8 03             	sar    $0x3,%eax
}
   122a2:	5d                   	pop    %ebp
   122a3:	c3                   	ret    

000122a4 <bitmap_init>:
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count ,int init_bit)
{
   122a4:	55                   	push   %ebp
   122a5:	89 e5                	mov    %esp,%ebp
   122a7:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   122aa:	8b 45 08             	mov    0x8(%ebp),%eax
   122ad:	8b 55 10             	mov    0x10(%ebp),%edx
   122b0:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   122b2:	8b 45 08             	mov    0x8(%ebp),%eax
   122b5:	8b 55 0c             	mov    0xc(%ebp),%edx
   122b8:	89 50 04             	mov    %edx,0x4(%eax)
    int bytes = bitmap_byte_count(count);
   122bb:	ff 75 10             	pushl  0x10(%ebp)
   122be:	e8 cb ff ff ff       	call   1228e <bitmap_byte_count>
   122c3:	83 c4 04             	add    $0x4,%esp
   122c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bits, init_bit ? 0xff : 0x00, bytes);
   122c9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   122cd:	74 07                	je     122d6 <bitmap_init+0x32>
   122cf:	b8 ff 00 00 00       	mov    $0xff,%eax
   122d4:	eb 05                	jmp    122db <bitmap_init+0x37>
   122d6:	b8 00 00 00 00       	mov    $0x0,%eax
   122db:	83 ec 04             	sub    $0x4,%esp
   122de:	ff 75 f4             	pushl  -0xc(%ebp)
   122e1:	50                   	push   %eax
   122e2:	ff 75 0c             	pushl  0xc(%ebp)
   122e5:	e8 95 03 00 00       	call   1267f <kernel_memset>
   122ea:	83 c4 10             	add    $0x10,%esp
}
   122ed:	90                   	nop
   122ee:	c9                   	leave  
   122ef:	c3                   	ret    

000122f0 <bitmap_get_bit>:

int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   122f0:	55                   	push   %ebp
   122f1:	89 e5                	mov    %esp,%ebp
   122f3:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   122f4:	8b 45 08             	mov    0x8(%ebp),%eax
   122f7:	8b 50 04             	mov    0x4(%eax),%edx
   122fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   122fd:	8d 48 07             	lea    0x7(%eax),%ecx
   12300:	85 c0                	test   %eax,%eax
   12302:	0f 48 c1             	cmovs  %ecx,%eax
   12305:	c1 f8 03             	sar    $0x3,%eax
   12308:	01 d0                	add    %edx,%eax
   1230a:	0f b6 00             	movzbl (%eax),%eax
   1230d:	0f b6 d8             	movzbl %al,%ebx
   12310:	8b 45 0c             	mov    0xc(%ebp),%eax
   12313:	99                   	cltd   
   12314:	c1 ea 1d             	shr    $0x1d,%edx
   12317:	01 d0                	add    %edx,%eax
   12319:	83 e0 07             	and    $0x7,%eax
   1231c:	29 d0                	sub    %edx,%eax
   1231e:	ba 01 00 00 00       	mov    $0x1,%edx
   12323:	89 c1                	mov    %eax,%ecx
   12325:	d3 e2                	shl    %cl,%edx
   12327:	89 d0                	mov    %edx,%eax
   12329:	21 d8                	and    %ebx,%eax
}
   1232b:	5b                   	pop    %ebx
   1232c:	5d                   	pop    %ebp
   1232d:	c3                   	ret    

0001232e <bitmap_set_bit>:
void bitmap_set_bit(bitmap_t *bitmap, int index, int count,int bit)
{
   1232e:	55                   	push   %ebp
   1232f:	89 e5                	mov    %esp,%ebp
   12331:	56                   	push   %esi
   12332:	53                   	push   %ebx
   12333:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   12336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1233d:	e9 a2 00 00 00       	jmp    123e4 <bitmap_set_bit+0xb6>
    {
        if(bit)
   12342:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12346:	74 4a                	je     12392 <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12348:	8b 45 08             	mov    0x8(%ebp),%eax
   1234b:	8b 50 04             	mov    0x4(%eax),%edx
   1234e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12351:	8d 48 07             	lea    0x7(%eax),%ecx
   12354:	85 c0                	test   %eax,%eax
   12356:	0f 48 c1             	cmovs  %ecx,%eax
   12359:	c1 f8 03             	sar    $0x3,%eax
   1235c:	89 c3                	mov    %eax,%ebx
   1235e:	89 d8                	mov    %ebx,%eax
   12360:	01 d0                	add    %edx,%eax
   12362:	0f b6 00             	movzbl (%eax),%eax
   12365:	89 c6                	mov    %eax,%esi
   12367:	8b 45 0c             	mov    0xc(%ebp),%eax
   1236a:	99                   	cltd   
   1236b:	c1 ea 1d             	shr    $0x1d,%edx
   1236e:	01 d0                	add    %edx,%eax
   12370:	83 e0 07             	and    $0x7,%eax
   12373:	29 d0                	sub    %edx,%eax
   12375:	ba 01 00 00 00       	mov    $0x1,%edx
   1237a:	89 c1                	mov    %eax,%ecx
   1237c:	d3 e2                	shl    %cl,%edx
   1237e:	89 d0                	mov    %edx,%eax
   12380:	89 f2                	mov    %esi,%edx
   12382:	09 c2                	or     %eax,%edx
   12384:	8b 45 08             	mov    0x8(%ebp),%eax
   12387:	8b 40 04             	mov    0x4(%eax),%eax
   1238a:	89 d9                	mov    %ebx,%ecx
   1238c:	01 c8                	add    %ecx,%eax
   1238e:	88 10                	mov    %dl,(%eax)
   12390:	eb 4a                	jmp    123dc <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12392:	8b 45 08             	mov    0x8(%ebp),%eax
   12395:	8b 50 04             	mov    0x4(%eax),%edx
   12398:	8b 45 0c             	mov    0xc(%ebp),%eax
   1239b:	8d 48 07             	lea    0x7(%eax),%ecx
   1239e:	85 c0                	test   %eax,%eax
   123a0:	0f 48 c1             	cmovs  %ecx,%eax
   123a3:	c1 f8 03             	sar    $0x3,%eax
   123a6:	89 c3                	mov    %eax,%ebx
   123a8:	89 d8                	mov    %ebx,%eax
   123aa:	01 d0                	add    %edx,%eax
   123ac:	0f b6 00             	movzbl (%eax),%eax
   123af:	89 c6                	mov    %eax,%esi
   123b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   123b4:	99                   	cltd   
   123b5:	c1 ea 1d             	shr    $0x1d,%edx
   123b8:	01 d0                	add    %edx,%eax
   123ba:	83 e0 07             	and    $0x7,%eax
   123bd:	29 d0                	sub    %edx,%eax
   123bf:	ba 01 00 00 00       	mov    $0x1,%edx
   123c4:	89 c1                	mov    %eax,%ecx
   123c6:	d3 e2                	shl    %cl,%edx
   123c8:	89 d0                	mov    %edx,%eax
   123ca:	f7 d0                	not    %eax
   123cc:	89 f2                	mov    %esi,%edx
   123ce:	21 c2                	and    %eax,%edx
   123d0:	8b 45 08             	mov    0x8(%ebp),%eax
   123d3:	8b 40 04             	mov    0x4(%eax),%eax
   123d6:	89 d9                	mov    %ebx,%ecx
   123d8:	01 c8                	add    %ecx,%eax
   123da:	88 10                	mov    %dl,(%eax)
        }
        index++;
   123dc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   123e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123e7:	3b 45 10             	cmp    0x10(%ebp),%eax
   123ea:	7d 0e                	jge    123fa <bitmap_set_bit+0xcc>
   123ec:	8b 45 08             	mov    0x8(%ebp),%eax
   123ef:	8b 00                	mov    (%eax),%eax
   123f1:	39 45 0c             	cmp    %eax,0xc(%ebp)
   123f4:	0f 8c 48 ff ff ff    	jl     12342 <bitmap_set_bit+0x14>
    }
}
   123fa:	90                   	nop
   123fb:	83 c4 10             	add    $0x10,%esp
   123fe:	5b                   	pop    %ebx
   123ff:	5e                   	pop    %esi
   12400:	5d                   	pop    %ebp
   12401:	c3                   	ret    

00012402 <bitmap_is_set>:
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   12402:	55                   	push   %ebp
   12403:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12405:	ff 75 0c             	pushl  0xc(%ebp)
   12408:	ff 75 08             	pushl  0x8(%ebp)
   1240b:	e8 e0 fe ff ff       	call   122f0 <bitmap_get_bit>
   12410:	83 c4 08             	add    $0x8,%esp
   12413:	85 c0                	test   %eax,%eax
   12415:	0f 95 c0             	setne  %al
   12418:	0f b6 c0             	movzbl %al,%eax
}
   1241b:	c9                   	leave  
   1241c:	c3                   	ret    

0001241d <bitmap_alloc_nbits>:
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   1241d:	55                   	push   %ebp
   1241e:	89 e5                	mov    %esp,%ebp
   12420:	83 ec 10             	sub    $0x10,%esp
    int index = 0;
   12423:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   1242a:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
    while(index < bitmap->bit_count)
   12431:	e9 8c 00 00 00       	jmp    124c2 <bitmap_alloc_nbits+0xa5>
    {
        if(bitmap_get_bit(bitmap, index) != bit)
   12436:	ff 75 fc             	pushl  -0x4(%ebp)
   12439:	ff 75 08             	pushl  0x8(%ebp)
   1243c:	e8 af fe ff ff       	call   122f0 <bitmap_get_bit>
   12441:	83 c4 08             	add    $0x8,%esp
   12444:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12447:	74 06                	je     1244f <bitmap_alloc_nbits+0x32>
        {
            index++;
   12449:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   1244d:	eb 73                	jmp    124c2 <bitmap_alloc_nbits+0xa5>
        }
        ok_index = index;
   1244f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12452:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i = 0;
   12455:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   1245c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12463:	eb 27                	jmp    1248c <bitmap_alloc_nbits+0x6f>
        {
            if(bitmap_get_bit(bitmap, index++) != bit)
   12465:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12468:	8d 50 01             	lea    0x1(%eax),%edx
   1246b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1246e:	50                   	push   %eax
   1246f:	ff 75 08             	pushl  0x8(%ebp)
   12472:	e8 79 fe ff ff       	call   122f0 <bitmap_get_bit>
   12477:	83 c4 08             	add    $0x8,%esp
   1247a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1247d:	74 09                	je     12488 <bitmap_alloc_nbits+0x6b>
            {
                ok_index = -1;
   1247f:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12486:	eb 16                	jmp    1249e <bitmap_alloc_nbits+0x81>
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   12488:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1248c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1248f:	3b 45 10             	cmp    0x10(%ebp),%eax
   12492:	7d 0a                	jge    1249e <bitmap_alloc_nbits+0x81>
   12494:	8b 45 08             	mov    0x8(%ebp),%eax
   12497:	8b 00                	mov    (%eax),%eax
   12499:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1249c:	7c c7                	jl     12465 <bitmap_alloc_nbits+0x48>
            }
        }
        if(i >= count)
   1249e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124a1:	3b 45 10             	cmp    0x10(%ebp),%eax
   124a4:	7c 1c                	jl     124c2 <bitmap_alloc_nbits+0xa5>
        {
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   124a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   124a9:	f7 d0                	not    %eax
   124ab:	50                   	push   %eax
   124ac:	ff 75 10             	pushl  0x10(%ebp)
   124af:	ff 75 f8             	pushl  -0x8(%ebp)
   124b2:	ff 75 08             	pushl  0x8(%ebp)
   124b5:	e8 74 fe ff ff       	call   1232e <bitmap_set_bit>
   124ba:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   124bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124c0:	eb 13                	jmp    124d5 <bitmap_alloc_nbits+0xb8>
    while(index < bitmap->bit_count)
   124c2:	8b 45 08             	mov    0x8(%ebp),%eax
   124c5:	8b 00                	mov    (%eax),%eax
   124c7:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   124ca:	0f 8c 66 ff ff ff    	jl     12436 <bitmap_alloc_nbits+0x19>
        }
    }        
    return -1;
   124d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   124d5:	c9                   	leave  
   124d6:	c3                   	ret    

000124d7 <hlt>:
{
   124d7:	55                   	push   %ebp
   124d8:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   124da:	f4                   	hlt    
}
   124db:	90                   	nop
   124dc:	5d                   	pop    %ebp
   124dd:	c3                   	ret    

000124de <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"
void kernel_strcpy (char *dest, const char *src)
{
   124de:	55                   	push   %ebp
   124df:	89 e5                	mov    %esp,%ebp
    if(!dest || !src)
   124e1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124e5:	74 27                	je     1250e <kernel_strcpy+0x30>
   124e7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124eb:	74 21                	je     1250e <kernel_strcpy+0x30>
    {
        return;
    }
    while((*dest++ = *src++) != '\0');
   124ed:	90                   	nop
   124ee:	8b 55 0c             	mov    0xc(%ebp),%edx
   124f1:	8d 42 01             	lea    0x1(%edx),%eax
   124f4:	89 45 0c             	mov    %eax,0xc(%ebp)
   124f7:	8b 45 08             	mov    0x8(%ebp),%eax
   124fa:	8d 48 01             	lea    0x1(%eax),%ecx
   124fd:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12500:	0f b6 12             	movzbl (%edx),%edx
   12503:	88 10                	mov    %dl,(%eax)
   12505:	0f b6 00             	movzbl (%eax),%eax
   12508:	84 c0                	test   %al,%al
   1250a:	75 e2                	jne    124ee <kernel_strcpy+0x10>
   1250c:	eb 01                	jmp    1250f <kernel_strcpy+0x31>
        return;
   1250e:	90                   	nop
    //*dest = '\0';
}
   1250f:	5d                   	pop    %ebp
   12510:	c3                   	ret    

00012511 <kernel_strncpy>:

void kernel_strncpy (char *dest, const char *src, int size)
{
   12511:	55                   	push   %ebp
   12512:	89 e5                	mov    %esp,%ebp
   12514:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src)
   12517:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1251b:	74 5b                	je     12578 <kernel_strncpy+0x67>
   1251d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12521:	74 55                	je     12578 <kernel_strncpy+0x67>
    {
        return;
    }
    char *d = dest;
   12523:	8b 45 08             	mov    0x8(%ebp),%eax
   12526:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   12529:	8b 45 0c             	mov    0xc(%ebp),%eax
   1252c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s))
   1252f:	eb 17                	jmp    12548 <kernel_strncpy+0x37>
    {
        *d++ = *s++;
   12531:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12534:	8d 42 01             	lea    0x1(%edx),%eax
   12537:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1253a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1253d:	8d 48 01             	lea    0x1(%eax),%ecx
   12540:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12543:	0f b6 12             	movzbl (%edx),%edx
   12546:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s))
   12548:	8b 45 10             	mov    0x10(%ebp),%eax
   1254b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1254e:	89 55 10             	mov    %edx,0x10(%ebp)
   12551:	85 c0                	test   %eax,%eax
   12553:	7e 0a                	jle    1255f <kernel_strncpy+0x4e>
   12555:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12558:	0f b6 00             	movzbl (%eax),%eax
   1255b:	84 c0                	test   %al,%al
   1255d:	75 d2                	jne    12531 <kernel_strncpy+0x20>
    }
    if(size == 0)
   1255f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12563:	75 0b                	jne    12570 <kernel_strncpy+0x5f>
    {
        *(d - 1) = '\0';
   12565:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12568:	83 e8 01             	sub    $0x1,%eax
   1256b:	c6 00 00             	movb   $0x0,(%eax)
   1256e:	eb 09                	jmp    12579 <kernel_strncpy+0x68>
    }
    else
    {
        *d = '\0';
   12570:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12573:	c6 00 00             	movb   $0x0,(%eax)
   12576:	eb 01                	jmp    12579 <kernel_strncpy+0x68>
        return;
   12578:	90                   	nop
    }
}
   12579:	c9                   	leave  
   1257a:	c3                   	ret    

0001257b <kernel_strncmp>:

int kernel_strncmp (const char *str1, const char *str2, int size)
{
   1257b:	55                   	push   %ebp
   1257c:	89 e5                	mov    %esp,%ebp
    if(!str1 || !str2)
   1257e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12582:	74 06                	je     1258a <kernel_strncmp+0xf>
   12584:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12588:	75 0f                	jne    12599 <kernel_strncmp+0x1e>
    {
        return 0;
   1258a:	b8 00 00 00 00       	mov    $0x0,%eax
   1258f:	eb 62                	jmp    125f3 <kernel_strncmp+0x78>
    }
    while(*str1 && *str2 && (*str1 == *str2) && size)
    {
        str1++;
   12591:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        str2++;
   12595:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*str1 && *str2 && (*str1 == *str2) && size)
   12599:	8b 45 08             	mov    0x8(%ebp),%eax
   1259c:	0f b6 00             	movzbl (%eax),%eax
   1259f:	84 c0                	test   %al,%al
   125a1:	74 20                	je     125c3 <kernel_strncmp+0x48>
   125a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a6:	0f b6 00             	movzbl (%eax),%eax
   125a9:	84 c0                	test   %al,%al
   125ab:	74 16                	je     125c3 <kernel_strncmp+0x48>
   125ad:	8b 45 08             	mov    0x8(%ebp),%eax
   125b0:	0f b6 10             	movzbl (%eax),%edx
   125b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   125b6:	0f b6 00             	movzbl (%eax),%eax
   125b9:	38 c2                	cmp    %al,%dl
   125bb:	75 06                	jne    125c3 <kernel_strncmp+0x48>
   125bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125c1:	75 ce                	jne    12591 <kernel_strncmp+0x16>
    }
    return !((*str1 == '\0') || (*str2 == '\0') || (*str1 == *str2));
   125c3:	8b 45 08             	mov    0x8(%ebp),%eax
   125c6:	0f b6 00             	movzbl (%eax),%eax
   125c9:	84 c0                	test   %al,%al
   125cb:	74 21                	je     125ee <kernel_strncmp+0x73>
   125cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   125d0:	0f b6 00             	movzbl (%eax),%eax
   125d3:	84 c0                	test   %al,%al
   125d5:	74 17                	je     125ee <kernel_strncmp+0x73>
   125d7:	8b 45 08             	mov    0x8(%ebp),%eax
   125da:	0f b6 10             	movzbl (%eax),%edx
   125dd:	8b 45 0c             	mov    0xc(%ebp),%eax
   125e0:	0f b6 00             	movzbl (%eax),%eax
   125e3:	38 c2                	cmp    %al,%dl
   125e5:	74 07                	je     125ee <kernel_strncmp+0x73>
   125e7:	b8 01 00 00 00       	mov    $0x1,%eax
   125ec:	eb 05                	jmp    125f3 <kernel_strncmp+0x78>
   125ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
   125f3:	5d                   	pop    %ebp
   125f4:	c3                   	ret    

000125f5 <kernel_strlen>:

int kernel_strlen (const char *str)
{
   125f5:	55                   	push   %ebp
   125f6:	89 e5                	mov    %esp,%ebp
   125f8:	83 ec 10             	sub    $0x10,%esp
    if(!str)
   125fb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125ff:	75 07                	jne    12608 <kernel_strlen+0x13>
    {
        return 0;
   12601:	b8 00 00 00 00       	mov    $0x0,%eax
   12606:	eb 26                	jmp    1262e <kernel_strlen+0x39>
    }
    const char *s = str;
   12608:	8b 45 08             	mov    0x8(%ebp),%eax
   1260b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   1260e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while(*s++)
   12615:	eb 04                	jmp    1261b <kernel_strlen+0x26>
    {
        len++;
   12617:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(*s++)
   1261b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1261e:	8d 50 01             	lea    0x1(%eax),%edx
   12621:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12624:	0f b6 00             	movzbl (%eax),%eax
   12627:	84 c0                	test   %al,%al
   12629:	75 ec                	jne    12617 <kernel_strlen+0x22>
    }
    return len;
   1262b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1262e:	c9                   	leave  
   1262f:	c3                   	ret    

00012630 <kernel_memcpy>:


void kernel_memcpy (void *dest, void *src, int size)
{
   12630:	55                   	push   %ebp
   12631:	89 e5                	mov    %esp,%ebp
   12633:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src || size <= 0)
   12636:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1263a:	74 40                	je     1267c <kernel_memcpy+0x4c>
   1263c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12640:	74 3a                	je     1267c <kernel_memcpy+0x4c>
   12642:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12646:	7e 34                	jle    1267c <kernel_memcpy+0x4c>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   12648:	8b 45 08             	mov    0x8(%ebp),%eax
   1264b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t *)src;
   1264e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12651:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   12654:	eb 17                	jmp    1266d <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   12656:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12659:	8d 42 01             	lea    0x1(%edx),%eax
   1265c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1265f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12662:	8d 48 01             	lea    0x1(%eax),%ecx
   12665:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12668:	0f b6 12             	movzbl (%edx),%edx
   1266b:	88 10                	mov    %dl,(%eax)
    while(size--)
   1266d:	8b 45 10             	mov    0x10(%ebp),%eax
   12670:	8d 50 ff             	lea    -0x1(%eax),%edx
   12673:	89 55 10             	mov    %edx,0x10(%ebp)
   12676:	85 c0                	test   %eax,%eax
   12678:	75 dc                	jne    12656 <kernel_memcpy+0x26>
   1267a:	eb 01                	jmp    1267d <kernel_memcpy+0x4d>
        return;
   1267c:	90                   	nop
    }
}
   1267d:	c9                   	leave  
   1267e:	c3                   	ret    

0001267f <kernel_memset>:

void kernel_memset (void *dest, int c, int size)
{
   1267f:	55                   	push   %ebp
   12680:	89 e5                	mov    %esp,%ebp
   12682:	83 ec 10             	sub    $0x10,%esp
    if(!dest || size <= 0)
   12685:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12689:	74 2b                	je     126b6 <kernel_memset+0x37>
   1268b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1268f:	7e 25                	jle    126b6 <kernel_memset+0x37>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   12691:	8b 45 08             	mov    0x8(%ebp),%eax
   12694:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--)
   12697:	eb 0e                	jmp    126a7 <kernel_memset+0x28>
    {
        *d++ = (uint8_t)c;
   12699:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1269c:	8d 50 01             	lea    0x1(%eax),%edx
   1269f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   126a2:	8b 55 0c             	mov    0xc(%ebp),%edx
   126a5:	88 10                	mov    %dl,(%eax)
    while(size--)
   126a7:	8b 45 10             	mov    0x10(%ebp),%eax
   126aa:	8d 50 ff             	lea    -0x1(%eax),%edx
   126ad:	89 55 10             	mov    %edx,0x10(%ebp)
   126b0:	85 c0                	test   %eax,%eax
   126b2:	75 e5                	jne    12699 <kernel_memset+0x1a>
   126b4:	eb 01                	jmp    126b7 <kernel_memset+0x38>
        return;
   126b6:	90                   	nop
    }
}
   126b7:	c9                   	leave  
   126b8:	c3                   	ret    

000126b9 <kernel_memcmp>:

int kernel_memcmp (void *d1, void *d2, int size)
{
   126b9:	55                   	push   %ebp
   126ba:	89 e5                	mov    %esp,%ebp
   126bc:	83 ec 10             	sub    $0x10,%esp
    if(!d1 || !d2 || !size)
   126bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126c3:	74 0c                	je     126d1 <kernel_memcmp+0x18>
   126c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126c9:	74 06                	je     126d1 <kernel_memcmp+0x18>
   126cb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126cf:	75 07                	jne    126d8 <kernel_memcmp+0x1f>
    {
        return 1;
   126d1:	b8 01 00 00 00       	mov    $0x1,%eax
   126d6:	eb 43                	jmp    1271b <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t *)d1;
   126d8:	8b 45 08             	mov    0x8(%ebp),%eax
   126db:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   126de:	8b 45 0c             	mov    0xc(%ebp),%eax
   126e1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   126e4:	eb 23                	jmp    12709 <kernel_memcmp+0x50>
    {
        if(*p_d1++ != *p_d2++)
   126e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126e9:	8d 50 01             	lea    0x1(%eax),%edx
   126ec:	89 55 fc             	mov    %edx,-0x4(%ebp)
   126ef:	0f b6 08             	movzbl (%eax),%ecx
   126f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126f5:	8d 50 01             	lea    0x1(%eax),%edx
   126f8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126fb:	0f b6 00             	movzbl (%eax),%eax
   126fe:	38 c1                	cmp    %al,%cl
   12700:	74 07                	je     12709 <kernel_memcmp+0x50>
        {
            return 1;
   12702:	b8 01 00 00 00       	mov    $0x1,%eax
   12707:	eb 12                	jmp    1271b <kernel_memcmp+0x62>
    while(size--)
   12709:	8b 45 10             	mov    0x10(%ebp),%eax
   1270c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1270f:	89 55 10             	mov    %edx,0x10(%ebp)
   12712:	85 c0                	test   %eax,%eax
   12714:	75 d0                	jne    126e6 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   12716:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1271b:	c9                   	leave  
   1271c:	c3                   	ret    

0001271d <kernel_itoa>:

void kernel_itoa (char *buf, int num, int base)
{
   1271d:	55                   	push   %ebp
   1271e:	89 e5                	mov    %esp,%ebp
   12720:	83 ec 10             	sub    $0x10,%esp
    int is_neg = 0;
   12723:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    is_neg = num < 0 ? 1 : 0;
   1272a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1272d:	c1 e8 1f             	shr    $0x1f,%eax
   12730:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static const char * num2ch = "0123456789abcdef";
    char *p = buf;
   12733:	8b 45 08             	mov    0x8(%ebp),%eax
   12736:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(base != 2 && base != 8 && base != 10 && base != 16)
   12739:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1273d:	74 1d                	je     1275c <kernel_itoa+0x3f>
   1273f:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12743:	74 17                	je     1275c <kernel_itoa+0x3f>
   12745:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12749:	74 11                	je     1275c <kernel_itoa+0x3f>
   1274b:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1274f:	74 0b                	je     1275c <kernel_itoa+0x3f>
    {
        *p = '\0';
   12751:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12754:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12757:	e9 9e 00 00 00       	jmp    127fa <kernel_itoa+0xdd>
    }
    if(num < 0 && base == 10)
   1275c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12760:	79 09                	jns    1276b <kernel_itoa+0x4e>
   12762:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12766:	75 03                	jne    1276b <kernel_itoa+0x4e>
    {
        //*p++ = '-';
        num = -num;
   12768:	f7 5d 0c             	negl   0xc(%ebp)
    }
    do{
        char ch = num2ch[num % base];
   1276b:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12771:	8b 45 0c             	mov    0xc(%ebp),%eax
   12774:	99                   	cltd   
   12775:	f7 7d 10             	idivl  0x10(%ebp)
   12778:	89 d0                	mov    %edx,%eax
   1277a:	01 c8                	add    %ecx,%eax
   1277c:	0f b6 00             	movzbl (%eax),%eax
   1277f:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   12782:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12785:	8d 50 01             	lea    0x1(%eax),%edx
   12788:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1278b:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1278f:	88 10                	mov    %dl,(%eax)
        num /= base;
   12791:	8b 45 0c             	mov    0xc(%ebp),%eax
   12794:	99                   	cltd   
   12795:	f7 7d 10             	idivl  0x10(%ebp)
   12798:	89 45 0c             	mov    %eax,0xc(%ebp)
    }while (num);
   1279b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1279f:	75 ca                	jne    1276b <kernel_itoa+0x4e>
    if(base == 10 && is_neg)
   127a1:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   127a5:	75 12                	jne    127b9 <kernel_itoa+0x9c>
   127a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   127ab:	74 0c                	je     127b9 <kernel_itoa+0x9c>
    {
        *p++ = '-';
   127ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127b0:	8d 50 01             	lea    0x1(%eax),%edx
   127b3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   127b6:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    *p-- = '\0';
   127b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127bc:	8d 50 ff             	lea    -0x1(%eax),%edx
   127bf:	89 55 fc             	mov    %edx,-0x4(%ebp)
   127c2:	c6 00 00             	movb   $0x0,(%eax)

    char *start = buf;
   127c5:	8b 45 08             	mov    0x8(%ebp),%eax
   127c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p)
   127cb:	eb 25                	jmp    127f2 <kernel_itoa+0xd5>
    {
        char tmp = *start;
   127cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   127d0:	0f b6 00             	movzbl (%eax),%eax
   127d3:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   127d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127d9:	0f b6 10             	movzbl (%eax),%edx
   127dc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   127df:	88 10                	mov    %dl,(%eax)
        *p = tmp;
   127e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127e4:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   127e8:	88 10                	mov    %dl,(%eax)
        p--;
   127ea:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   127ee:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p)
   127f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   127f5:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   127f8:	72 d3                	jb     127cd <kernel_itoa+0xb0>
    }
    
}
   127fa:	c9                   	leave  
   127fb:	c3                   	ret    

000127fc <kernel_sprintf>:
void kernel_sprintf (char *buf, const char *fmt, ...)
{
   127fc:	55                   	push   %ebp
   127fd:	89 e5                	mov    %esp,%ebp
   127ff:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12802:	8d 45 10             	lea    0x10(%ebp),%eax
   12805:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buf, fmt, args);
   12808:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1280b:	83 ec 04             	sub    $0x4,%esp
   1280e:	50                   	push   %eax
   1280f:	ff 75 0c             	pushl  0xc(%ebp)
   12812:	ff 75 08             	pushl  0x8(%ebp)
   12815:	e8 06 00 00 00       	call   12820 <kernel_vsprintf>
   1281a:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1281d:	90                   	nop
   1281e:	c9                   	leave  
   1281f:	c3                   	ret    

00012820 <kernel_vsprintf>:
void kernel_vsprintf (char *buf, const char *fmt, va_list args)
{
   12820:	55                   	push   %ebp
   12821:	89 e5                	mov    %esp,%ebp
   12823:	83 ec 20             	sub    $0x20,%esp
    enum{
        NORMAL,READ_FMT
    }state = NORMAL;
   12826:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char * curr = buf;
   1282d:	8b 45 08             	mov    0x8(%ebp),%eax
   12830:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++))
   12833:	e9 17 01 00 00       	jmp    1294f <kernel_vsprintf+0x12f>
    {
       switch(state)
   12838:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1283b:	85 c0                	test   %eax,%eax
   1283d:	74 0a                	je     12849 <kernel_vsprintf+0x29>
   1283f:	83 f8 01             	cmp    $0x1,%eax
   12842:	74 2b                	je     1286f <kernel_vsprintf+0x4f>
   12844:	e9 06 01 00 00       	jmp    1294f <kernel_vsprintf+0x12f>
       {
        case NORMAL:
            if(ch == '%')
   12849:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1284d:	75 0c                	jne    1285b <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   1284f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12856:	e9 f4 00 00 00       	jmp    1294f <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   1285b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1285e:	8d 50 01             	lea    0x1(%eax),%edx
   12861:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12864:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12868:	88 10                	mov    %dl,(%eax)
            }
            break;
   1286a:	e9 e0 00 00 00       	jmp    1294f <kernel_vsprintf+0x12f>
        case READ_FMT:
            if(ch == 'd')
   1286f:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12873:	75 31                	jne    128a6 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args,int);
   12875:	8b 45 10             	mov    0x10(%ebp),%eax
   12878:	8d 50 04             	lea    0x4(%eax),%edx
   1287b:	89 55 10             	mov    %edx,0x10(%ebp)
   1287e:	8b 00                	mov    (%eax),%eax
   12880:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr,num,10);
   12883:	6a 0a                	push   $0xa
   12885:	ff 75 e4             	pushl  -0x1c(%ebp)
   12888:	ff 75 f8             	pushl  -0x8(%ebp)
   1288b:	e8 8d fe ff ff       	call   1271d <kernel_itoa>
   12890:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   12893:	ff 75 f8             	pushl  -0x8(%ebp)
   12896:	e8 5a fd ff ff       	call   125f5 <kernel_strlen>
   1289b:	83 c4 04             	add    $0x4,%esp
   1289e:	01 45 f8             	add    %eax,-0x8(%ebp)
   128a1:	e9 a1 00 00 00       	jmp    12947 <kernel_vsprintf+0x127>
            }
            else if(ch == 'x')
   128a6:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   128aa:	75 2e                	jne    128da <kernel_vsprintf+0xba>
            {
                int num = va_arg(args,int);
   128ac:	8b 45 10             	mov    0x10(%ebp),%eax
   128af:	8d 50 04             	lea    0x4(%eax),%edx
   128b2:	89 55 10             	mov    %edx,0x10(%ebp)
   128b5:	8b 00                	mov    (%eax),%eax
   128b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr,num,16);
   128ba:	6a 10                	push   $0x10
   128bc:	ff 75 e8             	pushl  -0x18(%ebp)
   128bf:	ff 75 f8             	pushl  -0x8(%ebp)
   128c2:	e8 56 fe ff ff       	call   1271d <kernel_itoa>
   128c7:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   128ca:	ff 75 f8             	pushl  -0x8(%ebp)
   128cd:	e8 23 fd ff ff       	call   125f5 <kernel_strlen>
   128d2:	83 c4 04             	add    $0x4,%esp
   128d5:	01 45 f8             	add    %eax,-0x8(%ebp)
   128d8:	eb 6d                	jmp    12947 <kernel_vsprintf+0x127>
            }
            else if(ch == 'c')
   128da:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   128de:	75 1f                	jne    128ff <kernel_vsprintf+0xdf>
            {
                char ch = va_arg(args,int);
   128e0:	8b 45 10             	mov    0x10(%ebp),%eax
   128e3:	8d 50 04             	lea    0x4(%eax),%edx
   128e6:	89 55 10             	mov    %edx,0x10(%ebp)
   128e9:	8b 00                	mov    (%eax),%eax
   128eb:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = ch;
   128ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128f1:	8d 50 01             	lea    0x1(%eax),%edx
   128f4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   128f7:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   128fb:	88 10                	mov    %dl,(%eax)
   128fd:	eb 48                	jmp    12947 <kernel_vsprintf+0x127>
            }
            else if(ch == 's')
   128ff:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12903:	75 42                	jne    12947 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args,char *);
   12905:	8b 45 10             	mov    0x10(%ebp),%eax
   12908:	8d 50 04             	lea    0x4(%eax),%edx
   1290b:	89 55 10             	mov    %edx,0x10(%ebp)
   1290e:	8b 00                	mov    (%eax),%eax
   12910:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   12913:	ff 75 f4             	pushl  -0xc(%ebp)
   12916:	e8 da fc ff ff       	call   125f5 <kernel_strlen>
   1291b:	83 c4 04             	add    $0x4,%esp
   1291e:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--)
   12921:	eb 17                	jmp    1293a <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   12923:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12926:	8d 42 01             	lea    0x1(%edx),%eax
   12929:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1292c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1292f:	8d 48 01             	lea    0x1(%eax),%ecx
   12932:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12935:	0f b6 12             	movzbl (%edx),%edx
   12938:	88 10                	mov    %dl,(%eax)
                while(len--)
   1293a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1293d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12940:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12943:	85 c0                	test   %eax,%eax
   12945:	75 dc                	jne    12923 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   12947:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   1294e:	90                   	nop
    while((ch = *fmt++))
   1294f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12952:	8d 50 01             	lea    0x1(%eax),%edx
   12955:	89 55 0c             	mov    %edx,0xc(%ebp)
   12958:	0f b6 00             	movzbl (%eax),%eax
   1295b:	88 45 ef             	mov    %al,-0x11(%ebp)
   1295e:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12962:	0f 85 d0 fe ff ff    	jne    12838 <kernel_vsprintf+0x18>
       }
    }
}
   12968:	90                   	nop
   12969:	c9                   	leave  
   1296a:	c3                   	ret    

0001296b <panic>:
void panic(const char *file,int line,const char *func,const char *cond)
{
   1296b:	55                   	push   %ebp
   1296c:	89 e5                	mov    %esp,%ebp
   1296e:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed: %s\n",cond);
   12971:	83 ec 08             	sub    $0x8,%esp
   12974:	ff 75 14             	pushl  0x14(%ebp)
   12977:	68 9e 30 01 00       	push   $0x1309e
   1297c:	e8 12 03 00 00       	call   12c93 <log_printf>
   12981:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\n",file);
   12984:	83 ec 08             	sub    $0x8,%esp
   12987:	ff 75 08             	pushl  0x8(%ebp)
   1298a:	68 b1 30 01 00       	push   $0x130b1
   1298f:	e8 ff 02 00 00       	call   12c93 <log_printf>
   12994:	83 c4 10             	add    $0x10,%esp
    log_printf("line: %d\n",line);
   12997:	83 ec 08             	sub    $0x8,%esp
   1299a:	ff 75 0c             	pushl  0xc(%ebp)
   1299d:	68 bb 30 01 00       	push   $0x130bb
   129a2:	e8 ec 02 00 00       	call   12c93 <log_printf>
   129a7:	83 c4 10             	add    $0x10,%esp
    log_printf("function: %s\n",func);
   129aa:	83 ec 08             	sub    $0x8,%esp
   129ad:	ff 75 10             	pushl  0x10(%ebp)
   129b0:	68 c5 30 01 00       	push   $0x130c5
   129b5:	e8 d9 02 00 00       	call   12c93 <log_printf>
   129ba:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   129bd:	e8 15 fb ff ff       	call   124d7 <hlt>
   129c2:	eb f9                	jmp    129bd <panic+0x52>

000129c4 <list_is_empty>:
{
   129c4:	55                   	push   %ebp
   129c5:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   129c7:	8b 45 08             	mov    0x8(%ebp),%eax
   129ca:	8b 40 08             	mov    0x8(%eax),%eax
   129cd:	85 c0                	test   %eax,%eax
   129cf:	0f 94 c0             	sete   %al
   129d2:	0f b6 c0             	movzbl %al,%eax
}
   129d5:	5d                   	pop    %ebp
   129d6:	c3                   	ret    

000129d7 <list_init>:
#include "tools/list.h"

void list_init(list_t *list)
{
   129d7:	55                   	push   %ebp
   129d8:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   129da:	8b 45 08             	mov    0x8(%ebp),%eax
   129dd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   129e4:	8b 45 08             	mov    0x8(%ebp),%eax
   129e7:	8b 50 04             	mov    0x4(%eax),%edx
   129ea:	8b 45 08             	mov    0x8(%ebp),%eax
   129ed:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   129ef:	8b 45 08             	mov    0x8(%ebp),%eax
   129f2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   129f9:	90                   	nop
   129fa:	5d                   	pop    %ebp
   129fb:	c3                   	ret    

000129fc <list_insert_first>:

void list_insert_first(list_t * list,list_node_t * node)
{
   129fc:	55                   	push   %ebp
   129fd:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   129ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12a02:	8b 10                	mov    (%eax),%edx
   12a04:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a07:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   12a0a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if(list_is_empty(list))
   12a13:	ff 75 08             	pushl  0x8(%ebp)
   12a16:	e8 a9 ff ff ff       	call   129c4 <list_is_empty>
   12a1b:	83 c4 04             	add    $0x4,%esp
   12a1e:	85 c0                	test   %eax,%eax
   12a20:	74 15                	je     12a37 <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   12a22:	8b 45 08             	mov    0x8(%ebp),%eax
   12a25:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a28:	89 10                	mov    %edx,(%eax)
   12a2a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2d:	8b 10                	mov    (%eax),%edx
   12a2f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a32:	89 50 04             	mov    %edx,0x4(%eax)
   12a35:	eb 12                	jmp    12a49 <list_insert_first+0x4d>
    }
    else
    {
        list->first->pre = node;
   12a37:	8b 45 08             	mov    0x8(%ebp),%eax
   12a3a:	8b 00                	mov    (%eax),%eax
   12a3c:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a3f:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12a41:	8b 45 08             	mov    0x8(%ebp),%eax
   12a44:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a47:	89 10                	mov    %edx,(%eax)
    }
    list->count++;
   12a49:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4c:	8b 40 08             	mov    0x8(%eax),%eax
   12a4f:	8d 50 01             	lea    0x1(%eax),%edx
   12a52:	8b 45 08             	mov    0x8(%ebp),%eax
   12a55:	89 50 08             	mov    %edx,0x8(%eax)
}
   12a58:	90                   	nop
   12a59:	c9                   	leave  
   12a5a:	c3                   	ret    

00012a5b <list_insert_last>:

void list_insert_last(list_t * list,list_node_t * node)
{
   12a5b:	55                   	push   %ebp
   12a5c:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12a5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a61:	8b 50 04             	mov    0x4(%eax),%edx
   12a64:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a67:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   12a69:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if(list_is_empty(list))
   12a73:	ff 75 08             	pushl  0x8(%ebp)
   12a76:	e8 49 ff ff ff       	call   129c4 <list_is_empty>
   12a7b:	83 c4 04             	add    $0x4,%esp
   12a7e:	85 c0                	test   %eax,%eax
   12a80:	74 16                	je     12a98 <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   12a82:	8b 45 08             	mov    0x8(%ebp),%eax
   12a85:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a88:	89 50 04             	mov    %edx,0x4(%eax)
   12a8b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a8e:	8b 50 04             	mov    0x4(%eax),%edx
   12a91:	8b 45 08             	mov    0x8(%ebp),%eax
   12a94:	89 10                	mov    %edx,(%eax)
   12a96:	eb 15                	jmp    12aad <list_insert_last+0x52>
    }
    else
    {
        list->last->next = node;
   12a98:	8b 45 08             	mov    0x8(%ebp),%eax
   12a9b:	8b 40 04             	mov    0x4(%eax),%eax
   12a9e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12aa1:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12aa4:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa7:	8b 55 0c             	mov    0xc(%ebp),%edx
   12aaa:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list->count++;
   12aad:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab0:	8b 40 08             	mov    0x8(%eax),%eax
   12ab3:	8d 50 01             	lea    0x1(%eax),%edx
   12ab6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab9:	89 50 08             	mov    %edx,0x8(%eax)
}
   12abc:	90                   	nop
   12abd:	c9                   	leave  
   12abe:	c3                   	ret    

00012abf <list_remove_first>:

list_node_t* list_remove_first(list_t * list)
{
   12abf:	55                   	push   %ebp
   12ac0:	89 e5                	mov    %esp,%ebp
   12ac2:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list))
   12ac5:	ff 75 08             	pushl  0x8(%ebp)
   12ac8:	e8 f7 fe ff ff       	call   129c4 <list_is_empty>
   12acd:	83 c4 04             	add    $0x4,%esp
   12ad0:	85 c0                	test   %eax,%eax
   12ad2:	74 07                	je     12adb <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   12ad4:	b8 00 00 00 00       	mov    $0x0,%eax
   12ad9:	eb 59                	jmp    12b34 <list_remove_first+0x75>
    }
    list_node_t * node = list->first;
   12adb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ade:	8b 00                	mov    (%eax),%eax
   12ae0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = node->next;
   12ae3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ae6:	8b 50 04             	mov    0x4(%eax),%edx
   12ae9:	8b 45 08             	mov    0x8(%ebp),%eax
   12aec:	89 10                	mov    %edx,(%eax)
    if(list->first == (list_node_t *)0)
   12aee:	8b 45 08             	mov    0x8(%ebp),%eax
   12af1:	8b 00                	mov    (%eax),%eax
   12af3:	85 c0                	test   %eax,%eax
   12af5:	75 0c                	jne    12b03 <list_remove_first+0x44>
    {
        list->last = (list_node_t *)0;
   12af7:	8b 45 08             	mov    0x8(%ebp),%eax
   12afa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b01:	eb 0b                	jmp    12b0e <list_remove_first+0x4f>
    }
    else
    {
        list->first->pre = (list_node_t *)0;
   12b03:	8b 45 08             	mov    0x8(%ebp),%eax
   12b06:	8b 00                	mov    (%eax),%eax
   12b08:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   12b0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b11:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   12b17:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b1a:	8b 10                	mov    (%eax),%edx
   12b1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b1f:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   12b22:	8b 45 08             	mov    0x8(%ebp),%eax
   12b25:	8b 40 08             	mov    0x8(%eax),%eax
   12b28:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b2b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b2e:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12b31:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12b34:	c9                   	leave  
   12b35:	c3                   	ret    

00012b36 <list_remove>:

list_node_t* list_remove(list_t * list,list_node_t * node)
{
   12b36:	55                   	push   %ebp
   12b37:	89 e5                	mov    %esp,%ebp
    if(node == list->first)
   12b39:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3c:	8b 00                	mov    (%eax),%eax
   12b3e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12b41:	75 0b                	jne    12b4e <list_remove+0x18>
    {
        list->first = node->next;
   12b43:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b46:	8b 50 04             	mov    0x4(%eax),%edx
   12b49:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4c:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last)
   12b4e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b51:	8b 40 04             	mov    0x4(%eax),%eax
   12b54:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12b57:	75 0b                	jne    12b64 <list_remove+0x2e>
    {
        list->last = node->pre;
   12b59:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b5c:	8b 10                	mov    (%eax),%edx
   12b5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b61:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->pre)
   12b64:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b67:	8b 00                	mov    (%eax),%eax
   12b69:	85 c0                	test   %eax,%eax
   12b6b:	74 0e                	je     12b7b <list_remove+0x45>
    {
        node->pre->next = node->next;
   12b6d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b70:	8b 00                	mov    (%eax),%eax
   12b72:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b75:	8b 52 04             	mov    0x4(%edx),%edx
   12b78:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) 
   12b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b7e:	8b 40 04             	mov    0x4(%eax),%eax
   12b81:	85 c0                	test   %eax,%eax
   12b83:	74 0d                	je     12b92 <list_remove+0x5c>
    {
        node->next->pre = node->pre;
   12b85:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b88:	8b 40 04             	mov    0x4(%eax),%eax
   12b8b:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b8e:	8b 12                	mov    (%edx),%edx
   12b90:	89 10                	mov    %edx,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   12b92:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b95:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   12b9b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b9e:	8b 10                	mov    (%eax),%edx
   12ba0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ba3:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   12ba6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba9:	8b 40 08             	mov    0x8(%eax),%eax
   12bac:	8d 50 ff             	lea    -0x1(%eax),%edx
   12baf:	8b 45 08             	mov    0x8(%ebp),%eax
   12bb2:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   12bb8:	5d                   	pop    %ebp
   12bb9:	c3                   	ret    

00012bba <inb>:
{
   12bba:	55                   	push   %ebp
   12bbb:	89 e5                	mov    %esp,%ebp
   12bbd:	83 ec 14             	sub    $0x14,%esp
   12bc0:	8b 45 08             	mov    0x8(%ebp),%eax
   12bc3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   12bc7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12bcb:	89 c2                	mov    %eax,%edx
   12bcd:	ec                   	in     (%dx),%al
   12bce:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12bd1:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12bd5:	c9                   	leave  
   12bd6:	c3                   	ret    

00012bd7 <outb>:
{
   12bd7:	55                   	push   %ebp
   12bd8:	89 e5                	mov    %esp,%ebp
   12bda:	83 ec 08             	sub    $0x8,%esp
   12bdd:	8b 55 08             	mov    0x8(%ebp),%edx
   12be0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12be3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12be7:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   12bea:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12bee:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12bf2:	ee                   	out    %al,(%dx)
}
   12bf3:	90                   	nop
   12bf4:	c9                   	leave  
   12bf5:	c3                   	ret    

00012bf6 <log_init>:
#include "cpu/irq.h"    
#include "ipc/mutex.h"
#define COM_PORT 0x3f8
static mutex_t log_mutex;
void log_init (void)
{
   12bf6:	55                   	push   %ebp
   12bf7:	89 e5                	mov    %esp,%ebp
   12bf9:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&log_mutex);
   12bfc:	83 ec 0c             	sub    $0xc,%esp
   12bff:	68 48 8e 01 00       	push   $0x18e48
   12c04:	e8 cb f3 ff ff       	call   11fd4 <mutex_init>
   12c09:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   12c0c:	83 ec 08             	sub    $0x8,%esp
   12c0f:	6a 00                	push   $0x0
   12c11:	68 f9 03 00 00       	push   $0x3f9
   12c16:	e8 bc ff ff ff       	call   12bd7 <outb>
   12c1b:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x80);
   12c1e:	83 ec 08             	sub    $0x8,%esp
   12c21:	68 80 00 00 00       	push   $0x80
   12c26:	68 fb 03 00 00       	push   $0x3fb
   12c2b:	e8 a7 ff ff ff       	call   12bd7 <outb>
   12c30:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 0, 0x03);
   12c33:	83 ec 08             	sub    $0x8,%esp
   12c36:	6a 03                	push   $0x3
   12c38:	68 f8 03 00 00       	push   $0x3f8
   12c3d:	e8 95 ff ff ff       	call   12bd7 <outb>
   12c42:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   12c45:	83 ec 08             	sub    $0x8,%esp
   12c48:	6a 00                	push   $0x0
   12c4a:	68 f9 03 00 00       	push   $0x3f9
   12c4f:	e8 83 ff ff ff       	call   12bd7 <outb>
   12c54:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x03);
   12c57:	83 ec 08             	sub    $0x8,%esp
   12c5a:	6a 03                	push   $0x3
   12c5c:	68 fb 03 00 00       	push   $0x3fb
   12c61:	e8 71 ff ff ff       	call   12bd7 <outb>
   12c66:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 2, 0xC7);
   12c69:	83 ec 08             	sub    $0x8,%esp
   12c6c:	68 c7 00 00 00       	push   $0xc7
   12c71:	68 fa 03 00 00       	push   $0x3fa
   12c76:	e8 5c ff ff ff       	call   12bd7 <outb>
   12c7b:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 4, 0x0F);
   12c7e:	83 ec 08             	sub    $0x8,%esp
   12c81:	6a 0f                	push   $0xf
   12c83:	68 fc 03 00 00       	push   $0x3fc
   12c88:	e8 4a ff ff ff       	call   12bd7 <outb>
   12c8d:	83 c4 10             	add    $0x10,%esp
}
   12c90:	90                   	nop
   12c91:	c9                   	leave  
   12c92:	c3                   	ret    

00012c93 <log_printf>:


void log_printf (const char *fmt, ...)
{
   12c93:	55                   	push   %ebp
   12c94:	89 e5                	mov    %esp,%ebp
   12c96:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    kernel_memset(buf, 0, sizeof(buf));
   12c9c:	83 ec 04             	sub    $0x4,%esp
   12c9f:	68 80 00 00 00       	push   $0x80
   12ca4:	6a 00                	push   $0x0
   12ca6:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12cac:	50                   	push   %eax
   12cad:	e8 cd f9 ff ff       	call   1267f <kernel_memset>
   12cb2:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12cb5:	8d 45 0c             	lea    0xc(%ebp),%eax
   12cb8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(buf, fmt, args);
   12cbe:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12cc4:	83 ec 04             	sub    $0x4,%esp
   12cc7:	50                   	push   %eax
   12cc8:	ff 75 08             	pushl  0x8(%ebp)
   12ccb:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12cd1:	50                   	push   %eax
   12cd2:	e8 49 fb ff ff       	call   12820 <kernel_vsprintf>
   12cd7:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&log_mutex);
   12cda:	83 ec 0c             	sub    $0xc,%esp
   12cdd:	68 48 8e 01 00       	push   $0x18e48
   12ce2:	e8 19 f3 ff ff       	call   12000 <mutex_lock>
   12ce7:	83 c4 10             	add    $0x10,%esp
    const char *p = buf;
   12cea:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   12cf3:	eb 39                	jmp    12d2e <log_printf+0x9b>
    {
        while ((inb(COM_PORT + 5) & (1 << 6)) == 0);
   12cf5:	90                   	nop
   12cf6:	83 ec 0c             	sub    $0xc,%esp
   12cf9:	68 fd 03 00 00       	push   $0x3fd
   12cfe:	e8 b7 fe ff ff       	call   12bba <inb>
   12d03:	83 c4 10             	add    $0x10,%esp
   12d06:	0f b6 c0             	movzbl %al,%eax
   12d09:	83 e0 40             	and    $0x40,%eax
   12d0c:	85 c0                	test   %eax,%eax
   12d0e:	74 e6                	je     12cf6 <log_printf+0x63>
        outb(COM_PORT, *p);
   12d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d13:	0f b6 00             	movzbl (%eax),%eax
   12d16:	0f b6 c0             	movzbl %al,%eax
   12d19:	83 ec 08             	sub    $0x8,%esp
   12d1c:	50                   	push   %eax
   12d1d:	68 f8 03 00 00       	push   $0x3f8
   12d22:	e8 b0 fe ff ff       	call   12bd7 <outb>
   12d27:	83 c4 10             	add    $0x10,%esp
        p++;
   12d2a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    while (*p != '\0')
   12d2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d31:	0f b6 00             	movzbl (%eax),%eax
   12d34:	84 c0                	test   %al,%al
   12d36:	75 bd                	jne    12cf5 <log_printf+0x62>
    }

    outb(COM_PORT, '\r');
   12d38:	83 ec 08             	sub    $0x8,%esp
   12d3b:	6a 0d                	push   $0xd
   12d3d:	68 f8 03 00 00       	push   $0x3f8
   12d42:	e8 90 fe ff ff       	call   12bd7 <outb>
   12d47:	83 c4 10             	add    $0x10,%esp
    //outb(COM_PORT, '\n');
    mutex_unlock(&log_mutex);
   12d4a:	83 ec 0c             	sub    $0xc,%esp
   12d4d:	68 48 8e 01 00       	push   $0x18e48
   12d52:	e8 39 f3 ff ff       	call   12090 <mutex_unlock>
   12d57:	83 c4 10             	add    $0x10,%esp
}
   12d5a:	90                   	nop
   12d5b:	c9                   	leave  
   12d5c:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
    .text
	.global first_task_entry
	.extern first_task_main
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
	
8000000b:	e9 05 00 00 00       	jmp    80000015 <first_task_main>

80000010 <init_task_entry>:


static uint32_t init_task_stack[1024];
static task_t init_task;
void init_task_entry(void)
{
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
    // 测试1：最简单的死循环
    for(;;) {
80000013:	eb fe                	jmp    80000013 <init_task_entry+0x3>

80000015 <first_task_main>:
        // 什么都不做，看看是否死掉
    }
}
int first_task_main()
{
80000015:	55                   	push   %ebp
80000016:	89 e5                	mov    %esp,%ebp
80000018:	83 ec 18             	sub    $0x18,%esp
    user_task_init(&init_task,"init_task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
8000001b:	ba c0 10 00 80       	mov    $0x800010c0,%edx
80000020:	b8 10 00 00 80       	mov    $0x80000010,%eax
80000025:	52                   	push   %edx
80000026:	50                   	push   %eax
80000027:	68 88 11 00 80       	push   $0x80001188
8000002c:	68 c0 10 00 80       	push   $0x800010c0
80000031:	e8 b2 0c 01 80       	call   10ce8 <user_task_init>
80000036:	83 c4 10             	add    $0x10,%esp
    
    // 将init_task_entry函数映射到用户空间
    uint32_t func_addr = (uint32_t)init_task_entry;
80000039:	c7 45 f4 10 00 00 80 	movl   $0x80000010,-0xc(%ebp)
    uint32_t func_page = func_addr & ~(MEM_PAGE_SIZE - 1);  // 页对齐
80000040:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000043:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80000048:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret = memory_alloc_page_for(func_page, MEM_PAGE_SIZE, PTE_P | PTE_W | PTE_U);
8000004b:	83 ec 04             	sub    $0x4,%esp
8000004e:	6a 07                	push   $0x7
80000050:	68 00 10 00 00       	push   $0x1000
80000055:	ff 75 f0             	pushl  -0x10(%ebp)
80000058:	e8 48 0a 01 80       	call   10aa5 <memory_alloc_page_for>
8000005d:	83 c4 10             	add    $0x10,%esp
80000060:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(ret < 0)
80000063:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80000067:	79 17                	jns    80000080 <first_task_main+0x6b>
    {
        log_printf("memory_alloc_page_for error\n");
80000069:	83 ec 0c             	sub    $0xc,%esp
8000006c:	68 92 11 00 80       	push   $0x80001192
80000071:	e8 1d 2c 01 80       	call   12c93 <log_printf>
80000076:	83 c4 10             	add    $0x10,%esp
        return -1;
80000079:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8000007e:	eb 28                	jmp    800000a8 <first_task_main+0x93>
    }
    for(;;)
    {
        log_printf("first task\n");
80000080:	83 ec 0c             	sub    $0xc,%esp
80000083:	68 af 11 00 80       	push   $0x800011af
80000088:	e8 06 2c 01 80       	call   12c93 <log_printf>
8000008d:	83 c4 10             	add    $0x10,%esp
        schedule_next_task(task_current(), &init_task);
80000090:	e8 25 0f 01 80       	call   10fba <task_current>
80000095:	83 ec 08             	sub    $0x8,%esp
80000098:	68 c0 10 00 80       	push   $0x800010c0
8000009d:	50                   	push   %eax
8000009e:	e8 75 12 01 80       	call   11318 <schedule_next_task>
800000a3:	83 c4 10             	add    $0x10,%esp
        log_printf("first task\n");
800000a6:	eb d8                	jmp    80000080 <first_task_main+0x6b>
        //sys_sleep(1000);
    }
    return 0;
800000a8:	c9                   	leave  
800000a9:	c3                   	ret    
800000aa:	66 90                	xchg   %ax,%ax
800000ac:	66 90                	xchg   %ax,%ax
800000ae:	66 90                	xchg   %ax,%ax
800000b0:	66 90                	xchg   %ax,%ax
800000b2:	66 90                	xchg   %ax,%ax
800000b4:	66 90                	xchg   %ax,%ax
800000b6:	66 90                	xchg   %ax,%ax
800000b8:	66 90                	xchg   %ax,%ax
800000ba:	66 90                	xchg   %ax,%ax
800000bc:	66 90                	xchg   %ax,%ax
800000be:	66 90                	xchg   %ax,%ax

800000c0 <init_task_stack>:
	...

800010c0 <init_task>:
	...
80001188:	69 6e 69 74 5f 74 61 73 6b 00 6d 65 6d 6f 72 79     init_task.memory
80001198:	5f 61 6c 6c 6f 63 5f 70 61 67 65 5f 66 6f 72 20     _alloc_page_for 
800011a8:	65 72 72 6f 72 0a 00 66 69 72 73 74 20 74 61 73     error..first tas
800011b8:	6b 0a 00                                            k..
