
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003781 memsz 0x00003781 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00007ec0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001bec0 align 2**12
         filesz 0x00002185 memsz 0x00002185 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003142  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000063d  00013144  00013144  00004144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00006ec0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00002185  80000000  0001bec0  00006000  2**5
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001c82  00000000  00000000  00008185  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ae2  00000000  00000000  00009e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001339  00000000  00000000  0000e8e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000fc28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001283  00000000  00000000  0000fe08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0001108b  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001408  00000000  00000000  0001109c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00013144 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 source/kernel/CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00010445 l       .text	00000000 skip_save_tss
00010450 l       .text	00000000 switch_to_kernel_task
00010496 l       .text	00000000 switch_to_user_task
0001045c l       .text	00000000 skip_page_dir_kernel
000104a2 l       .text	00000000 skip_page_dir_user
00010543 l       .text	00000000 skip_page_dir_int
0001054a l       .text	00000000 modify_for_kernel
0001056d l       .text	00000000 modify_for_user
0001059f l       .text	00000000 restore_registers
00000000 l    df *ABS*	00000000 memory.c
000105b8 l     F .text	0000000d down2
000105c5 l     F .text	00000017 up2
000105dc l     F .text	0000000c write_cr3
000105e8 l     F .text	0000000b pde_index
000105f3 l     F .text	00000010 pte_index
00010603 l     F .text	00000010 pde_paddr
00010613 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010624 l     F .text	00000055 addr_alloc_init
00010679 l     F .text	0000005f addr_alloc_page
000106d8 l     F .text	0000005a addr_free_page
00010798 l     F .text	0000003a total_mem_size
00014000 l     O .data	00000040 kernel_map.2315
00000000 l    df *ABS*	00000000 task.c
00010bf2 l     F .text	0000001b list_node_init
00010c0d l     F .text	0000000b list_node_next
00010c18 l     F .text	0000000b list_count
00010c23 l     F .text	0000000a list_first
00010c2d l     F .text	00000011 read_cr3
00010c3e l     F .text	0000000c write_cr3
00010c4a l     F .text	00000007 hlt
00010c51 l     F .text	00000017 write_tr
00017020 l     O .bss	00000228 task_manager
00017260 l     O .bss	00001000 idle_task_stack
00018260 l     O .bss	00001000 kernel_stack
00010c68 l     F .text	000000cf tss_init
00010eef l     F .text	0000000a idle_task_entry
00010ef9 l     F .text	0000004c global_tss_init
00010f45 l     F .text	00000069 task_gdt_init
00000000 l    df *ABS*	00000000 cpu.c
000115ca l     F .text	00000028 lgdt
000115f2 l     F .text	0000001a far_jump
00019260 l     O .bss	00000800 gdt_table
00019a60 l     O .bss	00000014 gdt_mutex
00000000 l    df *ABS*	00000000 irq.c
0001185b l     F .text	0000001d inb
00011878 l     F .text	0000001f outb
00011897 l     F .text	00000007 cli
0001189e l     F .text	00000007 sti
000118a5 l     F .text	00000028 lidt
000118cd l     F .text	00000011 read_cr2
000118de l     F .text	00000007 hlt
000118e5 l     F .text	00000010 read_eflags
000118f5 l     F .text	0000000b write_eflags
00019a80 l     O .bss	00000400 idt_table
00011900 l     F .text	0000010c dump_core_regs
00011a0c l     F .text	0000003e do_default_handler
00011dff l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00012212 l     F .text	0000001f outb
00019e80 l     O .bss	00000004 sys_tick
00012259 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00019e84 l     O .bss	00000010 sem
00019e94 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mutex.c
0001235d l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000124de l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
0001286b l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1924
00000000 l    df *ABS*	00000000 list.c
00012db3 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012fa9 l     F .text	0000001d inb
00012fc6 l     F .text	0000001f outb
00019ea8 l     O .bss	00000014 log_mutex
00000000 l    df *ABS*	00000000 first_task.c
800000a0 l     O .first_task	00001000 init_task_stack
800010a0 l     O .first_task	00001000 init_task_stack_test
800020a0 l     O .first_task	000000c4 init_task
00011dab g     F .text	0000001c do_handler_simd_floating_point
00012684 g     F .text	0000003e bitmap_get_bit
000129c4 g     F .text	0000004f kernel_memcpy
00011158 g     F .text	0000000a task_current
000121b3 g     F .text	0000000b irq_enable_global
00011375 g     F .text	0000003a mmu_set_page_dir_task
00012e4a g     F .text	00000064 list_insert_last
00011b7e g     F .text	0000001c do_handler_segment_not_present
000110f8 g     F .text	00000035 task_set_ready
00012796 g     F .text	0000001b bitmap_is_set
00012a13 g     F .text	0000003a kernel_memset
00010105 g       .text	00000000 exception_handler_nmi
00011829 g     F .text	0000001e cpu_init
00012fe5 g     F .text	0000009d log_init
00012323 g     F .text	0000003a init_main
000102ff g       .text	00000000 exception_handler_alignment_check
000103a9 g       .text	00000000 exception_handler_security
000113af g     F .text	0000005c do_schedule_switch
00012872 g     F .text	00000033 kernel_strcpy
00017000 g     O .bss	00000004 need_reschedule
00014000 g       .data	00000000 s_data
00012092 g     F .text	0000008b irq_enable
00010084 g       .text	00000000 exception_handler_unknown
000104df g       .text	00000000 quick_switch
00010130 g       .text	00000000 exception_handler_breakpoint
00011b0e g     F .text	0000001c do_handler_invalid_op
00011ad6 g     F .text	0000001c do_handler_overflow
00010353 g       .text	00000000 exception_handler_simd_floating_point
00011d73 g     F .text	0000001c do_handler_alignment_check
00010889 g     F .text	00000063 memory_create_map
000102ab g       .text	00000000 exception_handler_general_protection
00011bb6 g     F .text	000000b5 do_handler_general_protection
000104f6 g       .text	00000000 get_full_context
000125f9 g     F .text	00000029 sem_count
80000028 g     F .first_task	0000005e first_task_main
00011a66 g     F .text	0000001c do_handler_divider
000126c2 g     F .text	000000d4 bitmap_set_bit
00011b46 g     F .text	0000001c do_handler_double_fault
80000010 g     F .first_task	00000018 init_task_entry
00011c6b g     F .text	000000ec do_handler_page_fault
00010207 g       .text	00000000 exception_handler_double_fault
000121be g     F .text	0000002b pic_send_eoi
000110ee g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
0001250c g     F .text	0000006b sem_wait
00010b51 g     F .text	00000022 memory_alloc_page_for
00011de3 g     F .text	0000001c do_handler_security
00010282 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
0001015b g       .text	00000000 exception_handler_overflow
000103d2 g       .text	00000000 simple_switch
0001002b g       .text	00000000 exception_handler_time
00011a82 g     F .text	0000001c do_handler_debug
00019ec0 g     O .bss	00002000 stack
000110e4 g     F .text	0000000a task_is_need_reschedule
00011466 g     F .text	0000005d sys_sleep
0001bec0 g       *ABS*	00000000 s_first_task
00010e13 g     F .text	000000dc user_task_init
00010aaf g     F .text	000000a2 memory_alloc_for_page_dir
00011213 g     F .text	00000013 schedule_switch
000103e9 g       .text	00000000 universal_task_switch
00012577 g     F .text	00000082 sem_notify
00010230 g       .text	00000000 exception_handler_invalid_tss
00011037 g     F .text	00000099 task_first_init
00011d8f g     F .text	0000001c do_handler_machine_check
00010b73 g     F .text	0000007f memory_copy
00010732 g     F .text	00000066 show_mem_info
0001178d g     F .text	0000002f gdt_free_desc
00012deb g     F .text	0000005f list_insert_first
00011446 g     F .text	00000020 task_set_wakeup
000100af g       .text	00000000 exception_handler_divider
000128a5 g     F .text	0000006a kernel_strncpy
000121a8 g     F .text	0000000b irq_disable_global
00011162 g     F .text	00000061 sys_sched_yield
0001e045 g       *ABS*	00000000 mem_free_start
000122d1 g     F .text	00000030 kernel_init
000124e9 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00012c09 g     F .text	00000151 kernel_vsprintf
000110d0 g     F .text	0000000a get_from_task
0001bec0 g       .bss	00000000 e_data
00012394 g     F .text	00000090 mutex_lock
00010328 g       .text	00000000 exception_handler_machine_check
000110da g     F .text	0000000a get_to_task
00011b62 g     F .text	0000001c do_handler_invalid_tss
00000000 g       .text	00000000 kernel_base
0001e045 g       *ABS*	00000000 e_first_task
0001140b g     F .text	0000003b task_set_sleep
00012d5a g     F .text	00000059 panic
00012052 g     F .text	00000040 irq_install
000117bc g     F .text	0000006d init_gdt
00011a9e g     F .text	0000001c do_handler_nmi
000121e9 g     F .text	00000018 irq_enter_protection
00012368 g     F .text	0000002c mutex_init
0001037e g       .text	00000000 exception_handler_virtualization
0001160c g     F .text	00000058 show_base
0001211d g     F .text	0000008b irq_disable
00011b2a g     F .text	0000001c do_handler_device_not_available
00012622 g     F .text	00000016 bitmap_byte_count
00011226 g     F .text	00000065 task_dispatch
00012301 g     F .text	00000022 move_to_first_task
00011847 g     F .text	00000014 switch_to_tss
00011af2 g     F .text	0000001c do_handler_bounds
00010d37 g     F .text	000000dc kernel_task_init
000111c3 g     F .text	00000050 task_next_run
00012a4d g     F .text	00000064 kernel_memcmp
000108ec g     F .text	000000a7 create_kernel_table
00012dc6 g     F .text	00000025 list_init
0001005b g       .text	00000000 exception_handler_page_fault
0001112d g     F .text	0000002b task_set_block
00011a4a g     F .text	0000001c do_handler_unknown
00011e92 g     F .text	000001c0 irq_init
00012424 g     F .text	000000ba mutex_unlock
00011dc7 g     F .text	0000001c do_handler_virtualization
00012201 g     F .text	00000011 irq_leave_protection
00011d57 g     F .text	0000001c do_handler_x87_floating_point
00012989 g     F .text	0000003b kernel_strlen
000100da g       .text	00000000 exception_handler_debug
00011664 g     F .text	00000083 segment_desc_set
000101b1 g       .text	00000000 exception_handler_invalid_op
00012eae g     F .text	00000077 list_remove_first
00013781 g       .rodata	00000000 e_text
0001290f g     F .text	0000007a kernel_strncmp
00012638 g     F .text	0000004c bitmap_init
00010259 g       .text	00000000 exception_handler_segment_not_present
000127b1 g     F .text	000000ba bitmap_alloc_nbits
00010fae g     F .text	00000089 task_manager_init
0001128b g     F .text	000000ea task_time_tick
00010a18 g     F .text	00000097 memory_init
00011b9a g     F .text	0000001c do_handler_stack_segment_fault
00011aba g     F .text	0000001c do_handler_breakpoint
000114c3 g     F .text	00000107 schedule_next_task
00010993 g     F .text	00000085 memory_create_user_space
00013082 g     F .text	000000c0 log_printf
000102d4 g       .text	00000000 exception_handler_x87_floating_point
00012be5 g     F .text	00000024 kernel_sprintf
0001172e g     F .text	0000005f gdt_alloc_desc
00012ab1 g     F .text	00000134 kernel_itoa
00012f25 g     F .text	00000084 list_remove
0001052f g       .text	00000000 switch_from_interrupt
000116e7 g     F .text	00000047 gate_desc_set
00010186 g       .text	00000000 exception_handler_bounds
000101dc g       .text	00000000 exception_handler_device_not_available
000107d2 g     F .text	000000b7 find_pte
00012231 g     F .text	00000028 do_handler_time
000122b9 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .global _start
    .extern init_main
    .extern need_reschedule
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax

    push %eax 
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 c5 22 00 00       	call   122d1 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   10019:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001b:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001d:	8e e8                	mov    %eax,%gs
    mov %ax, %ss    
   1001f:	8e d0                	mov    %eax,%ss
    
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc c0 be 01 00       	mov    $0x1bec0,%esp
    jmp init_main
   10026:	e9 f8 22 00 00       	jmp    12323 <init_main>

0001002b <exception_handler_time>:

.text
    .extern do_handler_time
    .global exception_handler_time
exception_handler_time:
    push $0
   1002b:	6a 00                	push   $0x0

    push $0x20
   1002d:	6a 20                	push   $0x20
    pusha
   1002f:	60                   	pusha  
    push %ds
   10030:	1e                   	push   %ds
    push %es
   10031:	06                   	push   %es
    push %fs
   10032:	0f a0                	push   %fs
    push %gs
   10034:	0f a8                	push   %gs
    # 设置内核段寄存器
    mov $KERNEL_SELECTOR_DS, %ax
   10036:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   1003a:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   1003c:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1003e:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   10040:	8e e8                	mov    %eax,%gs
    push %esp
   10042:	54                   	push   %esp
    call do_handler_time
   10043:	e8 e9 21 00 00       	call   12231 <do_handler_time>
    add $(1*4), %esp
   10048:	83 c4 04             	add    $0x4,%esp
    pop %gs
   1004b:	0f a9                	pop    %gs
    pop %fs
   1004d:	0f a1                	pop    %fs
    pop %es
   1004f:	07                   	pop    %es
    pop %ds
   10050:	1f                   	pop    %ds
    popa
   10051:	61                   	popa   

    add $(2*4), %esp
   10052:	83 c4 08             	add    $0x8,%esp
#   call do_schedule_switch
    call schedule_next_task
   10055:	e8 69 14 00 00       	call   114c3 <schedule_next_task>
    iret 
   1005a:	cf                   	iret   

0001005b <exception_handler_page_fault>:
    .text
    .extern do_handler_page_fault
    .global exception_handler_page_fault
exception_handler_page_fault:

    push $14
   1005b:	6a 0e                	push   $0xe
    pusha
   1005d:	60                   	pusha  
    push %ds
   1005e:	1e                   	push   %ds
    push %es
   1005f:	06                   	push   %es
    push %fs
   10060:	0f a0                	push   %fs
    push %gs
   10062:	0f a8                	push   %gs
    # 设置内核段寄存器
    mov $KERNEL_SELECTOR_DS, %ax
   10064:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10068:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   1006a:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1006c:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1006e:	8e e8                	mov    %eax,%gs
    push %esp
   10070:	54                   	push   %esp
    call do_handler_page_fault
   10071:	e8 f5 1b 00 00       	call   11c6b <do_handler_page_fault>
    add $(1*4), %esp
   10076:	83 c4 04             	add    $0x4,%esp
    pop %gs
   10079:	0f a9                	pop    %gs
    pop %fs
   1007b:	0f a1                	pop    %fs
    pop %es
   1007d:	07                   	pop    %es
    pop %ds
   1007e:	1f                   	pop    %ds
    popa
   1007f:	61                   	popa   

    add $(2*4), %esp
   10080:	83 c4 08             	add    $0x8,%esp

    iret 
   10083:	cf                   	iret   

00010084 <exception_handler_unknown>:


    
exception_handler unknown,-1,0
   10084:	6a 00                	push   $0x0
   10086:	6a ff                	push   $0xffffffff
   10088:	60                   	pusha  
   10089:	1e                   	push   %ds
   1008a:	06                   	push   %es
   1008b:	0f a0                	push   %fs
   1008d:	0f a8                	push   %gs
   1008f:	66 b8 10 00          	mov    $0x10,%ax
   10093:	8e d8                	mov    %eax,%ds
   10095:	8e c0                	mov    %eax,%es
   10097:	8e e0                	mov    %eax,%fs
   10099:	8e e8                	mov    %eax,%gs
   1009b:	54                   	push   %esp
   1009c:	e8 a9 19 00 00       	call   11a4a <do_handler_unknown>
   100a1:	83 c4 04             	add    $0x4,%esp
   100a4:	0f a9                	pop    %gs
   100a6:	0f a1                	pop    %fs
   100a8:	07                   	pop    %es
   100a9:	1f                   	pop    %ds
   100aa:	61                   	popa   
   100ab:	83 c4 08             	add    $0x8,%esp
   100ae:	cf                   	iret   

000100af <exception_handler_divider>:
exception_handler divider,0,0
   100af:	6a 00                	push   $0x0
   100b1:	6a 00                	push   $0x0
   100b3:	60                   	pusha  
   100b4:	1e                   	push   %ds
   100b5:	06                   	push   %es
   100b6:	0f a0                	push   %fs
   100b8:	0f a8                	push   %gs
   100ba:	66 b8 10 00          	mov    $0x10,%ax
   100be:	8e d8                	mov    %eax,%ds
   100c0:	8e c0                	mov    %eax,%es
   100c2:	8e e0                	mov    %eax,%fs
   100c4:	8e e8                	mov    %eax,%gs
   100c6:	54                   	push   %esp
   100c7:	e8 9a 19 00 00       	call   11a66 <do_handler_divider>
   100cc:	83 c4 04             	add    $0x4,%esp
   100cf:	0f a9                	pop    %gs
   100d1:	0f a1                	pop    %fs
   100d3:	07                   	pop    %es
   100d4:	1f                   	pop    %ds
   100d5:	61                   	popa   
   100d6:	83 c4 08             	add    $0x8,%esp
   100d9:	cf                   	iret   

000100da <exception_handler_debug>:
exception_handler debug,1,0
   100da:	6a 00                	push   $0x0
   100dc:	6a 01                	push   $0x1
   100de:	60                   	pusha  
   100df:	1e                   	push   %ds
   100e0:	06                   	push   %es
   100e1:	0f a0                	push   %fs
   100e3:	0f a8                	push   %gs
   100e5:	66 b8 10 00          	mov    $0x10,%ax
   100e9:	8e d8                	mov    %eax,%ds
   100eb:	8e c0                	mov    %eax,%es
   100ed:	8e e0                	mov    %eax,%fs
   100ef:	8e e8                	mov    %eax,%gs
   100f1:	54                   	push   %esp
   100f2:	e8 8b 19 00 00       	call   11a82 <do_handler_debug>
   100f7:	83 c4 04             	add    $0x4,%esp
   100fa:	0f a9                	pop    %gs
   100fc:	0f a1                	pop    %fs
   100fe:	07                   	pop    %es
   100ff:	1f                   	pop    %ds
   10100:	61                   	popa   
   10101:	83 c4 08             	add    $0x8,%esp
   10104:	cf                   	iret   

00010105 <exception_handler_nmi>:
exception_handler nmi,2,0
   10105:	6a 00                	push   $0x0
   10107:	6a 02                	push   $0x2
   10109:	60                   	pusha  
   1010a:	1e                   	push   %ds
   1010b:	06                   	push   %es
   1010c:	0f a0                	push   %fs
   1010e:	0f a8                	push   %gs
   10110:	66 b8 10 00          	mov    $0x10,%ax
   10114:	8e d8                	mov    %eax,%ds
   10116:	8e c0                	mov    %eax,%es
   10118:	8e e0                	mov    %eax,%fs
   1011a:	8e e8                	mov    %eax,%gs
   1011c:	54                   	push   %esp
   1011d:	e8 7c 19 00 00       	call   11a9e <do_handler_nmi>
   10122:	83 c4 04             	add    $0x4,%esp
   10125:	0f a9                	pop    %gs
   10127:	0f a1                	pop    %fs
   10129:	07                   	pop    %es
   1012a:	1f                   	pop    %ds
   1012b:	61                   	popa   
   1012c:	83 c4 08             	add    $0x8,%esp
   1012f:	cf                   	iret   

00010130 <exception_handler_breakpoint>:
exception_handler breakpoint,3,0
   10130:	6a 00                	push   $0x0
   10132:	6a 03                	push   $0x3
   10134:	60                   	pusha  
   10135:	1e                   	push   %ds
   10136:	06                   	push   %es
   10137:	0f a0                	push   %fs
   10139:	0f a8                	push   %gs
   1013b:	66 b8 10 00          	mov    $0x10,%ax
   1013f:	8e d8                	mov    %eax,%ds
   10141:	8e c0                	mov    %eax,%es
   10143:	8e e0                	mov    %eax,%fs
   10145:	8e e8                	mov    %eax,%gs
   10147:	54                   	push   %esp
   10148:	e8 6d 19 00 00       	call   11aba <do_handler_breakpoint>
   1014d:	83 c4 04             	add    $0x4,%esp
   10150:	0f a9                	pop    %gs
   10152:	0f a1                	pop    %fs
   10154:	07                   	pop    %es
   10155:	1f                   	pop    %ds
   10156:	61                   	popa   
   10157:	83 c4 08             	add    $0x8,%esp
   1015a:	cf                   	iret   

0001015b <exception_handler_overflow>:
exception_handler overflow,4,0
   1015b:	6a 00                	push   $0x0
   1015d:	6a 04                	push   $0x4
   1015f:	60                   	pusha  
   10160:	1e                   	push   %ds
   10161:	06                   	push   %es
   10162:	0f a0                	push   %fs
   10164:	0f a8                	push   %gs
   10166:	66 b8 10 00          	mov    $0x10,%ax
   1016a:	8e d8                	mov    %eax,%ds
   1016c:	8e c0                	mov    %eax,%es
   1016e:	8e e0                	mov    %eax,%fs
   10170:	8e e8                	mov    %eax,%gs
   10172:	54                   	push   %esp
   10173:	e8 5e 19 00 00       	call   11ad6 <do_handler_overflow>
   10178:	83 c4 04             	add    $0x4,%esp
   1017b:	0f a9                	pop    %gs
   1017d:	0f a1                	pop    %fs
   1017f:	07                   	pop    %es
   10180:	1f                   	pop    %ds
   10181:	61                   	popa   
   10182:	83 c4 08             	add    $0x8,%esp
   10185:	cf                   	iret   

00010186 <exception_handler_bounds>:
exception_handler bounds,5,0
   10186:	6a 00                	push   $0x0
   10188:	6a 05                	push   $0x5
   1018a:	60                   	pusha  
   1018b:	1e                   	push   %ds
   1018c:	06                   	push   %es
   1018d:	0f a0                	push   %fs
   1018f:	0f a8                	push   %gs
   10191:	66 b8 10 00          	mov    $0x10,%ax
   10195:	8e d8                	mov    %eax,%ds
   10197:	8e c0                	mov    %eax,%es
   10199:	8e e0                	mov    %eax,%fs
   1019b:	8e e8                	mov    %eax,%gs
   1019d:	54                   	push   %esp
   1019e:	e8 4f 19 00 00       	call   11af2 <do_handler_bounds>
   101a3:	83 c4 04             	add    $0x4,%esp
   101a6:	0f a9                	pop    %gs
   101a8:	0f a1                	pop    %fs
   101aa:	07                   	pop    %es
   101ab:	1f                   	pop    %ds
   101ac:	61                   	popa   
   101ad:	83 c4 08             	add    $0x8,%esp
   101b0:	cf                   	iret   

000101b1 <exception_handler_invalid_op>:
exception_handler invalid_op,6,0
   101b1:	6a 00                	push   $0x0
   101b3:	6a 06                	push   $0x6
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	66 b8 10 00          	mov    $0x10,%ax
   101c0:	8e d8                	mov    %eax,%ds
   101c2:	8e c0                	mov    %eax,%es
   101c4:	8e e0                	mov    %eax,%fs
   101c6:	8e e8                	mov    %eax,%gs
   101c8:	54                   	push   %esp
   101c9:	e8 40 19 00 00       	call   11b0e <do_handler_invalid_op>
   101ce:	83 c4 04             	add    $0x4,%esp
   101d1:	0f a9                	pop    %gs
   101d3:	0f a1                	pop    %fs
   101d5:	07                   	pop    %es
   101d6:	1f                   	pop    %ds
   101d7:	61                   	popa   
   101d8:	83 c4 08             	add    $0x8,%esp
   101db:	cf                   	iret   

000101dc <exception_handler_device_not_available>:
exception_handler device_not_available,7,0
   101dc:	6a 00                	push   $0x0
   101de:	6a 07                	push   $0x7
   101e0:	60                   	pusha  
   101e1:	1e                   	push   %ds
   101e2:	06                   	push   %es
   101e3:	0f a0                	push   %fs
   101e5:	0f a8                	push   %gs
   101e7:	66 b8 10 00          	mov    $0x10,%ax
   101eb:	8e d8                	mov    %eax,%ds
   101ed:	8e c0                	mov    %eax,%es
   101ef:	8e e0                	mov    %eax,%fs
   101f1:	8e e8                	mov    %eax,%gs
   101f3:	54                   	push   %esp
   101f4:	e8 31 19 00 00       	call   11b2a <do_handler_device_not_available>
   101f9:	83 c4 04             	add    $0x4,%esp
   101fc:	0f a9                	pop    %gs
   101fe:	0f a1                	pop    %fs
   10200:	07                   	pop    %es
   10201:	1f                   	pop    %ds
   10202:	61                   	popa   
   10203:	83 c4 08             	add    $0x8,%esp
   10206:	cf                   	iret   

00010207 <exception_handler_double_fault>:
exception_handler double_fault,8,1
   10207:	6a 08                	push   $0x8
   10209:	60                   	pusha  
   1020a:	1e                   	push   %ds
   1020b:	06                   	push   %es
   1020c:	0f a0                	push   %fs
   1020e:	0f a8                	push   %gs
   10210:	66 b8 10 00          	mov    $0x10,%ax
   10214:	8e d8                	mov    %eax,%ds
   10216:	8e c0                	mov    %eax,%es
   10218:	8e e0                	mov    %eax,%fs
   1021a:	8e e8                	mov    %eax,%gs
   1021c:	54                   	push   %esp
   1021d:	e8 24 19 00 00       	call   11b46 <do_handler_double_fault>
   10222:	83 c4 04             	add    $0x4,%esp
   10225:	0f a9                	pop    %gs
   10227:	0f a1                	pop    %fs
   10229:	07                   	pop    %es
   1022a:	1f                   	pop    %ds
   1022b:	61                   	popa   
   1022c:	83 c4 08             	add    $0x8,%esp
   1022f:	cf                   	iret   

00010230 <exception_handler_invalid_tss>:

exception_handler invalid_tss,10,1
   10230:	6a 0a                	push   $0xa
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	66 b8 10 00          	mov    $0x10,%ax
   1023d:	8e d8                	mov    %eax,%ds
   1023f:	8e c0                	mov    %eax,%es
   10241:	8e e0                	mov    %eax,%fs
   10243:	8e e8                	mov    %eax,%gs
   10245:	54                   	push   %esp
   10246:	e8 17 19 00 00       	call   11b62 <do_handler_invalid_tss>
   1024b:	83 c4 04             	add    $0x4,%esp
   1024e:	0f a9                	pop    %gs
   10250:	0f a1                	pop    %fs
   10252:	07                   	pop    %es
   10253:	1f                   	pop    %ds
   10254:	61                   	popa   
   10255:	83 c4 08             	add    $0x8,%esp
   10258:	cf                   	iret   

00010259 <exception_handler_segment_not_present>:
exception_handler segment_not_present,11,1
   10259:	6a 0b                	push   $0xb
   1025b:	60                   	pusha  
   1025c:	1e                   	push   %ds
   1025d:	06                   	push   %es
   1025e:	0f a0                	push   %fs
   10260:	0f a8                	push   %gs
   10262:	66 b8 10 00          	mov    $0x10,%ax
   10266:	8e d8                	mov    %eax,%ds
   10268:	8e c0                	mov    %eax,%es
   1026a:	8e e0                	mov    %eax,%fs
   1026c:	8e e8                	mov    %eax,%gs
   1026e:	54                   	push   %esp
   1026f:	e8 0a 19 00 00       	call   11b7e <do_handler_segment_not_present>
   10274:	83 c4 04             	add    $0x4,%esp
   10277:	0f a9                	pop    %gs
   10279:	0f a1                	pop    %fs
   1027b:	07                   	pop    %es
   1027c:	1f                   	pop    %ds
   1027d:	61                   	popa   
   1027e:	83 c4 08             	add    $0x8,%esp
   10281:	cf                   	iret   

00010282 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,12,1
   10282:	6a 0c                	push   $0xc
   10284:	60                   	pusha  
   10285:	1e                   	push   %ds
   10286:	06                   	push   %es
   10287:	0f a0                	push   %fs
   10289:	0f a8                	push   %gs
   1028b:	66 b8 10 00          	mov    $0x10,%ax
   1028f:	8e d8                	mov    %eax,%ds
   10291:	8e c0                	mov    %eax,%es
   10293:	8e e0                	mov    %eax,%fs
   10295:	8e e8                	mov    %eax,%gs
   10297:	54                   	push   %esp
   10298:	e8 fd 18 00 00       	call   11b9a <do_handler_stack_segment_fault>
   1029d:	83 c4 04             	add    $0x4,%esp
   102a0:	0f a9                	pop    %gs
   102a2:	0f a1                	pop    %fs
   102a4:	07                   	pop    %es
   102a5:	1f                   	pop    %ds
   102a6:	61                   	popa   
   102a7:	83 c4 08             	add    $0x8,%esp
   102aa:	cf                   	iret   

000102ab <exception_handler_general_protection>:
exception_handler general_protection,13,1
   102ab:	6a 0d                	push   $0xd
   102ad:	60                   	pusha  
   102ae:	1e                   	push   %ds
   102af:	06                   	push   %es
   102b0:	0f a0                	push   %fs
   102b2:	0f a8                	push   %gs
   102b4:	66 b8 10 00          	mov    $0x10,%ax
   102b8:	8e d8                	mov    %eax,%ds
   102ba:	8e c0                	mov    %eax,%es
   102bc:	8e e0                	mov    %eax,%fs
   102be:	8e e8                	mov    %eax,%gs
   102c0:	54                   	push   %esp
   102c1:	e8 f0 18 00 00       	call   11bb6 <do_handler_general_protection>
   102c6:	83 c4 04             	add    $0x4,%esp
   102c9:	0f a9                	pop    %gs
   102cb:	0f a1                	pop    %fs
   102cd:	07                   	pop    %es
   102ce:	1f                   	pop    %ds
   102cf:	61                   	popa   
   102d0:	83 c4 08             	add    $0x8,%esp
   102d3:	cf                   	iret   

000102d4 <exception_handler_x87_floating_point>:
# exception_handler page_fault,14,1
exception_handler x87_floating_point,16,0
   102d4:	6a 00                	push   $0x0
   102d6:	6a 10                	push   $0x10
   102d8:	60                   	pusha  
   102d9:	1e                   	push   %ds
   102da:	06                   	push   %es
   102db:	0f a0                	push   %fs
   102dd:	0f a8                	push   %gs
   102df:	66 b8 10 00          	mov    $0x10,%ax
   102e3:	8e d8                	mov    %eax,%ds
   102e5:	8e c0                	mov    %eax,%es
   102e7:	8e e0                	mov    %eax,%fs
   102e9:	8e e8                	mov    %eax,%gs
   102eb:	54                   	push   %esp
   102ec:	e8 66 1a 00 00       	call   11d57 <do_handler_x87_floating_point>
   102f1:	83 c4 04             	add    $0x4,%esp
   102f4:	0f a9                	pop    %gs
   102f6:	0f a1                	pop    %fs
   102f8:	07                   	pop    %es
   102f9:	1f                   	pop    %ds
   102fa:	61                   	popa   
   102fb:	83 c4 08             	add    $0x8,%esp
   102fe:	cf                   	iret   

000102ff <exception_handler_alignment_check>:
exception_handler alignment_check,17,1
   102ff:	6a 11                	push   $0x11
   10301:	60                   	pusha  
   10302:	1e                   	push   %ds
   10303:	06                   	push   %es
   10304:	0f a0                	push   %fs
   10306:	0f a8                	push   %gs
   10308:	66 b8 10 00          	mov    $0x10,%ax
   1030c:	8e d8                	mov    %eax,%ds
   1030e:	8e c0                	mov    %eax,%es
   10310:	8e e0                	mov    %eax,%fs
   10312:	8e e8                	mov    %eax,%gs
   10314:	54                   	push   %esp
   10315:	e8 59 1a 00 00       	call   11d73 <do_handler_alignment_check>
   1031a:	83 c4 04             	add    $0x4,%esp
   1031d:	0f a9                	pop    %gs
   1031f:	0f a1                	pop    %fs
   10321:	07                   	pop    %es
   10322:	1f                   	pop    %ds
   10323:	61                   	popa   
   10324:	83 c4 08             	add    $0x8,%esp
   10327:	cf                   	iret   

00010328 <exception_handler_machine_check>:
exception_handler machine_check,18,0
   10328:	6a 00                	push   $0x0
   1032a:	6a 12                	push   $0x12
   1032c:	60                   	pusha  
   1032d:	1e                   	push   %ds
   1032e:	06                   	push   %es
   1032f:	0f a0                	push   %fs
   10331:	0f a8                	push   %gs
   10333:	66 b8 10 00          	mov    $0x10,%ax
   10337:	8e d8                	mov    %eax,%ds
   10339:	8e c0                	mov    %eax,%es
   1033b:	8e e0                	mov    %eax,%fs
   1033d:	8e e8                	mov    %eax,%gs
   1033f:	54                   	push   %esp
   10340:	e8 4a 1a 00 00       	call   11d8f <do_handler_machine_check>
   10345:	83 c4 04             	add    $0x4,%esp
   10348:	0f a9                	pop    %gs
   1034a:	0f a1                	pop    %fs
   1034c:	07                   	pop    %es
   1034d:	1f                   	pop    %ds
   1034e:	61                   	popa   
   1034f:	83 c4 08             	add    $0x8,%esp
   10352:	cf                   	iret   

00010353 <exception_handler_simd_floating_point>:
exception_handler simd_floating_point,19,0
   10353:	6a 00                	push   $0x0
   10355:	6a 13                	push   $0x13
   10357:	60                   	pusha  
   10358:	1e                   	push   %ds
   10359:	06                   	push   %es
   1035a:	0f a0                	push   %fs
   1035c:	0f a8                	push   %gs
   1035e:	66 b8 10 00          	mov    $0x10,%ax
   10362:	8e d8                	mov    %eax,%ds
   10364:	8e c0                	mov    %eax,%es
   10366:	8e e0                	mov    %eax,%fs
   10368:	8e e8                	mov    %eax,%gs
   1036a:	54                   	push   %esp
   1036b:	e8 3b 1a 00 00       	call   11dab <do_handler_simd_floating_point>
   10370:	83 c4 04             	add    $0x4,%esp
   10373:	0f a9                	pop    %gs
   10375:	0f a1                	pop    %fs
   10377:	07                   	pop    %es
   10378:	1f                   	pop    %ds
   10379:	61                   	popa   
   1037a:	83 c4 08             	add    $0x8,%esp
   1037d:	cf                   	iret   

0001037e <exception_handler_virtualization>:
exception_handler virtualization,20,0
   1037e:	6a 00                	push   $0x0
   10380:	6a 14                	push   $0x14
   10382:	60                   	pusha  
   10383:	1e                   	push   %ds
   10384:	06                   	push   %es
   10385:	0f a0                	push   %fs
   10387:	0f a8                	push   %gs
   10389:	66 b8 10 00          	mov    $0x10,%ax
   1038d:	8e d8                	mov    %eax,%ds
   1038f:	8e c0                	mov    %eax,%es
   10391:	8e e0                	mov    %eax,%fs
   10393:	8e e8                	mov    %eax,%gs
   10395:	54                   	push   %esp
   10396:	e8 2c 1a 00 00       	call   11dc7 <do_handler_virtualization>
   1039b:	83 c4 04             	add    $0x4,%esp
   1039e:	0f a9                	pop    %gs
   103a0:	0f a1                	pop    %fs
   103a2:	07                   	pop    %es
   103a3:	1f                   	pop    %ds
   103a4:	61                   	popa   
   103a5:	83 c4 08             	add    $0x8,%esp
   103a8:	cf                   	iret   

000103a9 <exception_handler_security>:
exception_handler security,21,1
   103a9:	6a 15                	push   $0x15
   103ab:	60                   	pusha  
   103ac:	1e                   	push   %ds
   103ad:	06                   	push   %es
   103ae:	0f a0                	push   %fs
   103b0:	0f a8                	push   %gs
   103b2:	66 b8 10 00          	mov    $0x10,%ax
   103b6:	8e d8                	mov    %eax,%ds
   103b8:	8e c0                	mov    %eax,%es
   103ba:	8e e0                	mov    %eax,%fs
   103bc:	8e e8                	mov    %eax,%gs
   103be:	54                   	push   %esp
   103bf:	e8 1f 1a 00 00       	call   11de3 <do_handler_security>
   103c4:	83 c4 04             	add    $0x4,%esp
   103c7:	0f a9                	pop    %gs
   103c9:	0f a1                	pop    %fs
   103cb:	07                   	pop    %es
   103cc:	1f                   	pop    %ds
   103cd:	61                   	popa   
   103ce:	83 c4 08             	add    $0x8,%esp
   103d1:	cf                   	iret   

000103d2 <simple_switch>:
*/

    .text
    .global simple_switch
simple_switch:
    mov 4(%esp), %eax
   103d2:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   103d6:	8b 54 24 08          	mov    0x8(%esp),%edx

    
    push %ebp
   103da:	55                   	push   %ebp
    push %ebx
   103db:	53                   	push   %ebx
    push %esi
   103dc:	56                   	push   %esi
    push %edi
   103dd:	57                   	push   %edi
    pushf                # 保存EFLAGS寄存器
   103de:	9c                   	pushf  

    mov %esp,(%eax)
   103df:	89 20                	mov    %esp,(%eax)

    mov %edx,%esp
   103e1:	89 d4                	mov    %edx,%esp

    popf                 # 恢复EFLAGS寄存器
   103e3:	9d                   	popf   
    pop %edi
   103e4:	5f                   	pop    %edi
    pop %esi
   103e5:	5e                   	pop    %esi
    pop %ebx
   103e6:	5b                   	pop    %ebx
    pop %ebp
   103e7:	5d                   	pop    %ebp
    

    ret
   103e8:	c3                   	ret    

000103e9 <universal_task_switch>:
# save_tss_ptr: 保存当前TSS的地址 (如果为0则不保存)
# new_task_type: 0=内核任务, 1=用户任务
    .global universal_task_switch
universal_task_switch:
    # 保存当前TSS (如果需要)
    mov 4(%esp), %eax    # save_tss_ptr
   103e9:	8b 44 24 04          	mov    0x4(%esp),%eax
    cmp $0, %eax
   103ed:	83 f8 00             	cmp    $0x0,%eax
    je skip_save_tss
   103f0:	74 53                	je     10445 <skip_save_tss>
    
    # 保存当前TSS到指定地址
    # TSS结构: pre_link(0), esp0(4), ss0(8), esp1(12), ss1(16), esp2(20), ss2(24), cr3(28), eip(32), eflags(36), eax(40), ecx(44), edx(48), ebx(52), esp(56), ebp(60), esi(64), edi(68), es(72), cs(76), ss(80), ds(84), fs(88), gs(92), ldt(96), iomap(100)
    
    # 保存当前寄存器到TSS
    mov %eax, 40(%eax)   # 保存eax到tss.eax
   103f2:	89 40 28             	mov    %eax,0x28(%eax)
    mov %ebx, 52(%eax)   # 保存ebx到tss.ebx
   103f5:	89 58 34             	mov    %ebx,0x34(%eax)
    mov %ecx, 44(%eax)   # 保存ecx到tss.ecx
   103f8:	89 48 2c             	mov    %ecx,0x2c(%eax)
    mov %edx, 48(%eax)   # 保存edx到tss.edx
   103fb:	89 50 30             	mov    %edx,0x30(%eax)
    mov %esi, 64(%eax)   # 保存esi到tss.esi
   103fe:	89 70 40             	mov    %esi,0x40(%eax)
    mov %edi, 68(%eax)   # 保存edi到tss.edi
   10401:	89 78 44             	mov    %edi,0x44(%eax)
    mov %ebp, 60(%eax)   # 保存ebp到tss.ebp
   10404:	89 68 3c             	mov    %ebp,0x3c(%eax)
    mov %esp, 56(%eax)   # 保存esp到tss.esp
   10407:	89 60 38             	mov    %esp,0x38(%eax)
    
    # 保存返回地址作为EIP
    mov (%esp), %edx
   1040a:	8b 14 24             	mov    (%esp),%edx
    mov %edx, 32(%eax)   # 保存eip到tss.eip
   1040d:	89 50 20             	mov    %edx,0x20(%eax)
    
    # 保存EFLAGS
    pushf
   10410:	9c                   	pushf  
    pop %edx
   10411:	5a                   	pop    %edx
    mov %edx, 36(%eax)   # 保存eflags到tss.eflags
   10412:	89 50 24             	mov    %edx,0x24(%eax)
    
    # 保存段寄存器
    mov %cs, %dx
   10415:	66 8c ca             	mov    %cs,%dx
    mov %dx, 76(%eax)    # 保存cs到tss.cs
   10418:	66 89 50 4c          	mov    %dx,0x4c(%eax)
    mov %ds, %dx
   1041c:	66 8c da             	mov    %ds,%dx
    mov %dx, 84(%eax)    # 保存ds到tss.ds
   1041f:	66 89 50 54          	mov    %dx,0x54(%eax)
    mov %ss, %dx
   10423:	66 8c d2             	mov    %ss,%dx
    mov %dx, 80(%eax)    # 保存ss到tss.ss
   10426:	66 89 50 50          	mov    %dx,0x50(%eax)
    mov %es, %dx
   1042a:	66 8c c2             	mov    %es,%dx
    mov %dx, 72(%eax)    # 保存es到tss.es
   1042d:	66 89 50 48          	mov    %dx,0x48(%eax)
    mov %fs, %dx
   10431:	66 8c e2             	mov    %fs,%dx
    mov %dx, 88(%eax)    # 保存fs到tss.fs
   10434:	66 89 50 58          	mov    %dx,0x58(%eax)
    mov %gs, %dx
   10438:	66 8c ea             	mov    %gs,%dx
    mov %dx, 92(%eax)    # 保存gs到tss.gs
   1043b:	66 89 50 5c          	mov    %dx,0x5c(%eax)
    
    # 保存CR3
    mov %cr3, %edx
   1043f:	0f 20 da             	mov    %cr3,%edx
    mov %edx, 28(%eax)   # 保存cr3到tss.cr3
   10442:	89 50 1c             	mov    %edx,0x1c(%eax)

00010445 <skip_save_tss>:

skip_save_tss:
    # 获取新任务参数
    mov 8(%esp), %eax    # new_task_type
   10445:	8b 44 24 08          	mov    0x8(%esp),%eax
    cmp $0, %eax
   10449:	83 f8 00             	cmp    $0x0,%eax
    je switch_to_kernel_task
   1044c:	74 02                	je     10450 <switch_to_kernel_task>
    jmp switch_to_user_task
   1044e:	eb 46                	jmp    10496 <switch_to_user_task>

00010450 <switch_to_kernel_task>:

switch_to_kernel_task:
    # 切换到内核任务
    
    # 切换页目录
    mov 12(%esp), %eax   # new_cr3
   10450:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cmp $0, %eax
   10454:	83 f8 00             	cmp    $0x0,%eax
    je skip_page_dir_kernel
   10457:	74 03                	je     1045c <skip_page_dir_kernel>
    mov %eax, %cr3
   10459:	0f 22 d8             	mov    %eax,%cr3

0001045c <skip_page_dir_kernel>:
skip_page_dir_kernel:
    
    # 设置内核段寄存器
    mov $0x10, %ax
   1045c:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10460:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   10462:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   10464:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   10466:	8e e8                	mov    %eax,%gs
    mov %ax, %ss
   10468:	8e d0                	mov    %eax,%ss
    
    # 恢复寄存器
    mov 36(%esp), %eax   # new_eax
   1046a:	8b 44 24 24          	mov    0x24(%esp),%eax
    mov 40(%esp), %ebx   # new_ebx
   1046e:	8b 5c 24 28          	mov    0x28(%esp),%ebx
    mov 44(%esp), %ecx   # new_ecx
   10472:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
    mov 48(%esp), %edx   # new_edx
   10476:	8b 54 24 30          	mov    0x30(%esp),%edx
    mov 52(%esp), %esi   # new_esi
   1047a:	8b 74 24 34          	mov    0x34(%esp),%esi
    mov 56(%esp), %edi   # new_edi
   1047e:	8b 7c 24 38          	mov    0x38(%esp),%edi
    mov 60(%esp), %ebp   # new_ebp
   10482:	8b 6c 24 3c          	mov    0x3c(%esp),%ebp

    # 恢复EFLAGS并跳转
    mov 24(%esp), %eax   # new_eflags
   10486:	8b 44 24 18          	mov    0x18(%esp),%eax
    push %eax
   1048a:	50                   	push   %eax
    popf
   1048b:	9d                   	popf   
    mov 20(%esp),%eax
   1048c:	8b 44 24 14          	mov    0x14(%esp),%eax
    mov 32(%esp), %esp   # new_esp
   10490:	8b 64 24 20          	mov    0x20(%esp),%esp
    
    
    
    # 跳转到新任务
    jmp *%eax        # new_eip
   10494:	ff e0                	jmp    *%eax

00010496 <switch_to_user_task>:

switch_to_user_task:
    # 切换到用户任务
    
    # 切换页目录
    mov 12(%esp), %eax   # new_cr3
   10496:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cmp $0, %eax
   1049a:	83 f8 00             	cmp    $0x0,%eax
    je skip_page_dir_user
   1049d:	74 03                	je     104a2 <skip_page_dir_user>
    mov %eax, %cr3
   1049f:	0f 22 d8             	mov    %eax,%cr3

000104a2 <skip_page_dir_user>:
skip_page_dir_user:
    
    # 构造iret栈帧（特权级切换需要5个值）
    pushl 28(%esp)       # new_ss (原来28+0，因为SS是第7个参数)
   104a2:	ff 74 24 1c          	pushl  0x1c(%esp)
    pushl 36(%esp)       # new_esp (原来32+4)
   104a6:	ff 74 24 24          	pushl  0x24(%esp)
    pushl 32(%esp)       # new_eflags (原来24+8)
   104aa:	ff 74 24 20          	pushl  0x20(%esp)
    pushl 28(%esp)       # new_cs (原来16+12)
   104ae:	ff 74 24 1c          	pushl  0x1c(%esp)
    pushl 36(%esp)       # new_eip (原来20+16)
   104b2:	ff 74 24 24          	pushl  0x24(%esp)
    
    # 设置用户段寄存器
    mov $0x23, %ax
   104b6:	66 b8 23 00          	mov    $0x23,%ax
    mov %ax, %ds
   104ba:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   104bc:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   104be:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   104c0:	8e e8                	mov    %eax,%gs
    
    # 恢复通用寄存器
    mov 56(%esp), %eax   # new_eax (原来36+20)
   104c2:	8b 44 24 38          	mov    0x38(%esp),%eax
    mov 60(%esp), %ebx   # new_ebx (原来40+20)
   104c6:	8b 5c 24 3c          	mov    0x3c(%esp),%ebx
    mov 64(%esp), %ecx   # new_ecx (原来44+20)
   104ca:	8b 4c 24 40          	mov    0x40(%esp),%ecx
    mov 68(%esp), %edx   # new_edx (原来48+20)
   104ce:	8b 54 24 44          	mov    0x44(%esp),%edx
    mov 72(%esp), %esi   # new_esi (原来52+20)
   104d2:	8b 74 24 48          	mov    0x48(%esp),%esi
    mov 76(%esp), %edi   # new_edi (原来56+20)
   104d6:	8b 7c 24 4c          	mov    0x4c(%esp),%edi
    mov 80(%esp), %ebp   # new_ebp (原来60+20)
   104da:	8b 6c 24 50          	mov    0x50(%esp),%ebp
    
    # 切换到用户态
    iret
   104de:	cf                   	iret   

000104df <quick_switch>:

# 快速内核任务切换 (只保存/恢复栈指针)
# 参数: quick_switch(current_esp_ptr, new_esp)
    .global quick_switch
quick_switch:
    mov 4(%esp), %eax    # current_esp_ptr
   104df:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx    # new_esp
   104e3:	8b 54 24 08          	mov    0x8(%esp),%edx
    
    # 保存调用者保存的寄存器
    push %ebp
   104e7:	55                   	push   %ebp
    push %ebx
   104e8:	53                   	push   %ebx
    push %esi
   104e9:	56                   	push   %esi
    push %edi
   104ea:	57                   	push   %edi
    pushf
   104eb:	9c                   	pushf  
    
    # 保存当前ESP
    mov %esp, (%eax)
   104ec:	89 20                	mov    %esp,(%eax)
    
    # 切换到新任务
    mov %edx, %esp
   104ee:	89 d4                	mov    %edx,%esp
    
    # 恢复新任务寄存器
    popf
   104f0:	9d                   	popf   
    pop %edi
   104f1:	5f                   	pop    %edi
    pop %esi
   104f2:	5e                   	pop    %esi
    pop %ebx
   104f3:	5b                   	pop    %ebx
    pop %ebp
   104f4:	5d                   	pop    %ebp
    
    ret
   104f5:	c3                   	ret    

000104f6 <get_full_context>:

# 获取当前完整上下文
# 参数: get_full_context(context_ptr)
    .global get_full_context
get_full_context:
    mov 4(%esp), %eax    # context_ptr
   104f6:	8b 44 24 04          	mov    0x4(%esp),%eax
    
    # 保存所有寄存器
    mov %ebx, 0(%eax)
   104fa:	89 18                	mov    %ebx,(%eax)
    mov %ecx, 4(%eax)
   104fc:	89 48 04             	mov    %ecx,0x4(%eax)
    mov %edx, 8(%eax)
   104ff:	89 50 08             	mov    %edx,0x8(%eax)
    mov %esi, 12(%eax)
   10502:	89 70 0c             	mov    %esi,0xc(%eax)
    mov %edi, 16(%eax)
   10505:	89 78 10             	mov    %edi,0x10(%eax)
    mov %ebp, 20(%eax)
   10508:	89 68 14             	mov    %ebp,0x14(%eax)
    mov %esp, 24(%eax)
   1050b:	89 60 18             	mov    %esp,0x18(%eax)
    
    # 保存返回地址作为EIP
    mov (%esp), %edx
   1050e:	8b 14 24             	mov    (%esp),%edx
    mov %edx, 28(%eax)
   10511:	89 50 1c             	mov    %edx,0x1c(%eax)
    
    # 保存EFLAGS
    pushf
   10514:	9c                   	pushf  
    pop %edx
   10515:	5a                   	pop    %edx
    mov %edx, 32(%eax)
   10516:	89 50 20             	mov    %edx,0x20(%eax)
    
    # 保存段寄存器
    mov %cs, %dx
   10519:	66 8c ca             	mov    %cs,%dx
    mov %dx, 36(%eax)
   1051c:	66 89 50 24          	mov    %dx,0x24(%eax)
    mov %ds, %dx
   10520:	66 8c da             	mov    %ds,%dx
    mov %dx, 38(%eax)
   10523:	66 89 50 26          	mov    %dx,0x26(%eax)
    mov %ss, %dx
   10527:	66 8c d2             	mov    %ss,%dx
    mov %dx, 40(%eax)
   1052a:	66 89 50 28          	mov    %dx,0x28(%eax)
    
    ret
   1052e:	c3                   	ret    

0001052f <switch_from_interrupt>:

# 从中断中切换任务 (修改中断返回帧)
# 参数: switch_from_interrupt(interrupt_frame_ptr, new_task_type, new_page_dir, new_cs, new_eip, new_eflags, new_ss, new_esp, new_ebx, new_ecx, new_edx, new_esi, new_edi, new_ebp)
    .global switch_from_interrupt
switch_from_interrupt:
    mov 4(%esp), %eax    # interrupt_frame_ptr
   1052f:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx    # new_task_type
   10533:	8b 54 24 08          	mov    0x8(%esp),%edx
    
    # 切换页目录
    mov 12(%esp), %ebx   # new_page_dir
   10537:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
    cmp $0, %ebx
   1053b:	83 fb 00             	cmp    $0x0,%ebx
    je skip_page_dir_int
   1053e:	74 03                	je     10543 <skip_page_dir_int>
    mov %ebx, %cr3
   10540:	0f 22 db             	mov    %ebx,%cr3

00010543 <skip_page_dir_int>:
skip_page_dir_int:
    
    cmp $0, %edx         # 检查任务类型
   10543:	83 fa 00             	cmp    $0x0,%edx
    je modify_for_kernel
   10546:	74 02                	je     1054a <modify_for_kernel>
    jmp modify_for_user
   10548:	eb 23                	jmp    1056d <modify_for_user>

0001054a <modify_for_kernel>:

modify_for_kernel:
    # 修改为内核任务返回
    # 假设中断帧格式: eip, cs, eflags, esp, ss (从低到高)
    mov 20(%esp), %ebx   # new_eip
   1054a:	8b 5c 24 14          	mov    0x14(%esp),%ebx
    mov %ebx, 0(%eax)    # 修改帧中的EIP
   1054e:	89 18                	mov    %ebx,(%eax)
    mov $0x08, %bx       # 内核CS
   10550:	66 bb 08 00          	mov    $0x8,%bx
    mov %bx, 4(%eax)     # 修改帧中的CS
   10554:	66 89 58 04          	mov    %bx,0x4(%eax)
    mov 24(%esp), %ebx   # new_eflags
   10558:	8b 5c 24 18          	mov    0x18(%esp),%ebx
    mov %ebx, 8(%eax)    # 修改帧中的EFLAGS
   1055c:	89 58 08             	mov    %ebx,0x8(%eax)
    
    # 设置内核段
    mov $0x10, %bx
   1055f:	66 bb 10 00          	mov    $0x10,%bx
    mov %bx, %ds
   10563:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   10565:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   10567:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   10569:	8e eb                	mov    %ebx,%gs
    
    jmp restore_registers
   1056b:	eb 32                	jmp    1059f <restore_registers>

0001056d <modify_for_user>:

modify_for_user:
    # 修改为用户任务返回
    mov 20(%esp), %ebx   # new_eip
   1056d:	8b 5c 24 14          	mov    0x14(%esp),%ebx
    mov %ebx, 0(%eax)    # 修改帧中的EIP
   10571:	89 18                	mov    %ebx,(%eax)
    mov 16(%esp), %bx    # new_cs
   10573:	66 8b 5c 24 10       	mov    0x10(%esp),%bx
    mov %bx, 4(%eax)     # 修改帧中的CS
   10578:	66 89 58 04          	mov    %bx,0x4(%eax)
    mov 24(%esp), %ebx   # new_eflags
   1057c:	8b 5c 24 18          	mov    0x18(%esp),%ebx
    mov %ebx, 8(%eax)    # 修改帧中的EFLAGS
   10580:	89 58 08             	mov    %ebx,0x8(%eax)
    mov 32(%esp), %ebx   # new_esp
   10583:	8b 5c 24 20          	mov    0x20(%esp),%ebx
    mov %ebx, 12(%eax)   # 修改帧中的ESP
   10587:	89 58 0c             	mov    %ebx,0xc(%eax)
    mov 28(%esp), %bx    # new_ss
   1058a:	66 8b 5c 24 1c       	mov    0x1c(%esp),%bx
    mov %bx, 16(%eax)    # 修改帧中的SS
   1058f:	66 89 58 10          	mov    %bx,0x10(%eax)
    
    # 设置用户段
    mov $0x23, %bx
   10593:	66 bb 23 00          	mov    $0x23,%bx
    mov %bx, %ds
   10597:	8e db                	mov    %ebx,%ds
    mov %bx, %es
   10599:	8e c3                	mov    %ebx,%es
    mov %bx, %fs
   1059b:	8e e3                	mov    %ebx,%fs
    mov %bx, %gs
   1059d:	8e eb                	mov    %ebx,%gs

0001059f <restore_registers>:

restore_registers:
    # 恢复通用寄存器
    mov 36(%esp), %ebx   # new_ebx
   1059f:	8b 5c 24 24          	mov    0x24(%esp),%ebx
    mov 40(%esp), %ecx   # new_ecx
   105a3:	8b 4c 24 28          	mov    0x28(%esp),%ecx
    mov 44(%esp), %edx   # new_edx
   105a7:	8b 54 24 2c          	mov    0x2c(%esp),%edx
    mov 48(%esp), %esi   # new_esi
   105ab:	8b 74 24 30          	mov    0x30(%esp),%esi
    mov 52(%esp), %edi   # new_edi
   105af:	8b 7c 24 34          	mov    0x34(%esp),%edi
    mov 56(%esp), %ebp   # new_ebp
   105b3:	8b 6c 24 38          	mov    0x38(%esp),%ebp
    
    ret                  # 返回到中断处理程序，让iret处理剩余工作
   105b7:	c3                   	ret    

000105b8 <down2>:
#ifndef KLIB_H
#define KLIB_H
#include <stdarg.h>
#include "comm/types.h"
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   105b8:	55                   	push   %ebp
   105b9:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   105bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   105be:	f7 d8                	neg    %eax
   105c0:	23 45 08             	and    0x8(%ebp),%eax
}
   105c3:	5d                   	pop    %ebp
   105c4:	c3                   	ret    

000105c5 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   105c5:	55                   	push   %ebp
   105c6:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   105c8:	8b 55 08             	mov    0x8(%ebp),%edx
   105cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   105ce:	01 d0                	add    %edx,%eax
   105d0:	8d 50 ff             	lea    -0x1(%eax),%edx
   105d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   105d6:	f7 d8                	neg    %eax
   105d8:	21 d0                	and    %edx,%eax
}
   105da:	5d                   	pop    %ebp
   105db:	c3                   	ret    

000105dc <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   105dc:	55                   	push   %ebp
   105dd:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   105df:	8b 45 08             	mov    0x8(%ebp),%eax
   105e2:	0f 22 d8             	mov    %eax,%cr3
}
   105e5:	90                   	nop
   105e6:	5d                   	pop    %ebp
   105e7:	c3                   	ret    

000105e8 <pde_index>:
        uint32_t phy_page_addr : 20;
    }
}pte_t;

static inline uint32_t pde_index(uint32_t vaddr)
{
   105e8:	55                   	push   %ebp
   105e9:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 22) & 0x3FF;
   105eb:	8b 45 08             	mov    0x8(%ebp),%eax
   105ee:	c1 e8 16             	shr    $0x16,%eax
}
   105f1:	5d                   	pop    %ebp
   105f2:	c3                   	ret    

000105f3 <pte_index>:

static inline uint32_t pte_index(uint32_t vaddr)
{
   105f3:	55                   	push   %ebp
   105f4:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;
   105f6:	8b 45 08             	mov    0x8(%ebp),%eax
   105f9:	c1 e8 0c             	shr    $0xc,%eax
   105fc:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10601:	5d                   	pop    %ebp
   10602:	c3                   	ret    

00010603 <pde_paddr>:

static inline uint32_t pde_paddr(pde_t * pde)
{
   10603:	55                   	push   %ebp
   10604:	89 e5                	mov    %esp,%ebp
    return (pde->phy_pt_addr << 12) ;
   10606:	8b 45 08             	mov    0x8(%ebp),%eax
   10609:	8b 00                	mov    (%eax),%eax
   1060b:	c1 e8 0c             	shr    $0xc,%eax
   1060e:	c1 e0 0c             	shl    $0xc,%eax
}
   10611:	5d                   	pop    %ebp
   10612:	c3                   	ret    

00010613 <mmu_set_page_dir>:
static inline uint32_t pte_paddr(pte_t * pte)
{
    return (pte->phy_page_addr << 12) ;
}
static inline void mmu_set_page_dir(uint32_t paddr)
{
   10613:	55                   	push   %ebp
   10614:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10616:	ff 75 08             	pushl  0x8(%ebp)
   10619:	e8 be ff ff ff       	call   105dc <write_cr3>
   1061e:	83 c4 04             	add    $0x4,%esp
}
   10621:	90                   	nop
   10622:	c9                   	leave  
   10623:	c3                   	ret    

00010624 <addr_alloc_init>:
static addr_alloc_t paddr_alloc;

static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE)));
static void addr_alloc_init(addr_alloc_t *addr_alloc,uint8_t* bits, 
    uint32_t start, uint32_t size, uint32_t page_size)
{
   10624:	55                   	push   %ebp
   10625:	89 e5                	mov    %esp,%ebp
   10627:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&addr_alloc->mutex);
   1062a:	8b 45 08             	mov    0x8(%ebp),%eax
   1062d:	83 ec 0c             	sub    $0xc,%esp
   10630:	50                   	push   %eax
   10631:	e8 32 1d 00 00       	call   12368 <mutex_init>
   10636:	83 c4 10             	add    $0x10,%esp
    
    addr_alloc->start = start;
   10639:	8b 45 08             	mov    0x8(%ebp),%eax
   1063c:	8b 55 10             	mov    0x10(%ebp),%edx
   1063f:	89 50 1c             	mov    %edx,0x1c(%eax)
    addr_alloc->size = size;
   10642:	8b 45 08             	mov    0x8(%ebp),%eax
   10645:	8b 55 14             	mov    0x14(%ebp),%edx
   10648:	89 50 20             	mov    %edx,0x20(%eax)
    addr_alloc->page_size = page_size;
   1064b:	8b 45 08             	mov    0x8(%ebp),%eax
   1064e:	8b 55 18             	mov    0x18(%ebp),%edx
   10651:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&addr_alloc->bitmap, bits, size / page_size, 0);
   10654:	8b 45 14             	mov    0x14(%ebp),%eax
   10657:	ba 00 00 00 00       	mov    $0x0,%edx
   1065c:	f7 75 18             	divl   0x18(%ebp)
   1065f:	89 c2                	mov    %eax,%edx
   10661:	8b 45 08             	mov    0x8(%ebp),%eax
   10664:	83 c0 14             	add    $0x14,%eax
   10667:	6a 00                	push   $0x0
   10669:	52                   	push   %edx
   1066a:	ff 75 0c             	pushl  0xc(%ebp)
   1066d:	50                   	push   %eax
   1066e:	e8 c5 1f 00 00       	call   12638 <bitmap_init>
   10673:	83 c4 10             	add    $0x10,%esp
    
}
   10676:	90                   	nop
   10677:	c9                   	leave  
   10678:	c3                   	ret    

00010679 <addr_alloc_page>:

static uint32_t addr_alloc_page(addr_alloc_t *addr_alloc, int page_count)
{
   10679:	55                   	push   %ebp
   1067a:	89 e5                	mov    %esp,%ebp
   1067c:	83 ec 18             	sub    $0x18,%esp
    uint32_t  addr = 0;
   1067f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    //mutex_lock(&addr_alloc->mutex);
    irq_state_t state = irq_enter_protection();
   10686:	e8 5e 1b 00 00       	call   121e9 <irq_enter_protection>
   1068b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int page_index = bitmap_alloc_nbits(&addr_alloc->bitmap, 0, page_count);
   1068e:	8b 45 08             	mov    0x8(%ebp),%eax
   10691:	83 c0 14             	add    $0x14,%eax
   10694:	83 ec 04             	sub    $0x4,%esp
   10697:	ff 75 0c             	pushl  0xc(%ebp)
   1069a:	6a 00                	push   $0x0
   1069c:	50                   	push   %eax
   1069d:	e8 0f 21 00 00       	call   127b1 <bitmap_alloc_nbits>
   106a2:	83 c4 10             	add    $0x10,%esp
   106a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (page_index >= 0)
   106a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   106ac:	78 17                	js     106c5 <addr_alloc_page+0x4c>
    {
        addr = addr_alloc->start + page_index * addr_alloc->page_size;
   106ae:	8b 45 08             	mov    0x8(%ebp),%eax
   106b1:	8b 50 1c             	mov    0x1c(%eax),%edx
   106b4:	8b 45 08             	mov    0x8(%ebp),%eax
   106b7:	8b 48 24             	mov    0x24(%eax),%ecx
   106ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
   106bd:	0f af c1             	imul   %ecx,%eax
   106c0:	01 d0                	add    %edx,%eax
   106c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    irq_leave_protection(state);
   106c5:	83 ec 0c             	sub    $0xc,%esp
   106c8:	ff 75 f0             	pushl  -0x10(%ebp)
   106cb:	e8 31 1b 00 00       	call   12201 <irq_leave_protection>
   106d0:	83 c4 10             	add    $0x10,%esp
    //mutex_unlock(&addr_alloc->mutex);
    return addr;
   106d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   106d6:	c9                   	leave  
   106d7:	c3                   	ret    

000106d8 <addr_free_page>:

static void addr_free_page(addr_alloc_t *addr_alloc, uint32_t addr, int page_count)
{
   106d8:	55                   	push   %ebp
   106d9:	89 e5                	mov    %esp,%ebp
   106db:	53                   	push   %ebx
   106dc:	83 ec 14             	sub    $0x14,%esp
    //mutex_lock(&addr_alloc->mutex);
    irq_state_t state = irq_enter_protection();
   106df:	e8 05 1b 00 00       	call   121e9 <irq_enter_protection>
   106e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t page_index = (addr - addr_alloc->start) / addr_alloc->page_size;
   106e7:	8b 45 08             	mov    0x8(%ebp),%eax
   106ea:	8b 40 1c             	mov    0x1c(%eax),%eax
   106ed:	8b 55 0c             	mov    0xc(%ebp),%edx
   106f0:	89 d1                	mov    %edx,%ecx
   106f2:	29 c1                	sub    %eax,%ecx
   106f4:	8b 45 08             	mov    0x8(%ebp),%eax
   106f7:	8b 58 24             	mov    0x24(%eax),%ebx
   106fa:	89 c8                	mov    %ecx,%eax
   106fc:	ba 00 00 00 00       	mov    $0x0,%edx
   10701:	f7 f3                	div    %ebx
   10703:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bitmap_set_bit(&addr_alloc->bitmap, page_index, page_count,0);
   10706:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10709:	8b 55 08             	mov    0x8(%ebp),%edx
   1070c:	83 c2 14             	add    $0x14,%edx
   1070f:	6a 00                	push   $0x0
   10711:	ff 75 10             	pushl  0x10(%ebp)
   10714:	50                   	push   %eax
   10715:	52                   	push   %edx
   10716:	e8 a7 1f 00 00       	call   126c2 <bitmap_set_bit>
   1071b:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   1071e:	83 ec 0c             	sub    $0xc,%esp
   10721:	ff 75 f4             	pushl  -0xc(%ebp)
   10724:	e8 d8 1a 00 00       	call   12201 <irq_leave_protection>
   10729:	83 c4 10             	add    $0x10,%esp
    //mutex_unlock(&addr_alloc->mutex);
}
   1072c:	90                   	nop
   1072d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10730:	c9                   	leave  
   10731:	c3                   	ret    

00010732 <show_mem_info>:

void show_mem_info(boot_info_t *boot_info)
{
   10732:	55                   	push   %ebp
   10733:	89 e5                	mov    %esp,%ebp
   10735:	53                   	push   %ebx
   10736:	83 ec 14             	sub    $0x14,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   10739:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10740:	eb 42                	jmp    10784 <show_mem_info+0x52>
    {
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   10742:	8b 45 08             	mov    0x8(%ebp),%eax
   10745:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10748:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
        boot_info->ram_region_cfg[i].start + boot_info->ram_region_cfg[i].size,
   1074c:	8b 45 08             	mov    0x8(%ebp),%eax
   1074f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10752:	8b 1c c8             	mov    (%eax,%ecx,8),%ebx
   10755:	8b 45 08             	mov    0x8(%ebp),%eax
   10758:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1075b:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   1075f:	01 c3                	add    %eax,%ebx
   10761:	8b 45 08             	mov    0x8(%ebp),%eax
   10764:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10767:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1076a:	83 ec 0c             	sub    $0xc,%esp
   1076d:	52                   	push   %edx
   1076e:	53                   	push   %ebx
   1076f:	50                   	push   %eax
   10770:	ff 75 f4             	pushl  -0xc(%ebp)
   10773:	68 44 31 01 00       	push   $0x13144
   10778:	e8 05 29 00 00       	call   13082 <log_printf>
   1077d:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   10780:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10784:	8b 45 08             	mov    0x8(%ebp),%eax
   10787:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   1078d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10790:	7c b0                	jl     10742 <show_mem_info+0x10>
        boot_info->ram_region_cfg[i].size);
    }
}
   10792:	90                   	nop
   10793:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10796:	c9                   	leave  
   10797:	c3                   	ret    

00010798 <total_mem_size>:
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   10798:	55                   	push   %ebp
   10799:	89 e5                	mov    %esp,%ebp
   1079b:	83 ec 10             	sub    $0x10,%esp
    uint32_t total_size = 0;
   1079e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   107a5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   107ac:	eb 11                	jmp    107bf <total_mem_size+0x27>
    {
        total_size += boot_info->ram_region_cfg[i].size;
   107ae:	8b 45 08             	mov    0x8(%ebp),%eax
   107b1:	8b 55 f8             	mov    -0x8(%ebp),%edx
   107b4:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   107b8:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   107bb:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   107bf:	8b 45 08             	mov    0x8(%ebp),%eax
   107c2:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   107c8:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   107cb:	7c e1                	jl     107ae <total_mem_size+0x16>
    }
    return total_size;
   107cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   107d0:	c9                   	leave  
   107d1:	c3                   	ret    

000107d2 <find_pte>:

pte_t * find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   107d2:	55                   	push   %ebp
   107d3:	89 e5                	mov    %esp,%ebp
   107d5:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table = (pte_t *)0;
   107d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    pde_t *pde = page_dir + pde_index(vaddr);
   107df:	ff 75 0c             	pushl  0xc(%ebp)
   107e2:	e8 01 fe ff ff       	call   105e8 <pde_index>
   107e7:	83 c4 04             	add    $0x4,%esp
   107ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107f1:	8b 45 08             	mov    0x8(%ebp),%eax
   107f4:	01 d0                	add    %edx,%eax
   107f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   107f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107fc:	0f b6 00             	movzbl (%eax),%eax
   107ff:	83 e0 01             	and    $0x1,%eax
   10802:	84 c0                	test   %al,%al
   10804:	74 10                	je     10816 <find_pte+0x44>
    {
        page_table = (pte_t *)pde_paddr(pde);
   10806:	ff 75 f0             	pushl  -0x10(%ebp)
   10809:	e8 f5 fd ff ff       	call   10603 <pde_paddr>
   1080e:	83 c4 04             	add    $0x4,%esp
   10811:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10814:	eb 57                	jmp    1086d <find_pte+0x9b>
    }
    else
    {
        if (alloc == 0)
   10816:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1081a:	75 07                	jne    10823 <find_pte+0x51>
        {
            return (pte_t *)0;
   1081c:	b8 00 00 00 00       	mov    $0x0,%eax
   10821:	eb 64                	jmp    10887 <find_pte+0xb5>
        }
        else
        {
            uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10823:	83 ec 08             	sub    $0x8,%esp
   10826:	6a 01                	push   $0x1
   10828:	68 00 50 01 00       	push   $0x15000
   1082d:	e8 47 fe ff ff       	call   10679 <addr_alloc_page>
   10832:	83 c4 10             	add    $0x10,%esp
   10835:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (pg_paddr == 0)
   10838:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1083c:	75 07                	jne    10845 <find_pte+0x73>
            {
                return (pte_t *)0;
   1083e:	b8 00 00 00 00       	mov    $0x0,%eax
   10843:	eb 42                	jmp    10887 <find_pte+0xb5>
            }
            pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   10845:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10848:	83 c8 07             	or     $0x7,%eax
   1084b:	89 c2                	mov    %eax,%edx
   1084d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10850:	89 10                	mov    %edx,(%eax)
            page_table = (pte_t *)pg_paddr;
   10852:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10855:	89 45 f4             	mov    %eax,-0xc(%ebp)
            kernel_memset(page_table, 0, MEM_PAGE_SIZE);        
   10858:	83 ec 04             	sub    $0x4,%esp
   1085b:	68 00 10 00 00       	push   $0x1000
   10860:	6a 00                	push   $0x0
   10862:	ff 75 f4             	pushl  -0xc(%ebp)
   10865:	e8 a9 21 00 00       	call   12a13 <kernel_memset>
   1086a:	83 c4 10             	add    $0x10,%esp
        }
    }
    return page_table + pte_index(vaddr);
   1086d:	83 ec 0c             	sub    $0xc,%esp
   10870:	ff 75 0c             	pushl  0xc(%ebp)
   10873:	e8 7b fd ff ff       	call   105f3 <pte_index>
   10878:	83 c4 10             	add    $0x10,%esp
   1087b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10882:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10885:	01 d0                	add    %edx,%eax
    
    
}
   10887:	c9                   	leave  
   10888:	c3                   	ret    

00010889 <memory_create_map>:
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   10889:	55                   	push   %ebp
   1088a:	89 e5                	mov    %esp,%ebp
   1088c:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < count; i++)
   1088f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10896:	eb 45                	jmp    108dd <memory_create_map+0x54>
    {
        //log_printf("create map %d: 0x%x - 0x%x, 0x%x, perm :%d\n", i, vaddr, vaddr + MEM_PAGE_SIZE, paddr,perm);
        pte_t * pte = find_pte(page_dir, vaddr,1);
   10898:	83 ec 04             	sub    $0x4,%esp
   1089b:	6a 01                	push   $0x1
   1089d:	ff 75 0c             	pushl  0xc(%ebp)
   108a0:	ff 75 08             	pushl  0x8(%ebp)
   108a3:	e8 2a ff ff ff       	call   107d2 <find_pte>
   108a8:	83 c4 10             	add    $0x10,%esp
   108ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   108ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   108b2:	75 07                	jne    108bb <memory_create_map+0x32>
        {
            return -1;
   108b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   108b9:	eb 2f                	jmp    108ea <memory_create_map+0x61>
        }
        //log_printf("pte addr: 0x%x\n", pte);
        ASSERT(pte->present == 0);
        pte->v = paddr | perm | PTE_P;
   108bb:	8b 45 10             	mov    0x10(%ebp),%eax
   108be:	0b 45 18             	or     0x18(%ebp),%eax
   108c1:	83 c8 01             	or     $0x1,%eax
   108c4:	89 c2                	mov    %eax,%edx
   108c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108c9:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   108cb:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   108d2:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for(int i = 0; i < count; i++)
   108d9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108e0:	3b 45 14             	cmp    0x14(%ebp),%eax
   108e3:	7c b3                	jl     10898 <memory_create_map+0xf>
    }
    return 0;
   108e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   108ea:	c9                   	leave  
   108eb:	c3                   	ret    

000108ec <create_kernel_table>:
void create_kernel_table(void)
{
   108ec:	55                   	push   %ebp
   108ed:	89 e5                	mov    %esp,%ebp
   108ef:	83 ec 28             	sub    $0x28,%esp
        {kernel_base,s_text,kernel_base,PTE_W},
        {s_text,e_text,s_text,0},
        {s_data,(void *)MEM_EBDA_START,s_data,PTE_W},
        {(void *)MEM_EXT_START,(void *)MEM_EXT_END,(void *)MEM_EXT_START,PTE_W}
    };
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   108f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108f9:	e9 86 00 00 00       	jmp    10984 <create_kernel_table+0x98>
    {
        memory_map_t *map = &kernel_map[i];
   108fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10901:	c1 e0 04             	shl    $0x4,%eax
   10904:	05 00 40 01 00       	add    $0x14000,%eax
   10909:	89 45 f0             	mov    %eax,-0x10(%ebp)
        uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1090c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1090f:	8b 00                	mov    (%eax),%eax
   10911:	68 00 10 00 00       	push   $0x1000
   10916:	50                   	push   %eax
   10917:	e8 9c fc ff ff       	call   105b8 <down2>
   1091c:	83 c4 08             	add    $0x8,%esp
   1091f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10922:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10925:	8b 40 04             	mov    0x4(%eax),%eax
   10928:	68 00 10 00 00       	push   $0x1000
   1092d:	50                   	push   %eax
   1092e:	e8 92 fc ff ff       	call   105c5 <up2>
   10933:	83 c4 08             	add    $0x8,%esp
   10936:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10939:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1093c:	8b 40 08             	mov    0x8(%eax),%eax
   1093f:	68 00 10 00 00       	push   $0x1000
   10944:	50                   	push   %eax
   10945:	e8 6e fc ff ff       	call   105b8 <down2>
   1094a:	83 c4 08             	add    $0x8,%esp
   1094d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10950:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10953:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10956:	c1 e8 0c             	shr    $0xc,%eax
   10959:	89 45 e0             	mov    %eax,-0x20(%ebp)
        memory_create_map(kernel_page_dir,vstart, (uint32_t)map->pstart,page_count,map->perm);
   1095c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1095f:	8b 40 0c             	mov    0xc(%eax),%eax
   10962:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10965:	8b 52 08             	mov    0x8(%edx),%edx
   10968:	83 ec 0c             	sub    $0xc,%esp
   1096b:	50                   	push   %eax
   1096c:	ff 75 e0             	pushl  -0x20(%ebp)
   1096f:	52                   	push   %edx
   10970:	ff 75 ec             	pushl  -0x14(%ebp)
   10973:	68 00 60 01 00       	push   $0x16000
   10978:	e8 0c ff ff ff       	call   10889 <memory_create_map>
   1097d:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   10980:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10984:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10987:	83 f8 03             	cmp    $0x3,%eax
   1098a:	0f 86 6e ff ff ff    	jbe    108fe <create_kernel_table+0x12>
    }
}
   10990:	90                   	nop
   10991:	c9                   	leave  
   10992:	c3                   	ret    

00010993 <memory_create_user_space>:

uint32_t memory_create_user_space()
{
   10993:	55                   	push   %ebp
   10994:	89 e5                	mov    %esp,%ebp
   10996:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10999:	83 ec 08             	sub    $0x8,%esp
   1099c:	6a 01                	push   $0x1
   1099e:	68 00 50 01 00       	push   $0x15000
   109a3:	e8 d1 fc ff ff       	call   10679 <addr_alloc_page>
   109a8:	83 c4 10             	add    $0x10,%esp
   109ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == (pde_t *)0)
   109ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   109b2:	75 07                	jne    109bb <memory_create_user_space+0x28>
    {
        return 0;
   109b4:	b8 00 00 00 00       	mov    $0x0,%eax
   109b9:	eb 5b                	jmp    10a16 <memory_create_user_space+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   109bb:	83 ec 04             	sub    $0x4,%esp
   109be:	68 00 10 00 00       	push   $0x1000
   109c3:	6a 00                	push   $0x0
   109c5:	ff 75 f0             	pushl  -0x10(%ebp)
   109c8:	e8 46 20 00 00       	call   12a13 <kernel_memset>
   109cd:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   109d0:	83 ec 0c             	sub    $0xc,%esp
   109d3:	68 00 00 00 80       	push   $0x80000000
   109d8:	e8 0b fc ff ff       	call   105e8 <pde_index>
   109dd:	83 c4 10             	add    $0x10,%esp
   109e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i = 0; i < user_pde_start; i++)
   109e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109ea:	eb 1f                	jmp    10a0b <memory_create_user_space+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   109ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109f9:	01 c2                	add    %eax,%edx
   109fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109fe:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10a05:	89 02                	mov    %eax,(%edx)
    for(int i = 0; i < user_pde_start; i++)
   10a07:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a0e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10a11:	77 d9                	ja     109ec <memory_create_user_space+0x59>
    }
    return (uint32_t)page_dir;
   10a13:	8b 45 f0             	mov    -0x10(%ebp),%eax
    
}
   10a16:	c9                   	leave  
   10a17:	c3                   	ret    

00010a18 <memory_init>:
void memory_init(boot_info_t *boot_info)
{
   10a18:	55                   	push   %ebp
   10a19:	89 e5                	mov    %esp,%ebp
   10a1b:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    //log_printf("mem init\n");
    show_mem_info(boot_info);
   10a1e:	83 ec 0c             	sub    $0xc,%esp
   10a21:	ff 75 08             	pushl  0x8(%ebp)
   10a24:	e8 09 fd ff ff       	call   10732 <show_mem_info>
   10a29:	83 c4 10             	add    $0x10,%esp

    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10a2c:	c7 45 f4 45 e0 01 00 	movl   $0x1e045,-0xc(%ebp)
    uint32_t mem_up1MB_free_size = total_mem_size(boot_info) - MEM_EXT_START;
   10a33:	83 ec 0c             	sub    $0xc,%esp
   10a36:	ff 75 08             	pushl  0x8(%ebp)
   10a39:	e8 5a fd ff ff       	call   10798 <total_mem_size>
   10a3e:	83 c4 10             	add    $0x10,%esp
   10a41:	2d 00 00 10 00       	sub    $0x100000,%eax
   10a46:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free_size = down2(mem_up1MB_free_size,MEM_PAGE_SIZE);
   10a49:	83 ec 08             	sub    $0x8,%esp
   10a4c:	68 00 10 00 00       	push   $0x1000
   10a51:	ff 75 f0             	pushl  -0x10(%ebp)
   10a54:	e8 5f fb ff ff       	call   105b8 <down2>
   10a59:	83 c4 10             	add    $0x10,%esp
   10a5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //log_printf("free memory begin addr: 0x%x ,size 0x%x\n", MEM_EXT_START, mem_up1MB_free_size);
    
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free_size, MEM_PAGE_SIZE);
   10a5f:	83 ec 0c             	sub    $0xc,%esp
   10a62:	68 00 10 00 00       	push   $0x1000
   10a67:	ff 75 f0             	pushl  -0x10(%ebp)
   10a6a:	68 00 00 10 00       	push   $0x100000
   10a6f:	ff 75 f4             	pushl  -0xc(%ebp)
   10a72:	68 00 50 01 00       	push   $0x15000
   10a77:	e8 a8 fb ff ff       	call   10624 <addr_alloc_init>
   10a7c:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10a7f:	a1 20 50 01 00       	mov    0x15020,%eax
   10a84:	c1 e8 0c             	shr    $0xc,%eax
   10a87:	83 ec 0c             	sub    $0xc,%esp
   10a8a:	50                   	push   %eax
   10a8b:	e8 92 1b 00 00       	call   12622 <bitmap_byte_count>
   10a90:	83 c4 10             	add    $0x10,%esp
   10a93:	01 45 f4             	add    %eax,-0xc(%ebp)
    
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);

    create_kernel_table();
   10a96:	e8 51 fe ff ff       	call   108ec <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10a9b:	b8 00 60 01 00       	mov    $0x16000,%eax
   10aa0:	83 ec 0c             	sub    $0xc,%esp
   10aa3:	50                   	push   %eax
   10aa4:	e8 6a fb ff ff       	call   10613 <mmu_set_page_dir>
   10aa9:	83 c4 10             	add    $0x10,%esp
}
   10aac:	90                   	nop
   10aad:	c9                   	leave  
   10aae:	c3                   	ret    

00010aaf <memory_alloc_for_page_dir>:


int memory_alloc_for_page_dir(uint32_t page_dir,uint32_t vaddr,uint32_t size,int perm)
{
   10aaf:	55                   	push   %ebp
   10ab0:	89 e5                	mov    %esp,%ebp
   10ab2:	83 ec 28             	sub    $0x28,%esp
    uint32_t current_vaddr = vaddr;
   10ab5:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size,MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10abb:	68 00 10 00 00       	push   $0x1000
   10ac0:	ff 75 10             	pushl  0x10(%ebp)
   10ac3:	e8 fd fa ff ff       	call   105c5 <up2>
   10ac8:	83 c4 08             	add    $0x8,%esp
   10acb:	c1 e8 0c             	shr    $0xc,%eax
   10ace:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i = 0; i < page_count; i++)
   10ad1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10ad8:	eb 68                	jmp    10b42 <memory_alloc_for_page_dir+0x93>
    {
        uint32_t paddr = addr_alloc_page(&paddr_alloc,1);
   10ada:	83 ec 08             	sub    $0x8,%esp
   10add:	6a 01                	push   $0x1
   10adf:	68 00 50 01 00       	push   $0x15000
   10ae4:	e8 90 fb ff ff       	call   10679 <addr_alloc_page>
   10ae9:	83 c4 10             	add    $0x10,%esp
   10aec:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(paddr == 0)
   10aef:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10af3:	75 07                	jne    10afc <memory_alloc_for_page_dir+0x4d>
        {
            return 0;
   10af5:	b8 00 00 00 00       	mov    $0x0,%eax
   10afa:	eb 53                	jmp    10b4f <memory_alloc_for_page_dir+0xa0>
        }
        int err = memory_create_map((pde_t *)page_dir,current_vaddr,paddr,1,perm);
   10afc:	8b 55 14             	mov    0x14(%ebp),%edx
   10aff:	8b 45 08             	mov    0x8(%ebp),%eax
   10b02:	83 ec 0c             	sub    $0xc,%esp
   10b05:	52                   	push   %edx
   10b06:	6a 01                	push   $0x1
   10b08:	ff 75 e8             	pushl  -0x18(%ebp)
   10b0b:	ff 75 f4             	pushl  -0xc(%ebp)
   10b0e:	50                   	push   %eax
   10b0f:	e8 75 fd ff ff       	call   10889 <memory_create_map>
   10b14:	83 c4 20             	add    $0x20,%esp
   10b17:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if(err < 0)
   10b1a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10b1e:	79 17                	jns    10b37 <memory_alloc_for_page_dir+0x88>
        {
            log_printf("memory_alloc_for_page_dir error\n");
   10b20:	83 ec 0c             	sub    $0xc,%esp
   10b23:	68 64 31 01 00       	push   $0x13164
   10b28:	e8 55 25 00 00       	call   13082 <log_printf>
   10b2d:	83 c4 10             	add    $0x10,%esp
            return 0;
   10b30:	b8 00 00 00 00       	mov    $0x0,%eax
   10b35:	eb 18                	jmp    10b4f <memory_alloc_for_page_dir+0xa0>
        }
        current_vaddr += MEM_PAGE_SIZE;
   10b37:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for(int i = 0; i < page_count; i++)
   10b3e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b42:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b45:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10b48:	7c 90                	jl     10ada <memory_alloc_for_page_dir+0x2b>
    }
    return 0;
   10b4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b4f:	c9                   	leave  
   10b50:	c3                   	ret    

00010b51 <memory_alloc_page_for>:

int memory_alloc_page_for(uint32_t addr,uint32_t size,int perm)
{
   10b51:	55                   	push   %ebp
   10b52:	89 e5                	mov    %esp,%ebp
   10b54:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3,addr,size,perm);
   10b57:	e8 fc 05 00 00       	call   11158 <task_current>
   10b5c:	8b 40 78             	mov    0x78(%eax),%eax
   10b5f:	ff 75 10             	pushl  0x10(%ebp)
   10b62:	ff 75 0c             	pushl  0xc(%ebp)
   10b65:	ff 75 08             	pushl  0x8(%ebp)
   10b68:	50                   	push   %eax
   10b69:	e8 41 ff ff ff       	call   10aaf <memory_alloc_for_page_dir>
   10b6e:	83 c4 10             	add    $0x10,%esp
}
   10b71:	c9                   	leave  
   10b72:	c3                   	ret    

00010b73 <memory_copy>:


uint32_t memory_copy(task_t * from,task_t * to)
{
   10b73:	55                   	push   %ebp
   10b74:	89 e5                	mov    %esp,%ebp
   10b76:	83 ec 20             	sub    $0x20,%esp
    pde_t * from_page_dir = (pde_t *)from->tss.cr3;
   10b79:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7c:	8b 40 78             	mov    0x78(%eax),%eax
   10b7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    pde_t * to_page_dir = (pde_t *)to->tss.cr3;
   10b82:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b85:	8b 40 78             	mov    0x78(%eax),%eax
   10b88:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10b8b:	68 00 00 00 80       	push   $0x80000000
   10b90:	e8 53 fa ff ff       	call   105e8 <pde_index>
   10b95:	83 c4 04             	add    $0x4,%esp
   10b98:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for(int i = user_pde_start; i < 1024; i++)
   10b9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10ba1:	eb 3f                	jmp    10be2 <memory_copy+0x6f>
    {
        pde_t * from_pde = from_page_dir + i;
   10ba3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ba6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10bad:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10bb0:	01 d0                	add    %edx,%eax
   10bb2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        pde_t * to_pde = to_page_dir + i;
   10bb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10bb8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10bbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bc2:	01 d0                	add    %edx,%eax
   10bc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(from_pde->present)
   10bc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bca:	0f b6 00             	movzbl (%eax),%eax
   10bcd:	83 e0 01             	and    $0x1,%eax
   10bd0:	84 c0                	test   %al,%al
   10bd2:	74 0a                	je     10bde <memory_copy+0x6b>
        {
            to_pde->v = from_pde->v;
   10bd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bd7:	8b 10                	mov    (%eax),%edx
   10bd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10bdc:	89 10                	mov    %edx,(%eax)
    for(int i = user_pde_start; i < 1024; i++)
   10bde:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10be2:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%ebp)
   10be9:	7e b8                	jle    10ba3 <memory_copy+0x30>
        }
    }
    return 0;
   10beb:	b8 00 00 00 00       	mov    $0x0,%eax
    
   10bf0:	c9                   	leave  
   10bf1:	c3                   	ret    

00010bf2 <list_node_init>:
    struct _list_node_t* next;
}list_node_t;


static inline void list_node_init(list_node_t *node)
{
   10bf2:	55                   	push   %ebp
   10bf3:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10bff:	8b 45 08             	mov    0x8(%ebp),%eax
   10c02:	8b 50 04             	mov    0x4(%eax),%edx
   10c05:	8b 45 08             	mov    0x8(%ebp),%eax
   10c08:	89 10                	mov    %edx,(%eax)
}
   10c0a:	90                   	nop
   10c0b:	5d                   	pop    %ebp
   10c0c:	c3                   	ret    

00010c0d <list_node_next>:
static inline list_node_t* list_node_pre(list_node_t* node)
{
    return node->pre;
} 
static inline list_node_t* list_node_next(list_node_t* node)
{
   10c0d:	55                   	push   %ebp
   10c0e:	89 e5                	mov    %esp,%ebp
    return node->next;
   10c10:	8b 45 08             	mov    0x8(%ebp),%eax
   10c13:	8b 40 04             	mov    0x4(%eax),%eax
}
   10c16:	5d                   	pop    %ebp
   10c17:	c3                   	ret    

00010c18 <list_count>:
{
    return list->count == 0;
}

static inline int list_count(list_t * list)
{
   10c18:	55                   	push   %ebp
   10c19:	89 e5                	mov    %esp,%ebp
    return list->count;
   10c1b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c1e:	8b 40 08             	mov    0x8(%eax),%eax
}
   10c21:	5d                   	pop    %ebp
   10c22:	c3                   	ret    

00010c23 <list_first>:
static inline list_node_t* list_first(list_t * list)
{
   10c23:	55                   	push   %ebp
   10c24:	89 e5                	mov    %esp,%ebp
    return list->first;
   10c26:	8b 45 08             	mov    0x8(%ebp),%eax
   10c29:	8b 00                	mov    (%eax),%eax
}
   10c2b:	5d                   	pop    %ebp
   10c2c:	c3                   	ret    

00010c2d <read_cr3>:
{
   10c2d:	55                   	push   %ebp
   10c2e:	89 e5                	mov    %esp,%ebp
   10c30:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
   10c33:	0f 20 d8             	mov    %cr3,%eax
   10c36:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr3;
   10c39:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10c3c:	c9                   	leave  
   10c3d:	c3                   	ret    

00010c3e <write_cr3>:
{
   10c3e:	55                   	push   %ebp
   10c3f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10c41:	8b 45 08             	mov    0x8(%ebp),%eax
   10c44:	0f 22 d8             	mov    %eax,%cr3
}
   10c47:	90                   	nop
   10c48:	5d                   	pop    %ebp
   10c49:	c3                   	ret    

00010c4a <hlt>:
    uint32_t addr[] = {offset ,selector};
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}

static inline void hlt(void)
{
   10c4a:	55                   	push   %ebp
   10c4b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10c4d:	f4                   	hlt    
}
   10c4e:	90                   	nop
   10c4f:	5d                   	pop    %ebp
   10c50:	c3                   	ret    

00010c51 <write_tr>:

static inline void write_tr(uint16_t selector)
{
   10c51:	55                   	push   %ebp
   10c52:	89 e5                	mov    %esp,%ebp
   10c54:	83 ec 04             	sub    $0x4,%esp
   10c57:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(selector));
   10c5e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10c62:	0f 00 d8             	ltr    %ax
}
   10c65:	90                   	nop
   10c66:	c9                   	leave  
   10c67:	c3                   	ret    

00010c68 <tss_init>:
static task_manager_t task_manager;
int need_reschedule = 0;
static uint32_t idle_task_stack[1024];
static uint32_t kernel_stack[1024];
static int tss_init(task_t *task,uint32_t entry,uint32_t esp, int kernel_or_user)
{
   10c68:	55                   	push   %ebp
   10c69:	89 e5                	mov    %esp,%ebp
   10c6b:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(&task->tss,0,sizeof(tss_t));
   10c6e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c71:	83 c0 5c             	add    $0x5c,%eax
   10c74:	83 ec 04             	sub    $0x4,%esp
   10c77:	6a 68                	push   $0x68
   10c79:	6a 00                	push   $0x0
   10c7b:	50                   	push   %eax
   10c7c:	e8 92 1d 00 00       	call   12a13 <kernel_memset>
   10c81:	83 c4 10             	add    $0x10,%esp
    task->kernel_stack = esp;
   10c84:	8b 45 08             	mov    0x8(%ebp),%eax
   10c87:	8b 55 10             	mov    0x10(%ebp),%edx
   10c8a:	89 50 10             	mov    %edx,0x10(%eax)
    //0表示内核任务，1表示用户任务
    if(kernel_or_user == 0)
   10c8d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10c91:	75 36                	jne    10cc9 <tss_init+0x61>
    {
        task->tss.cs = KERNEL_SELECTOR_CS;    // 内核代码段
   10c93:	8b 45 08             	mov    0x8(%ebp),%eax
   10c96:	c7 80 a8 00 00 00 08 	movl   $0x8,0xa8(%eax)
   10c9d:	00 00 00 
        task->tss.ds = KERNEL_SELECTOR_DS;    // 内核数据段
   10ca0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca3:	c7 80 b0 00 00 00 10 	movl   $0x10,0xb0(%eax)
   10caa:	00 00 00 
        task->tss.ss = KERNEL_SELECTOR_DS;    // 内核栈段
   10cad:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb0:	c7 80 ac 00 00 00 10 	movl   $0x10,0xac(%eax)
   10cb7:	00 00 00 
        task->tss.eflags = EFLAGS_DEFAULT| EFLAGS_IF; // 开启中断
   10cba:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbd:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   10cc4:	02 00 00 
   10cc7:	eb 34                	jmp    10cfd <tss_init+0x95>
    }
    else
    {
        task->tss.cs = USER_SELECTOR_CS;    // 用户代码段
   10cc9:	8b 45 08             	mov    0x8(%ebp),%eax
   10ccc:	c7 80 a8 00 00 00 1b 	movl   $0x1b,0xa8(%eax)
   10cd3:	00 00 00 
        task->tss.ds = USER_SELECTOR_DS;    // 用户数据段
   10cd6:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd9:	c7 80 b0 00 00 00 23 	movl   $0x23,0xb0(%eax)
   10ce0:	00 00 00 
        task->tss.ss = USER_SELECTOR_DS;    // 用户栈段
   10ce3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce6:	c7 80 ac 00 00 00 23 	movl   $0x23,0xac(%eax)
   10ced:	00 00 00 
        task->tss.eflags = EFLAGS_DEFAULT| EFLAGS_IF; // 开启中断
   10cf0:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf3:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   10cfa:	02 00 00 
    }
    task->tss.esp = esp;
   10cfd:	8b 45 08             	mov    0x8(%ebp),%eax
   10d00:	8b 55 10             	mov    0x10(%ebp),%edx
   10d03:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.eip = entry;
   10d09:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0c:	8b 55 0c             	mov    0xc(%ebp),%edx
   10d0f:	89 50 7c             	mov    %edx,0x7c(%eax)
    uint32_t page_dir = memory_create_user_space();
   10d12:	e8 7c fc ff ff       	call   10993 <memory_create_user_space>
   10d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(page_dir == 0)
   10d1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d1e:	75 07                	jne    10d27 <tss_init+0xbf>
    {
        return -1;
   10d20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10d25:	eb 0e                	jmp    10d35 <tss_init+0xcd>
    }
    task->tss.cr3 = page_dir;
   10d27:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d2d:	89 50 78             	mov    %edx,0x78(%eax)
    return 0;
   10d30:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d35:	c9                   	leave  
   10d36:	c3                   	ret    

00010d37 <kernel_task_init>:
int kernel_task_init(task_t *task,const char *name,uint32_t entry,uint32_t esp)
{
   10d37:	55                   	push   %ebp
   10d38:	89 e5                	mov    %esp,%ebp
   10d3a:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task *)0);
    tss_init(task,entry,esp,0);
   10d3d:	6a 00                	push   $0x0
   10d3f:	ff 75 14             	pushl  0x14(%ebp)
   10d42:	ff 75 10             	pushl  0x10(%ebp)
   10d45:	ff 75 08             	pushl  0x8(%ebp)
   10d48:	e8 1b ff ff ff       	call   10c68 <tss_init>
   10d4d:	83 c4 10             	add    $0x10,%esp

    task->task_type = TASK_KERNEL;
   10d50:	8b 45 08             	mov    0x8(%ebp),%eax
   10d53:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10d5a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d5d:	83 c0 24             	add    $0x24,%eax
   10d60:	83 ec 04             	sub    $0x4,%esp
   10d63:	6a 20                	push   $0x20
   10d65:	ff 75 0c             	pushl  0xc(%ebp)
   10d68:	50                   	push   %eax
   10d69:	e8 37 1b 00 00       	call   128a5 <kernel_strncpy>
   10d6e:	83 c4 10             	add    $0x10,%esp
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10d71:	8b 45 08             	mov    0x8(%ebp),%eax
   10d74:	c7 40 20 0a 00 00 00 	movl   $0xa,0x20(%eax)
    task->slice_ticks = task->time_ticks;
   10d7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7e:	8b 50 20             	mov    0x20(%eax),%edx
   10d81:	8b 45 08             	mov    0x8(%ebp),%eax
   10d84:	89 50 1c             	mov    %edx,0x1c(%eax)
    task->sleep_ticks = 0;
   10d87:	8b 45 08             	mov    0x8(%ebp),%eax
   10d8a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    task->state = TASK_CREATED;
   10d91:	8b 45 08             	mov    0x8(%ebp),%eax
   10d94:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    
    list_node_init(&task->run_node);
   10d9b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d9e:	83 c0 44             	add    $0x44,%eax
   10da1:	83 ec 0c             	sub    $0xc,%esp
   10da4:	50                   	push   %eax
   10da5:	e8 48 fe ff ff       	call   10bf2 <list_node_init>
   10daa:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   10dad:	8b 45 08             	mov    0x8(%ebp),%eax
   10db0:	83 c0 4c             	add    $0x4c,%eax
   10db3:	83 ec 0c             	sub    $0xc,%esp
   10db6:	50                   	push   %eax
   10db7:	e8 36 fe ff ff       	call   10bf2 <list_node_init>
   10dbc:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10dbf:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc2:	83 c0 54             	add    $0x54,%eax
   10dc5:	83 ec 0c             	sub    $0xc,%esp
   10dc8:	50                   	push   %eax
   10dc9:	e8 24 fe ff ff       	call   10bf2 <list_node_init>
   10dce:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   10dd1:	e8 13 14 00 00       	call   121e9 <irq_enter_protection>
   10dd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   10dd9:	83 ec 0c             	sub    $0xc,%esp
   10ddc:	ff 75 08             	pushl  0x8(%ebp)
   10ddf:	e8 14 03 00 00       	call   110f8 <task_set_ready>
   10de4:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   10de7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dea:	83 c0 4c             	add    $0x4c,%eax
   10ded:	83 ec 08             	sub    $0x8,%esp
   10df0:	50                   	push   %eax
   10df1:	68 48 70 01 00       	push   $0x17048
   10df6:	e8 4f 20 00 00       	call   12e4a <list_insert_last>
   10dfb:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10dfe:	83 ec 0c             	sub    $0xc,%esp
   10e01:	ff 75 f4             	pushl  -0xc(%ebp)
   10e04:	e8 f8 13 00 00       	call   12201 <irq_leave_protection>
   10e09:	83 c4 10             	add    $0x10,%esp
    return 0;
   10e0c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e11:	c9                   	leave  
   10e12:	c3                   	ret    

00010e13 <user_task_init>:


int user_task_init(task_t *task,const char *name,uint32_t entry,uint32_t esp)
{
   10e13:	55                   	push   %ebp
   10e14:	89 e5                	mov    %esp,%ebp
   10e16:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task *)0);
    task->task_type = TASK_USER;
   10e19:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1c:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    tss_init(task,entry,esp,1);
   10e23:	6a 01                	push   $0x1
   10e25:	ff 75 14             	pushl  0x14(%ebp)
   10e28:	ff 75 10             	pushl  0x10(%ebp)
   10e2b:	ff 75 08             	pushl  0x8(%ebp)
   10e2e:	e8 35 fe ff ff       	call   10c68 <tss_init>
   10e33:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10e36:	8b 45 08             	mov    0x8(%ebp),%eax
   10e39:	83 c0 24             	add    $0x24,%eax
   10e3c:	83 ec 04             	sub    $0x4,%esp
   10e3f:	6a 20                	push   $0x20
   10e41:	ff 75 0c             	pushl  0xc(%ebp)
   10e44:	50                   	push   %eax
   10e45:	e8 5b 1a 00 00       	call   128a5 <kernel_strncpy>
   10e4a:	83 c4 10             	add    $0x10,%esp
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10e4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e50:	c7 40 20 0a 00 00 00 	movl   $0xa,0x20(%eax)
    task->slice_ticks = task->time_ticks;
   10e57:	8b 45 08             	mov    0x8(%ebp),%eax
   10e5a:	8b 50 20             	mov    0x20(%eax),%edx
   10e5d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e60:	89 50 1c             	mov    %edx,0x1c(%eax)
    task->sleep_ticks = 0;
   10e63:	8b 45 08             	mov    0x8(%ebp),%eax
   10e66:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    task->state = TASK_CREATED;
   10e6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e70:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    
    list_node_init(&task->run_node);
   10e77:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7a:	83 c0 44             	add    $0x44,%eax
   10e7d:	83 ec 0c             	sub    $0xc,%esp
   10e80:	50                   	push   %eax
   10e81:	e8 6c fd ff ff       	call   10bf2 <list_node_init>
   10e86:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   10e89:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8c:	83 c0 4c             	add    $0x4c,%eax
   10e8f:	83 ec 0c             	sub    $0xc,%esp
   10e92:	50                   	push   %eax
   10e93:	e8 5a fd ff ff       	call   10bf2 <list_node_init>
   10e98:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10e9b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e9e:	83 c0 54             	add    $0x54,%eax
   10ea1:	83 ec 0c             	sub    $0xc,%esp
   10ea4:	50                   	push   %eax
   10ea5:	e8 48 fd ff ff       	call   10bf2 <list_node_init>
   10eaa:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   10ead:	e8 37 13 00 00       	call   121e9 <irq_enter_protection>
   10eb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   10eb5:	83 ec 0c             	sub    $0xc,%esp
   10eb8:	ff 75 08             	pushl  0x8(%ebp)
   10ebb:	e8 38 02 00 00       	call   110f8 <task_set_ready>
   10ec0:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   10ec3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec6:	83 c0 4c             	add    $0x4c,%eax
   10ec9:	83 ec 08             	sub    $0x8,%esp
   10ecc:	50                   	push   %eax
   10ecd:	68 48 70 01 00       	push   $0x17048
   10ed2:	e8 73 1f 00 00       	call   12e4a <list_insert_last>
   10ed7:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10eda:	83 ec 0c             	sub    $0xc,%esp
   10edd:	ff 75 f4             	pushl  -0xc(%ebp)
   10ee0:	e8 1c 13 00 00       	call   12201 <irq_leave_protection>
   10ee5:	83 c4 10             	add    $0x10,%esp
    return 0;
   10ee8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10eed:	c9                   	leave  
   10eee:	c3                   	ret    

00010eef <idle_task_entry>:
void simple_switch(uint32_t ** from,uint32_t *to);
void interrupt_switch(uint32_t ** from,uint32_t *to);
static void idle_task_entry(void)
{
   10eef:	55                   	push   %ebp
   10ef0:	89 e5                	mov    %esp,%ebp
    while(1)
    {
        hlt();
   10ef2:	e8 53 fd ff ff       	call   10c4a <hlt>
   10ef7:	eb f9                	jmp    10ef2 <idle_task_entry+0x3>

00010ef9 <global_tss_init>:
    }
}
static void global_tss_init()
{
   10ef9:	55                   	push   %ebp
   10efa:	89 e5                	mov    %esp,%ebp
    task_manager.global_tss.ss0 = KERNEL_SELECTOR_DS;
   10efc:	c7 05 e4 71 01 00 10 	movl   $0x10,0x171e4
   10f03:	00 00 00 
    task_manager.global_tss.esp0 = (uint32_t)&kernel_stack[1024];
   10f06:	b8 60 92 01 00       	mov    $0x19260,%eax
   10f0b:	a3 e0 71 01 00       	mov    %eax,0x171e0
    task_manager.global_tss.cs = KERNEL_SELECTOR_CS;
   10f10:	c7 05 28 72 01 00 08 	movl   $0x8,0x17228
   10f17:	00 00 00 
    task_manager.global_tss.ds = KERNEL_SELECTOR_DS;
   10f1a:	c7 05 30 72 01 00 10 	movl   $0x10,0x17230
   10f21:	00 00 00 
    task_manager.global_tss.es = KERNEL_SELECTOR_DS;
   10f24:	c7 05 24 72 01 00 10 	movl   $0x10,0x17224
   10f2b:	00 00 00 
    task_manager.global_tss.fs = KERNEL_SELECTOR_DS;
   10f2e:	c7 05 34 72 01 00 10 	movl   $0x10,0x17234
   10f35:	00 00 00 
    task_manager.global_tss.gs = KERNEL_SELECTOR_DS;
   10f38:	c7 05 38 72 01 00 10 	movl   $0x10,0x17238
   10f3f:	00 00 00 
}
   10f42:	90                   	nop
   10f43:	5d                   	pop    %ebp
   10f44:	c3                   	ret    

00010f45 <task_gdt_init>:
static void task_gdt_init()
{
   10f45:	55                   	push   %ebp
   10f46:	89 e5                	mov    %esp,%ebp
   10f48:	83 ec 18             	sub    $0x18,%esp
    // 直接配置用户段到对应的GDT表项，确保段基址为0  
    int sel = gdt_alloc_desc();
   10f4b:	e8 de 07 00 00       	call   1172e <gdt_alloc_desc>
   10f50:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0, 0xFFFFFFFF, SEG_P_PRESENT | SEG_DPL_3 | SEG_S_NORMAL |
   10f53:	68 fa 40 00 00       	push   $0x40fa
   10f58:	6a ff                	push   $0xffffffff
   10f5a:	6a 00                	push   $0x0
   10f5c:	ff 75 f4             	pushl  -0xc(%ebp)
   10f5f:	e8 00 07 00 00       	call   11664 <segment_desc_set>
   10f64:	83 c4 10             	add    $0x10,%esp
        SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);  // 索引3，对应选择子0x1B (0x18+RPL_3)
    sel = gdt_alloc_desc();
   10f67:	e8 c2 07 00 00       	call   1172e <gdt_alloc_desc>
   10f6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0, 0xFFFFFFFF, SEG_P_PRESENT | SEG_DPL_3 | SEG_S_NORMAL |
   10f6f:	68 f2 40 00 00       	push   $0x40f2
   10f74:	6a ff                	push   $0xffffffff
   10f76:	6a 00                	push   $0x0
   10f78:	ff 75 f4             	pushl  -0xc(%ebp)
   10f7b:	e8 e4 06 00 00       	call   11664 <segment_desc_set>
   10f80:	83 c4 10             	add    $0x10,%esp
        SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);  // 索引4，对应选择子0x23 (0x20+RPL_3)
    sel = gdt_alloc_desc();
   10f83:	e8 a6 07 00 00       	call   1172e <gdt_alloc_desc>
   10f88:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, (uint32_t)&task_manager.global_tss, sizeof(tss_t),
   10f8b:	b8 dc 71 01 00       	mov    $0x171dc,%eax
   10f90:	68 89 00 00 00       	push   $0x89
   10f95:	6a 68                	push   $0x68
   10f97:	50                   	push   %eax
   10f98:	ff 75 f4             	pushl  -0xc(%ebp)
   10f9b:	e8 c4 06 00 00       	call   11664 <segment_desc_set>
   10fa0:	83 c4 10             	add    $0x10,%esp
            SEG_P_PRESENT | SEG_DPL_0 | SEG_TYPE_TSS);
    task_manager.tss_sel = sel;
   10fa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fa6:	a3 44 72 01 00       	mov    %eax,0x17244
}
   10fab:	90                   	nop
   10fac:	c9                   	leave  
   10fad:	c3                   	ret    

00010fae <task_manager_init>:
void task_manager_init()
{
   10fae:	55                   	push   %ebp
   10faf:	89 e5                	mov    %esp,%ebp
   10fb1:	83 ec 08             	sub    $0x8,%esp
    task_gdt_init();
   10fb4:	e8 8c ff ff ff       	call   10f45 <task_gdt_init>
    global_tss_init();
   10fb9:	e8 3b ff ff ff       	call   10ef9 <global_tss_init>
    
    
    // show_base(3);
    // show_base(4);
    list_init(&task_manager.ready_list);
   10fbe:	83 ec 0c             	sub    $0xc,%esp
   10fc1:	68 30 70 01 00       	push   $0x17030
   10fc6:	e8 fb 1d 00 00       	call   12dc6 <list_init>
   10fcb:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);     
   10fce:	83 ec 0c             	sub    $0xc,%esp
   10fd1:	68 48 70 01 00       	push   $0x17048
   10fd6:	e8 eb 1d 00 00       	call   12dc6 <list_init>
   10fdb:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10fde:	83 ec 0c             	sub    $0xc,%esp
   10fe1:	68 3c 70 01 00       	push   $0x1703c
   10fe6:	e8 db 1d 00 00       	call   12dc6 <list_init>
   10feb:	83 c4 10             	add    $0x10,%esp
    task_manager.current_task = (task_t *)0;
   10fee:	c7 05 2c 70 01 00 00 	movl   $0x0,0x1702c
   10ff5:	00 00 00 
    task_manager.from_task = (task_t *)0;
   10ff8:	c7 05 24 70 01 00 00 	movl   $0x0,0x17024
   10fff:	00 00 00 
    task_manager.to_task = (task_t *)0;
   11002:	c7 05 28 70 01 00 00 	movl   $0x0,0x17028
   11009:	00 00 00 
    task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE ;
   1100c:	c7 05 20 70 01 00 00 	movl   $0x0,0x17020
   11013:	00 00 00 

    kernel_task_init(&task_manager.idle_task,"idle_task",idle_task_entry,(uint32_t)&idle_task_stack[1024]);
   11016:	ba 60 82 01 00       	mov    $0x18260,%edx
   1101b:	b8 ef 0e 01 00       	mov    $0x10eef,%eax
   11020:	52                   	push   %edx
   11021:	50                   	push   %eax
   11022:	68 85 31 01 00       	push   $0x13185
   11027:	68 18 71 01 00       	push   $0x17118
   1102c:	e8 06 fd ff ff       	call   10d37 <kernel_task_init>
   11031:	83 c4 10             	add    $0x10,%esp
}
   11034:	90                   	nop
   11035:	c9                   	leave  
   11036:	c3                   	ret    

00011037 <task_first_init>:

void task_first_init()
{
   11037:	55                   	push   %ebp
   11038:	89 e5                	mov    %esp,%ebp
   1103a:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[];
    extern uint8_t e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   1103d:	ba 45 e0 01 00       	mov    $0x1e045,%edx
   11042:	b8 c0 be 01 00       	mov    $0x1bec0,%eax
   11047:	29 c2                	sub    %eax,%edx
   11049:	89 d0                	mov    %edx,%eax
   1104b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   1104e:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    
    uint32_t first_start = (uint32_t)first_task_entry;
   11055:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    kernel_task_init(&task_manager.first_task,"first_task",first_start,0);
   1105c:	6a 00                	push   $0x0
   1105e:	ff 75 ec             	pushl  -0x14(%ebp)
   11061:	68 8f 31 01 00       	push   $0x1318f
   11066:	68 54 70 01 00       	push   $0x17054
   1106b:	e8 c7 fc ff ff       	call   10d37 <kernel_task_init>
   11070:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.tss_sel);
   11073:	a1 44 72 01 00       	mov    0x17244,%eax
   11078:	0f b7 c0             	movzwl %ax,%eax
   1107b:	83 ec 0c             	sub    $0xc,%esp
   1107e:	50                   	push   %eax
   1107f:	e8 cd fb ff ff       	call   10c51 <write_tr>
   11084:	83 c4 10             	add    $0x10,%esp
    task_manager.current_task = &task_manager.first_task;
   11087:	c7 05 2c 70 01 00 54 	movl   $0x17054,0x1702c
   1108e:	70 01 00 
    mmu_set_page_dir_task(task_manager.current_task);
   11091:	a1 2c 70 01 00       	mov    0x1702c,%eax
   11096:	83 ec 0c             	sub    $0xc,%esp
   11099:	50                   	push   %eax
   1109a:	e8 d6 02 00 00       	call   11375 <mmu_set_page_dir_task>
   1109f:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start,alloc_size,PTE_P | PTE_W | PTE_U);
   110a2:	83 ec 04             	sub    $0x4,%esp
   110a5:	6a 07                	push   $0x7
   110a7:	ff 75 f0             	pushl  -0x10(%ebp)
   110aa:	ff 75 ec             	pushl  -0x14(%ebp)
   110ad:	e8 9f fa ff ff       	call   10b51 <memory_alloc_page_for>
   110b2:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start,s_first_task,copy_size);
   110b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   110b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   110bb:	83 ec 04             	sub    $0x4,%esp
   110be:	52                   	push   %edx
   110bf:	68 c0 be 01 00       	push   $0x1bec0
   110c4:	50                   	push   %eax
   110c5:	e8 fa 18 00 00       	call   129c4 <kernel_memcpy>
   110ca:	83 c4 10             	add    $0x10,%esp

}
   110cd:	90                   	nop
   110ce:	c9                   	leave  
   110cf:	c3                   	ret    

000110d0 <get_from_task>:
task_t * get_from_task()
{
   110d0:	55                   	push   %ebp
   110d1:	89 e5                	mov    %esp,%ebp
    return task_manager.from_task;
   110d3:	a1 24 70 01 00       	mov    0x17024,%eax
}
   110d8:	5d                   	pop    %ebp
   110d9:	c3                   	ret    

000110da <get_to_task>:
task_t * get_to_task()
{
   110da:	55                   	push   %ebp
   110db:	89 e5                	mov    %esp,%ebp
    return task_manager.to_task;
   110dd:	a1 28 70 01 00       	mov    0x17028,%eax
}
   110e2:	5d                   	pop    %ebp
   110e3:	c3                   	ret    

000110e4 <task_is_need_reschedule>:
uint32_t task_is_need_reschedule()
{
   110e4:	55                   	push   %ebp
   110e5:	89 e5                	mov    %esp,%ebp
    return task_manager.need_reschedule;
   110e7:	a1 20 70 01 00       	mov    0x17020,%eax
}
   110ec:	5d                   	pop    %ebp
   110ed:	c3                   	ret    

000110ee <task_first_task>:
task_t * task_first_task()
{
   110ee:	55                   	push   %ebp
   110ef:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   110f1:	b8 54 70 01 00       	mov    $0x17054,%eax
}
   110f6:	5d                   	pop    %ebp
   110f7:	c3                   	ret    

000110f8 <task_set_ready>:

void task_set_ready(task_t *task)
{
   110f8:	55                   	push   %ebp
   110f9:	89 e5                	mov    %esp,%ebp
   110fb:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   110fe:	81 7d 08 18 71 01 00 	cmpl   $0x17118,0x8(%ebp)
   11105:	74 23                	je     1112a <task_set_ready+0x32>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   11107:	8b 45 08             	mov    0x8(%ebp),%eax
   1110a:	83 c0 44             	add    $0x44,%eax
   1110d:	83 ec 08             	sub    $0x8,%esp
   11110:	50                   	push   %eax
   11111:	68 30 70 01 00       	push   $0x17030
   11116:	e8 2f 1d 00 00       	call   12e4a <list_insert_last>
   1111b:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;  
   1111e:	8b 45 08             	mov    0x8(%ebp),%eax
   11121:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
   11128:	eb 01                	jmp    1112b <task_set_ready+0x33>
        return;
   1112a:	90                   	nop
}
   1112b:	c9                   	leave  
   1112c:	c3                   	ret    

0001112d <task_set_block>:

void task_set_block(task_t *task)
{
   1112d:	55                   	push   %ebp
   1112e:	89 e5                	mov    %esp,%ebp
   11130:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   11133:	81 7d 08 18 71 01 00 	cmpl   $0x17118,0x8(%ebp)
   1113a:	74 19                	je     11155 <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   1113c:	8b 45 08             	mov    0x8(%ebp),%eax
   1113f:	83 c0 44             	add    $0x44,%eax
   11142:	83 ec 08             	sub    $0x8,%esp
   11145:	50                   	push   %eax
   11146:	68 30 70 01 00       	push   $0x17030
   1114b:	e8 d5 1d 00 00       	call   12f25 <list_remove>
   11150:	83 c4 10             	add    $0x10,%esp
   11153:	eb 01                	jmp    11156 <task_set_block+0x29>
        return;
   11155:	90                   	nop
}
   11156:	c9                   	leave  
   11157:	c3                   	ret    

00011158 <task_current>:

task_t * task_current()
{
   11158:	55                   	push   %ebp
   11159:	89 e5                	mov    %esp,%ebp
    return task_manager.current_task;
   1115b:	a1 2c 70 01 00       	mov    0x1702c,%eax
}
   11160:	5d                   	pop    %ebp
   11161:	c3                   	ret    

00011162 <sys_sched_yield>:
int sys_sched_yield()
{
   11162:	55                   	push   %ebp
   11163:	89 e5                	mov    %esp,%ebp
   11165:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11168:	e8 7c 10 00 00       	call   121e9 <irq_enter_protection>
   1116d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&task_manager.ready_list) > 1)
   11170:	83 ec 0c             	sub    $0xc,%esp
   11173:	68 30 70 01 00       	push   $0x17030
   11178:	e8 9b fa ff ff       	call   10c18 <list_count>
   1117d:	83 c4 10             	add    $0x10,%esp
   11180:	83 f8 01             	cmp    $0x1,%eax
   11183:	7e 29                	jle    111ae <sys_sched_yield+0x4c>
    {
        task_t * current_task = task_current();
   11185:	e8 ce ff ff ff       	call   11158 <task_current>
   1118a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(current_task);
   1118d:	83 ec 0c             	sub    $0xc,%esp
   11190:	ff 75 f0             	pushl  -0x10(%ebp)
   11193:	e8 95 ff ff ff       	call   1112d <task_set_block>
   11198:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   1119b:	83 ec 0c             	sub    $0xc,%esp
   1119e:	ff 75 f0             	pushl  -0x10(%ebp)
   111a1:	e8 52 ff ff ff       	call   110f8 <task_set_ready>
   111a6:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   111a9:	e8 78 00 00 00       	call   11226 <task_dispatch>
    }
    irq_leave_protection(state);
   111ae:	83 ec 0c             	sub    $0xc,%esp
   111b1:	ff 75 f4             	pushl  -0xc(%ebp)
   111b4:	e8 48 10 00 00       	call   12201 <irq_leave_protection>
   111b9:	83 c4 10             	add    $0x10,%esp
    return 0;
   111bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111c1:	c9                   	leave  
   111c2:	c3                   	ret    

000111c3 <task_next_run>:

task_t * task_next_run()
{
   111c3:	55                   	push   %ebp
   111c4:	89 e5                	mov    %esp,%ebp
   111c6:	83 ec 10             	sub    $0x10,%esp
    if(list_count(&task_manager.ready_list) == 0)
   111c9:	68 30 70 01 00       	push   $0x17030
   111ce:	e8 45 fa ff ff       	call   10c18 <list_count>
   111d3:	83 c4 04             	add    $0x4,%esp
   111d6:	85 c0                	test   %eax,%eax
   111d8:	75 07                	jne    111e1 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   111da:	b8 18 71 01 00       	mov    $0x17118,%eax
   111df:	eb 30                	jmp    11211 <task_next_run+0x4e>
    }
    list_node_t * node = list_first(&task_manager.ready_list);
   111e1:	68 30 70 01 00       	push   $0x17030
   111e6:	e8 38 fa ff ff       	call   10c23 <list_first>
   111eb:	83 c4 04             	add    $0x4,%esp
   111ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(node)
   111f1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   111f5:	74 15                	je     1120c <task_next_run+0x49>
    {
        return list_node_parent(node,task_t,run_node);
   111f7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   111fb:	74 08                	je     11205 <task_next_run+0x42>
   111fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11200:	83 e8 44             	sub    $0x44,%eax
   11203:	eb 0c                	jmp    11211 <task_next_run+0x4e>
   11205:	b8 00 00 00 00       	mov    $0x0,%eax
   1120a:	eb 05                	jmp    11211 <task_next_run+0x4e>
    }
    return (task_t *)0;
   1120c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11211:	c9                   	leave  
   11212:	c3                   	ret    

00011213 <schedule_switch>:

void schedule_switch()
{
   11213:	55                   	push   %ebp
   11214:	89 e5                	mov    %esp,%ebp
   11216:	83 ec 08             	sub    $0x8,%esp
    task_dispatch();
   11219:	e8 08 00 00 00       	call   11226 <task_dispatch>
    //do_schedule_switch();
    schedule_next_task();
   1121e:	e8 a0 02 00 00       	call   114c3 <schedule_next_task>
}
   11223:	90                   	nop
   11224:	c9                   	leave  
   11225:	c3                   	ret    

00011226 <task_dispatch>:
void task_dispatch()
{
   11226:	55                   	push   %ebp
   11227:	89 e5                	mov    %esp,%ebp
   11229:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1122c:	e8 b8 0f 00 00       	call   121e9 <irq_enter_protection>
   11231:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * next_task = task_next_run();
   11234:	e8 8a ff ff ff       	call   111c3 <task_next_run>
   11239:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next_task != task_current())
   1123c:	e8 17 ff ff ff       	call   11158 <task_current>
   11241:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11244:	74 34                	je     1127a <task_dispatch+0x54>
    {
        task_t * from = task_current();
   11246:	e8 0d ff ff ff       	call   11158 <task_current>
   1124b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.current_task = next_task;
   1124e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11251:	a3 2c 70 01 00       	mov    %eax,0x1702c
        next_task->state = TASK_RUNNING;
   11256:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11259:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        task_manager.need_reschedule = TASK_NEED_RESCHEDULE;
   11260:	c7 05 20 70 01 00 01 	movl   $0x1,0x17020
   11267:	00 00 00 
        task_manager.from_task = from;
   1126a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1126d:	a3 24 70 01 00       	mov    %eax,0x17024
        task_manager.to_task = next_task;
   11272:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11275:	a3 28 70 01 00       	mov    %eax,0x17028
    }
    irq_leave_protection(state);
   1127a:	83 ec 0c             	sub    $0xc,%esp
   1127d:	ff 75 f4             	pushl  -0xc(%ebp)
   11280:	e8 7c 0f 00 00       	call   12201 <irq_leave_protection>
   11285:	83 c4 10             	add    $0x10,%esp
}
   11288:	90                   	nop
   11289:	c9                   	leave  
   1128a:	c3                   	ret    

0001128b <task_time_tick>:

void task_time_tick()
{
   1128b:	55                   	push   %ebp
   1128c:	89 e5                	mov    %esp,%ebp
   1128e:	83 ec 18             	sub    $0x18,%esp
    if(task_manager.need_reschedule || task_current() == (task_t *)0 )
   11291:	a1 20 70 01 00       	mov    0x17020,%eax
   11296:	85 c0                	test   %eax,%eax
   11298:	0f 85 d4 00 00 00    	jne    11372 <task_time_tick+0xe7>
   1129e:	e8 b5 fe ff ff       	call   11158 <task_current>
   112a3:	85 c0                	test   %eax,%eax
   112a5:	0f 84 c7 00 00 00    	je     11372 <task_time_tick+0xe7>
    {
        return; 
    }
    list_node_t * curr = list_first(&task_manager.sleep_list);
   112ab:	68 3c 70 01 00       	push   $0x1703c
   112b0:	e8 6e f9 ff ff       	call   10c23 <list_first>
   112b5:	83 c4 04             	add    $0x4,%esp
   112b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   112bb:	eb 5f                	jmp    1131c <task_time_tick+0x91>
    {
        list_node_t * next = list_node_next(curr);
   112bd:	ff 75 f4             	pushl  -0xc(%ebp)
   112c0:	e8 48 f9 ff ff       	call   10c0d <list_node_next>
   112c5:	83 c4 04             	add    $0x4,%esp
   112c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   112cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   112cf:	74 08                	je     112d9 <task_time_tick+0x4e>
   112d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112d4:	83 e8 44             	sub    $0x44,%eax
   112d7:	eb 05                	jmp    112de <task_time_tick+0x53>
   112d9:	b8 00 00 00 00       	mov    $0x0,%eax
   112de:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task->sleep_ticks--;
   112e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112e4:	8b 40 18             	mov    0x18(%eax),%eax
   112e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   112ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112ed:	89 50 18             	mov    %edx,0x18(%eax)
        if(task->sleep_ticks <= 0)
   112f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112f3:	8b 40 18             	mov    0x18(%eax),%eax
   112f6:	85 c0                	test   %eax,%eax
   112f8:	7f 1c                	jg     11316 <task_time_tick+0x8b>
        {
            task_set_wakeup(task);
   112fa:	83 ec 0c             	sub    $0xc,%esp
   112fd:	ff 75 e8             	pushl  -0x18(%ebp)
   11300:	e8 41 01 00 00       	call   11446 <task_set_wakeup>
   11305:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11308:	83 ec 0c             	sub    $0xc,%esp
   1130b:	ff 75 e8             	pushl  -0x18(%ebp)
   1130e:	e8 e5 fd ff ff       	call   110f8 <task_set_ready>
   11313:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11316:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11319:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   1131c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11320:	75 9b                	jne    112bd <task_time_tick+0x32>
    }
    task_t * current_task = task_current();
   11322:	e8 31 fe ff ff       	call   11158 <task_current>
   11327:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current_task->slice_ticks--;
   1132a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1132d:	8b 40 1c             	mov    0x1c(%eax),%eax
   11330:	8d 50 ff             	lea    -0x1(%eax),%edx
   11333:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11336:	89 50 1c             	mov    %edx,0x1c(%eax)
    if(current_task->slice_ticks <= 0)
   11339:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1133c:	8b 40 1c             	mov    0x1c(%eax),%eax
   1133f:	85 c0                	test   %eax,%eax
   11341:	7f 30                	jg     11373 <task_time_tick+0xe8>
    {
        current_task->slice_ticks = current_task->time_ticks;
   11343:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11346:	8b 50 20             	mov    0x20(%eax),%edx
   11349:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1134c:	89 50 1c             	mov    %edx,0x1c(%eax)
        task_set_block(current_task);
   1134f:	83 ec 0c             	sub    $0xc,%esp
   11352:	ff 75 f0             	pushl  -0x10(%ebp)
   11355:	e8 d3 fd ff ff       	call   1112d <task_set_block>
   1135a:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   1135d:	83 ec 0c             	sub    $0xc,%esp
   11360:	ff 75 f0             	pushl  -0x10(%ebp)
   11363:	e8 90 fd ff ff       	call   110f8 <task_set_ready>
   11368:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1136b:	e8 b6 fe ff ff       	call   11226 <task_dispatch>
   11370:	eb 01                	jmp    11373 <task_time_tick+0xe8>
        return; 
   11372:	90                   	nop
    }
}
   11373:	c9                   	leave  
   11374:	c3                   	ret    

00011375 <mmu_set_page_dir_task>:

void mmu_set_page_dir_task(task_t * to_task)
{
   11375:	55                   	push   %ebp
   11376:	89 e5                	mov    %esp,%ebp
   11378:	53                   	push   %ebx
    if(to_task == (task_t *)0)
   11379:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1137d:	74 2a                	je     113a9 <mmu_set_page_dir_task+0x34>
    {
        return;
    }
    if(to_task->tss.cr3 != read_cr3() && to_task->tss.cr3 != 0)
   1137f:	8b 45 08             	mov    0x8(%ebp),%eax
   11382:	8b 58 78             	mov    0x78(%eax),%ebx
   11385:	e8 a3 f8 ff ff       	call   10c2d <read_cr3>
   1138a:	39 c3                	cmp    %eax,%ebx
   1138c:	74 1c                	je     113aa <mmu_set_page_dir_task+0x35>
   1138e:	8b 45 08             	mov    0x8(%ebp),%eax
   11391:	8b 40 78             	mov    0x78(%eax),%eax
   11394:	85 c0                	test   %eax,%eax
   11396:	74 12                	je     113aa <mmu_set_page_dir_task+0x35>
    {
        write_cr3(to_task->tss.cr3);
   11398:	8b 45 08             	mov    0x8(%ebp),%eax
   1139b:	8b 40 78             	mov    0x78(%eax),%eax
   1139e:	50                   	push   %eax
   1139f:	e8 9a f8 ff ff       	call   10c3e <write_cr3>
   113a4:	83 c4 04             	add    $0x4,%esp
   113a7:	eb 01                	jmp    113aa <mmu_set_page_dir_task+0x35>
        return;
   113a9:	90                   	nop
    }
}
   113aa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   113ad:	c9                   	leave  
   113ae:	c3                   	ret    

000113af <do_schedule_switch>:
void do_schedule_switch(void)
{
   113af:	55                   	push   %ebp
   113b0:	89 e5                	mov    %esp,%ebp
   113b2:	83 ec 08             	sub    $0x8,%esp
    if (task_manager.need_reschedule) {
   113b5:	a1 20 70 01 00       	mov    0x17020,%eax
   113ba:	85 c0                	test   %eax,%eax
   113bc:	74 4a                	je     11408 <do_schedule_switch+0x59>
        task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE;
   113be:	c7 05 20 70 01 00 00 	movl   $0x0,0x17020
   113c5:	00 00 00 
        if (task_manager.from_task && task_manager.from_task != task_manager.to_task) {
   113c8:	a1 24 70 01 00       	mov    0x17024,%eax
   113cd:	85 c0                	test   %eax,%eax
   113cf:	74 37                	je     11408 <do_schedule_switch+0x59>
   113d1:	8b 15 24 70 01 00    	mov    0x17024,%edx
   113d7:	a1 28 70 01 00       	mov    0x17028,%eax
   113dc:	39 c2                	cmp    %eax,%edx
   113de:	74 28                	je     11408 <do_schedule_switch+0x59>
            // 在这里进行任务切换
            // 使用简单的栈切换，避免复杂的中断上下文切换
            mmu_set_page_dir_task(task_manager.to_task);
   113e0:	a1 28 70 01 00       	mov    0x17028,%eax
   113e5:	50                   	push   %eax
   113e6:	e8 8a ff ff ff       	call   11375 <mmu_set_page_dir_task>
   113eb:	83 c4 04             	add    $0x4,%esp
            simple_switch(&task_manager.from_task->stack, task_manager.to_task->stack);
   113ee:	a1 28 70 01 00       	mov    0x17028,%eax
   113f3:	8b 00                	mov    (%eax),%eax
   113f5:	8b 15 24 70 01 00    	mov    0x17024,%edx
   113fb:	83 ec 08             	sub    $0x8,%esp
   113fe:	50                   	push   %eax
   113ff:	52                   	push   %edx
   11400:	e8 cd ef ff ff       	call   103d2 <simple_switch>
   11405:	83 c4 10             	add    $0x10,%esp
        }
    }
}
   11408:	90                   	nop
   11409:	c9                   	leave  
   1140a:	c3                   	ret    

0001140b <task_set_sleep>:

void task_set_sleep(task_t *task,uint32_t ticks)
{
   1140b:	55                   	push   %ebp
   1140c:	89 e5                	mov    %esp,%ebp
   1140e:	83 ec 08             	sub    $0x8,%esp
    if(ticks == 0)
   11411:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11415:	74 2c                	je     11443 <task_set_sleep+0x38>
    {
        return;
    }
    task->sleep_ticks = ticks;
   11417:	8b 55 0c             	mov    0xc(%ebp),%edx
   1141a:	8b 45 08             	mov    0x8(%ebp),%eax
   1141d:	89 50 18             	mov    %edx,0x18(%eax)
    task->state = TASK_SLEEP;
   11420:	8b 45 08             	mov    0x8(%ebp),%eax
   11423:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
    list_insert_last(&task_manager.sleep_list,&task->run_node);
   1142a:	8b 45 08             	mov    0x8(%ebp),%eax
   1142d:	83 c0 44             	add    $0x44,%eax
   11430:	83 ec 08             	sub    $0x8,%esp
   11433:	50                   	push   %eax
   11434:	68 3c 70 01 00       	push   $0x1703c
   11439:	e8 0c 1a 00 00       	call   12e4a <list_insert_last>
   1143e:	83 c4 10             	add    $0x10,%esp
   11441:	eb 01                	jmp    11444 <task_set_sleep+0x39>
        return;
   11443:	90                   	nop
}
   11444:	c9                   	leave  
   11445:	c3                   	ret    

00011446 <task_set_wakeup>:

void task_set_wakeup(task_t *task)
{
   11446:	55                   	push   %ebp
   11447:	89 e5                	mov    %esp,%ebp
   11449:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   1144c:	8b 45 08             	mov    0x8(%ebp),%eax
   1144f:	83 c0 44             	add    $0x44,%eax
   11452:	83 ec 08             	sub    $0x8,%esp
   11455:	50                   	push   %eax
   11456:	68 3c 70 01 00       	push   $0x1703c
   1145b:	e8 c5 1a 00 00       	call   12f25 <list_remove>
   11460:	83 c4 10             	add    $0x10,%esp

    //task->state = TASK_READY;
}
   11463:	90                   	nop
   11464:	c9                   	leave  
   11465:	c3                   	ret    

00011466 <sys_sleep>:

void sys_sleep(uint32_t ms)
{
   11466:	55                   	push   %ebp
   11467:	89 e5                	mov    %esp,%ebp
   11469:	53                   	push   %ebx
   1146a:	83 ec 14             	sub    $0x14,%esp
    irq_state_t state = irq_enter_protection();
   1146d:	e8 77 0d 00 00       	call   121e9 <irq_enter_protection>
   11472:	89 45 f4             	mov    %eax,-0xc(%ebp)

    
    task_set_block(task_current());
   11475:	e8 de fc ff ff       	call   11158 <task_current>
   1147a:	83 ec 0c             	sub    $0xc,%esp
   1147d:	50                   	push   %eax
   1147e:	e8 aa fc ff ff       	call   1112d <task_set_block>
   11483:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_current(),(ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   11486:	8b 45 08             	mov    0x8(%ebp),%eax
   11489:	83 c0 31             	add    $0x31,%eax
   1148c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   11491:	f7 e2                	mul    %edx
   11493:	89 d3                	mov    %edx,%ebx
   11495:	c1 eb 04             	shr    $0x4,%ebx
   11498:	e8 bb fc ff ff       	call   11158 <task_current>
   1149d:	83 ec 08             	sub    $0x8,%esp
   114a0:	53                   	push   %ebx
   114a1:	50                   	push   %eax
   114a2:	e8 64 ff ff ff       	call   1140b <task_set_sleep>
   114a7:	83 c4 10             	add    $0x10,%esp

    schedule_switch();
   114aa:	e8 64 fd ff ff       	call   11213 <schedule_switch>
    irq_leave_protection(state);
   114af:	83 ec 0c             	sub    $0xc,%esp
   114b2:	ff 75 f4             	pushl  -0xc(%ebp)
   114b5:	e8 47 0d 00 00       	call   12201 <irq_leave_protection>
   114ba:	83 c4 10             	add    $0x10,%esp
}
   114bd:	90                   	nop
   114be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   114c1:	c9                   	leave  
   114c2:	c3                   	ret    

000114c3 <schedule_next_task>:

void universal_task_switch();
void schedule_next_task() {
   114c3:	55                   	push   %ebp
   114c4:	89 e5                	mov    %esp,%ebp
   114c6:	57                   	push   %edi
   114c7:	56                   	push   %esi
   114c8:	53                   	push   %ebx
   114c9:	83 ec 4c             	sub    $0x4c,%esp
    
        task_t *old =  task_manager.from_task;
   114cc:	a1 24 70 01 00       	mov    0x17024,%eax
   114d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        task_t *next_task = task_manager.to_task;
   114d4:	a1 28 70 01 00       	mov    0x17028,%eax
   114d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (next_task && next_task != old) {
   114dc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   114e0:	0f 84 db 00 00 00    	je     115c1 <schedule_next_task+0xfe>
   114e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
   114e9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
   114ec:	0f 84 cf 00 00 00    	je     115c1 <schedule_next_task+0xfe>
        // 一个函数搞定所有切换！
        universal_task_switch(
   114f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
   114f5:	8b b8 98 00 00 00    	mov    0x98(%eax),%edi
   114fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
   114fe:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   11504:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   11507:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1150a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
   11510:	89 45 d0             	mov    %eax,-0x30(%ebp)
   11513:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11516:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
   1151c:	89 45 cc             	mov    %eax,-0x34(%ebp)
   1151f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11522:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
   11528:	89 45 c8             	mov    %eax,-0x38(%ebp)
   1152b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1152e:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
   11534:	89 45 c4             	mov    %eax,-0x3c(%ebp)
   11537:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1153a:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
   11540:	89 45 c0             	mov    %eax,-0x40(%ebp)
   11543:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11546:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
   1154c:	89 45 bc             	mov    %eax,-0x44(%ebp)
   1154f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11552:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
   11558:	89 45 b8             	mov    %eax,-0x48(%ebp)
   1155b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1155e:	8b 80 80 00 00 00    	mov    0x80(%eax),%eax
   11564:	89 45 b4             	mov    %eax,-0x4c(%ebp)
   11567:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1156a:	8b 70 7c             	mov    0x7c(%eax),%esi
   1156d:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11570:	8b 98 a8 00 00 00    	mov    0xa8(%eax),%ebx
   11576:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11579:	8b 48 78             	mov    0x78(%eax),%ecx
            old ? &old->tss : (void *)0,               // 保存当前任务的TSS指针
            next_task->task_type,                       // 任务类型 (0=内核, 1=用户)
   1157c:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1157f:	8b 50 08             	mov    0x8(%eax),%edx
        universal_task_switch(
   11582:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11586:	74 08                	je     11590 <schedule_next_task+0xcd>
   11588:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1158b:	83 c0 5c             	add    $0x5c,%eax
   1158e:	eb 05                	jmp    11595 <schedule_next_task+0xd2>
   11590:	b8 00 00 00 00       	mov    $0x0,%eax
   11595:	83 ec 04             	sub    $0x4,%esp
   11598:	57                   	push   %edi
   11599:	ff 75 d4             	pushl  -0x2c(%ebp)
   1159c:	ff 75 d0             	pushl  -0x30(%ebp)
   1159f:	ff 75 cc             	pushl  -0x34(%ebp)
   115a2:	ff 75 c8             	pushl  -0x38(%ebp)
   115a5:	ff 75 c4             	pushl  -0x3c(%ebp)
   115a8:	ff 75 c0             	pushl  -0x40(%ebp)
   115ab:	ff 75 bc             	pushl  -0x44(%ebp)
   115ae:	ff 75 b8             	pushl  -0x48(%ebp)
   115b1:	ff 75 b4             	pushl  -0x4c(%ebp)
   115b4:	56                   	push   %esi
   115b5:	53                   	push   %ebx
   115b6:	51                   	push   %ecx
   115b7:	52                   	push   %edx
   115b8:	50                   	push   %eax
   115b9:	e8 2b ee ff ff       	call   103e9 <universal_task_switch>
   115be:	83 c4 40             	add    $0x40,%esp
            next_task->tss.esi,                         // 新任务ESI寄存器
            next_task->tss.edi,                         // 新任务EDI寄存器
            next_task->tss.ebp                          // 新任务EBP寄存器
        );
    }
}
   115c1:	90                   	nop
   115c2:	8d 65 f4             	lea    -0xc(%ebp),%esp
   115c5:	5b                   	pop    %ebx
   115c6:	5e                   	pop    %esi
   115c7:	5f                   	pop    %edi
   115c8:	5d                   	pop    %ebp
   115c9:	c3                   	ret    

000115ca <lgdt>:
{
   115ca:	55                   	push   %ebp
   115cb:	89 e5                	mov    %esp,%ebp
   115cd:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   115d0:	8b 45 08             	mov    0x8(%ebp),%eax
   115d3:	c1 e8 10             	shr    $0x10,%eax
   115d6:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   115da:	8b 45 08             	mov    0x8(%ebp),%eax
   115dd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   115e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   115e4:	83 e8 01             	sub    $0x1,%eax
   115e7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   115eb:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   115ef:	90                   	nop
   115f0:	c9                   	leave  
   115f1:	c3                   	ret    

000115f2 <far_jump>:
{
   115f2:	55                   	push   %ebp
   115f3:	89 e5                	mov    %esp,%ebp
   115f5:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset ,selector};
   115f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   115fb:	89 45 f8             	mov    %eax,-0x8(%ebp)
   115fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11601:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11604:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11607:	ff 28                	ljmp   *(%eax)
}
   11609:	90                   	nop
   1160a:	c9                   	leave  
   1160b:	c3                   	ret    

0001160c <show_base>:
#include "ipc/mutex.h"
static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t gdt_mutex;

void show_base (int index)
{
   1160c:	55                   	push   %ebp
   1160d:	89 e5                	mov    %esp,%ebp
   1160f:	83 ec 18             	sub    $0x18,%esp
    segment_desc_t *desc = &gdt_table[index];  
   11612:	8b 45 08             	mov    0x8(%ebp),%eax
   11615:	c1 e0 03             	shl    $0x3,%eax
   11618:	05 60 92 01 00       	add    $0x19260,%eax
   1161d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t base = desc->base15_0 | (desc->base23_16 << 16) | (desc->base31_24 << 24);
   11620:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11623:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   11627:	0f b7 d0             	movzwl %ax,%edx
   1162a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1162d:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   11631:	0f b6 c0             	movzbl %al,%eax
   11634:	c1 e0 10             	shl    $0x10,%eax
   11637:	09 c2                	or     %eax,%edx
   11639:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1163c:	0f b6 40 07          	movzbl 0x7(%eax),%eax
   11640:	0f b6 c0             	movzbl %al,%eax
   11643:	c1 e0 18             	shl    $0x18,%eax
   11646:	09 d0                	or     %edx,%eax
   11648:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("GDT[%d] base=%x\n", index, base);
   1164b:	83 ec 04             	sub    $0x4,%esp
   1164e:	ff 75 f0             	pushl  -0x10(%ebp)
   11651:	ff 75 08             	pushl  0x8(%ebp)
   11654:	68 9a 31 01 00       	push   $0x1319a
   11659:	e8 24 1a 00 00       	call   13082 <log_printf>
   1165e:	83 c4 10             	add    $0x10,%esp
}
   11661:	90                   	nop
   11662:	c9                   	leave  
   11663:	c3                   	ret    

00011664 <segment_desc_set>:
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   11664:	55                   	push   %ebp
   11665:	89 e5                	mov    %esp,%ebp
   11667:	83 ec 14             	sub    $0x14,%esp
   1166a:	8b 45 14             	mov    0x14(%ebp),%eax
   1166d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   11671:	8b 45 08             	mov    0x8(%ebp),%eax
   11674:	83 e0 f8             	and    $0xfffffff8,%eax
   11677:	05 60 92 01 00       	add    $0x19260,%eax
   1167c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(limit > 0xfffff)
   1167f:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11686:	76 0f                	jbe    11697 <segment_desc_set+0x33>
    {
        limit /= 0x1000;
   11688:	8b 45 10             	mov    0x10(%ebp),%eax
   1168b:	c1 e8 0c             	shr    $0xc,%eax
   1168e:	89 45 10             	mov    %eax,0x10(%ebp)
        attr |= SEG_G;
   11691:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   11697:	8b 45 10             	mov    0x10(%ebp),%eax
   1169a:	89 c2                	mov    %eax,%edx
   1169c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1169f:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   116a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   116a5:	89 c2                	mov    %eax,%edx
   116a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116aa:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   116ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   116b1:	c1 e8 10             	shr    $0x10,%eax
   116b4:	89 c2                	mov    %eax,%edx
   116b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116b9:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0x0f) << 8);
   116bc:	8b 45 10             	mov    0x10(%ebp),%eax
   116bf:	c1 e8 10             	shr    $0x10,%eax
   116c2:	c1 e0 08             	shl    $0x8,%eax
   116c5:	66 25 00 0f          	and    $0xf00,%ax
   116c9:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   116cd:	89 c2                	mov    %eax,%edx
   116cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116d2:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   116d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d9:	c1 e8 18             	shr    $0x18,%eax
   116dc:	89 c2                	mov    %eax,%edx
   116de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116e1:	88 50 07             	mov    %dl,0x7(%eax)
}
   116e4:	90                   	nop
   116e5:	c9                   	leave  
   116e6:	c3                   	ret    

000116e7 <gate_desc_set>:
void gate_desc_set(gate_desc_t * gate_desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   116e7:	55                   	push   %ebp
   116e8:	89 e5                	mov    %esp,%ebp
   116ea:	83 ec 08             	sub    $0x8,%esp
   116ed:	8b 55 0c             	mov    0xc(%ebp),%edx
   116f0:	8b 45 14             	mov    0x14(%ebp),%eax
   116f3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   116f7:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    gate_desc->selector = selector;
   116fb:	8b 45 08             	mov    0x8(%ebp),%eax
   116fe:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11702:	66 89 50 02          	mov    %dx,0x2(%eax)
    gate_desc->offset15_0 = offset & 0xffff;
   11706:	8b 45 10             	mov    0x10(%ebp),%eax
   11709:	89 c2                	mov    %eax,%edx
   1170b:	8b 45 08             	mov    0x8(%ebp),%eax
   1170e:	66 89 10             	mov    %dx,(%eax)
    gate_desc->offset31_16 = (offset >> 16) & 0xffff;
   11711:	8b 45 10             	mov    0x10(%ebp),%eax
   11714:	c1 e8 10             	shr    $0x10,%eax
   11717:	89 c2                	mov    %eax,%edx
   11719:	8b 45 08             	mov    0x8(%ebp),%eax
   1171c:	66 89 50 06          	mov    %dx,0x6(%eax)
    gate_desc->attr = attr;
   11720:	8b 45 08             	mov    0x8(%ebp),%eax
   11723:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11727:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   1172b:	90                   	nop
   1172c:	c9                   	leave  
   1172d:	c3                   	ret    

0001172e <gdt_alloc_desc>:

int gdt_alloc_desc(void)
{
   1172e:	55                   	push   %ebp
   1172f:	89 e5                	mov    %esp,%ebp
   11731:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11734:	e8 b0 0a 00 00       	call   121e9 <irq_enter_protection>
   11739:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //mutex_lock(&gdt_mutex);
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1173c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11743:	eb 2a                	jmp    1176f <gdt_alloc_desc+0x41>
    {
        if(gdt_table[i].attr == 0)
   11745:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11748:	0f b7 04 c5 65 92 01 	movzwl 0x19265(,%eax,8),%eax
   1174f:	00 
   11750:	66 85 c0             	test   %ax,%ax
   11753:	75 16                	jne    1176b <gdt_alloc_desc+0x3d>
        {
            //mutex_unlock(&gdt_mutex);
            irq_leave_protection(state);
   11755:	83 ec 0c             	sub    $0xc,%esp
   11758:	ff 75 f0             	pushl  -0x10(%ebp)
   1175b:	e8 a1 0a 00 00       	call   12201 <irq_leave_protection>
   11760:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   11763:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11766:	c1 e0 03             	shl    $0x3,%eax
   11769:	eb 20                	jmp    1178b <gdt_alloc_desc+0x5d>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1176b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1176f:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11776:	7e cd                	jle    11745 <gdt_alloc_desc+0x17>
        }
        
    }
    //mutex_unlock(&gdt_mutex);
    irq_leave_protection(state);
   11778:	83 ec 0c             	sub    $0xc,%esp
   1177b:	ff 75 f0             	pushl  -0x10(%ebp)
   1177e:	e8 7e 0a 00 00       	call   12201 <irq_leave_protection>
   11783:	83 c4 10             	add    $0x10,%esp
    return -1;
   11786:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1178b:	c9                   	leave  
   1178c:	c3                   	ret    

0001178d <gdt_free_desc>:

void gdt_free_desc(int selector)
{
   1178d:	55                   	push   %ebp
   1178e:	89 e5                	mov    %esp,%ebp
   11790:	83 ec 18             	sub    $0x18,%esp
    //mutex_lock(&gdt_mutex);
    irq_state_t state = irq_enter_protection();
   11793:	e8 51 0a 00 00       	call   121e9 <irq_enter_protection>
   11798:	89 45 f4             	mov    %eax,-0xc(%ebp)
    gdt_table[selector / sizeof(segment_desc_t)].attr = 0;
   1179b:	8b 45 08             	mov    0x8(%ebp),%eax
   1179e:	c1 e8 03             	shr    $0x3,%eax
   117a1:	66 c7 04 c5 65 92 01 	movw   $0x0,0x19265(,%eax,8)
   117a8:	00 00 00 
    //mutex_unlock(&gdt_mutex);
    irq_leave_protection(state);
   117ab:	83 ec 0c             	sub    $0xc,%esp
   117ae:	ff 75 f4             	pushl  -0xc(%ebp)
   117b1:	e8 4b 0a 00 00       	call   12201 <irq_leave_protection>
   117b6:	83 c4 10             	add    $0x10,%esp
}
   117b9:	90                   	nop
   117ba:	c9                   	leave  
   117bb:	c3                   	ret    

000117bc <init_gdt>:
void init_gdt(void)
{
   117bc:	55                   	push   %ebp
   117bd:	89 e5                	mov    %esp,%ebp
   117bf:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   117c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   117c9:	eb 19                	jmp    117e4 <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   117cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117ce:	c1 e0 03             	shl    $0x3,%eax
   117d1:	6a 00                	push   $0x0
   117d3:	6a 00                	push   $0x0
   117d5:	6a 00                	push   $0x0
   117d7:	50                   	push   %eax
   117d8:	e8 87 fe ff ff       	call   11664 <segment_desc_set>
   117dd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   117e0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   117e4:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   117eb:	7e de                	jle    117cb <init_gdt+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   117ed:	68 9a 40 00 00       	push   $0x409a
   117f2:	6a ff                	push   $0xffffffff
   117f4:	6a 00                	push   $0x0
   117f6:	6a 08                	push   $0x8
   117f8:	e8 67 fe ff ff       	call   11664 <segment_desc_set>
   117fd:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   11800:	68 92 40 00 00       	push   $0x4092
   11805:	6a ff                	push   $0xffffffff
   11807:	6a 00                	push   $0x0
   11809:	6a 10                	push   $0x10
   1180b:	e8 54 fe ff ff       	call   11664 <segment_desc_set>
   11810:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11813:	b8 60 92 01 00       	mov    $0x19260,%eax
   11818:	68 00 08 00 00       	push   $0x800
   1181d:	50                   	push   %eax
   1181e:	e8 a7 fd ff ff       	call   115ca <lgdt>
   11823:	83 c4 08             	add    $0x8,%esp
}
   11826:	90                   	nop
   11827:	c9                   	leave  
   11828:	c3                   	ret    

00011829 <cpu_init>:

void cpu_init(void)
{
   11829:	55                   	push   %ebp
   1182a:	89 e5                	mov    %esp,%ebp
   1182c:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&gdt_mutex);
   1182f:	83 ec 0c             	sub    $0xc,%esp
   11832:	68 60 9a 01 00       	push   $0x19a60
   11837:	e8 2c 0b 00 00       	call   12368 <mutex_init>
   1183c:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   1183f:	e8 78 ff ff ff       	call   117bc <init_gdt>
    
}
   11844:	90                   	nop
   11845:	c9                   	leave  
   11846:	c3                   	ret    

00011847 <switch_to_tss>:

void switch_to_tss (int tss_sel)
{
   11847:	55                   	push   %ebp
   11848:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   1184a:	8b 45 08             	mov    0x8(%ebp),%eax
   1184d:	6a 00                	push   $0x0
   1184f:	50                   	push   %eax
   11850:	e8 9d fd ff ff       	call   115f2 <far_jump>
   11855:	83 c4 08             	add    $0x8,%esp
   11858:	90                   	nop
   11859:	c9                   	leave  
   1185a:	c3                   	ret    

0001185b <inb>:
{
   1185b:	55                   	push   %ebp
   1185c:	89 e5                	mov    %esp,%ebp
   1185e:	83 ec 14             	sub    $0x14,%esp
   11861:	8b 45 08             	mov    0x8(%ebp),%eax
   11864:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   11868:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1186c:	89 c2                	mov    %eax,%edx
   1186e:	ec                   	in     (%dx),%al
   1186f:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11872:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11876:	c9                   	leave  
   11877:	c3                   	ret    

00011878 <outb>:
{
   11878:	55                   	push   %ebp
   11879:	89 e5                	mov    %esp,%ebp
   1187b:	83 ec 08             	sub    $0x8,%esp
   1187e:	8b 55 08             	mov    0x8(%ebp),%edx
   11881:	8b 45 0c             	mov    0xc(%ebp),%eax
   11884:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11888:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   1188b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1188f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11893:	ee                   	out    %al,(%dx)
}
   11894:	90                   	nop
   11895:	c9                   	leave  
   11896:	c3                   	ret    

00011897 <cli>:
{
   11897:	55                   	push   %ebp
   11898:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   1189a:	fa                   	cli    
}
   1189b:	90                   	nop
   1189c:	5d                   	pop    %ebp
   1189d:	c3                   	ret    

0001189e <sti>:
{
   1189e:	55                   	push   %ebp
   1189f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   118a1:	fb                   	sti    
}
   118a2:	90                   	nop
   118a3:	5d                   	pop    %ebp
   118a4:	c3                   	ret    

000118a5 <lidt>:
{
   118a5:	55                   	push   %ebp
   118a6:	89 e5                	mov    %esp,%ebp
   118a8:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   118ab:	8b 45 08             	mov    0x8(%ebp),%eax
   118ae:	c1 e8 10             	shr    $0x10,%eax
   118b1:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   118b5:	8b 45 08             	mov    0x8(%ebp),%eax
   118b8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   118bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   118bf:	83 e8 01             	sub    $0x1,%eax
   118c2:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[i]"::[i]"m"(idt));
   118c6:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   118ca:	90                   	nop
   118cb:	c9                   	leave  
   118cc:	c3                   	ret    

000118cd <read_cr2>:
{
   118cd:	55                   	push   %ebp
   118ce:	89 e5                	mov    %esp,%ebp
   118d0:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   118d3:	0f 20 d0             	mov    %cr2,%eax
   118d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr2;
   118d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   118dc:	c9                   	leave  
   118dd:	c3                   	ret    

000118de <hlt>:
{
   118de:	55                   	push   %ebp
   118df:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   118e1:	f4                   	hlt    
}
   118e2:	90                   	nop
   118e3:	5d                   	pop    %ebp
   118e4:	c3                   	ret    

000118e5 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   118e5:	55                   	push   %ebp
   118e6:	89 e5                	mov    %esp,%ebp
   118e8:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   118eb:	9c                   	pushf  
   118ec:	58                   	pop    %eax
   118ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   118f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   118f3:	c9                   	leave  
   118f4:	c3                   	ret    

000118f5 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   118f5:	55                   	push   %ebp
   118f6:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   118f8:	8b 45 08             	mov    0x8(%ebp),%eax
   118fb:	50                   	push   %eax
   118fc:	9d                   	popf   
}
   118fd:	90                   	nop
   118fe:	5d                   	pop    %ebp
   118ff:	c3                   	ret    

00011900 <dump_core_regs>:
#include "os_cfg.h"
#include "tools/log.h"
#define IRQ_TABLE_NU 128
static gate_desc_t idt_table[IRQ_TABLE_NU];
static dump_core_regs(exception_frame_t *frame)
{
   11900:	55                   	push   %ebp
   11901:	89 e5                	mov    %esp,%ebp
   11903:	56                   	push   %esi
   11904:	53                   	push   %ebx
   11905:	83 ec 10             	sub    $0x10,%esp
    uint32_t ss,esp;
    if(frame->cs & 0x3)
   11908:	8b 45 08             	mov    0x8(%ebp),%eax
   1190b:	8b 40 3c             	mov    0x3c(%eax),%eax
   1190e:	83 e0 03             	and    $0x3,%eax
   11911:	85 c0                	test   %eax,%eax
   11913:	74 14                	je     11929 <dump_core_regs+0x29>
    {
        ss = frame->ss3;
   11915:	8b 45 08             	mov    0x8(%ebp),%eax
   11918:	8b 40 48             	mov    0x48(%eax),%eax
   1191b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        esp = frame->esp3;
   1191e:	8b 45 08             	mov    0x8(%ebp),%eax
   11921:	8b 40 44             	mov    0x44(%eax),%eax
   11924:	89 45 f0             	mov    %eax,-0x10(%ebp)
   11927:	eb 12                	jmp    1193b <dump_core_regs+0x3b>
    }
    else
    {
        ss = frame->ds;
   11929:	8b 45 08             	mov    0x8(%ebp),%eax
   1192c:	8b 40 0c             	mov    0xc(%eax),%eax
   1192f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        esp = frame->esp;
   11932:	8b 45 08             	mov    0x8(%ebp),%eax
   11935:	8b 40 1c             	mov    0x1c(%eax),%eax
   11938:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    log_printf("IRQ: %d, error code: %d\n",frame->irq_num,frame->error_code);
   1193b:	8b 45 08             	mov    0x8(%ebp),%eax
   1193e:	8b 50 34             	mov    0x34(%eax),%edx
   11941:	8b 45 08             	mov    0x8(%ebp),%eax
   11944:	8b 40 30             	mov    0x30(%eax),%eax
   11947:	83 ec 04             	sub    $0x4,%esp
   1194a:	52                   	push   %edx
   1194b:	50                   	push   %eax
   1194c:	68 ac 31 01 00       	push   $0x131ac
   11951:	e8 2c 17 00 00       	call   13082 <log_printf>
   11956:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %x DS: %x ES: %x SS: %x FS: %x GS: %x\n",frame->cs,frame->ds,frame->es,ss,frame->fs,frame->gs);
   11959:	8b 45 08             	mov    0x8(%ebp),%eax
   1195c:	8b 30                	mov    (%eax),%esi
   1195e:	8b 45 08             	mov    0x8(%ebp),%eax
   11961:	8b 58 04             	mov    0x4(%eax),%ebx
   11964:	8b 45 08             	mov    0x8(%ebp),%eax
   11967:	8b 48 08             	mov    0x8(%eax),%ecx
   1196a:	8b 45 08             	mov    0x8(%ebp),%eax
   1196d:	8b 50 0c             	mov    0xc(%eax),%edx
   11970:	8b 45 08             	mov    0x8(%ebp),%eax
   11973:	8b 40 3c             	mov    0x3c(%eax),%eax
   11976:	83 ec 04             	sub    $0x4,%esp
   11979:	56                   	push   %esi
   1197a:	53                   	push   %ebx
   1197b:	ff 75 f4             	pushl  -0xc(%ebp)
   1197e:	51                   	push   %ecx
   1197f:	52                   	push   %edx
   11980:	50                   	push   %eax
   11981:	68 c8 31 01 00       	push   $0x131c8
   11986:	e8 f7 16 00 00       	call   13082 <log_printf>
   1198b:	83 c4 20             	add    $0x20,%esp
    log_printf("EAX: 0x%x EBX: 0x%x ECX: 0x%x EDX: 0x%x\n",frame->eax,frame->ebx,frame->ecx,frame->edx);
   1198e:	8b 45 08             	mov    0x8(%ebp),%eax
   11991:	8b 58 24             	mov    0x24(%eax),%ebx
   11994:	8b 45 08             	mov    0x8(%ebp),%eax
   11997:	8b 48 28             	mov    0x28(%eax),%ecx
   1199a:	8b 45 08             	mov    0x8(%ebp),%eax
   1199d:	8b 50 20             	mov    0x20(%eax),%edx
   119a0:	8b 45 08             	mov    0x8(%ebp),%eax
   119a3:	8b 40 2c             	mov    0x2c(%eax),%eax
   119a6:	83 ec 0c             	sub    $0xc,%esp
   119a9:	53                   	push   %ebx
   119aa:	51                   	push   %ecx
   119ab:	52                   	push   %edx
   119ac:	50                   	push   %eax
   119ad:	68 f4 31 01 00       	push   $0x131f4
   119b2:	e8 cb 16 00 00       	call   13082 <log_printf>
   119b7:	83 c4 20             	add    $0x20,%esp
    log_printf("EIP: 0x%x EFLAGS: 0x%x ESP: 0x%x EBP: 0x%x\n",frame->eip,frame->eflags,esp,frame->ebp);
   119ba:	8b 45 08             	mov    0x8(%ebp),%eax
   119bd:	8b 48 18             	mov    0x18(%eax),%ecx
   119c0:	8b 45 08             	mov    0x8(%ebp),%eax
   119c3:	8b 50 40             	mov    0x40(%eax),%edx
   119c6:	8b 45 08             	mov    0x8(%ebp),%eax
   119c9:	8b 40 38             	mov    0x38(%eax),%eax
   119cc:	83 ec 0c             	sub    $0xc,%esp
   119cf:	51                   	push   %ecx
   119d0:	ff 75 f0             	pushl  -0x10(%ebp)
   119d3:	52                   	push   %edx
   119d4:	50                   	push   %eax
   119d5:	68 20 32 01 00       	push   $0x13220
   119da:	e8 a3 16 00 00       	call   13082 <log_printf>
   119df:	83 c4 20             	add    $0x20,%esp
    log_printf("EDI: 0x%x ESI: 0x%x EDI: 0x%x\n",frame->edi,frame->esi,frame->edi);
   119e2:	8b 45 08             	mov    0x8(%ebp),%eax
   119e5:	8b 48 10             	mov    0x10(%eax),%ecx
   119e8:	8b 45 08             	mov    0x8(%ebp),%eax
   119eb:	8b 50 14             	mov    0x14(%eax),%edx
   119ee:	8b 45 08             	mov    0x8(%ebp),%eax
   119f1:	8b 40 10             	mov    0x10(%eax),%eax
   119f4:	51                   	push   %ecx
   119f5:	52                   	push   %edx
   119f6:	50                   	push   %eax
   119f7:	68 4c 32 01 00       	push   $0x1324c
   119fc:	e8 81 16 00 00       	call   13082 <log_printf>
   11a01:	83 c4 10             	add    $0x10,%esp
}
   11a04:	90                   	nop
   11a05:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11a08:	5b                   	pop    %ebx
   11a09:	5e                   	pop    %esi
   11a0a:	5d                   	pop    %ebp
   11a0b:	c3                   	ret    

00011a0c <do_default_handler>:
static void do_default_handler(exception_frame_t *frame,const char *message)
{
   11a0c:	55                   	push   %ebp
   11a0d:	89 e5                	mov    %esp,%ebp
   11a0f:	83 ec 08             	sub    $0x8,%esp
    log_printf("---------------------\n");
   11a12:	83 ec 0c             	sub    $0xc,%esp
   11a15:	68 6b 32 01 00       	push   $0x1326b
   11a1a:	e8 63 16 00 00       	call   13082 <log_printf>
   11a1f:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s\n",message);
   11a22:	83 ec 08             	sub    $0x8,%esp
   11a25:	ff 75 0c             	pushl  0xc(%ebp)
   11a28:	68 82 32 01 00       	push   $0x13282
   11a2d:	e8 50 16 00 00       	call   13082 <log_printf>
   11a32:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   11a35:	83 ec 0c             	sub    $0xc,%esp
   11a38:	ff 75 08             	pushl  0x8(%ebp)
   11a3b:	e8 c0 fe ff ff       	call   11900 <dump_core_regs>
   11a40:	83 c4 10             	add    $0x10,%esp
    for(;;)
    {
        hlt();
   11a43:	e8 96 fe ff ff       	call   118de <hlt>
   11a48:	eb f9                	jmp    11a43 <do_default_handler+0x37>

00011a4a <do_handler_unknown>:
    }
}
void do_handler_unknown(exception_frame_t *frame)
{
   11a4a:	55                   	push   %ebp
   11a4b:	89 e5                	mov    %esp,%ebp
   11a4d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"unknown exception");
   11a50:	83 ec 08             	sub    $0x8,%esp
   11a53:	68 9d 32 01 00       	push   $0x1329d
   11a58:	ff 75 08             	pushl  0x8(%ebp)
   11a5b:	e8 ac ff ff ff       	call   11a0c <do_default_handler>
   11a60:	83 c4 10             	add    $0x10,%esp
}
   11a63:	90                   	nop
   11a64:	c9                   	leave  
   11a65:	c3                   	ret    

00011a66 <do_handler_divider>:
void do_handler_divider(exception_frame_t *frame)
{
   11a66:	55                   	push   %ebp
   11a67:	89 e5                	mov    %esp,%ebp
   11a69:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"divider exception");
   11a6c:	83 ec 08             	sub    $0x8,%esp
   11a6f:	68 af 32 01 00       	push   $0x132af
   11a74:	ff 75 08             	pushl  0x8(%ebp)
   11a77:	e8 90 ff ff ff       	call   11a0c <do_default_handler>
   11a7c:	83 c4 10             	add    $0x10,%esp
}
   11a7f:	90                   	nop
   11a80:	c9                   	leave  
   11a81:	c3                   	ret    

00011a82 <do_handler_debug>:
void do_handler_debug(exception_frame_t *frame)
{
   11a82:	55                   	push   %ebp
   11a83:	89 e5                	mov    %esp,%ebp
   11a85:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"debug exception");
   11a88:	83 ec 08             	sub    $0x8,%esp
   11a8b:	68 c1 32 01 00       	push   $0x132c1
   11a90:	ff 75 08             	pushl  0x8(%ebp)
   11a93:	e8 74 ff ff ff       	call   11a0c <do_default_handler>
   11a98:	83 c4 10             	add    $0x10,%esp
}
   11a9b:	90                   	nop
   11a9c:	c9                   	leave  
   11a9d:	c3                   	ret    

00011a9e <do_handler_nmi>:
void do_handler_nmi(exception_frame_t *frame)   
{
   11a9e:	55                   	push   %ebp
   11a9f:	89 e5                	mov    %esp,%ebp
   11aa1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"nmi exception");
   11aa4:	83 ec 08             	sub    $0x8,%esp
   11aa7:	68 d1 32 01 00       	push   $0x132d1
   11aac:	ff 75 08             	pushl  0x8(%ebp)
   11aaf:	e8 58 ff ff ff       	call   11a0c <do_default_handler>
   11ab4:	83 c4 10             	add    $0x10,%esp
}
   11ab7:	90                   	nop
   11ab8:	c9                   	leave  
   11ab9:	c3                   	ret    

00011aba <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t *frame)
{
   11aba:	55                   	push   %ebp
   11abb:	89 e5                	mov    %esp,%ebp
   11abd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"breakpoint exception");
   11ac0:	83 ec 08             	sub    $0x8,%esp
   11ac3:	68 df 32 01 00       	push   $0x132df
   11ac8:	ff 75 08             	pushl  0x8(%ebp)
   11acb:	e8 3c ff ff ff       	call   11a0c <do_default_handler>
   11ad0:	83 c4 10             	add    $0x10,%esp
}
   11ad3:	90                   	nop
   11ad4:	c9                   	leave  
   11ad5:	c3                   	ret    

00011ad6 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   11ad6:	55                   	push   %ebp
   11ad7:	89 e5                	mov    %esp,%ebp
   11ad9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"overflow exception");
   11adc:	83 ec 08             	sub    $0x8,%esp
   11adf:	68 f4 32 01 00       	push   $0x132f4
   11ae4:	ff 75 08             	pushl  0x8(%ebp)
   11ae7:	e8 20 ff ff ff       	call   11a0c <do_default_handler>
   11aec:	83 c4 10             	add    $0x10,%esp
}
   11aef:	90                   	nop
   11af0:	c9                   	leave  
   11af1:	c3                   	ret    

00011af2 <do_handler_bounds>:
void do_handler_bounds(exception_frame_t *frame)
{
   11af2:	55                   	push   %ebp
   11af3:	89 e5                	mov    %esp,%ebp
   11af5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"bounds exception");
   11af8:	83 ec 08             	sub    $0x8,%esp
   11afb:	68 07 33 01 00       	push   $0x13307
   11b00:	ff 75 08             	pushl  0x8(%ebp)
   11b03:	e8 04 ff ff ff       	call   11a0c <do_default_handler>
   11b08:	83 c4 10             	add    $0x10,%esp
}
   11b0b:	90                   	nop
   11b0c:	c9                   	leave  
   11b0d:	c3                   	ret    

00011b0e <do_handler_invalid_op>:
void do_handler_invalid_op(exception_frame_t *frame)
{
   11b0e:	55                   	push   %ebp
   11b0f:	89 e5                	mov    %esp,%ebp
   11b11:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid operation exception");
   11b14:	83 ec 08             	sub    $0x8,%esp
   11b17:	68 18 33 01 00       	push   $0x13318
   11b1c:	ff 75 08             	pushl  0x8(%ebp)
   11b1f:	e8 e8 fe ff ff       	call   11a0c <do_default_handler>
   11b24:	83 c4 10             	add    $0x10,%esp
}
   11b27:	90                   	nop
   11b28:	c9                   	leave  
   11b29:	c3                   	ret    

00011b2a <do_handler_device_not_available>:
void do_handler_device_not_available(exception_frame_t *frame)
{
   11b2a:	55                   	push   %ebp
   11b2b:	89 e5                	mov    %esp,%ebp
   11b2d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"device not available exception");
   11b30:	83 ec 08             	sub    $0x8,%esp
   11b33:	68 34 33 01 00       	push   $0x13334
   11b38:	ff 75 08             	pushl  0x8(%ebp)
   11b3b:	e8 cc fe ff ff       	call   11a0c <do_default_handler>
   11b40:	83 c4 10             	add    $0x10,%esp
}
   11b43:	90                   	nop
   11b44:	c9                   	leave  
   11b45:	c3                   	ret    

00011b46 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   11b46:	55                   	push   %ebp
   11b47:	89 e5                	mov    %esp,%ebp
   11b49:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"double fault exception");
   11b4c:	83 ec 08             	sub    $0x8,%esp
   11b4f:	68 53 33 01 00       	push   $0x13353
   11b54:	ff 75 08             	pushl  0x8(%ebp)
   11b57:	e8 b0 fe ff ff       	call   11a0c <do_default_handler>
   11b5c:	83 c4 10             	add    $0x10,%esp
}
   11b5f:	90                   	nop
   11b60:	c9                   	leave  
   11b61:	c3                   	ret    

00011b62 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   11b62:	55                   	push   %ebp
   11b63:	89 e5                	mov    %esp,%ebp
   11b65:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid tss exception");
   11b68:	83 ec 08             	sub    $0x8,%esp
   11b6b:	68 6a 33 01 00       	push   $0x1336a
   11b70:	ff 75 08             	pushl  0x8(%ebp)
   11b73:	e8 94 fe ff ff       	call   11a0c <do_default_handler>
   11b78:	83 c4 10             	add    $0x10,%esp
}
   11b7b:	90                   	nop
   11b7c:	c9                   	leave  
   11b7d:	c3                   	ret    

00011b7e <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   11b7e:	55                   	push   %ebp
   11b7f:	89 e5                	mov    %esp,%ebp
   11b81:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"segment not present exception");
   11b84:	83 ec 08             	sub    $0x8,%esp
   11b87:	68 80 33 01 00       	push   $0x13380
   11b8c:	ff 75 08             	pushl  0x8(%ebp)
   11b8f:	e8 78 fe ff ff       	call   11a0c <do_default_handler>
   11b94:	83 c4 10             	add    $0x10,%esp
}
   11b97:	90                   	nop
   11b98:	c9                   	leave  
   11b99:	c3                   	ret    

00011b9a <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   11b9a:	55                   	push   %ebp
   11b9b:	89 e5                	mov    %esp,%ebp
   11b9d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"stack segment fault exception");
   11ba0:	83 ec 08             	sub    $0x8,%esp
   11ba3:	68 9e 33 01 00       	push   $0x1339e
   11ba8:	ff 75 08             	pushl  0x8(%ebp)
   11bab:	e8 5c fe ff ff       	call   11a0c <do_default_handler>
   11bb0:	83 c4 10             	add    $0x10,%esp
}
   11bb3:	90                   	nop
   11bb4:	c9                   	leave  
   11bb5:	c3                   	ret    

00011bb6 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   11bb6:	55                   	push   %ebp
   11bb7:	89 e5                	mov    %esp,%ebp
   11bb9:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11bbc:	83 ec 0c             	sub    $0xc,%esp
   11bbf:	68 bc 33 01 00       	push   $0x133bc
   11bc4:	e8 b9 14 00 00       	call   13082 <log_printf>
   11bc9:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happened: General Protection.");
   11bcc:	83 ec 0c             	sub    $0xc,%esp
   11bcf:	68 e0 33 01 00       	push   $0x133e0
   11bd4:	e8 a9 14 00 00       	call   13082 <log_printf>
   11bd9:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_GP_EXT) {
   11bdc:	8b 45 08             	mov    0x8(%ebp),%eax
   11bdf:	8b 40 34             	mov    0x34(%eax),%eax
   11be2:	83 e0 01             	and    $0x1,%eax
   11be5:	85 c0                	test   %eax,%eax
   11be7:	74 12                	je     11bfb <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   11be9:	83 ec 0c             	sub    $0xc,%esp
   11bec:	68 0c 34 01 00       	push   $0x1340c
   11bf1:	e8 8c 14 00 00       	call   13082 <log_printf>
   11bf6:	83 c4 10             	add    $0x10,%esp
   11bf9:	eb 10                	jmp    11c0b <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   11bfb:	83 ec 0c             	sub    $0xc,%esp
   11bfe:	68 88 34 01 00       	push   $0x13488
   11c03:	e8 7a 14 00 00       	call   13082 <log_printf>
   11c08:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_GP_IDT) {
   11c0b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c0e:	8b 40 34             	mov    0x34(%eax),%eax
   11c11:	83 e0 02             	and    $0x2,%eax
   11c14:	85 c0                	test   %eax,%eax
   11c16:	74 12                	je     11c2a <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   11c18:	83 ec 0c             	sub    $0xc,%esp
   11c1b:	68 e0 34 01 00       	push   $0x134e0
   11c20:	e8 5d 14 00 00       	call   13082 <log_printf>
   11c25:	83 c4 10             	add    $0x10,%esp
   11c28:	eb 10                	jmp    11c3a <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   11c2a:	83 ec 0c             	sub    $0xc,%esp
   11c2d:	68 2c 35 01 00       	push   $0x1352c
   11c32:	e8 4b 14 00 00       	call   13082 <log_printf>
   11c37:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   11c3a:	8b 45 08             	mov    0x8(%ebp),%eax
   11c3d:	8b 40 34             	mov    0x34(%eax),%eax
   11c40:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11c45:	83 ec 08             	sub    $0x8,%esp
   11c48:	50                   	push   %eax
   11c49:	68 58 35 01 00       	push   $0x13558
   11c4e:	e8 2f 14 00 00       	call   13082 <log_printf>
   11c53:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   11c56:	83 ec 0c             	sub    $0xc,%esp
   11c59:	ff 75 08             	pushl  0x8(%ebp)
   11c5c:	e8 9f fc ff ff       	call   11900 <dump_core_regs>
   11c61:	83 c4 10             	add    $0x10,%esp
    while(1)
    {
        hlt();
   11c64:	e8 75 fc ff ff       	call   118de <hlt>
   11c69:	eb f9                	jmp    11c64 <do_handler_general_protection+0xae>

00011c6b <do_handler_page_fault>:
    }
}
void do_handler_page_fault(exception_frame_t *frame)
{
   11c6b:	55                   	push   %ebp
   11c6c:	89 e5                	mov    %esp,%ebp
   11c6e:	83 ec 08             	sub    $0x8,%esp
    log_printf("---------------------\n");
   11c71:	83 ec 0c             	sub    $0xc,%esp
   11c74:	68 6b 32 01 00       	push   $0x1326b
   11c79:	e8 04 14 00 00       	call   13082 <log_printf>
   11c7e:	83 c4 10             	add    $0x10,%esp
    log_printf("page fault exception\n");
   11c81:	83 ec 0c             	sub    $0xc,%esp
   11c84:	68 6a 35 01 00       	push   $0x1356a
   11c89:	e8 f4 13 00 00       	call   13082 <log_printf>
   11c8e:	83 c4 10             	add    $0x10,%esp
    if(frame->error_code & ERR_PAGE_P)
   11c91:	8b 45 08             	mov    0x8(%ebp),%eax
   11c94:	8b 40 34             	mov    0x34(%eax),%eax
   11c97:	83 e0 01             	and    $0x1,%eax
   11c9a:	85 c0                	test   %eax,%eax
   11c9c:	74 18                	je     11cb6 <do_handler_page_fault+0x4b>
    {
        log_printf("page fault exception: page level protection: 0x%x\n",read_cr2());
   11c9e:	e8 2a fc ff ff       	call   118cd <read_cr2>
   11ca3:	83 ec 08             	sub    $0x8,%esp
   11ca6:	50                   	push   %eax
   11ca7:	68 80 35 01 00       	push   $0x13580
   11cac:	e8 d1 13 00 00       	call   13082 <log_printf>
   11cb1:	83 c4 10             	add    $0x10,%esp
   11cb4:	eb 16                	jmp    11ccc <do_handler_page_fault+0x61>
    }
    else
    {
        log_printf("page fault exception: page not present: 0x%x\n",read_cr2());
   11cb6:	e8 12 fc ff ff       	call   118cd <read_cr2>
   11cbb:	83 ec 08             	sub    $0x8,%esp
   11cbe:	50                   	push   %eax
   11cbf:	68 b4 35 01 00       	push   $0x135b4
   11cc4:	e8 b9 13 00 00       	call   13082 <log_printf>
   11cc9:	83 c4 10             	add    $0x10,%esp
    }
    if(frame->error_code & ERR_PAGE_WR)
   11ccc:	8b 45 08             	mov    0x8(%ebp),%eax
   11ccf:	8b 40 34             	mov    0x34(%eax),%eax
   11cd2:	83 e0 02             	and    $0x2,%eax
   11cd5:	85 c0                	test   %eax,%eax
   11cd7:	74 18                	je     11cf1 <do_handler_page_fault+0x86>
    {
        log_printf("page fault exception: write access :0x%x\n",read_cr2());
   11cd9:	e8 ef fb ff ff       	call   118cd <read_cr2>
   11cde:	83 ec 08             	sub    $0x8,%esp
   11ce1:	50                   	push   %eax
   11ce2:	68 e4 35 01 00       	push   $0x135e4
   11ce7:	e8 96 13 00 00       	call   13082 <log_printf>
   11cec:	83 c4 10             	add    $0x10,%esp
   11cef:	eb 16                	jmp    11d07 <do_handler_page_fault+0x9c>
    }
    else
    {
        log_printf("page fault exception: read access :0x%x\n",read_cr2());
   11cf1:	e8 d7 fb ff ff       	call   118cd <read_cr2>
   11cf6:	83 ec 08             	sub    $0x8,%esp
   11cf9:	50                   	push   %eax
   11cfa:	68 10 36 01 00       	push   $0x13610
   11cff:	e8 7e 13 00 00       	call   13082 <log_printf>
   11d04:	83 c4 10             	add    $0x10,%esp
    }
    if(frame->error_code & ERR_PAGE_US)
   11d07:	8b 45 08             	mov    0x8(%ebp),%eax
   11d0a:	8b 40 34             	mov    0x34(%eax),%eax
   11d0d:	83 e0 04             	and    $0x4,%eax
   11d10:	85 c0                	test   %eax,%eax
   11d12:	74 18                	je     11d2c <do_handler_page_fault+0xc1>
    {
        log_printf("page fault exception: user access :0x%x\n",read_cr2());
   11d14:	e8 b4 fb ff ff       	call   118cd <read_cr2>
   11d19:	83 ec 08             	sub    $0x8,%esp
   11d1c:	50                   	push   %eax
   11d1d:	68 3c 36 01 00       	push   $0x1363c
   11d22:	e8 5b 13 00 00       	call   13082 <log_printf>
   11d27:	83 c4 10             	add    $0x10,%esp
   11d2a:	eb 16                	jmp    11d42 <do_handler_page_fault+0xd7>
    }
    else
    {
        log_printf("page fault exception: supervisor access :0x%x\n",read_cr2());
   11d2c:	e8 9c fb ff ff       	call   118cd <read_cr2>
   11d31:	83 ec 08             	sub    $0x8,%esp
   11d34:	50                   	push   %eax
   11d35:	68 68 36 01 00       	push   $0x13668
   11d3a:	e8 43 13 00 00       	call   13082 <log_printf>
   11d3f:	83 c4 10             	add    $0x10,%esp
    }
    dump_core_regs(frame);
   11d42:	83 ec 0c             	sub    $0xc,%esp
   11d45:	ff 75 08             	pushl  0x8(%ebp)
   11d48:	e8 b3 fb ff ff       	call   11900 <dump_core_regs>
   11d4d:	83 c4 10             	add    $0x10,%esp
    while(1)
    {
        hlt();
   11d50:	e8 89 fb ff ff       	call   118de <hlt>
   11d55:	eb f9                	jmp    11d50 <do_handler_page_fault+0xe5>

00011d57 <do_handler_x87_floating_point>:
    }
}
void do_handler_x87_floating_point(exception_frame_t *frame)
{   
   11d57:	55                   	push   %ebp
   11d58:	89 e5                	mov    %esp,%ebp
   11d5a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"x87 floating point exception");
   11d5d:	83 ec 08             	sub    $0x8,%esp
   11d60:	68 97 36 01 00       	push   $0x13697
   11d65:	ff 75 08             	pushl  0x8(%ebp)
   11d68:	e8 9f fc ff ff       	call   11a0c <do_default_handler>
   11d6d:	83 c4 10             	add    $0x10,%esp
}
   11d70:	90                   	nop
   11d71:	c9                   	leave  
   11d72:	c3                   	ret    

00011d73 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   11d73:	55                   	push   %ebp
   11d74:	89 e5                	mov    %esp,%ebp
   11d76:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"alignment check exception");
   11d79:	83 ec 08             	sub    $0x8,%esp
   11d7c:	68 b4 36 01 00       	push   $0x136b4
   11d81:	ff 75 08             	pushl  0x8(%ebp)
   11d84:	e8 83 fc ff ff       	call   11a0c <do_default_handler>
   11d89:	83 c4 10             	add    $0x10,%esp
}
   11d8c:	90                   	nop
   11d8d:	c9                   	leave  
   11d8e:	c3                   	ret    

00011d8f <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   11d8f:	55                   	push   %ebp
   11d90:	89 e5                	mov    %esp,%ebp
   11d92:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"machine check exception");
   11d95:	83 ec 08             	sub    $0x8,%esp
   11d98:	68 ce 36 01 00       	push   $0x136ce
   11d9d:	ff 75 08             	pushl  0x8(%ebp)
   11da0:	e8 67 fc ff ff       	call   11a0c <do_default_handler>
   11da5:	83 c4 10             	add    $0x10,%esp
}
   11da8:	90                   	nop
   11da9:	c9                   	leave  
   11daa:	c3                   	ret    

00011dab <do_handler_simd_floating_point>:
void do_handler_simd_floating_point(exception_frame_t *frame)
{
   11dab:	55                   	push   %ebp
   11dac:	89 e5                	mov    %esp,%ebp
   11dae:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"simd floating point exception");
   11db1:	83 ec 08             	sub    $0x8,%esp
   11db4:	68 e6 36 01 00       	push   $0x136e6
   11db9:	ff 75 08             	pushl  0x8(%ebp)
   11dbc:	e8 4b fc ff ff       	call   11a0c <do_default_handler>
   11dc1:	83 c4 10             	add    $0x10,%esp
}
   11dc4:	90                   	nop
   11dc5:	c9                   	leave  
   11dc6:	c3                   	ret    

00011dc7 <do_handler_virtualization>:
void do_handler_virtualization(exception_frame_t *frame)
{
   11dc7:	55                   	push   %ebp
   11dc8:	89 e5                	mov    %esp,%ebp
   11dca:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"virtualization exception");
   11dcd:	83 ec 08             	sub    $0x8,%esp
   11dd0:	68 04 37 01 00       	push   $0x13704
   11dd5:	ff 75 08             	pushl  0x8(%ebp)
   11dd8:	e8 2f fc ff ff       	call   11a0c <do_default_handler>
   11ddd:	83 c4 10             	add    $0x10,%esp
}
   11de0:	90                   	nop
   11de1:	c9                   	leave  
   11de2:	c3                   	ret    

00011de3 <do_handler_security>:
void do_handler_security(exception_frame_t *frame)
{
   11de3:	55                   	push   %ebp
   11de4:	89 e5                	mov    %esp,%ebp
   11de6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"security exception");
   11de9:	83 ec 08             	sub    $0x8,%esp
   11dec:	68 1d 37 01 00       	push   $0x1371d
   11df1:	ff 75 08             	pushl  0x8(%ebp)
   11df4:	e8 13 fc ff ff       	call   11a0c <do_default_handler>
   11df9:	83 c4 10             	add    $0x10,%esp
}
   11dfc:	90                   	nop
   11dfd:	c9                   	leave  
   11dfe:	c3                   	ret    

00011dff <init_pic>:

static void init_pic(void)
{
   11dff:	55                   	push   %ebp
   11e00:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11e02:	6a 11                	push   $0x11
   11e04:	6a 20                	push   $0x20
   11e06:	e8 6d fa ff ff       	call   11878 <outb>
   11e0b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2,IRQ_PIC_START);
   11e0e:	6a 20                	push   $0x20
   11e10:	6a 21                	push   $0x21
   11e12:	e8 61 fa ff ff       	call   11878 <outb>
   11e17:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3,1 << IRQ2_NMI);
   11e1a:	6a 04                	push   $0x4
   11e1c:	6a 21                	push   $0x21
   11e1e:	e8 55 fa ff ff       	call   11878 <outb>
   11e23:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4,PIC_ICW4_8086);
   11e26:	6a 01                	push   $0x1
   11e28:	6a 21                	push   $0x21
   11e2a:	e8 49 fa ff ff       	call   11878 <outb>
   11e2f:	83 c4 08             	add    $0x8,%esp


    outb(PIC1_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11e32:	6a 11                	push   $0x11
   11e34:	68 a0 00 00 00       	push   $0xa0
   11e39:	e8 3a fa ff ff       	call   11878 <outb>
   11e3e:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2,IRQ_PIC_START + 8);
   11e41:	6a 28                	push   $0x28
   11e43:	68 a1 00 00 00       	push   $0xa1
   11e48:	e8 2b fa ff ff       	call   11878 <outb>
   11e4d:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3,2);
   11e50:	6a 02                	push   $0x2
   11e52:	68 a1 00 00 00       	push   $0xa1
   11e57:	e8 1c fa ff ff       	call   11878 <outb>
   11e5c:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4,PIC_ICW4_8086);
   11e5f:	6a 01                	push   $0x1
   11e61:	68 a1 00 00 00       	push   $0xa1
   11e66:	e8 0d fa ff ff       	call   11878 <outb>
   11e6b:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR,0xff & ~ (1 << 2));
   11e6e:	68 fb 00 00 00       	push   $0xfb
   11e73:	6a 21                	push   $0x21
   11e75:	e8 fe f9 ff ff       	call   11878 <outb>
   11e7a:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR,0xff);
   11e7d:	68 ff 00 00 00       	push   $0xff
   11e82:	68 a1 00 00 00       	push   $0xa1
   11e87:	e8 ec f9 ff ff       	call   11878 <outb>
   11e8c:	83 c4 08             	add    $0x8,%esp
}
   11e8f:	90                   	nop
   11e90:	c9                   	leave  
   11e91:	c3                   	ret    

00011e92 <irq_init>:

void irq_init(void)
{
   11e92:	55                   	push   %ebp
   11e93:	89 e5                	mov    %esp,%ebp
   11e95:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   11e98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11e9f:	eb 25                	jmp    11ec6 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   11ea1:	ba 84 00 01 00       	mov    $0x10084,%edx
   11ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ea9:	c1 e0 03             	shl    $0x3,%eax
   11eac:	05 80 9a 01 00       	add    $0x19a80,%eax
   11eb1:	68 00 8e 00 00       	push   $0x8e00
   11eb6:	52                   	push   %edx
   11eb7:	6a 08                	push   $0x8
   11eb9:	50                   	push   %eax
   11eba:	e8 28 f8 ff ff       	call   116e7 <gate_desc_set>
   11ebf:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   11ec2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11ec6:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11eca:	7e d5                	jle    11ea1 <irq_init+0xf>
        GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    }
    //irq_install(IRQ0_DE,do_handler_divider); 用这个的话能进入do_handler_divider 但是跳不到.S的地方出栈
    irq_install(IRQ0_DE,exception_handler_divider);
   11ecc:	83 ec 08             	sub    $0x8,%esp
   11ecf:	68 af 00 01 00       	push   $0x100af
   11ed4:	6a 00                	push   $0x0
   11ed6:	e8 77 01 00 00       	call   12052 <irq_install>
   11edb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB,exception_handler_debug);
   11ede:	83 ec 08             	sub    $0x8,%esp
   11ee1:	68 da 00 01 00       	push   $0x100da
   11ee6:	6a 01                	push   $0x1
   11ee8:	e8 65 01 00 00       	call   12052 <irq_install>
   11eed:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI,exception_handler_nmi);
   11ef0:	83 ec 08             	sub    $0x8,%esp
   11ef3:	68 05 01 01 00       	push   $0x10105
   11ef8:	6a 02                	push   $0x2
   11efa:	e8 53 01 00 00       	call   12052 <irq_install>
   11eff:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP,exception_handler_breakpoint);
   11f02:	83 ec 08             	sub    $0x8,%esp
   11f05:	68 30 01 01 00       	push   $0x10130
   11f0a:	6a 03                	push   $0x3
   11f0c:	e8 41 01 00 00       	call   12052 <irq_install>
   11f11:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF,exception_handler_overflow);
   11f14:	83 ec 08             	sub    $0x8,%esp
   11f17:	68 5b 01 01 00       	push   $0x1015b
   11f1c:	6a 04                	push   $0x4
   11f1e:	e8 2f 01 00 00       	call   12052 <irq_install>
   11f23:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR,exception_handler_bounds);
   11f26:	83 ec 08             	sub    $0x8,%esp
   11f29:	68 86 01 01 00       	push   $0x10186
   11f2e:	6a 05                	push   $0x5
   11f30:	e8 1d 01 00 00       	call   12052 <irq_install>
   11f35:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD,exception_handler_invalid_op);
   11f38:	83 ec 08             	sub    $0x8,%esp
   11f3b:	68 b1 01 01 00       	push   $0x101b1
   11f40:	6a 06                	push   $0x6
   11f42:	e8 0b 01 00 00       	call   12052 <irq_install>
   11f47:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM,exception_handler_device_not_available);
   11f4a:	83 ec 08             	sub    $0x8,%esp
   11f4d:	68 dc 01 01 00       	push   $0x101dc
   11f52:	6a 07                	push   $0x7
   11f54:	e8 f9 00 00 00       	call   12052 <irq_install>
   11f59:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF,exception_handler_double_fault);
   11f5c:	83 ec 08             	sub    $0x8,%esp
   11f5f:	68 07 02 01 00       	push   $0x10207
   11f64:	6a 08                	push   $0x8
   11f66:	e8 e7 00 00 00       	call   12052 <irq_install>
   11f6b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS,exception_handler_invalid_tss);
   11f6e:	83 ec 08             	sub    $0x8,%esp
   11f71:	68 30 02 01 00       	push   $0x10230
   11f76:	6a 0a                	push   $0xa
   11f78:	e8 d5 00 00 00       	call   12052 <irq_install>
   11f7d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP,exception_handler_segment_not_present);
   11f80:	83 ec 08             	sub    $0x8,%esp
   11f83:	68 59 02 01 00       	push   $0x10259
   11f88:	6a 0b                	push   $0xb
   11f8a:	e8 c3 00 00 00       	call   12052 <irq_install>
   11f8f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS,exception_handler_stack_segment_fault);
   11f92:	83 ec 08             	sub    $0x8,%esp
   11f95:	68 82 02 01 00       	push   $0x10282
   11f9a:	6a 0c                	push   $0xc
   11f9c:	e8 b1 00 00 00       	call   12052 <irq_install>
   11fa1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP,exception_handler_general_protection);
   11fa4:	83 ec 08             	sub    $0x8,%esp
   11fa7:	68 ab 02 01 00       	push   $0x102ab
   11fac:	6a 0d                	push   $0xd
   11fae:	e8 9f 00 00 00       	call   12052 <irq_install>
   11fb3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF,exception_handler_page_fault);
   11fb6:	83 ec 08             	sub    $0x8,%esp
   11fb9:	68 5b 00 01 00       	push   $0x1005b
   11fbe:	6a 0e                	push   $0xe
   11fc0:	e8 8d 00 00 00       	call   12052 <irq_install>
   11fc5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF,exception_handler_x87_floating_point);
   11fc8:	83 ec 08             	sub    $0x8,%esp
   11fcb:	68 d4 02 01 00       	push   $0x102d4
   11fd0:	6a 10                	push   $0x10
   11fd2:	e8 7b 00 00 00       	call   12052 <irq_install>
   11fd7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC,exception_handler_alignment_check);
   11fda:	83 ec 08             	sub    $0x8,%esp
   11fdd:	68 ff 02 01 00       	push   $0x102ff
   11fe2:	6a 11                	push   $0x11
   11fe4:	e8 69 00 00 00       	call   12052 <irq_install>
   11fe9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC,exception_handler_machine_check);
   11fec:	83 ec 08             	sub    $0x8,%esp
   11fef:	68 28 03 01 00       	push   $0x10328
   11ff4:	6a 12                	push   $0x12
   11ff6:	e8 57 00 00 00       	call   12052 <irq_install>
   11ffb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM,exception_handler_simd_floating_point);
   11ffe:	83 ec 08             	sub    $0x8,%esp
   12001:	68 53 03 01 00       	push   $0x10353
   12006:	6a 13                	push   $0x13
   12008:	e8 45 00 00 00       	call   12052 <irq_install>
   1200d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE,exception_handler_virtualization);
   12010:	83 ec 08             	sub    $0x8,%esp
   12013:	68 7e 03 01 00       	push   $0x1037e
   12018:	6a 14                	push   $0x14
   1201a:	e8 33 00 00 00       	call   12052 <irq_install>
   1201f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP,exception_handler_security);
   12022:	83 ec 08             	sub    $0x8,%esp
   12025:	68 a9 03 01 00       	push   $0x103a9
   1202a:	6a 15                	push   $0x15
   1202c:	e8 21 00 00 00       	call   12052 <irq_install>
   12031:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   12034:	b8 80 9a 01 00       	mov    $0x19a80,%eax
   12039:	83 ec 08             	sub    $0x8,%esp
   1203c:	68 00 04 00 00       	push   $0x400
   12041:	50                   	push   %eax
   12042:	e8 5e f8 ff ff       	call   118a5 <lidt>
   12047:	83 c4 10             	add    $0x10,%esp

    init_pic();
   1204a:	e8 b0 fd ff ff       	call   11dff <init_pic>
}
   1204f:	90                   	nop
   12050:	c9                   	leave  
   12051:	c3                   	ret    

00012052 <irq_install>:

int irq_install(int irq_num,irq_handler_t handler)
{
   12052:	55                   	push   %ebp
   12053:	89 e5                	mov    %esp,%ebp
   12055:	83 ec 08             	sub    $0x8,%esp
    if(irq_num < 0 || irq_num >= IRQ_TABLE_NU)
   12058:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1205c:	78 06                	js     12064 <irq_install+0x12>
   1205e:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12062:	7e 07                	jle    1206b <irq_install+0x19>
    {
        return -1;
   12064:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12069:	eb 25                	jmp    12090 <irq_install+0x3e>
    }
    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   1206b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1206e:	8b 55 08             	mov    0x8(%ebp),%edx
   12071:	c1 e2 03             	shl    $0x3,%edx
   12074:	81 c2 80 9a 01 00    	add    $0x19a80,%edx
   1207a:	68 00 8e 00 00       	push   $0x8e00
   1207f:	50                   	push   %eax
   12080:	6a 08                	push   $0x8
   12082:	52                   	push   %edx
   12083:	e8 5f f6 ff ff       	call   116e7 <gate_desc_set>
   12088:	83 c4 10             	add    $0x10,%esp
    GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    return 0;
   1208b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12090:	c9                   	leave  
   12091:	c3                   	ret    

00012092 <irq_enable>:

void irq_enable(int irq_num)
{
   12092:	55                   	push   %ebp
   12093:	89 e5                	mov    %esp,%ebp
   12095:	53                   	push   %ebx
   12096:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   12099:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1209d:	7e 78                	jle    12117 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   1209f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   120a3:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   120a7:	7f 32                	jg     120db <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   120a9:	6a 21                	push   $0x21
   120ab:	e8 ab f7 ff ff       	call   1185b <inb>
   120b0:	83 c4 04             	add    $0x4,%esp
   120b3:	89 c2                	mov    %eax,%edx
   120b5:	8b 45 08             	mov    0x8(%ebp),%eax
   120b8:	bb 01 00 00 00       	mov    $0x1,%ebx
   120bd:	89 c1                	mov    %eax,%ecx
   120bf:	d3 e3                	shl    %cl,%ebx
   120c1:	89 d8                	mov    %ebx,%eax
   120c3:	f7 d0                	not    %eax
   120c5:	21 d0                	and    %edx,%eax
   120c7:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   120ca:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   120ce:	50                   	push   %eax
   120cf:	6a 21                	push   $0x21
   120d1:	e8 a2 f7 ff ff       	call   11878 <outb>
   120d6:	83 c4 08             	add    $0x8,%esp
   120d9:	eb 3d                	jmp    12118 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   120db:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num));
   120df:	68 a1 00 00 00       	push   $0xa1
   120e4:	e8 72 f7 ff ff       	call   1185b <inb>
   120e9:	83 c4 04             	add    $0x4,%esp
   120ec:	89 c2                	mov    %eax,%edx
   120ee:	8b 45 08             	mov    0x8(%ebp),%eax
   120f1:	bb 01 00 00 00       	mov    $0x1,%ebx
   120f6:	89 c1                	mov    %eax,%ecx
   120f8:	d3 e3                	shl    %cl,%ebx
   120fa:	89 d8                	mov    %ebx,%eax
   120fc:	f7 d0                	not    %eax
   120fe:	21 d0                	and    %edx,%eax
   12100:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   12103:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12107:	50                   	push   %eax
   12108:	68 a1 00 00 00       	push   $0xa1
   1210d:	e8 66 f7 ff ff       	call   11878 <outb>
   12112:	83 c4 08             	add    $0x8,%esp
   12115:	eb 01                	jmp    12118 <irq_enable+0x86>
        return;
   12117:	90                   	nop
    }
}
   12118:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1211b:	c9                   	leave  
   1211c:	c3                   	ret    

0001211d <irq_disable>:

void irq_disable(int irq_num)
{
   1211d:	55                   	push   %ebp
   1211e:	89 e5                	mov    %esp,%ebp
   12120:	53                   	push   %ebx
   12121:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   12124:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12128:	7e 78                	jle    121a2 <irq_disable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   1212a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   1212e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12132:	7f 32                	jg     12166 <irq_disable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) | ~(1 << irq_num);
   12134:	6a 21                	push   $0x21
   12136:	e8 20 f7 ff ff       	call   1185b <inb>
   1213b:	83 c4 04             	add    $0x4,%esp
   1213e:	89 c3                	mov    %eax,%ebx
   12140:	8b 45 08             	mov    0x8(%ebp),%eax
   12143:	ba 01 00 00 00       	mov    $0x1,%edx
   12148:	89 c1                	mov    %eax,%ecx
   1214a:	d3 e2                	shl    %cl,%edx
   1214c:	89 d0                	mov    %edx,%eax
   1214e:	f7 d0                	not    %eax
   12150:	09 d8                	or     %ebx,%eax
   12152:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   12155:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12159:	50                   	push   %eax
   1215a:	6a 21                	push   $0x21
   1215c:	e8 17 f7 ff ff       	call   11878 <outb>
   12161:	83 c4 08             	add    $0x8,%esp
   12164:	eb 3d                	jmp    121a3 <irq_disable+0x86>
    }
    else
    {
        irq_num -= 8;
   12166:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | ~(1 << (irq_num));
   1216a:	68 a1 00 00 00       	push   $0xa1
   1216f:	e8 e7 f6 ff ff       	call   1185b <inb>
   12174:	83 c4 04             	add    $0x4,%esp
   12177:	89 c3                	mov    %eax,%ebx
   12179:	8b 45 08             	mov    0x8(%ebp),%eax
   1217c:	ba 01 00 00 00       	mov    $0x1,%edx
   12181:	89 c1                	mov    %eax,%ecx
   12183:	d3 e2                	shl    %cl,%edx
   12185:	89 d0                	mov    %edx,%eax
   12187:	f7 d0                	not    %eax
   12189:	09 d8                	or     %ebx,%eax
   1218b:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   1218e:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12192:	50                   	push   %eax
   12193:	68 a1 00 00 00       	push   $0xa1
   12198:	e8 db f6 ff ff       	call   11878 <outb>
   1219d:	83 c4 08             	add    $0x8,%esp
   121a0:	eb 01                	jmp    121a3 <irq_disable+0x86>
        return;
   121a2:	90                   	nop
    }
}
   121a3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   121a6:	c9                   	leave  
   121a7:	c3                   	ret    

000121a8 <irq_disable_global>:
void irq_disable_global(void)
{
   121a8:	55                   	push   %ebp
   121a9:	89 e5                	mov    %esp,%ebp
    cli();
   121ab:	e8 e7 f6 ff ff       	call   11897 <cli>
}
   121b0:	90                   	nop
   121b1:	5d                   	pop    %ebp
   121b2:	c3                   	ret    

000121b3 <irq_enable_global>:

void irq_enable_global(void)
{
   121b3:	55                   	push   %ebp
   121b4:	89 e5                	mov    %esp,%ebp
    sti();
   121b6:	e8 e3 f6 ff ff       	call   1189e <sti>
}
   121bb:	90                   	nop
   121bc:	5d                   	pop    %ebp
   121bd:	c3                   	ret    

000121be <pic_send_eoi>:
void pic_send_eoi(int irq_num)
{
   121be:	55                   	push   %ebp
   121bf:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   121c1:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num >= 8)
   121c5:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   121c9:	7e 0f                	jle    121da <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   121cb:	6a 20                	push   $0x20
   121cd:	68 a0 00 00 00       	push   $0xa0
   121d2:	e8 a1 f6 ff ff       	call   11878 <outb>
   121d7:	83 c4 08             	add    $0x8,%esp
    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   121da:	6a 20                	push   $0x20
   121dc:	6a 20                	push   $0x20
   121de:	e8 95 f6 ff ff       	call   11878 <outb>
   121e3:	83 c4 08             	add    $0x8,%esp
}
   121e6:	90                   	nop
   121e7:	c9                   	leave  
   121e8:	c3                   	ret    

000121e9 <irq_enter_protection>:

irq_state_t irq_enter_protection(void)
{
   121e9:	55                   	push   %ebp
   121ea:	89 e5                	mov    %esp,%ebp
   121ec:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   121ef:	e8 f1 f6 ff ff       	call   118e5 <read_eflags>
   121f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   121f7:	e8 ac ff ff ff       	call   121a8 <irq_disable_global>
    return state;
   121fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   121ff:	c9                   	leave  
   12200:	c3                   	ret    

00012201 <irq_leave_protection>:

void irq_leave_protection(irq_state_t state)
{
   12201:	55                   	push   %ebp
   12202:	89 e5                	mov    %esp,%ebp
    
    write_eflags(state);
   12204:	ff 75 08             	pushl  0x8(%ebp)
   12207:	e8 e9 f6 ff ff       	call   118f5 <write_eflags>
   1220c:	83 c4 04             	add    $0x4,%esp
}
   1220f:	90                   	nop
   12210:	c9                   	leave  
   12211:	c3                   	ret    

00012212 <outb>:
{
   12212:	55                   	push   %ebp
   12213:	89 e5                	mov    %esp,%ebp
   12215:	83 ec 08             	sub    $0x8,%esp
   12218:	8b 55 08             	mov    0x8(%ebp),%edx
   1221b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1221e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12222:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   12225:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12229:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1222d:	ee                   	out    %al,(%dx)
}
   1222e:	90                   	nop
   1222f:	c9                   	leave  
   12230:	c3                   	ret    

00012231 <do_handler_time>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
void do_handler_time(exception_frame_t *frame)
{
   12231:	55                   	push   %ebp
   12232:	89 e5                	mov    %esp,%ebp
   12234:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   12237:	a1 80 9e 01 00       	mov    0x19e80,%eax
   1223c:	83 c0 01             	add    $0x1,%eax
   1223f:	a3 80 9e 01 00       	mov    %eax,0x19e80
    pic_send_eoi(IRQ0_TIMER);
   12244:	83 ec 0c             	sub    $0xc,%esp
   12247:	6a 20                	push   $0x20
   12249:	e8 70 ff ff ff       	call   121be <pic_send_eoi>
   1224e:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   12251:	e8 35 f0 ff ff       	call   1128b <task_time_tick>

    
}
   12256:	90                   	nop
   12257:	c9                   	leave  
   12258:	c3                   	ret    

00012259 <init_pit>:
static void init_pit(void)
{
   12259:	55                   	push   %ebp
   1225a:	89 e5                	mov    %esp,%ebp
   1225c:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = (PIT_OSC_FREQ * OS_TICK_MS )/ 1000.0;
   1225f:	c7 45 f4 0b e9 00 00 	movl   $0xe90b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT,PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   12266:	6a 36                	push   $0x36
   12268:	6a 43                	push   $0x43
   1226a:	e8 a3 ff ff ff       	call   12212 <outb>
   1226f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,reload_count & 0xff);
   12272:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12275:	0f b6 c0             	movzbl %al,%eax
   12278:	50                   	push   %eax
   12279:	6a 40                	push   $0x40
   1227b:	e8 92 ff ff ff       	call   12212 <outb>
   12280:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,(reload_count >> 8) & 0xff);
   12283:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12286:	c1 e8 08             	shr    $0x8,%eax
   12289:	0f b6 c0             	movzbl %al,%eax
   1228c:	50                   	push   %eax
   1228d:	6a 40                	push   $0x40
   1228f:	e8 7e ff ff ff       	call   12212 <outb>
   12294:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER,exception_handler_time);
   12297:	83 ec 08             	sub    $0x8,%esp
   1229a:	68 2b 00 01 00       	push   $0x1002b
   1229f:	6a 20                	push   $0x20
   122a1:	e8 ac fd ff ff       	call   12052 <irq_install>
   122a6:	83 c4 10             	add    $0x10,%esp

    irq_enable(IRQ0_TIMER);
   122a9:	83 ec 0c             	sub    $0xc,%esp
   122ac:	6a 20                	push   $0x20
   122ae:	e8 df fd ff ff       	call   12092 <irq_enable>
   122b3:	83 c4 10             	add    $0x10,%esp
}
   122b6:	90                   	nop
   122b7:	c9                   	leave  
   122b8:	c3                   	ret    

000122b9 <time_init>:
void time_init(void)
{
   122b9:	55                   	push   %ebp
   122ba:	89 e5                	mov    %esp,%ebp
   122bc:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   122bf:	c7 05 80 9e 01 00 00 	movl   $0x0,0x19e80
   122c6:	00 00 00 
    init_pit();
   122c9:	e8 8b ff ff ff       	call   12259 <init_pit>
}
   122ce:	90                   	nop
   122cf:	c9                   	leave  
   122d0:	c3                   	ret    

000122d1 <kernel_init>:
#include "ipc/sem.h"
#include "ipc/mutex.h"
#include "core/memory.h"
#include "dev/time.h"
void kernel_init(boot_info_t * boot_info)
{
   122d1:	55                   	push   %ebp
   122d2:	89 e5                	mov    %esp,%ebp
   122d4:	83 ec 08             	sub    $0x8,%esp
    //ASSERT(boot_info->ram_region_count != 2);
    cpu_init();
   122d7:	e8 4d f5 ff ff       	call   11829 <cpu_init>
    log_init(); 
   122dc:	e8 04 0d 00 00       	call   12fe5 <log_init>
    memory_init(boot_info);
   122e1:	83 ec 0c             	sub    $0xc,%esp
   122e4:	ff 75 08             	pushl  0x8(%ebp)
   122e7:	e8 2c e7 ff ff       	call   10a18 <memory_init>
   122ec:	83 c4 10             	add    $0x10,%esp
    
    irq_init();
   122ef:	e8 9e fb ff ff       	call   11e92 <irq_init>
    time_init();
   122f4:	e8 c0 ff ff ff       	call   122b9 <time_init>

    task_manager_init();
   122f9:	e8 b0 ec ff ff       	call   10fae <task_manager_init>
}
   122fe:	90                   	nop
   122ff:	c9                   	leave  
   12300:	c3                   	ret    

00012301 <move_to_first_task>:
//         mutex_unlock(&mutex);
//     }
// }

void move_to_first_task(void)
{
   12301:	55                   	push   %ebp
   12302:	89 e5                	mov    %esp,%ebp
   12304:	83 ec 18             	sub    $0x18,%esp
    // void first_task_entry(void);
    // first_task_entry();
    task_t *curr = task_current();
   12307:	e8 4c ee ff ff       	call   11158 <task_current>
   1230c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    tss_t *tss = &curr->tss;
   1230f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12312:	83 c0 5c             	add    $0x5c,%eax
   12315:	89 45 f0             	mov    %eax,-0x10(%ebp)
    __asm__ __volatile__("jmp *%[ip]"::[ip]"r"(tss->eip));
   12318:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1231b:	8b 40 20             	mov    0x20(%eax),%eax
   1231e:	ff e0                	jmp    *%eax
}
   12320:	90                   	nop
   12321:	c9                   	leave  
   12322:	c3                   	ret    

00012323 <init_main>:
void init_main(void)
{
   12323:	55                   	push   %ebp
   12324:	89 e5                	mov    %esp,%ebp
   12326:	83 ec 08             	sub    $0x8,%esp
    irq_enable_global();
   12329:	e8 85 fe ff ff       	call   121b3 <irq_enable_global>
    sem_init(&sem,0);
   1232e:	83 ec 08             	sub    $0x8,%esp
   12331:	6a 00                	push   $0x0
   12333:	68 84 9e 01 00       	push   $0x19e84
   12338:	e8 ac 01 00 00       	call   124e9 <sem_init>
   1233d:	83 c4 10             	add    $0x10,%esp
    log_printf("init main\n");
   12340:	83 ec 0c             	sub    $0xc,%esp
   12343:	68 30 37 01 00       	push   $0x13730
   12348:	e8 35 0d 00 00       	call   13082 <log_printf>
   1234d:	83 c4 10             	add    $0x10,%esp
    //user_task_init(&init_task,"init_task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
    // task_init(&test_task,"test_task",(uint32_t)test_task_entry,(uint32_t)&test_task_stack[1024]);
    task_first_init();
   12350:	e8 e2 ec ff ff       	call   11037 <task_first_init>
    move_to_first_task();
   12355:	e8 a7 ff ff ff       	call   12301 <move_to_first_task>
    //     mutex_lock(&mutex);
    //     log_printf("init main count = %d\n", count++);
    //     sys_sleep(3000);
    //     mutex_unlock(&mutex);
    // }
}
   1235a:	90                   	nop
   1235b:	c9                   	leave  
   1235c:	c3                   	ret    

0001235d <list_count>:
{
   1235d:	55                   	push   %ebp
   1235e:	89 e5                	mov    %esp,%ebp
    return list->count;
   12360:	8b 45 08             	mov    0x8(%ebp),%eax
   12363:	8b 40 08             	mov    0x8(%eax),%eax
}
   12366:	5d                   	pop    %ebp
   12367:	c3                   	ret    

00012368 <mutex_init>:
 */
#include "ipc/mutex.h"
#include "cpu/irq.h"

void mutex_init(mutex_t *mutex)
{
   12368:	55                   	push   %ebp
   12369:	89 e5                	mov    %esp,%ebp
   1236b:	83 ec 08             	sub    $0x8,%esp
    mutex->owner = (task_t *)0;
   1236e:	8b 45 08             	mov    0x8(%ebp),%eax
   12371:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mutex->locked_count = 0;
   12378:	8b 45 08             	mov    0x8(%ebp),%eax
   1237b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    list_init(&mutex->wait_list);
   12382:	8b 45 08             	mov    0x8(%ebp),%eax
   12385:	83 ec 0c             	sub    $0xc,%esp
   12388:	50                   	push   %eax
   12389:	e8 38 0a 00 00       	call   12dc6 <list_init>
   1238e:	83 c4 10             	add    $0x10,%esp
}
   12391:	90                   	nop
   12392:	c9                   	leave  
   12393:	c3                   	ret    

00012394 <mutex_lock>:

void mutex_lock(mutex_t *mutex)
{
   12394:	55                   	push   %ebp
   12395:	89 e5                	mov    %esp,%ebp
   12397:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1239a:	e8 4a fe ff ff       	call   121e9 <irq_enter_protection>
   1239f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   123a2:	e8 b1 ed ff ff       	call   11158 <task_current>
   123a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->locked_count == 0)
   123aa:	8b 45 08             	mov    0x8(%ebp),%eax
   123ad:	8b 40 10             	mov    0x10(%eax),%eax
   123b0:	85 c0                	test   %eax,%eax
   123b2:	75 1a                	jne    123ce <mutex_lock+0x3a>
    {
        mutex->locked_count++;
   123b4:	8b 45 08             	mov    0x8(%ebp),%eax
   123b7:	8b 40 10             	mov    0x10(%eax),%eax
   123ba:	8d 50 01             	lea    0x1(%eax),%edx
   123bd:	8b 45 08             	mov    0x8(%ebp),%eax
   123c0:	89 50 10             	mov    %edx,0x10(%eax)
        mutex->owner = curr;
   123c3:	8b 45 08             	mov    0x8(%ebp),%eax
   123c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   123c9:	89 50 0c             	mov    %edx,0xc(%eax)
   123cc:	eb 45                	jmp    12413 <mutex_lock+0x7f>
    }else if(mutex->owner == curr)
   123ce:	8b 45 08             	mov    0x8(%ebp),%eax
   123d1:	8b 40 0c             	mov    0xc(%eax),%eax
   123d4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   123d7:	75 11                	jne    123ea <mutex_lock+0x56>
    {
        mutex->locked_count++;
   123d9:	8b 45 08             	mov    0x8(%ebp),%eax
   123dc:	8b 40 10             	mov    0x10(%eax),%eax
   123df:	8d 50 01             	lea    0x1(%eax),%edx
   123e2:	8b 45 08             	mov    0x8(%ebp),%eax
   123e5:	89 50 10             	mov    %edx,0x10(%eax)
   123e8:	eb 29                	jmp    12413 <mutex_lock+0x7f>
    }else
    {
        task_set_block(curr);
   123ea:	83 ec 0c             	sub    $0xc,%esp
   123ed:	ff 75 f0             	pushl  -0x10(%ebp)
   123f0:	e8 38 ed ff ff       	call   1112d <task_set_block>
   123f5:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list,&curr->wait_node);
   123f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   123fb:	8d 50 54             	lea    0x54(%eax),%edx
   123fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12401:	83 ec 08             	sub    $0x8,%esp
   12404:	52                   	push   %edx
   12405:	50                   	push   %eax
   12406:	e8 3f 0a 00 00       	call   12e4a <list_insert_last>
   1240b:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   1240e:	e8 00 ee ff ff       	call   11213 <schedule_switch>
    }
    irq_leave_protection(state);
   12413:	83 ec 0c             	sub    $0xc,%esp
   12416:	ff 75 f4             	pushl  -0xc(%ebp)
   12419:	e8 e3 fd ff ff       	call   12201 <irq_leave_protection>
   1241e:	83 c4 10             	add    $0x10,%esp
}
   12421:	90                   	nop
   12422:	c9                   	leave  
   12423:	c3                   	ret    

00012424 <mutex_unlock>:

void mutex_unlock(mutex_t *mutex)
{
   12424:	55                   	push   %ebp
   12425:	89 e5                	mov    %esp,%ebp
   12427:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1242a:	e8 ba fd ff ff       	call   121e9 <irq_enter_protection>
   1242f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   12432:	e8 21 ed ff ff       	call   11158 <task_current>
   12437:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->owner == curr)
   1243a:	8b 45 08             	mov    0x8(%ebp),%eax
   1243d:	8b 40 0c             	mov    0xc(%eax),%eax
   12440:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12443:	0f 85 84 00 00 00    	jne    124cd <mutex_unlock+0xa9>
    {
        if(--mutex->locked_count == 0)
   12449:	8b 45 08             	mov    0x8(%ebp),%eax
   1244c:	8b 40 10             	mov    0x10(%eax),%eax
   1244f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12452:	8b 45 08             	mov    0x8(%ebp),%eax
   12455:	89 50 10             	mov    %edx,0x10(%eax)
   12458:	8b 45 08             	mov    0x8(%ebp),%eax
   1245b:	8b 40 10             	mov    0x10(%eax),%eax
   1245e:	85 c0                	test   %eax,%eax
   12460:	75 6b                	jne    124cd <mutex_unlock+0xa9>
        {
            mutex->owner = (task_t *)0;
   12462:	8b 45 08             	mov    0x8(%ebp),%eax
   12465:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            if(list_count(&mutex->wait_list))
   1246c:	8b 45 08             	mov    0x8(%ebp),%eax
   1246f:	83 ec 0c             	sub    $0xc,%esp
   12472:	50                   	push   %eax
   12473:	e8 e5 fe ff ff       	call   1235d <list_count>
   12478:	83 c4 10             	add    $0x10,%esp
   1247b:	85 c0                	test   %eax,%eax
   1247d:	74 4e                	je     124cd <mutex_unlock+0xa9>
            {
                list_node_t * node = list_remove_first(&mutex->wait_list);
   1247f:	8b 45 08             	mov    0x8(%ebp),%eax
   12482:	83 ec 0c             	sub    $0xc,%esp
   12485:	50                   	push   %eax
   12486:	e8 23 0a 00 00       	call   12eae <list_remove_first>
   1248b:	83 c4 10             	add    $0x10,%esp
   1248e:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node,task_t,wait_node);
   12491:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12495:	74 08                	je     1249f <mutex_unlock+0x7b>
   12497:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1249a:	83 e8 54             	sub    $0x54,%eax
   1249d:	eb 05                	jmp    124a4 <mutex_unlock+0x80>
   1249f:	b8 00 00 00 00       	mov    $0x0,%eax
   124a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   124a7:	83 ec 0c             	sub    $0xc,%esp
   124aa:	ff 75 e8             	pushl  -0x18(%ebp)
   124ad:	e8 46 ec ff ff       	call   110f8 <task_set_ready>
   124b2:	83 c4 10             	add    $0x10,%esp
                mutex->locked_count = 1;
   124b5:	8b 45 08             	mov    0x8(%ebp),%eax
   124b8:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
                mutex->owner = task;
   124bf:	8b 45 08             	mov    0x8(%ebp),%eax
   124c2:	8b 55 e8             	mov    -0x18(%ebp),%edx
   124c5:	89 50 0c             	mov    %edx,0xc(%eax)
                schedule_switch();
   124c8:	e8 46 ed ff ff       	call   11213 <schedule_switch>
            }
        }
    }
    irq_leave_protection(state);
   124cd:	83 ec 0c             	sub    $0xc,%esp
   124d0:	ff 75 f4             	pushl  -0xc(%ebp)
   124d3:	e8 29 fd ff ff       	call   12201 <irq_leave_protection>
   124d8:	83 c4 10             	add    $0x10,%esp
}
   124db:	90                   	nop
   124dc:	c9                   	leave  
   124dd:	c3                   	ret    

000124de <list_count>:
{
   124de:	55                   	push   %ebp
   124df:	89 e5                	mov    %esp,%ebp
    return list->count;
   124e1:	8b 45 08             	mov    0x8(%ebp),%eax
   124e4:	8b 40 08             	mov    0x8(%eax),%eax
}
   124e7:	5d                   	pop    %ebp
   124e8:	c3                   	ret    

000124e9 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"
void sem_init(sem_t *sem,int count)
{
   124e9:	55                   	push   %ebp
   124ea:	89 e5                	mov    %esp,%ebp
   124ec:	83 ec 08             	sub    $0x8,%esp
    sem->count = count;
   124ef:	8b 45 08             	mov    0x8(%ebp),%eax
   124f2:	8b 55 0c             	mov    0xc(%ebp),%edx
   124f5:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   124f7:	8b 45 08             	mov    0x8(%ebp),%eax
   124fa:	83 c0 04             	add    $0x4,%eax
   124fd:	83 ec 0c             	sub    $0xc,%esp
   12500:	50                   	push   %eax
   12501:	e8 c0 08 00 00       	call   12dc6 <list_init>
   12506:	83 c4 10             	add    $0x10,%esp
}
   12509:	90                   	nop
   1250a:	c9                   	leave  
   1250b:	c3                   	ret    

0001250c <sem_wait>:

void sem_wait(sem_t *sem)
{
   1250c:	55                   	push   %ebp
   1250d:	89 e5                	mov    %esp,%ebp
   1250f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12512:	e8 d2 fc ff ff       	call   121e9 <irq_enter_protection>
   12517:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(sem->count > 0)
   1251a:	8b 45 08             	mov    0x8(%ebp),%eax
   1251d:	8b 00                	mov    (%eax),%eax
   1251f:	85 c0                	test   %eax,%eax
   12521:	7e 0f                	jle    12532 <sem_wait+0x26>
    {
        sem->count--;
   12523:	8b 45 08             	mov    0x8(%ebp),%eax
   12526:	8b 00                	mov    (%eax),%eax
   12528:	8d 50 ff             	lea    -0x1(%eax),%edx
   1252b:	8b 45 08             	mov    0x8(%ebp),%eax
   1252e:	89 10                	mov    %edx,(%eax)
   12530:	eb 34                	jmp    12566 <sem_wait+0x5a>
    }
    else
    {
        task_t *curr = task_current();
   12532:	e8 21 ec ff ff       	call   11158 <task_current>
   12537:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   1253a:	83 ec 0c             	sub    $0xc,%esp
   1253d:	ff 75 f0             	pushl  -0x10(%ebp)
   12540:	e8 e8 eb ff ff       	call   1112d <task_set_block>
   12545:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list,&curr->wait_node);
   12548:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1254b:	8d 50 54             	lea    0x54(%eax),%edx
   1254e:	8b 45 08             	mov    0x8(%ebp),%eax
   12551:	83 c0 04             	add    $0x4,%eax
   12554:	83 ec 08             	sub    $0x8,%esp
   12557:	52                   	push   %edx
   12558:	50                   	push   %eax
   12559:	e8 ec 08 00 00       	call   12e4a <list_insert_last>
   1255e:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   12561:	e8 ad ec ff ff       	call   11213 <schedule_switch>
    }
    irq_leave_protection(state);
   12566:	83 ec 0c             	sub    $0xc,%esp
   12569:	ff 75 f4             	pushl  -0xc(%ebp)
   1256c:	e8 90 fc ff ff       	call   12201 <irq_leave_protection>
   12571:	83 c4 10             	add    $0x10,%esp
}
   12574:	90                   	nop
   12575:	c9                   	leave  
   12576:	c3                   	ret    

00012577 <sem_notify>:


void sem_notify(sem_t *sem)
{
   12577:	55                   	push   %ebp
   12578:	89 e5                	mov    %esp,%ebp
   1257a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1257d:	e8 67 fc ff ff       	call   121e9 <irq_enter_protection>
   12582:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&sem->wait_list) > 0)
   12585:	8b 45 08             	mov    0x8(%ebp),%eax
   12588:	83 c0 04             	add    $0x4,%eax
   1258b:	83 ec 0c             	sub    $0xc,%esp
   1258e:	50                   	push   %eax
   1258f:	e8 4a ff ff ff       	call   124de <list_count>
   12594:	83 c4 10             	add    $0x10,%esp
   12597:	85 c0                	test   %eax,%eax
   12599:	7e 40                	jle    125db <sem_notify+0x64>
    {
        list_node_t * node = list_remove_first(&sem->wait_list);
   1259b:	8b 45 08             	mov    0x8(%ebp),%eax
   1259e:	83 c0 04             	add    $0x4,%eax
   125a1:	83 ec 0c             	sub    $0xc,%esp
   125a4:	50                   	push   %eax
   125a5:	e8 04 09 00 00       	call   12eae <list_remove_first>
   125aa:	83 c4 10             	add    $0x10,%esp
   125ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node,task_t,wait_node);
   125b0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   125b4:	74 08                	je     125be <sem_notify+0x47>
   125b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125b9:	83 e8 54             	sub    $0x54,%eax
   125bc:	eb 05                	jmp    125c3 <sem_notify+0x4c>
   125be:	b8 00 00 00 00       	mov    $0x0,%eax
   125c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   125c6:	83 ec 0c             	sub    $0xc,%esp
   125c9:	ff 75 ec             	pushl  -0x14(%ebp)
   125cc:	e8 27 eb ff ff       	call   110f8 <task_set_ready>
   125d1:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   125d4:	e8 3a ec ff ff       	call   11213 <schedule_switch>
   125d9:	eb 0d                	jmp    125e8 <sem_notify+0x71>
    }
    else
    {
        sem->count++;
   125db:	8b 45 08             	mov    0x8(%ebp),%eax
   125de:	8b 00                	mov    (%eax),%eax
   125e0:	8d 50 01             	lea    0x1(%eax),%edx
   125e3:	8b 45 08             	mov    0x8(%ebp),%eax
   125e6:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);
   125e8:	83 ec 0c             	sub    $0xc,%esp
   125eb:	ff 75 f4             	pushl  -0xc(%ebp)
   125ee:	e8 0e fc ff ff       	call   12201 <irq_leave_protection>
   125f3:	83 c4 10             	add    $0x10,%esp
}
   125f6:	90                   	nop
   125f7:	c9                   	leave  
   125f8:	c3                   	ret    

000125f9 <sem_count>:
int sem_count(sem_t *sem)
{
   125f9:	55                   	push   %ebp
   125fa:	89 e5                	mov    %esp,%ebp
   125fc:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   125ff:	e8 e5 fb ff ff       	call   121e9 <irq_enter_protection>
   12604:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12607:	8b 45 08             	mov    0x8(%ebp),%eax
   1260a:	8b 00                	mov    (%eax),%eax
   1260c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   1260f:	83 ec 0c             	sub    $0xc,%esp
   12612:	ff 75 f4             	pushl  -0xc(%ebp)
   12615:	e8 e7 fb ff ff       	call   12201 <irq_leave_protection>
   1261a:	83 c4 10             	add    $0x10,%esp
    return count;
   1261d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   12620:	c9                   	leave  
   12621:	c3                   	ret    

00012622 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   12622:	55                   	push   %ebp
   12623:	89 e5                	mov    %esp,%ebp
    return (bit_count + 7) / 8;
   12625:	8b 45 08             	mov    0x8(%ebp),%eax
   12628:	83 c0 07             	add    $0x7,%eax
   1262b:	8d 50 07             	lea    0x7(%eax),%edx
   1262e:	85 c0                	test   %eax,%eax
   12630:	0f 48 c2             	cmovs  %edx,%eax
   12633:	c1 f8 03             	sar    $0x3,%eax
}
   12636:	5d                   	pop    %ebp
   12637:	c3                   	ret    

00012638 <bitmap_init>:
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count ,int init_bit)
{
   12638:	55                   	push   %ebp
   12639:	89 e5                	mov    %esp,%ebp
   1263b:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   1263e:	8b 45 08             	mov    0x8(%ebp),%eax
   12641:	8b 55 10             	mov    0x10(%ebp),%edx
   12644:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12646:	8b 45 08             	mov    0x8(%ebp),%eax
   12649:	8b 55 0c             	mov    0xc(%ebp),%edx
   1264c:	89 50 04             	mov    %edx,0x4(%eax)
    int bytes = bitmap_byte_count(count);
   1264f:	ff 75 10             	pushl  0x10(%ebp)
   12652:	e8 cb ff ff ff       	call   12622 <bitmap_byte_count>
   12657:	83 c4 04             	add    $0x4,%esp
   1265a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bits, init_bit ? 0xff : 0x00, bytes);
   1265d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12661:	74 07                	je     1266a <bitmap_init+0x32>
   12663:	b8 ff 00 00 00       	mov    $0xff,%eax
   12668:	eb 05                	jmp    1266f <bitmap_init+0x37>
   1266a:	b8 00 00 00 00       	mov    $0x0,%eax
   1266f:	83 ec 04             	sub    $0x4,%esp
   12672:	ff 75 f4             	pushl  -0xc(%ebp)
   12675:	50                   	push   %eax
   12676:	ff 75 0c             	pushl  0xc(%ebp)
   12679:	e8 95 03 00 00       	call   12a13 <kernel_memset>
   1267e:	83 c4 10             	add    $0x10,%esp
}
   12681:	90                   	nop
   12682:	c9                   	leave  
   12683:	c3                   	ret    

00012684 <bitmap_get_bit>:

int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   12684:	55                   	push   %ebp
   12685:	89 e5                	mov    %esp,%ebp
   12687:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   12688:	8b 45 08             	mov    0x8(%ebp),%eax
   1268b:	8b 50 04             	mov    0x4(%eax),%edx
   1268e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12691:	8d 48 07             	lea    0x7(%eax),%ecx
   12694:	85 c0                	test   %eax,%eax
   12696:	0f 48 c1             	cmovs  %ecx,%eax
   12699:	c1 f8 03             	sar    $0x3,%eax
   1269c:	01 d0                	add    %edx,%eax
   1269e:	0f b6 00             	movzbl (%eax),%eax
   126a1:	0f b6 d8             	movzbl %al,%ebx
   126a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   126a7:	99                   	cltd   
   126a8:	c1 ea 1d             	shr    $0x1d,%edx
   126ab:	01 d0                	add    %edx,%eax
   126ad:	83 e0 07             	and    $0x7,%eax
   126b0:	29 d0                	sub    %edx,%eax
   126b2:	ba 01 00 00 00       	mov    $0x1,%edx
   126b7:	89 c1                	mov    %eax,%ecx
   126b9:	d3 e2                	shl    %cl,%edx
   126bb:	89 d0                	mov    %edx,%eax
   126bd:	21 d8                	and    %ebx,%eax
}
   126bf:	5b                   	pop    %ebx
   126c0:	5d                   	pop    %ebp
   126c1:	c3                   	ret    

000126c2 <bitmap_set_bit>:
void bitmap_set_bit(bitmap_t *bitmap, int index, int count,int bit)
{
   126c2:	55                   	push   %ebp
   126c3:	89 e5                	mov    %esp,%ebp
   126c5:	56                   	push   %esi
   126c6:	53                   	push   %ebx
   126c7:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   126ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   126d1:	e9 a2 00 00 00       	jmp    12778 <bitmap_set_bit+0xb6>
    {
        if(bit)
   126d6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   126da:	74 4a                	je     12726 <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= (1 << (index % 8));
   126dc:	8b 45 08             	mov    0x8(%ebp),%eax
   126df:	8b 50 04             	mov    0x4(%eax),%edx
   126e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   126e5:	8d 48 07             	lea    0x7(%eax),%ecx
   126e8:	85 c0                	test   %eax,%eax
   126ea:	0f 48 c1             	cmovs  %ecx,%eax
   126ed:	c1 f8 03             	sar    $0x3,%eax
   126f0:	89 c3                	mov    %eax,%ebx
   126f2:	89 d8                	mov    %ebx,%eax
   126f4:	01 d0                	add    %edx,%eax
   126f6:	0f b6 00             	movzbl (%eax),%eax
   126f9:	89 c6                	mov    %eax,%esi
   126fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   126fe:	99                   	cltd   
   126ff:	c1 ea 1d             	shr    $0x1d,%edx
   12702:	01 d0                	add    %edx,%eax
   12704:	83 e0 07             	and    $0x7,%eax
   12707:	29 d0                	sub    %edx,%eax
   12709:	ba 01 00 00 00       	mov    $0x1,%edx
   1270e:	89 c1                	mov    %eax,%ecx
   12710:	d3 e2                	shl    %cl,%edx
   12712:	89 d0                	mov    %edx,%eax
   12714:	89 f2                	mov    %esi,%edx
   12716:	09 c2                	or     %eax,%edx
   12718:	8b 45 08             	mov    0x8(%ebp),%eax
   1271b:	8b 40 04             	mov    0x4(%eax),%eax
   1271e:	89 d9                	mov    %ebx,%ecx
   12720:	01 c8                	add    %ecx,%eax
   12722:	88 10                	mov    %dl,(%eax)
   12724:	eb 4a                	jmp    12770 <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12726:	8b 45 08             	mov    0x8(%ebp),%eax
   12729:	8b 50 04             	mov    0x4(%eax),%edx
   1272c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1272f:	8d 48 07             	lea    0x7(%eax),%ecx
   12732:	85 c0                	test   %eax,%eax
   12734:	0f 48 c1             	cmovs  %ecx,%eax
   12737:	c1 f8 03             	sar    $0x3,%eax
   1273a:	89 c3                	mov    %eax,%ebx
   1273c:	89 d8                	mov    %ebx,%eax
   1273e:	01 d0                	add    %edx,%eax
   12740:	0f b6 00             	movzbl (%eax),%eax
   12743:	89 c6                	mov    %eax,%esi
   12745:	8b 45 0c             	mov    0xc(%ebp),%eax
   12748:	99                   	cltd   
   12749:	c1 ea 1d             	shr    $0x1d,%edx
   1274c:	01 d0                	add    %edx,%eax
   1274e:	83 e0 07             	and    $0x7,%eax
   12751:	29 d0                	sub    %edx,%eax
   12753:	ba 01 00 00 00       	mov    $0x1,%edx
   12758:	89 c1                	mov    %eax,%ecx
   1275a:	d3 e2                	shl    %cl,%edx
   1275c:	89 d0                	mov    %edx,%eax
   1275e:	f7 d0                	not    %eax
   12760:	89 f2                	mov    %esi,%edx
   12762:	21 c2                	and    %eax,%edx
   12764:	8b 45 08             	mov    0x8(%ebp),%eax
   12767:	8b 40 04             	mov    0x4(%eax),%eax
   1276a:	89 d9                	mov    %ebx,%ecx
   1276c:	01 c8                	add    %ecx,%eax
   1276e:	88 10                	mov    %dl,(%eax)
        }
        index++;
   12770:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   12774:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12778:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1277b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1277e:	7d 0e                	jge    1278e <bitmap_set_bit+0xcc>
   12780:	8b 45 08             	mov    0x8(%ebp),%eax
   12783:	8b 00                	mov    (%eax),%eax
   12785:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12788:	0f 8c 48 ff ff ff    	jl     126d6 <bitmap_set_bit+0x14>
    }
}
   1278e:	90                   	nop
   1278f:	83 c4 10             	add    $0x10,%esp
   12792:	5b                   	pop    %ebx
   12793:	5e                   	pop    %esi
   12794:	5d                   	pop    %ebp
   12795:	c3                   	ret    

00012796 <bitmap_is_set>:
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   12796:	55                   	push   %ebp
   12797:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12799:	ff 75 0c             	pushl  0xc(%ebp)
   1279c:	ff 75 08             	pushl  0x8(%ebp)
   1279f:	e8 e0 fe ff ff       	call   12684 <bitmap_get_bit>
   127a4:	83 c4 08             	add    $0x8,%esp
   127a7:	85 c0                	test   %eax,%eax
   127a9:	0f 95 c0             	setne  %al
   127ac:	0f b6 c0             	movzbl %al,%eax
}
   127af:	c9                   	leave  
   127b0:	c3                   	ret    

000127b1 <bitmap_alloc_nbits>:
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   127b1:	55                   	push   %ebp
   127b2:	89 e5                	mov    %esp,%ebp
   127b4:	83 ec 10             	sub    $0x10,%esp
    int index = 0;
   127b7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   127be:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
    while(index < bitmap->bit_count)
   127c5:	e9 8c 00 00 00       	jmp    12856 <bitmap_alloc_nbits+0xa5>
    {
        if(bitmap_get_bit(bitmap, index) != bit)
   127ca:	ff 75 fc             	pushl  -0x4(%ebp)
   127cd:	ff 75 08             	pushl  0x8(%ebp)
   127d0:	e8 af fe ff ff       	call   12684 <bitmap_get_bit>
   127d5:	83 c4 08             	add    $0x8,%esp
   127d8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   127db:	74 06                	je     127e3 <bitmap_alloc_nbits+0x32>
        {
            index++;
   127dd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   127e1:	eb 73                	jmp    12856 <bitmap_alloc_nbits+0xa5>
        }
        ok_index = index;
   127e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i = 0;
   127e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   127f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   127f7:	eb 27                	jmp    12820 <bitmap_alloc_nbits+0x6f>
        {
            if(bitmap_get_bit(bitmap, index++) != bit)
   127f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127fc:	8d 50 01             	lea    0x1(%eax),%edx
   127ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12802:	50                   	push   %eax
   12803:	ff 75 08             	pushl  0x8(%ebp)
   12806:	e8 79 fe ff ff       	call   12684 <bitmap_get_bit>
   1280b:	83 c4 08             	add    $0x8,%esp
   1280e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12811:	74 09                	je     1281c <bitmap_alloc_nbits+0x6b>
            {
                ok_index = -1;
   12813:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1281a:	eb 16                	jmp    12832 <bitmap_alloc_nbits+0x81>
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   1281c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12820:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12823:	3b 45 10             	cmp    0x10(%ebp),%eax
   12826:	7d 0a                	jge    12832 <bitmap_alloc_nbits+0x81>
   12828:	8b 45 08             	mov    0x8(%ebp),%eax
   1282b:	8b 00                	mov    (%eax),%eax
   1282d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12830:	7c c7                	jl     127f9 <bitmap_alloc_nbits+0x48>
            }
        }
        if(i >= count)
   12832:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12835:	3b 45 10             	cmp    0x10(%ebp),%eax
   12838:	7c 1c                	jl     12856 <bitmap_alloc_nbits+0xa5>
        {
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   1283a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1283d:	f7 d0                	not    %eax
   1283f:	50                   	push   %eax
   12840:	ff 75 10             	pushl  0x10(%ebp)
   12843:	ff 75 f8             	pushl  -0x8(%ebp)
   12846:	ff 75 08             	pushl  0x8(%ebp)
   12849:	e8 74 fe ff ff       	call   126c2 <bitmap_set_bit>
   1284e:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12851:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12854:	eb 13                	jmp    12869 <bitmap_alloc_nbits+0xb8>
    while(index < bitmap->bit_count)
   12856:	8b 45 08             	mov    0x8(%ebp),%eax
   12859:	8b 00                	mov    (%eax),%eax
   1285b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1285e:	0f 8c 66 ff ff ff    	jl     127ca <bitmap_alloc_nbits+0x19>
        }
    }        
    return -1;
   12864:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12869:	c9                   	leave  
   1286a:	c3                   	ret    

0001286b <hlt>:
{
   1286b:	55                   	push   %ebp
   1286c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1286e:	f4                   	hlt    
}
   1286f:	90                   	nop
   12870:	5d                   	pop    %ebp
   12871:	c3                   	ret    

00012872 <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"
void kernel_strcpy (char *dest, const char *src)
{
   12872:	55                   	push   %ebp
   12873:	89 e5                	mov    %esp,%ebp
    if(!dest || !src)
   12875:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12879:	74 27                	je     128a2 <kernel_strcpy+0x30>
   1287b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1287f:	74 21                	je     128a2 <kernel_strcpy+0x30>
    {
        return;
    }
    while((*dest++ = *src++) != '\0');
   12881:	90                   	nop
   12882:	8b 55 0c             	mov    0xc(%ebp),%edx
   12885:	8d 42 01             	lea    0x1(%edx),%eax
   12888:	89 45 0c             	mov    %eax,0xc(%ebp)
   1288b:	8b 45 08             	mov    0x8(%ebp),%eax
   1288e:	8d 48 01             	lea    0x1(%eax),%ecx
   12891:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12894:	0f b6 12             	movzbl (%edx),%edx
   12897:	88 10                	mov    %dl,(%eax)
   12899:	0f b6 00             	movzbl (%eax),%eax
   1289c:	84 c0                	test   %al,%al
   1289e:	75 e2                	jne    12882 <kernel_strcpy+0x10>
   128a0:	eb 01                	jmp    128a3 <kernel_strcpy+0x31>
        return;
   128a2:	90                   	nop
    //*dest = '\0';
}
   128a3:	5d                   	pop    %ebp
   128a4:	c3                   	ret    

000128a5 <kernel_strncpy>:

void kernel_strncpy (char *dest, const char *src, int size)
{
   128a5:	55                   	push   %ebp
   128a6:	89 e5                	mov    %esp,%ebp
   128a8:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src)
   128ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128af:	74 5b                	je     1290c <kernel_strncpy+0x67>
   128b1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128b5:	74 55                	je     1290c <kernel_strncpy+0x67>
    {
        return;
    }
    char *d = dest;
   128b7:	8b 45 08             	mov    0x8(%ebp),%eax
   128ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   128bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   128c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s))
   128c3:	eb 17                	jmp    128dc <kernel_strncpy+0x37>
    {
        *d++ = *s++;
   128c5:	8b 55 f8             	mov    -0x8(%ebp),%edx
   128c8:	8d 42 01             	lea    0x1(%edx),%eax
   128cb:	89 45 f8             	mov    %eax,-0x8(%ebp)
   128ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128d1:	8d 48 01             	lea    0x1(%eax),%ecx
   128d4:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   128d7:	0f b6 12             	movzbl (%edx),%edx
   128da:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s))
   128dc:	8b 45 10             	mov    0x10(%ebp),%eax
   128df:	8d 50 ff             	lea    -0x1(%eax),%edx
   128e2:	89 55 10             	mov    %edx,0x10(%ebp)
   128e5:	85 c0                	test   %eax,%eax
   128e7:	7e 0a                	jle    128f3 <kernel_strncpy+0x4e>
   128e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128ec:	0f b6 00             	movzbl (%eax),%eax
   128ef:	84 c0                	test   %al,%al
   128f1:	75 d2                	jne    128c5 <kernel_strncpy+0x20>
    }
    if(size == 0)
   128f3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   128f7:	75 0b                	jne    12904 <kernel_strncpy+0x5f>
    {
        *(d - 1) = '\0';
   128f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128fc:	83 e8 01             	sub    $0x1,%eax
   128ff:	c6 00 00             	movb   $0x0,(%eax)
   12902:	eb 09                	jmp    1290d <kernel_strncpy+0x68>
    }
    else
    {
        *d = '\0';
   12904:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12907:	c6 00 00             	movb   $0x0,(%eax)
   1290a:	eb 01                	jmp    1290d <kernel_strncpy+0x68>
        return;
   1290c:	90                   	nop
    }
}
   1290d:	c9                   	leave  
   1290e:	c3                   	ret    

0001290f <kernel_strncmp>:

int kernel_strncmp (const char *str1, const char *str2, int size)
{
   1290f:	55                   	push   %ebp
   12910:	89 e5                	mov    %esp,%ebp
    if(!str1 || !str2)
   12912:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12916:	74 06                	je     1291e <kernel_strncmp+0xf>
   12918:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1291c:	75 0f                	jne    1292d <kernel_strncmp+0x1e>
    {
        return 0;
   1291e:	b8 00 00 00 00       	mov    $0x0,%eax
   12923:	eb 62                	jmp    12987 <kernel_strncmp+0x78>
    }
    while(*str1 && *str2 && (*str1 == *str2) && size)
    {
        str1++;
   12925:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        str2++;
   12929:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*str1 && *str2 && (*str1 == *str2) && size)
   1292d:	8b 45 08             	mov    0x8(%ebp),%eax
   12930:	0f b6 00             	movzbl (%eax),%eax
   12933:	84 c0                	test   %al,%al
   12935:	74 20                	je     12957 <kernel_strncmp+0x48>
   12937:	8b 45 0c             	mov    0xc(%ebp),%eax
   1293a:	0f b6 00             	movzbl (%eax),%eax
   1293d:	84 c0                	test   %al,%al
   1293f:	74 16                	je     12957 <kernel_strncmp+0x48>
   12941:	8b 45 08             	mov    0x8(%ebp),%eax
   12944:	0f b6 10             	movzbl (%eax),%edx
   12947:	8b 45 0c             	mov    0xc(%ebp),%eax
   1294a:	0f b6 00             	movzbl (%eax),%eax
   1294d:	38 c2                	cmp    %al,%dl
   1294f:	75 06                	jne    12957 <kernel_strncmp+0x48>
   12951:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12955:	75 ce                	jne    12925 <kernel_strncmp+0x16>
    }
    return !((*str1 == '\0') || (*str2 == '\0') || (*str1 == *str2));
   12957:	8b 45 08             	mov    0x8(%ebp),%eax
   1295a:	0f b6 00             	movzbl (%eax),%eax
   1295d:	84 c0                	test   %al,%al
   1295f:	74 21                	je     12982 <kernel_strncmp+0x73>
   12961:	8b 45 0c             	mov    0xc(%ebp),%eax
   12964:	0f b6 00             	movzbl (%eax),%eax
   12967:	84 c0                	test   %al,%al
   12969:	74 17                	je     12982 <kernel_strncmp+0x73>
   1296b:	8b 45 08             	mov    0x8(%ebp),%eax
   1296e:	0f b6 10             	movzbl (%eax),%edx
   12971:	8b 45 0c             	mov    0xc(%ebp),%eax
   12974:	0f b6 00             	movzbl (%eax),%eax
   12977:	38 c2                	cmp    %al,%dl
   12979:	74 07                	je     12982 <kernel_strncmp+0x73>
   1297b:	b8 01 00 00 00       	mov    $0x1,%eax
   12980:	eb 05                	jmp    12987 <kernel_strncmp+0x78>
   12982:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12987:	5d                   	pop    %ebp
   12988:	c3                   	ret    

00012989 <kernel_strlen>:

int kernel_strlen (const char *str)
{
   12989:	55                   	push   %ebp
   1298a:	89 e5                	mov    %esp,%ebp
   1298c:	83 ec 10             	sub    $0x10,%esp
    if(!str)
   1298f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12993:	75 07                	jne    1299c <kernel_strlen+0x13>
    {
        return 0;
   12995:	b8 00 00 00 00       	mov    $0x0,%eax
   1299a:	eb 26                	jmp    129c2 <kernel_strlen+0x39>
    }
    const char *s = str;
   1299c:	8b 45 08             	mov    0x8(%ebp),%eax
   1299f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   129a2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while(*s++)
   129a9:	eb 04                	jmp    129af <kernel_strlen+0x26>
    {
        len++;
   129ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(*s++)
   129af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129b2:	8d 50 01             	lea    0x1(%eax),%edx
   129b5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   129b8:	0f b6 00             	movzbl (%eax),%eax
   129bb:	84 c0                	test   %al,%al
   129bd:	75 ec                	jne    129ab <kernel_strlen+0x22>
    }
    return len;
   129bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   129c2:	c9                   	leave  
   129c3:	c3                   	ret    

000129c4 <kernel_memcpy>:


void kernel_memcpy (void *dest, void *src, int size)
{
   129c4:	55                   	push   %ebp
   129c5:	89 e5                	mov    %esp,%ebp
   129c7:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src || size <= 0)
   129ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129ce:	74 40                	je     12a10 <kernel_memcpy+0x4c>
   129d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129d4:	74 3a                	je     12a10 <kernel_memcpy+0x4c>
   129d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   129da:	7e 34                	jle    12a10 <kernel_memcpy+0x4c>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   129dc:	8b 45 08             	mov    0x8(%ebp),%eax
   129df:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t *)src;
   129e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   129e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   129e8:	eb 17                	jmp    12a01 <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   129ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
   129ed:	8d 42 01             	lea    0x1(%edx),%eax
   129f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
   129f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129f6:	8d 48 01             	lea    0x1(%eax),%ecx
   129f9:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   129fc:	0f b6 12             	movzbl (%edx),%edx
   129ff:	88 10                	mov    %dl,(%eax)
    while(size--)
   12a01:	8b 45 10             	mov    0x10(%ebp),%eax
   12a04:	8d 50 ff             	lea    -0x1(%eax),%edx
   12a07:	89 55 10             	mov    %edx,0x10(%ebp)
   12a0a:	85 c0                	test   %eax,%eax
   12a0c:	75 dc                	jne    129ea <kernel_memcpy+0x26>
   12a0e:	eb 01                	jmp    12a11 <kernel_memcpy+0x4d>
        return;
   12a10:	90                   	nop
    }
}
   12a11:	c9                   	leave  
   12a12:	c3                   	ret    

00012a13 <kernel_memset>:

void kernel_memset (void *dest, int c, int size)
{
   12a13:	55                   	push   %ebp
   12a14:	89 e5                	mov    %esp,%ebp
   12a16:	83 ec 10             	sub    $0x10,%esp
    if(!dest || size <= 0)
   12a19:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a1d:	74 2b                	je     12a4a <kernel_memset+0x37>
   12a1f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a23:	7e 25                	jle    12a4a <kernel_memset+0x37>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   12a25:	8b 45 08             	mov    0x8(%ebp),%eax
   12a28:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--)
   12a2b:	eb 0e                	jmp    12a3b <kernel_memset+0x28>
    {
        *d++ = (uint8_t)c;
   12a2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a30:	8d 50 01             	lea    0x1(%eax),%edx
   12a33:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12a36:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a39:	88 10                	mov    %dl,(%eax)
    while(size--)
   12a3b:	8b 45 10             	mov    0x10(%ebp),%eax
   12a3e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12a41:	89 55 10             	mov    %edx,0x10(%ebp)
   12a44:	85 c0                	test   %eax,%eax
   12a46:	75 e5                	jne    12a2d <kernel_memset+0x1a>
   12a48:	eb 01                	jmp    12a4b <kernel_memset+0x38>
        return;
   12a4a:	90                   	nop
    }
}
   12a4b:	c9                   	leave  
   12a4c:	c3                   	ret    

00012a4d <kernel_memcmp>:

int kernel_memcmp (void *d1, void *d2, int size)
{
   12a4d:	55                   	push   %ebp
   12a4e:	89 e5                	mov    %esp,%ebp
   12a50:	83 ec 10             	sub    $0x10,%esp
    if(!d1 || !d2 || !size)
   12a53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a57:	74 0c                	je     12a65 <kernel_memcmp+0x18>
   12a59:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a5d:	74 06                	je     12a65 <kernel_memcmp+0x18>
   12a5f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a63:	75 07                	jne    12a6c <kernel_memcmp+0x1f>
    {
        return 1;
   12a65:	b8 01 00 00 00       	mov    $0x1,%eax
   12a6a:	eb 43                	jmp    12aaf <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t *)d1;
   12a6c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12a72:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a75:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   12a78:	eb 23                	jmp    12a9d <kernel_memcmp+0x50>
    {
        if(*p_d1++ != *p_d2++)
   12a7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a7d:	8d 50 01             	lea    0x1(%eax),%edx
   12a80:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12a83:	0f b6 08             	movzbl (%eax),%ecx
   12a86:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a89:	8d 50 01             	lea    0x1(%eax),%edx
   12a8c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a8f:	0f b6 00             	movzbl (%eax),%eax
   12a92:	38 c1                	cmp    %al,%cl
   12a94:	74 07                	je     12a9d <kernel_memcmp+0x50>
        {
            return 1;
   12a96:	b8 01 00 00 00       	mov    $0x1,%eax
   12a9b:	eb 12                	jmp    12aaf <kernel_memcmp+0x62>
    while(size--)
   12a9d:	8b 45 10             	mov    0x10(%ebp),%eax
   12aa0:	8d 50 ff             	lea    -0x1(%eax),%edx
   12aa3:	89 55 10             	mov    %edx,0x10(%ebp)
   12aa6:	85 c0                	test   %eax,%eax
   12aa8:	75 d0                	jne    12a7a <kernel_memcmp+0x2d>
        }
    }
    return 0;
   12aaa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12aaf:	c9                   	leave  
   12ab0:	c3                   	ret    

00012ab1 <kernel_itoa>:

void kernel_itoa (char *buf, int num, int base)
{
   12ab1:	55                   	push   %ebp
   12ab2:	89 e5                	mov    %esp,%ebp
   12ab4:	53                   	push   %ebx
   12ab5:	83 ec 20             	sub    $0x20,%esp
    int is_neg = 0;
   12ab8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    static const char * num2ch = "0123456789abcdef";
    char *p = buf;
   12abf:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(base != 2 && base != 8 && base != 10 && base != 16)
   12ac5:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12ac9:	74 1d                	je     12ae8 <kernel_itoa+0x37>
   12acb:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12acf:	74 17                	je     12ae8 <kernel_itoa+0x37>
   12ad1:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12ad5:	74 11                	je     12ae8 <kernel_itoa+0x37>
   12ad7:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12adb:	74 0b                	je     12ae8 <kernel_itoa+0x37>
    {
        *p = '\0';
   12add:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ae0:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12ae3:	e9 f7 00 00 00       	jmp    12bdf <kernel_itoa+0x12e>
    }
    
    // 对于十六进制，强制按无符号数处理
    if(base == 16)
   12ae8:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12aec:	75 4a                	jne    12b38 <kernel_itoa+0x87>
    {
        uint32_t unum = (uint32_t)num;  // 强制转换为无符号数
   12aee:	8b 45 0c             	mov    0xc(%ebp),%eax
   12af1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        do{
            char ch = num2ch[unum % base];
   12af4:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12afa:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b00:	ba 00 00 00 00       	mov    $0x0,%edx
   12b05:	f7 f3                	div    %ebx
   12b07:	89 d0                	mov    %edx,%eax
   12b09:	01 c8                	add    %ecx,%eax
   12b0b:	0f b6 00             	movzbl (%eax),%eax
   12b0e:	88 45 ea             	mov    %al,-0x16(%ebp)
            *p++ = ch;
   12b11:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b14:	8d 50 01             	lea    0x1(%eax),%edx
   12b17:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b1a:	0f b6 55 ea          	movzbl -0x16(%ebp),%edx
   12b1e:	88 10                	mov    %dl,(%eax)
            unum /= base;
   12b20:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12b23:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b26:	ba 00 00 00 00       	mov    $0x0,%edx
   12b2b:	f7 f3                	div    %ebx
   12b2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }while (unum);
   12b30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12b34:	75 be                	jne    12af4 <kernel_itoa+0x43>
   12b36:	eb 66                	jmp    12b9e <kernel_itoa+0xed>
    }
    else
    {
        // 其他进制的原有逻辑
        is_neg = num < 0 ? 1 : 0;
   12b38:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b3b:	c1 e8 1f             	shr    $0x1f,%eax
   12b3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if(num < 0 && base == 10)
   12b41:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b45:	79 09                	jns    12b50 <kernel_itoa+0x9f>
   12b47:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b4b:	75 03                	jne    12b50 <kernel_itoa+0x9f>
        {
            num = -num;
   12b4d:	f7 5d 0c             	negl   0xc(%ebp)
        }
        do{
            char ch = num2ch[num % base];
   12b50:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12b56:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b59:	99                   	cltd   
   12b5a:	f7 7d 10             	idivl  0x10(%ebp)
   12b5d:	89 d0                	mov    %edx,%eax
   12b5f:	01 c8                	add    %ecx,%eax
   12b61:	0f b6 00             	movzbl (%eax),%eax
   12b64:	88 45 eb             	mov    %al,-0x15(%ebp)
            *p++ = ch;
   12b67:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b6a:	8d 50 01             	lea    0x1(%eax),%edx
   12b6d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b70:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   12b74:	88 10                	mov    %dl,(%eax)
            num /= base;
   12b76:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b79:	99                   	cltd   
   12b7a:	f7 7d 10             	idivl  0x10(%ebp)
   12b7d:	89 45 0c             	mov    %eax,0xc(%ebp)
        }while (num);
   12b80:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b84:	75 ca                	jne    12b50 <kernel_itoa+0x9f>
        if(base == 10 && is_neg)
   12b86:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b8a:	75 12                	jne    12b9e <kernel_itoa+0xed>
   12b8c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12b90:	74 0c                	je     12b9e <kernel_itoa+0xed>
        {
            *p++ = '-';
   12b92:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b95:	8d 50 01             	lea    0x1(%eax),%edx
   12b98:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b9b:	c6 00 2d             	movb   $0x2d,(%eax)
        }
    }
    
    *p-- = '\0';
   12b9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ba1:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ba4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12ba7:	c6 00 00             	movb   $0x0,(%eax)

    char *start = buf;
   12baa:	8b 45 08             	mov    0x8(%ebp),%eax
   12bad:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while(start < p)
   12bb0:	eb 25                	jmp    12bd7 <kernel_itoa+0x126>
    {
        char tmp = *start;
   12bb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12bb5:	0f b6 00             	movzbl (%eax),%eax
   12bb8:	88 45 e9             	mov    %al,-0x17(%ebp)
        *start = *p;
   12bbb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12bbe:	0f b6 10             	movzbl (%eax),%edx
   12bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12bc4:	88 10                	mov    %dl,(%eax)
        *p = tmp;
   12bc6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12bc9:	0f b6 55 e9          	movzbl -0x17(%ebp),%edx
   12bcd:	88 10                	mov    %dl,(%eax)
        p--;
   12bcf:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)
        start++;
   12bd3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    while(start < p)
   12bd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12bda:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12bdd:	72 d3                	jb     12bb2 <kernel_itoa+0x101>
    }
}
   12bdf:	83 c4 20             	add    $0x20,%esp
   12be2:	5b                   	pop    %ebx
   12be3:	5d                   	pop    %ebp
   12be4:	c3                   	ret    

00012be5 <kernel_sprintf>:
void kernel_sprintf (char *buf, const char *fmt, ...)
{
   12be5:	55                   	push   %ebp
   12be6:	89 e5                	mov    %esp,%ebp
   12be8:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12beb:	8d 45 10             	lea    0x10(%ebp),%eax
   12bee:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buf, fmt, args);
   12bf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bf4:	83 ec 04             	sub    $0x4,%esp
   12bf7:	50                   	push   %eax
   12bf8:	ff 75 0c             	pushl  0xc(%ebp)
   12bfb:	ff 75 08             	pushl  0x8(%ebp)
   12bfe:	e8 06 00 00 00       	call   12c09 <kernel_vsprintf>
   12c03:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12c06:	90                   	nop
   12c07:	c9                   	leave  
   12c08:	c3                   	ret    

00012c09 <kernel_vsprintf>:
void kernel_vsprintf (char *buf, const char *fmt, va_list args)
{
   12c09:	55                   	push   %ebp
   12c0a:	89 e5                	mov    %esp,%ebp
   12c0c:	83 ec 20             	sub    $0x20,%esp
    enum{
        NORMAL,READ_FMT
    }state = NORMAL;
   12c0f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char * curr = buf;
   12c16:	8b 45 08             	mov    0x8(%ebp),%eax
   12c19:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++))
   12c1c:	e9 17 01 00 00       	jmp    12d38 <kernel_vsprintf+0x12f>
    {
        switch(state)
   12c21:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c24:	85 c0                	test   %eax,%eax
   12c26:	74 0a                	je     12c32 <kernel_vsprintf+0x29>
   12c28:	83 f8 01             	cmp    $0x1,%eax
   12c2b:	74 2b                	je     12c58 <kernel_vsprintf+0x4f>
   12c2d:	e9 06 01 00 00       	jmp    12d38 <kernel_vsprintf+0x12f>
        {
        case NORMAL:
            if(ch == '%')
   12c32:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12c36:	75 0c                	jne    12c44 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   12c38:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12c3f:	e9 f4 00 00 00       	jmp    12d38 <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   12c44:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c47:	8d 50 01             	lea    0x1(%eax),%edx
   12c4a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c4d:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12c51:	88 10                	mov    %dl,(%eax)
            }
            break;
   12c53:	e9 e0 00 00 00       	jmp    12d38 <kernel_vsprintf+0x12f>
        case READ_FMT:
            if(ch == 'd')
   12c58:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12c5c:	75 31                	jne    12c8f <kernel_vsprintf+0x86>
            {
                int num = va_arg(args,int);
   12c5e:	8b 45 10             	mov    0x10(%ebp),%eax
   12c61:	8d 50 04             	lea    0x4(%eax),%edx
   12c64:	89 55 10             	mov    %edx,0x10(%ebp)
   12c67:	8b 00                	mov    (%eax),%eax
   12c69:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr,num,10);
   12c6c:	6a 0a                	push   $0xa
   12c6e:	ff 75 e4             	pushl  -0x1c(%ebp)
   12c71:	ff 75 f8             	pushl  -0x8(%ebp)
   12c74:	e8 38 fe ff ff       	call   12ab1 <kernel_itoa>
   12c79:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   12c7c:	ff 75 f8             	pushl  -0x8(%ebp)
   12c7f:	e8 05 fd ff ff       	call   12989 <kernel_strlen>
   12c84:	83 c4 04             	add    $0x4,%esp
   12c87:	01 45 f8             	add    %eax,-0x8(%ebp)
   12c8a:	e9 a1 00 00 00       	jmp    12d30 <kernel_vsprintf+0x127>
            }
            else if(ch == 'x')
   12c8f:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12c93:	75 2e                	jne    12cc3 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args,int);
   12c95:	8b 45 10             	mov    0x10(%ebp),%eax
   12c98:	8d 50 04             	lea    0x4(%eax),%edx
   12c9b:	89 55 10             	mov    %edx,0x10(%ebp)
   12c9e:	8b 00                	mov    (%eax),%eax
   12ca0:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr,num,16);
   12ca3:	6a 10                	push   $0x10
   12ca5:	ff 75 e8             	pushl  -0x18(%ebp)
   12ca8:	ff 75 f8             	pushl  -0x8(%ebp)
   12cab:	e8 01 fe ff ff       	call   12ab1 <kernel_itoa>
   12cb0:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   12cb3:	ff 75 f8             	pushl  -0x8(%ebp)
   12cb6:	e8 ce fc ff ff       	call   12989 <kernel_strlen>
   12cbb:	83 c4 04             	add    $0x4,%esp
   12cbe:	01 45 f8             	add    %eax,-0x8(%ebp)
   12cc1:	eb 6d                	jmp    12d30 <kernel_vsprintf+0x127>
            }
            else if(ch == 'c')
   12cc3:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12cc7:	75 1f                	jne    12ce8 <kernel_vsprintf+0xdf>
            {
                char ch = va_arg(args,int);
   12cc9:	8b 45 10             	mov    0x10(%ebp),%eax
   12ccc:	8d 50 04             	lea    0x4(%eax),%edx
   12ccf:	89 55 10             	mov    %edx,0x10(%ebp)
   12cd2:	8b 00                	mov    (%eax),%eax
   12cd4:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = ch;
   12cd7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12cda:	8d 50 01             	lea    0x1(%eax),%edx
   12cdd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12ce0:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12ce4:	88 10                	mov    %dl,(%eax)
   12ce6:	eb 48                	jmp    12d30 <kernel_vsprintf+0x127>
            }
            else if(ch == 's')
   12ce8:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12cec:	75 42                	jne    12d30 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args,char *);
   12cee:	8b 45 10             	mov    0x10(%ebp),%eax
   12cf1:	8d 50 04             	lea    0x4(%eax),%edx
   12cf4:	89 55 10             	mov    %edx,0x10(%ebp)
   12cf7:	8b 00                	mov    (%eax),%eax
   12cf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   12cfc:	ff 75 f4             	pushl  -0xc(%ebp)
   12cff:	e8 85 fc ff ff       	call   12989 <kernel_strlen>
   12d04:	83 c4 04             	add    $0x4,%esp
   12d07:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--)
   12d0a:	eb 17                	jmp    12d23 <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   12d0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12d0f:	8d 42 01             	lea    0x1(%edx),%eax
   12d12:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12d15:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d18:	8d 48 01             	lea    0x1(%eax),%ecx
   12d1b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12d1e:	0f b6 12             	movzbl (%edx),%edx
   12d21:	88 10                	mov    %dl,(%eax)
                while(len--)
   12d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12d26:	8d 50 ff             	lea    -0x1(%eax),%edx
   12d29:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12d2c:	85 c0                	test   %eax,%eax
   12d2e:	75 dc                	jne    12d0c <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   12d30:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12d37:	90                   	nop
    while((ch = *fmt++))
   12d38:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d3b:	8d 50 01             	lea    0x1(%eax),%edx
   12d3e:	89 55 0c             	mov    %edx,0xc(%ebp)
   12d41:	0f b6 00             	movzbl (%eax),%eax
   12d44:	88 45 ef             	mov    %al,-0x11(%ebp)
   12d47:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12d4b:	0f 85 d0 fe ff ff    	jne    12c21 <kernel_vsprintf+0x18>
        }
    }
    *curr = '\0';
   12d51:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d54:	c6 00 00             	movb   $0x0,(%eax)
}
   12d57:	90                   	nop
   12d58:	c9                   	leave  
   12d59:	c3                   	ret    

00012d5a <panic>:
void panic(const char *file,int line,const char *func,const char *cond)
{
   12d5a:	55                   	push   %ebp
   12d5b:	89 e5                	mov    %esp,%ebp
   12d5d:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed: %s\n",cond);
   12d60:	83 ec 08             	sub    $0x8,%esp
   12d63:	ff 75 14             	pushl  0x14(%ebp)
   12d66:	68 3b 37 01 00       	push   $0x1373b
   12d6b:	e8 12 03 00 00       	call   13082 <log_printf>
   12d70:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\n",file);
   12d73:	83 ec 08             	sub    $0x8,%esp
   12d76:	ff 75 08             	pushl  0x8(%ebp)
   12d79:	68 4e 37 01 00       	push   $0x1374e
   12d7e:	e8 ff 02 00 00       	call   13082 <log_printf>
   12d83:	83 c4 10             	add    $0x10,%esp
    log_printf("line: %d\n",line);
   12d86:	83 ec 08             	sub    $0x8,%esp
   12d89:	ff 75 0c             	pushl  0xc(%ebp)
   12d8c:	68 58 37 01 00       	push   $0x13758
   12d91:	e8 ec 02 00 00       	call   13082 <log_printf>
   12d96:	83 c4 10             	add    $0x10,%esp
    log_printf("function: %s\n",func);
   12d99:	83 ec 08             	sub    $0x8,%esp
   12d9c:	ff 75 10             	pushl  0x10(%ebp)
   12d9f:	68 62 37 01 00       	push   $0x13762
   12da4:	e8 d9 02 00 00       	call   13082 <log_printf>
   12da9:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   12dac:	e8 ba fa ff ff       	call   1286b <hlt>
   12db1:	eb f9                	jmp    12dac <panic+0x52>

00012db3 <list_is_empty>:
{
   12db3:	55                   	push   %ebp
   12db4:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12db6:	8b 45 08             	mov    0x8(%ebp),%eax
   12db9:	8b 40 08             	mov    0x8(%eax),%eax
   12dbc:	85 c0                	test   %eax,%eax
   12dbe:	0f 94 c0             	sete   %al
   12dc1:	0f b6 c0             	movzbl %al,%eax
}
   12dc4:	5d                   	pop    %ebp
   12dc5:	c3                   	ret    

00012dc6 <list_init>:
#include "tools/list.h"

void list_init(list_t *list)
{
   12dc6:	55                   	push   %ebp
   12dc7:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12dc9:	8b 45 08             	mov    0x8(%ebp),%eax
   12dcc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12dd3:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd6:	8b 50 04             	mov    0x4(%eax),%edx
   12dd9:	8b 45 08             	mov    0x8(%ebp),%eax
   12ddc:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   12dde:	8b 45 08             	mov    0x8(%ebp),%eax
   12de1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12de8:	90                   	nop
   12de9:	5d                   	pop    %ebp
   12dea:	c3                   	ret    

00012deb <list_insert_first>:

void list_insert_first(list_t * list,list_node_t * node)
{
   12deb:	55                   	push   %ebp
   12dec:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12dee:	8b 45 08             	mov    0x8(%ebp),%eax
   12df1:	8b 10                	mov    (%eax),%edx
   12df3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12df6:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   12df9:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dfc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if(list_is_empty(list))
   12e02:	ff 75 08             	pushl  0x8(%ebp)
   12e05:	e8 a9 ff ff ff       	call   12db3 <list_is_empty>
   12e0a:	83 c4 04             	add    $0x4,%esp
   12e0d:	85 c0                	test   %eax,%eax
   12e0f:	74 15                	je     12e26 <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   12e11:	8b 45 08             	mov    0x8(%ebp),%eax
   12e14:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e17:	89 10                	mov    %edx,(%eax)
   12e19:	8b 45 08             	mov    0x8(%ebp),%eax
   12e1c:	8b 10                	mov    (%eax),%edx
   12e1e:	8b 45 08             	mov    0x8(%ebp),%eax
   12e21:	89 50 04             	mov    %edx,0x4(%eax)
   12e24:	eb 12                	jmp    12e38 <list_insert_first+0x4d>
    }
    else
    {
        list->first->pre = node;
   12e26:	8b 45 08             	mov    0x8(%ebp),%eax
   12e29:	8b 00                	mov    (%eax),%eax
   12e2b:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e2e:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12e30:	8b 45 08             	mov    0x8(%ebp),%eax
   12e33:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e36:	89 10                	mov    %edx,(%eax)
    }
    list->count++;
   12e38:	8b 45 08             	mov    0x8(%ebp),%eax
   12e3b:	8b 40 08             	mov    0x8(%eax),%eax
   12e3e:	8d 50 01             	lea    0x1(%eax),%edx
   12e41:	8b 45 08             	mov    0x8(%ebp),%eax
   12e44:	89 50 08             	mov    %edx,0x8(%eax)
}
   12e47:	90                   	nop
   12e48:	c9                   	leave  
   12e49:	c3                   	ret    

00012e4a <list_insert_last>:

void list_insert_last(list_t * list,list_node_t * node)
{
   12e4a:	55                   	push   %ebp
   12e4b:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12e4d:	8b 45 08             	mov    0x8(%ebp),%eax
   12e50:	8b 50 04             	mov    0x4(%eax),%edx
   12e53:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e56:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   12e58:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e5b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if(list_is_empty(list))
   12e62:	ff 75 08             	pushl  0x8(%ebp)
   12e65:	e8 49 ff ff ff       	call   12db3 <list_is_empty>
   12e6a:	83 c4 04             	add    $0x4,%esp
   12e6d:	85 c0                	test   %eax,%eax
   12e6f:	74 16                	je     12e87 <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   12e71:	8b 45 08             	mov    0x8(%ebp),%eax
   12e74:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e77:	89 50 04             	mov    %edx,0x4(%eax)
   12e7a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e7d:	8b 50 04             	mov    0x4(%eax),%edx
   12e80:	8b 45 08             	mov    0x8(%ebp),%eax
   12e83:	89 10                	mov    %edx,(%eax)
   12e85:	eb 15                	jmp    12e9c <list_insert_last+0x52>
    }
    else
    {
        list->last->next = node;
   12e87:	8b 45 08             	mov    0x8(%ebp),%eax
   12e8a:	8b 40 04             	mov    0x4(%eax),%eax
   12e8d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e90:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12e93:	8b 45 08             	mov    0x8(%ebp),%eax
   12e96:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e99:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list->count++;
   12e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12e9f:	8b 40 08             	mov    0x8(%eax),%eax
   12ea2:	8d 50 01             	lea    0x1(%eax),%edx
   12ea5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea8:	89 50 08             	mov    %edx,0x8(%eax)
}
   12eab:	90                   	nop
   12eac:	c9                   	leave  
   12ead:	c3                   	ret    

00012eae <list_remove_first>:

list_node_t* list_remove_first(list_t * list)
{
   12eae:	55                   	push   %ebp
   12eaf:	89 e5                	mov    %esp,%ebp
   12eb1:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list))
   12eb4:	ff 75 08             	pushl  0x8(%ebp)
   12eb7:	e8 f7 fe ff ff       	call   12db3 <list_is_empty>
   12ebc:	83 c4 04             	add    $0x4,%esp
   12ebf:	85 c0                	test   %eax,%eax
   12ec1:	74 07                	je     12eca <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   12ec3:	b8 00 00 00 00       	mov    $0x0,%eax
   12ec8:	eb 59                	jmp    12f23 <list_remove_first+0x75>
    }
    list_node_t * node = list->first;
   12eca:	8b 45 08             	mov    0x8(%ebp),%eax
   12ecd:	8b 00                	mov    (%eax),%eax
   12ecf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = node->next;
   12ed2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ed5:	8b 50 04             	mov    0x4(%eax),%edx
   12ed8:	8b 45 08             	mov    0x8(%ebp),%eax
   12edb:	89 10                	mov    %edx,(%eax)
    if(list->first == (list_node_t *)0)
   12edd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee0:	8b 00                	mov    (%eax),%eax
   12ee2:	85 c0                	test   %eax,%eax
   12ee4:	75 0c                	jne    12ef2 <list_remove_first+0x44>
    {
        list->last = (list_node_t *)0;
   12ee6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12ef0:	eb 0b                	jmp    12efd <list_remove_first+0x4f>
    }
    else
    {
        list->first->pre = (list_node_t *)0;
   12ef2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef5:	8b 00                	mov    (%eax),%eax
   12ef7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   12efd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   12f06:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f09:	8b 10                	mov    (%eax),%edx
   12f0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f0e:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   12f11:	8b 45 08             	mov    0x8(%ebp),%eax
   12f14:	8b 40 08             	mov    0x8(%eax),%eax
   12f17:	8d 50 ff             	lea    -0x1(%eax),%edx
   12f1a:	8b 45 08             	mov    0x8(%ebp),%eax
   12f1d:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12f20:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12f23:	c9                   	leave  
   12f24:	c3                   	ret    

00012f25 <list_remove>:

list_node_t* list_remove(list_t * list,list_node_t * node)
{
   12f25:	55                   	push   %ebp
   12f26:	89 e5                	mov    %esp,%ebp
    if(node == list->first)
   12f28:	8b 45 08             	mov    0x8(%ebp),%eax
   12f2b:	8b 00                	mov    (%eax),%eax
   12f2d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f30:	75 0b                	jne    12f3d <list_remove+0x18>
    {
        list->first = node->next;
   12f32:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f35:	8b 50 04             	mov    0x4(%eax),%edx
   12f38:	8b 45 08             	mov    0x8(%ebp),%eax
   12f3b:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last)
   12f3d:	8b 45 08             	mov    0x8(%ebp),%eax
   12f40:	8b 40 04             	mov    0x4(%eax),%eax
   12f43:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f46:	75 0b                	jne    12f53 <list_remove+0x2e>
    {
        list->last = node->pre;
   12f48:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f4b:	8b 10                	mov    (%eax),%edx
   12f4d:	8b 45 08             	mov    0x8(%ebp),%eax
   12f50:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->pre)
   12f53:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f56:	8b 00                	mov    (%eax),%eax
   12f58:	85 c0                	test   %eax,%eax
   12f5a:	74 0e                	je     12f6a <list_remove+0x45>
    {
        node->pre->next = node->next;
   12f5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f5f:	8b 00                	mov    (%eax),%eax
   12f61:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f64:	8b 52 04             	mov    0x4(%edx),%edx
   12f67:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) 
   12f6a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f6d:	8b 40 04             	mov    0x4(%eax),%eax
   12f70:	85 c0                	test   %eax,%eax
   12f72:	74 0d                	je     12f81 <list_remove+0x5c>
    {
        node->next->pre = node->pre;
   12f74:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f77:	8b 40 04             	mov    0x4(%eax),%eax
   12f7a:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f7d:	8b 12                	mov    (%edx),%edx
   12f7f:	89 10                	mov    %edx,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   12f81:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f84:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   12f8a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f8d:	8b 10                	mov    (%eax),%edx
   12f8f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f92:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   12f95:	8b 45 08             	mov    0x8(%ebp),%eax
   12f98:	8b 40 08             	mov    0x8(%eax),%eax
   12f9b:	8d 50 ff             	lea    -0x1(%eax),%edx
   12f9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa1:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   12fa7:	5d                   	pop    %ebp
   12fa8:	c3                   	ret    

00012fa9 <inb>:
{
   12fa9:	55                   	push   %ebp
   12faa:	89 e5                	mov    %esp,%ebp
   12fac:	83 ec 14             	sub    $0x14,%esp
   12faf:	8b 45 08             	mov    0x8(%ebp),%eax
   12fb2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   12fb6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12fba:	89 c2                	mov    %eax,%edx
   12fbc:	ec                   	in     (%dx),%al
   12fbd:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12fc0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12fc4:	c9                   	leave  
   12fc5:	c3                   	ret    

00012fc6 <outb>:
{
   12fc6:	55                   	push   %ebp
   12fc7:	89 e5                	mov    %esp,%ebp
   12fc9:	83 ec 08             	sub    $0x8,%esp
   12fcc:	8b 55 08             	mov    0x8(%ebp),%edx
   12fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fd2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12fd6:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   12fd9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12fdd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12fe1:	ee                   	out    %al,(%dx)
}
   12fe2:	90                   	nop
   12fe3:	c9                   	leave  
   12fe4:	c3                   	ret    

00012fe5 <log_init>:
#include "cpu/irq.h"    
#include "ipc/mutex.h"
#define COM_PORT 0x3f8
static mutex_t log_mutex;
void log_init (void)
{
   12fe5:	55                   	push   %ebp
   12fe6:	89 e5                	mov    %esp,%ebp
   12fe8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&log_mutex);
   12feb:	83 ec 0c             	sub    $0xc,%esp
   12fee:	68 a8 9e 01 00       	push   $0x19ea8
   12ff3:	e8 70 f3 ff ff       	call   12368 <mutex_init>
   12ff8:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   12ffb:	83 ec 08             	sub    $0x8,%esp
   12ffe:	6a 00                	push   $0x0
   13000:	68 f9 03 00 00       	push   $0x3f9
   13005:	e8 bc ff ff ff       	call   12fc6 <outb>
   1300a:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x80);
   1300d:	83 ec 08             	sub    $0x8,%esp
   13010:	68 80 00 00 00       	push   $0x80
   13015:	68 fb 03 00 00       	push   $0x3fb
   1301a:	e8 a7 ff ff ff       	call   12fc6 <outb>
   1301f:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 0, 0x03);
   13022:	83 ec 08             	sub    $0x8,%esp
   13025:	6a 03                	push   $0x3
   13027:	68 f8 03 00 00       	push   $0x3f8
   1302c:	e8 95 ff ff ff       	call   12fc6 <outb>
   13031:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   13034:	83 ec 08             	sub    $0x8,%esp
   13037:	6a 00                	push   $0x0
   13039:	68 f9 03 00 00       	push   $0x3f9
   1303e:	e8 83 ff ff ff       	call   12fc6 <outb>
   13043:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x03);
   13046:	83 ec 08             	sub    $0x8,%esp
   13049:	6a 03                	push   $0x3
   1304b:	68 fb 03 00 00       	push   $0x3fb
   13050:	e8 71 ff ff ff       	call   12fc6 <outb>
   13055:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 2, 0xC7);
   13058:	83 ec 08             	sub    $0x8,%esp
   1305b:	68 c7 00 00 00       	push   $0xc7
   13060:	68 fa 03 00 00       	push   $0x3fa
   13065:	e8 5c ff ff ff       	call   12fc6 <outb>
   1306a:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 4, 0x0F);
   1306d:	83 ec 08             	sub    $0x8,%esp
   13070:	6a 0f                	push   $0xf
   13072:	68 fc 03 00 00       	push   $0x3fc
   13077:	e8 4a ff ff ff       	call   12fc6 <outb>
   1307c:	83 c4 10             	add    $0x10,%esp
}
   1307f:	90                   	nop
   13080:	c9                   	leave  
   13081:	c3                   	ret    

00013082 <log_printf>:


void log_printf (const char *fmt, ...)
{
   13082:	55                   	push   %ebp
   13083:	89 e5                	mov    %esp,%ebp
   13085:	81 ec 18 01 00 00    	sub    $0x118,%esp
    char buf[256];
    kernel_memset(buf, 0, sizeof(buf));
   1308b:	83 ec 04             	sub    $0x4,%esp
   1308e:	68 00 01 00 00       	push   $0x100
   13093:	6a 00                	push   $0x0
   13095:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
   1309b:	50                   	push   %eax
   1309c:	e8 72 f9 ff ff       	call   12a13 <kernel_memset>
   130a1:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   130a4:	8d 45 0c             	lea    0xc(%ebp),%eax
   130a7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)

    kernel_vsprintf(buf, fmt, args);
   130ad:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
   130b3:	83 ec 04             	sub    $0x4,%esp
   130b6:	50                   	push   %eax
   130b7:	ff 75 08             	pushl  0x8(%ebp)
   130ba:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
   130c0:	50                   	push   %eax
   130c1:	e8 43 fb ff ff       	call   12c09 <kernel_vsprintf>
   130c6:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    //mutex_lock(&log_mutex);
    irq_state_t state = irq_enter_protection();
   130c9:	e8 1b f1 ff ff       	call   121e9 <irq_enter_protection>
   130ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char *p = buf;
   130d1:	8d 85 f0 fe ff ff    	lea    -0x110(%ebp),%eax
   130d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   130da:	eb 39                	jmp    13115 <log_printf+0x93>
    {
        while ((inb(COM_PORT + 5) & (1 << 6)) == 0);
   130dc:	90                   	nop
   130dd:	83 ec 0c             	sub    $0xc,%esp
   130e0:	68 fd 03 00 00       	push   $0x3fd
   130e5:	e8 bf fe ff ff       	call   12fa9 <inb>
   130ea:	83 c4 10             	add    $0x10,%esp
   130ed:	0f b6 c0             	movzbl %al,%eax
   130f0:	83 e0 40             	and    $0x40,%eax
   130f3:	85 c0                	test   %eax,%eax
   130f5:	74 e6                	je     130dd <log_printf+0x5b>
        outb(COM_PORT, *p);
   130f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   130fa:	0f b6 00             	movzbl (%eax),%eax
   130fd:	0f b6 c0             	movzbl %al,%eax
   13100:	83 ec 08             	sub    $0x8,%esp
   13103:	50                   	push   %eax
   13104:	68 f8 03 00 00       	push   $0x3f8
   13109:	e8 b8 fe ff ff       	call   12fc6 <outb>
   1310e:	83 c4 10             	add    $0x10,%esp
        p++;
   13111:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    while (*p != '\0')
   13115:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13118:	0f b6 00             	movzbl (%eax),%eax
   1311b:	84 c0                	test   %al,%al
   1311d:	75 bd                	jne    130dc <log_printf+0x5a>
    }

    outb(COM_PORT, '\r');
   1311f:	83 ec 08             	sub    $0x8,%esp
   13122:	6a 0d                	push   $0xd
   13124:	68 f8 03 00 00       	push   $0x3f8
   13129:	e8 98 fe ff ff       	call   12fc6 <outb>
   1312e:	83 c4 10             	add    $0x10,%esp
    //outb(COM_PORT, '\n');
    irq_leave_protection(state);
   13131:	83 ec 0c             	sub    $0xc,%esp
   13134:	ff 75 f0             	pushl  -0x10(%ebp)
   13137:	e8 c5 f0 ff ff       	call   12201 <irq_leave_protection>
   1313c:	83 c4 10             	add    $0x10,%esp
    //mutex_unlock(&log_mutex);
}
   1313f:	90                   	nop
   13140:	c9                   	leave  
   13141:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
    .text
	.global first_task_entry
	.extern first_task_main
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
	
8000000b:	e9 18 00 00 00       	jmp    80000028 <first_task_main>

80000010 <init_task_entry>:
static uint32_t init_task_stack[1024];
static uint32_t init_task_stack_test[1024];

static task_t init_task;
void init_task_entry(void)
{
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 08             	sub    $0x8,%esp
    // 测试1：最简单的死循环
    for(;;) {
        // 什么都不做，看看是否死掉
        log_printf("init task\n");
80000016:	83 ec 0c             	sub    $0xc,%esp
80000019:	68 64 21 00 80       	push   $0x80002164
8000001e:	e8 5f 30 01 80       	call   13082 <log_printf>
80000023:	83 c4 10             	add    $0x10,%esp
80000026:	eb ee                	jmp    80000016 <init_task_entry+0x6>

80000028 <first_task_main>:
    }
} 
int first_task_main()
{
80000028:	55                   	push   %ebp
80000029:	89 e5                	mov    %esp,%ebp
8000002b:	83 ec 18             	sub    $0x18,%esp
    kernel_task_init(&init_task,"init_task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
8000002e:	ba a0 10 00 80       	mov    $0x800010a0,%edx
80000033:	b8 10 00 00 80       	mov    $0x80000010,%eax
80000038:	52                   	push   %edx
80000039:	50                   	push   %eax
8000003a:	68 6f 21 00 80       	push   $0x8000216f
8000003f:	68 a0 20 00 80       	push   $0x800020a0
80000044:	e8 ee 0c 01 80       	call   10d37 <kernel_task_init>
80000049:	83 c4 10             	add    $0x10,%esp
    // 将init_task_entry函数映射到用户空间
    uint32_t func_addr = (uint32_t)init_task_entry;
8000004c:	c7 45 f4 10 00 00 80 	movl   $0x80000010,-0xc(%ebp)
    uint32_t func_page = func_addr & ~(MEM_PAGE_SIZE - 1);  // 页对齐
80000053:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000056:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8000005b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memory_copy(task_current(),&init_task);
8000005e:	e8 f5 10 01 80       	call   11158 <task_current>
80000063:	83 ec 08             	sub    $0x8,%esp
80000066:	68 a0 20 00 80       	push   $0x800020a0
8000006b:	50                   	push   %eax
8000006c:	e8 02 0b 01 80       	call   10b73 <memory_copy>
80000071:	83 c4 10             	add    $0x10,%esp
    //memory_alloc_for_page_dir(init_task.tss.cr3,func_page,2*MEM_PAGE_SIZE,PTE_P | PTE_W | PTE_U);
    for(;;)
    {
        log_printf("first task\n");
80000074:	83 ec 0c             	sub    $0xc,%esp
80000077:	68 79 21 00 80       	push   $0x80002179
8000007c:	e8 01 30 01 80       	call   13082 <log_printf>
80000081:	83 c4 10             	add    $0x10,%esp
80000084:	eb ee                	jmp    80000074 <first_task_main+0x4c>
80000086:	66 90                	xchg   %ax,%ax
80000088:	66 90                	xchg   %ax,%ax
8000008a:	66 90                	xchg   %ax,%ax
8000008c:	66 90                	xchg   %ax,%ax
8000008e:	66 90                	xchg   %ax,%ax
80000090:	66 90                	xchg   %ax,%ax
80000092:	66 90                	xchg   %ax,%ax
80000094:	66 90                	xchg   %ax,%ax
80000096:	66 90                	xchg   %ax,%ax
80000098:	66 90                	xchg   %ax,%ax
8000009a:	66 90                	xchg   %ax,%ax
8000009c:	66 90                	xchg   %ax,%ax
8000009e:	66 90                	xchg   %ax,%ax

800000a0 <init_task_stack>:
	...

800010a0 <init_task_stack_test>:
	...

800020a0 <init_task>:
	...
80002164:	69 6e 69 74 20 74 61 73 6b 0a 00 69 6e 69 74 5f     init task..init_
80002174:	74 61 73 6b 00 66 69 72 73 74 20 74 61 73 6b 0a     task.first task.
	...
