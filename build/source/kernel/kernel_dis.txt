
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002d94 memsz 0x0000afe0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000290c  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000444  0001290c  0001290c  0000390c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000034  00012d60  00012d60  00003d60  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00007fe0  00013000  00013000  00003d94  2**12
                  ALLOC
  4 .debug_line   000018f4  00000000  00000000  00003d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000407a  00000000  00000000  00005688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010e8  00000000  00000000  00009702  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a0  00000000  00000000  0000a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000104d  00000000  00000000  0000a990  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000b9dd  2**0
                  CONTENTS, READONLY
 10 .debug_frame  0000122c  00000000  00000000  0000b9f0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
0001290c l    d  .rodata	00000000 .rodata
00012d60 l    d  .data	00000000 .data
00013000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 source/kernel/CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102f8 l     F .text	0000000d down2
00010305 l     F .text	00000017 up2
0001031c l     F .text	0000000c write_cr3
00010328 l     F .text	0000000b pde_index
00010333 l     F .text	00000010 pte_index
00010343 l     F .text	00000010 pde_paddr
00010353 l     F .text	00000011 mmu_set_page_dir
00013000 l     O .bss	00000028 paddr_alloc
00014000 l     O .bss	00001000 kernel_page_dir
00010364 l     F .text	00000055 addr_alloc_init
000103b9 l     F .text	00000067 addr_alloc_page
00010420 l     F .text	00000062 addr_free_page
000104e8 l     F .text	0000003a total_mem_size
00012d60 l     O .data	00000030 kernel_map.2191
00000000 l    df *ABS*	00000000 task.c
0001079c l     F .text	0000001b list_node_init
000107b7 l     F .text	0000000b list_node_next
000107c2 l     F .text	0000000b list_count
000107cd l     F .text	0000000a list_first
000107d7 l     F .text	00000007 hlt
000107de l     F .text	00000017 write_tr
00015020 l     O .bss	000001a4 task_manager
000151e0 l     O .bss	00001000 idle_task_stack
000107f5 l     F .text	00000104 tss_init
00010a37 l     F .text	0000000a idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00010e9b l     F .text	00000028 lgdt
00010ec3 l     F .text	0000001a far_jump
000161e0 l     O .bss	00000800 gdt_table
000169e0 l     O .bss	00000014 gdt_mutex
00000000 l    df *ABS*	00000000 irq.c
000110b1 l     F .text	0000001d inb
000110ce l     F .text	0000001f outb
000110ed l     F .text	00000007 cli
000110f4 l     F .text	00000007 sti
000110fb l     F .text	00000028 lidt
00011123 l     F .text	00000007 hlt
0001112a l     F .text	00000010 read_eflags
0001113a l     F .text	0000000b write_eflags
00016a00 l     O .bss	00000400 idt_table
00011145 l     F .text	000000e3 dump_core_regs
00011228 l     F .text	0000003e do_default_handler
000114b2 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000118c5 l     F .text	0000001f outb
00016e00 l     O .bss	00000004 sys_tick
0001190c l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00016e20 l     O .bss	000000b8 init_task
00016ee0 l     O .bss	00001000 init_task_stack
00017ee0 l     O .bss	000000b8 test_task
00017fa0 l     O .bss	00001000 test_task_stack
00018fa0 l     O .bss	00000010 sem
00018fb0 l     O .bss	00000014 mutex
00018fc4 l     O .bss	00000004 gobal_count
00000000 l    df *ABS*	00000000 mutex.c
00011b78 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00011cf9 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012086 l     F .text	00000007 hlt
00012d90 l     O .data	00000004 num2ch.1917
00000000 l    df *ABS*	00000000 list.c
00012573 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012769 l     F .text	0000001d inb
00012786 l     F .text	0000001f outb
00018fc8 l     O .bss	00000014 log_mutex
0001145e g     F .text	0000001c do_handler_simd_floating_point
00011e9f g     F .text	0000003e bitmap_get_bit
000121df g     F .text	0000004f kernel_memcpy
00010b85 g     F .text	0000000a task_current
00011866 g     F .text	0000000b irq_enable_global
0001260a g     F .text	00000064 list_insert_last
0001139a g     F .text	0000001c do_handler_segment_not_present
00010b25 g     F .text	00000035 task_set_ready
00011fb1 g     F .text	0000001b bitmap_is_set
0001222e g     F .text	0000003a kernel_memset
000102ca g       .text	00000000 interrupt_switch
000100ac g       .text	00000000 exception_handler_nmi
0001107f g     F .text	0000001e cpu_init
000127a5 g     F .text	0000009d log_init
00011a78 g     F .text	00000100 init_main
00010233 g       .text	00000000 exception_handler_alignment_check
000102ad g       .text	00000000 exception_handler_security
00010d95 g     F .text	0000004e do_schedule_switch
0001208d g     F .text	00000033 kernel_strcpy
00015000 g     O .bss	00000004 need_reschedule
00012d50 g       .rodata	00000000 s_data
00011745 g     F .text	0000008b irq_enable
0001004f g       .text	00000000 exception_handler_unknown
000100cb g       .text	00000000 exception_handler_breakpoint
0001132a g     F .text	0000001c do_handler_invalid_op
000112f2 g     F .text	0000001c do_handler_overflow
0001026f g       .text	00000000 exception_handler_simd_floating_point
00011426 g     F .text	0000001c do_handler_alignment_check
000105cc g     F .text	00000088 memory_create_map
000101da g       .text	00000000 exception_handler_general_protection
000113d2 g     F .text	0000001c do_handler_general_protection
00011e14 g     F .text	00000029 sem_count
00011282 g     F .text	0000001c do_handler_divider
00011edd g     F .text	000000d4 bitmap_set_bit
00011362 g     F .text	0000001c do_handler_double_fault
000119b4 g     F .text	00000062 init_task_entry
000113ee g     F .text	0000001c do_handler_page_fault
00010166 g       .text	00000000 exception_handler_double_fault
00011871 g     F .text	0000002b pic_send_eoi
00010b1b g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00011d27 g     F .text	0000006b sem_wait
00011496 g     F .text	0000001c do_handler_security
000101bd g       .text	00000000 exception_handler_stack_segment_fault
000100ea g       .text	00000000 exception_handler_overflow
000102e1 g       .text	00000000 simple_switch
0001002b g       .text	00000000 exception_handler_time
0001129e g     F .text	0000001c do_handler_debug
00018fe0 g     O .bss	00002000 stack
00010b11 g     F .text	0000000a task_is_need_reschedule
00010e3e g     F .text	0000005d sys_sleep
00010c40 g     F .text	00000013 schedule_switch
00011a16 g     F .text	00000062 test_task_entry
00011d92 g     F .text	00000082 sem_notify
00010183 g       .text	00000000 exception_handler_invalid_tss
00010ac0 g     F .text	0000003d task_first_init
00011442 g     F .text	0000001c do_handler_machine_check
00010482 g     F .text	00000066 show_mem_info
000125ab g     F .text	0000005f list_insert_first
00010e1e g     F .text	00000020 task_set_wakeup
0001006e g       .text	00000000 exception_handler_divider
000120c0 g     F .text	0000006a kernel_strncpy
0001185b g     F .text	0000000b irq_disable_global
00010b8f g     F .text	00000061 sys_sched_yield
0001afe0 g       .bss	00000000 mem_free_start
00011984 g     F .text	00000030 kernel_init
00011d04 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
000123cf g     F .text	0000014b kernel_vsprintf
00010afd g     F .text	0000000a get_from_task
00011baf g     F .text	00000090 mutex_lock
00010250 g       .text	00000000 exception_handler_machine_check
00010b07 g     F .text	0000000a get_to_task
0001137e g     F .text	0000001c do_handler_invalid_tss
00000000 g       .text	00000000 kernel_base
00010de3 g     F .text	0000003b task_set_sleep
0001251a g     F .text	00000059 panic
00011705 g     F .text	00000040 irq_install
00011012 g     F .text	0000006d init_gdt
000112ba g     F .text	0000001c do_handler_nmi
0001189c g     F .text	00000018 irq_enter_protection
00011b83 g     F .text	0000002c mutex_init
0001028e g       .text	00000000 exception_handler_virtualization
000117d0 g     F .text	0000008b irq_disable
00011346 g     F .text	0000001c do_handler_device_not_available
00011e3d g     F .text	00000016 bitmap_byte_count
00010c53 g     F .text	00000065 task_dispatch
0001109d g     F .text	00000014 switch_to_tss
0001130e g     F .text	0000001c do_handler_bounds
00010bf0 g     F .text	00000050 task_next_run
00012268 g     F .text	00000064 kernel_memcmp
00010654 g     F .text	00000089 create_kernel_table
00012586 g     F .text	00000025 list_init
000101f7 g       .text	00000000 exception_handler_page_fault
00010b5a g     F .text	0000002b task_set_block
00011266 g     F .text	0000001c do_handler_unknown
00010a19 g     F .text	0000001e task_switch_from_to
00011545 g     F .text	000001c0 irq_init
00011c3f g     F .text	000000ba mutex_unlock
0001147a g     F .text	0000001c do_handler_virtualization
000118b4 g     F .text	00000011 irq_leave_protection
0001140a g     F .text	0000001c do_handler_x87_floating_point
000121a4 g     F .text	0000003b kernel_strlen
0001008d g       .text	00000000 exception_handler_debug
00010edd g     F .text	00000083 segment_desc_set
00010128 g       .text	00000000 exception_handler_invalid_op
0001266e g     F .text	00000077 list_remove_first
00012d50 g       .rodata	00000000 e_text
0001212a g     F .text	0000007a kernel_strncmp
00011e53 g     F .text	0000004c bitmap_init
000101a0 g       .text	00000000 exception_handler_segment_not_present
00011fcc g     F .text	000000ba bitmap_alloc_nbits
00010a41 g     F .text	0000007f task_manager_init
00010cb8 g     F .text	000000dd task_time_tick
000106dd g     F .text	000000bf memory_init
000113b6 g     F .text	0000001c do_handler_stack_segment_fault
000112d6 g     F .text	0000001c do_handler_breakpoint
00012842 g     F .text	000000ca log_printf
000108f9 g     F .text	00000120 task_init
00010214 g       .text	00000000 exception_handler_x87_floating_point
000123ab g     F .text	00000024 kernel_sprintf
00010fa7 g     F .text	0000006b gdt_alloc_desc
000122cc g     F .text	000000df kernel_itoa
000126e5 g     F .text	00000084 list_remove
00010f60 g     F .text	00000047 gate_desc_set
00010109 g       .text	00000000 exception_handler_bounds
00010147 g       .text	00000000 exception_handler_device_not_available
00010522 g     F .text	000000aa find_pte
000118e4 g     F .text	00000028 do_handler_time
0001196c g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .global _start
    .extern init_main
    .extern need_reschedule
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax

    push %eax 
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 78 19 00 00       	call   11984 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   10019:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001b:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001d:	8e e8                	mov    %eax,%gs
    mov %ax, %ss    
   1001f:	8e d0                	mov    %eax,%ss
    
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc e0 af 01 00       	mov    $0x1afe0,%esp
    jmp init_main
   10026:	e9 4d 1a 00 00       	jmp    11a78 <init_main>

0001002b <exception_handler_time>:

.text
    .extern do_handler_time
    .global exception_handler_time
exception_handler_time:
    push $0
   1002b:	6a 00                	push   $0x0

    push $0x20
   1002d:	6a 20                	push   $0x20
    pusha
   1002f:	60                   	pusha  
    push %ds
   10030:	1e                   	push   %ds
    push %es
   10031:	06                   	push   %es
    push %fs
   10032:	0f a0                	push   %fs
    push %gs
   10034:	0f a8                	push   %gs
    push %esp
   10036:	54                   	push   %esp
    call do_handler_time
   10037:	e8 a8 18 00 00       	call   118e4 <do_handler_time>
    add $(1*4), %esp
   1003c:	83 c4 04             	add    $0x4,%esp
    pop %gs
   1003f:	0f a9                	pop    %gs
    pop %fs
   10041:	0f a1                	pop    %fs
    pop %es
   10043:	07                   	pop    %es
    pop %ds
   10044:	1f                   	pop    %ds
    popa
   10045:	61                   	popa   

    add $(2*4), %esp
   10046:	83 c4 08             	add    $0x8,%esp
    call do_schedule_switch
   10049:	e8 47 0d 00 00       	call   10d95 <do_schedule_switch>

    iret 
   1004e:	cf                   	iret   

0001004f <exception_handler_unknown>:

exception_handler unknown,-1,0
   1004f:	6a 00                	push   $0x0
   10051:	6a ff                	push   $0xffffffff
   10053:	60                   	pusha  
   10054:	1e                   	push   %ds
   10055:	06                   	push   %es
   10056:	0f a0                	push   %fs
   10058:	0f a8                	push   %gs
   1005a:	54                   	push   %esp
   1005b:	e8 06 12 00 00       	call   11266 <do_handler_unknown>
   10060:	83 c4 04             	add    $0x4,%esp
   10063:	0f a9                	pop    %gs
   10065:	0f a1                	pop    %fs
   10067:	07                   	pop    %es
   10068:	1f                   	pop    %ds
   10069:	61                   	popa   
   1006a:	83 c4 08             	add    $0x8,%esp
   1006d:	cf                   	iret   

0001006e <exception_handler_divider>:
exception_handler divider,0,0
   1006e:	6a 00                	push   $0x0
   10070:	6a 00                	push   $0x0
   10072:	60                   	pusha  
   10073:	1e                   	push   %ds
   10074:	06                   	push   %es
   10075:	0f a0                	push   %fs
   10077:	0f a8                	push   %gs
   10079:	54                   	push   %esp
   1007a:	e8 03 12 00 00       	call   11282 <do_handler_divider>
   1007f:	83 c4 04             	add    $0x4,%esp
   10082:	0f a9                	pop    %gs
   10084:	0f a1                	pop    %fs
   10086:	07                   	pop    %es
   10087:	1f                   	pop    %ds
   10088:	61                   	popa   
   10089:	83 c4 08             	add    $0x8,%esp
   1008c:	cf                   	iret   

0001008d <exception_handler_debug>:
exception_handler debug,1,0
   1008d:	6a 00                	push   $0x0
   1008f:	6a 01                	push   $0x1
   10091:	60                   	pusha  
   10092:	1e                   	push   %ds
   10093:	06                   	push   %es
   10094:	0f a0                	push   %fs
   10096:	0f a8                	push   %gs
   10098:	54                   	push   %esp
   10099:	e8 00 12 00 00       	call   1129e <do_handler_debug>
   1009e:	83 c4 04             	add    $0x4,%esp
   100a1:	0f a9                	pop    %gs
   100a3:	0f a1                	pop    %fs
   100a5:	07                   	pop    %es
   100a6:	1f                   	pop    %ds
   100a7:	61                   	popa   
   100a8:	83 c4 08             	add    $0x8,%esp
   100ab:	cf                   	iret   

000100ac <exception_handler_nmi>:
exception_handler nmi,2,0
   100ac:	6a 00                	push   $0x0
   100ae:	6a 02                	push   $0x2
   100b0:	60                   	pusha  
   100b1:	1e                   	push   %ds
   100b2:	06                   	push   %es
   100b3:	0f a0                	push   %fs
   100b5:	0f a8                	push   %gs
   100b7:	54                   	push   %esp
   100b8:	e8 fd 11 00 00       	call   112ba <do_handler_nmi>
   100bd:	83 c4 04             	add    $0x4,%esp
   100c0:	0f a9                	pop    %gs
   100c2:	0f a1                	pop    %fs
   100c4:	07                   	pop    %es
   100c5:	1f                   	pop    %ds
   100c6:	61                   	popa   
   100c7:	83 c4 08             	add    $0x8,%esp
   100ca:	cf                   	iret   

000100cb <exception_handler_breakpoint>:
exception_handler breakpoint,3,0
   100cb:	6a 00                	push   $0x0
   100cd:	6a 03                	push   $0x3
   100cf:	60                   	pusha  
   100d0:	1e                   	push   %ds
   100d1:	06                   	push   %es
   100d2:	0f a0                	push   %fs
   100d4:	0f a8                	push   %gs
   100d6:	54                   	push   %esp
   100d7:	e8 fa 11 00 00       	call   112d6 <do_handler_breakpoint>
   100dc:	83 c4 04             	add    $0x4,%esp
   100df:	0f a9                	pop    %gs
   100e1:	0f a1                	pop    %fs
   100e3:	07                   	pop    %es
   100e4:	1f                   	pop    %ds
   100e5:	61                   	popa   
   100e6:	83 c4 08             	add    $0x8,%esp
   100e9:	cf                   	iret   

000100ea <exception_handler_overflow>:
exception_handler overflow,4,0
   100ea:	6a 00                	push   $0x0
   100ec:	6a 04                	push   $0x4
   100ee:	60                   	pusha  
   100ef:	1e                   	push   %ds
   100f0:	06                   	push   %es
   100f1:	0f a0                	push   %fs
   100f3:	0f a8                	push   %gs
   100f5:	54                   	push   %esp
   100f6:	e8 f7 11 00 00       	call   112f2 <do_handler_overflow>
   100fb:	83 c4 04             	add    $0x4,%esp
   100fe:	0f a9                	pop    %gs
   10100:	0f a1                	pop    %fs
   10102:	07                   	pop    %es
   10103:	1f                   	pop    %ds
   10104:	61                   	popa   
   10105:	83 c4 08             	add    $0x8,%esp
   10108:	cf                   	iret   

00010109 <exception_handler_bounds>:
exception_handler bounds,5,0
   10109:	6a 00                	push   $0x0
   1010b:	6a 05                	push   $0x5
   1010d:	60                   	pusha  
   1010e:	1e                   	push   %ds
   1010f:	06                   	push   %es
   10110:	0f a0                	push   %fs
   10112:	0f a8                	push   %gs
   10114:	54                   	push   %esp
   10115:	e8 f4 11 00 00       	call   1130e <do_handler_bounds>
   1011a:	83 c4 04             	add    $0x4,%esp
   1011d:	0f a9                	pop    %gs
   1011f:	0f a1                	pop    %fs
   10121:	07                   	pop    %es
   10122:	1f                   	pop    %ds
   10123:	61                   	popa   
   10124:	83 c4 08             	add    $0x8,%esp
   10127:	cf                   	iret   

00010128 <exception_handler_invalid_op>:
exception_handler invalid_op,6,0
   10128:	6a 00                	push   $0x0
   1012a:	6a 06                	push   $0x6
   1012c:	60                   	pusha  
   1012d:	1e                   	push   %ds
   1012e:	06                   	push   %es
   1012f:	0f a0                	push   %fs
   10131:	0f a8                	push   %gs
   10133:	54                   	push   %esp
   10134:	e8 f1 11 00 00       	call   1132a <do_handler_invalid_op>
   10139:	83 c4 04             	add    $0x4,%esp
   1013c:	0f a9                	pop    %gs
   1013e:	0f a1                	pop    %fs
   10140:	07                   	pop    %es
   10141:	1f                   	pop    %ds
   10142:	61                   	popa   
   10143:	83 c4 08             	add    $0x8,%esp
   10146:	cf                   	iret   

00010147 <exception_handler_device_not_available>:
exception_handler device_not_available,7,0
   10147:	6a 00                	push   $0x0
   10149:	6a 07                	push   $0x7
   1014b:	60                   	pusha  
   1014c:	1e                   	push   %ds
   1014d:	06                   	push   %es
   1014e:	0f a0                	push   %fs
   10150:	0f a8                	push   %gs
   10152:	54                   	push   %esp
   10153:	e8 ee 11 00 00       	call   11346 <do_handler_device_not_available>
   10158:	83 c4 04             	add    $0x4,%esp
   1015b:	0f a9                	pop    %gs
   1015d:	0f a1                	pop    %fs
   1015f:	07                   	pop    %es
   10160:	1f                   	pop    %ds
   10161:	61                   	popa   
   10162:	83 c4 08             	add    $0x8,%esp
   10165:	cf                   	iret   

00010166 <exception_handler_double_fault>:
exception_handler double_fault,8,1
   10166:	6a 08                	push   $0x8
   10168:	60                   	pusha  
   10169:	1e                   	push   %ds
   1016a:	06                   	push   %es
   1016b:	0f a0                	push   %fs
   1016d:	0f a8                	push   %gs
   1016f:	54                   	push   %esp
   10170:	e8 ed 11 00 00       	call   11362 <do_handler_double_fault>
   10175:	83 c4 04             	add    $0x4,%esp
   10178:	0f a9                	pop    %gs
   1017a:	0f a1                	pop    %fs
   1017c:	07                   	pop    %es
   1017d:	1f                   	pop    %ds
   1017e:	61                   	popa   
   1017f:	83 c4 08             	add    $0x8,%esp
   10182:	cf                   	iret   

00010183 <exception_handler_invalid_tss>:

exception_handler invalid_tss,10,1
   10183:	6a 0a                	push   $0xa
   10185:	60                   	pusha  
   10186:	1e                   	push   %ds
   10187:	06                   	push   %es
   10188:	0f a0                	push   %fs
   1018a:	0f a8                	push   %gs
   1018c:	54                   	push   %esp
   1018d:	e8 ec 11 00 00       	call   1137e <do_handler_invalid_tss>
   10192:	83 c4 04             	add    $0x4,%esp
   10195:	0f a9                	pop    %gs
   10197:	0f a1                	pop    %fs
   10199:	07                   	pop    %es
   1019a:	1f                   	pop    %ds
   1019b:	61                   	popa   
   1019c:	83 c4 08             	add    $0x8,%esp
   1019f:	cf                   	iret   

000101a0 <exception_handler_segment_not_present>:
exception_handler segment_not_present,11,1
   101a0:	6a 0b                	push   $0xb
   101a2:	60                   	pusha  
   101a3:	1e                   	push   %ds
   101a4:	06                   	push   %es
   101a5:	0f a0                	push   %fs
   101a7:	0f a8                	push   %gs
   101a9:	54                   	push   %esp
   101aa:	e8 eb 11 00 00       	call   1139a <do_handler_segment_not_present>
   101af:	83 c4 04             	add    $0x4,%esp
   101b2:	0f a9                	pop    %gs
   101b4:	0f a1                	pop    %fs
   101b6:	07                   	pop    %es
   101b7:	1f                   	pop    %ds
   101b8:	61                   	popa   
   101b9:	83 c4 08             	add    $0x8,%esp
   101bc:	cf                   	iret   

000101bd <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,12,1
   101bd:	6a 0c                	push   $0xc
   101bf:	60                   	pusha  
   101c0:	1e                   	push   %ds
   101c1:	06                   	push   %es
   101c2:	0f a0                	push   %fs
   101c4:	0f a8                	push   %gs
   101c6:	54                   	push   %esp
   101c7:	e8 ea 11 00 00       	call   113b6 <do_handler_stack_segment_fault>
   101cc:	83 c4 04             	add    $0x4,%esp
   101cf:	0f a9                	pop    %gs
   101d1:	0f a1                	pop    %fs
   101d3:	07                   	pop    %es
   101d4:	1f                   	pop    %ds
   101d5:	61                   	popa   
   101d6:	83 c4 08             	add    $0x8,%esp
   101d9:	cf                   	iret   

000101da <exception_handler_general_protection>:
exception_handler general_protection,13,1
   101da:	6a 0d                	push   $0xd
   101dc:	60                   	pusha  
   101dd:	1e                   	push   %ds
   101de:	06                   	push   %es
   101df:	0f a0                	push   %fs
   101e1:	0f a8                	push   %gs
   101e3:	54                   	push   %esp
   101e4:	e8 e9 11 00 00       	call   113d2 <do_handler_general_protection>
   101e9:	83 c4 04             	add    $0x4,%esp
   101ec:	0f a9                	pop    %gs
   101ee:	0f a1                	pop    %fs
   101f0:	07                   	pop    %es
   101f1:	1f                   	pop    %ds
   101f2:	61                   	popa   
   101f3:	83 c4 08             	add    $0x8,%esp
   101f6:	cf                   	iret   

000101f7 <exception_handler_page_fault>:
exception_handler page_fault,14,1
   101f7:	6a 0e                	push   $0xe
   101f9:	60                   	pusha  
   101fa:	1e                   	push   %ds
   101fb:	06                   	push   %es
   101fc:	0f a0                	push   %fs
   101fe:	0f a8                	push   %gs
   10200:	54                   	push   %esp
   10201:	e8 e8 11 00 00       	call   113ee <do_handler_page_fault>
   10206:	83 c4 04             	add    $0x4,%esp
   10209:	0f a9                	pop    %gs
   1020b:	0f a1                	pop    %fs
   1020d:	07                   	pop    %es
   1020e:	1f                   	pop    %ds
   1020f:	61                   	popa   
   10210:	83 c4 08             	add    $0x8,%esp
   10213:	cf                   	iret   

00010214 <exception_handler_x87_floating_point>:
exception_handler x87_floating_point,16,0
   10214:	6a 00                	push   $0x0
   10216:	6a 10                	push   $0x10
   10218:	60                   	pusha  
   10219:	1e                   	push   %ds
   1021a:	06                   	push   %es
   1021b:	0f a0                	push   %fs
   1021d:	0f a8                	push   %gs
   1021f:	54                   	push   %esp
   10220:	e8 e5 11 00 00       	call   1140a <do_handler_x87_floating_point>
   10225:	83 c4 04             	add    $0x4,%esp
   10228:	0f a9                	pop    %gs
   1022a:	0f a1                	pop    %fs
   1022c:	07                   	pop    %es
   1022d:	1f                   	pop    %ds
   1022e:	61                   	popa   
   1022f:	83 c4 08             	add    $0x8,%esp
   10232:	cf                   	iret   

00010233 <exception_handler_alignment_check>:
exception_handler alignment_check,17,1
   10233:	6a 11                	push   $0x11
   10235:	60                   	pusha  
   10236:	1e                   	push   %ds
   10237:	06                   	push   %es
   10238:	0f a0                	push   %fs
   1023a:	0f a8                	push   %gs
   1023c:	54                   	push   %esp
   1023d:	e8 e4 11 00 00       	call   11426 <do_handler_alignment_check>
   10242:	83 c4 04             	add    $0x4,%esp
   10245:	0f a9                	pop    %gs
   10247:	0f a1                	pop    %fs
   10249:	07                   	pop    %es
   1024a:	1f                   	pop    %ds
   1024b:	61                   	popa   
   1024c:	83 c4 08             	add    $0x8,%esp
   1024f:	cf                   	iret   

00010250 <exception_handler_machine_check>:
exception_handler machine_check,18,0
   10250:	6a 00                	push   $0x0
   10252:	6a 12                	push   $0x12
   10254:	60                   	pusha  
   10255:	1e                   	push   %ds
   10256:	06                   	push   %es
   10257:	0f a0                	push   %fs
   10259:	0f a8                	push   %gs
   1025b:	54                   	push   %esp
   1025c:	e8 e1 11 00 00       	call   11442 <do_handler_machine_check>
   10261:	83 c4 04             	add    $0x4,%esp
   10264:	0f a9                	pop    %gs
   10266:	0f a1                	pop    %fs
   10268:	07                   	pop    %es
   10269:	1f                   	pop    %ds
   1026a:	61                   	popa   
   1026b:	83 c4 08             	add    $0x8,%esp
   1026e:	cf                   	iret   

0001026f <exception_handler_simd_floating_point>:
exception_handler simd_floating_point,19,0
   1026f:	6a 00                	push   $0x0
   10271:	6a 13                	push   $0x13
   10273:	60                   	pusha  
   10274:	1e                   	push   %ds
   10275:	06                   	push   %es
   10276:	0f a0                	push   %fs
   10278:	0f a8                	push   %gs
   1027a:	54                   	push   %esp
   1027b:	e8 de 11 00 00       	call   1145e <do_handler_simd_floating_point>
   10280:	83 c4 04             	add    $0x4,%esp
   10283:	0f a9                	pop    %gs
   10285:	0f a1                	pop    %fs
   10287:	07                   	pop    %es
   10288:	1f                   	pop    %ds
   10289:	61                   	popa   
   1028a:	83 c4 08             	add    $0x8,%esp
   1028d:	cf                   	iret   

0001028e <exception_handler_virtualization>:
exception_handler virtualization,20,0
   1028e:	6a 00                	push   $0x0
   10290:	6a 14                	push   $0x14
   10292:	60                   	pusha  
   10293:	1e                   	push   %ds
   10294:	06                   	push   %es
   10295:	0f a0                	push   %fs
   10297:	0f a8                	push   %gs
   10299:	54                   	push   %esp
   1029a:	e8 db 11 00 00       	call   1147a <do_handler_virtualization>
   1029f:	83 c4 04             	add    $0x4,%esp
   102a2:	0f a9                	pop    %gs
   102a4:	0f a1                	pop    %fs
   102a6:	07                   	pop    %es
   102a7:	1f                   	pop    %ds
   102a8:	61                   	popa   
   102a9:	83 c4 08             	add    $0x8,%esp
   102ac:	cf                   	iret   

000102ad <exception_handler_security>:
exception_handler security,21,1
   102ad:	6a 15                	push   $0x15
   102af:	60                   	pusha  
   102b0:	1e                   	push   %ds
   102b1:	06                   	push   %es
   102b2:	0f a0                	push   %fs
   102b4:	0f a8                	push   %gs
   102b6:	54                   	push   %esp
   102b7:	e8 da 11 00 00       	call   11496 <do_handler_security>
   102bc:	83 c4 04             	add    $0x4,%esp
   102bf:	0f a9                	pop    %gs
   102c1:	0f a1                	pop    %fs
   102c3:	07                   	pop    %es
   102c4:	1f                   	pop    %ds
   102c5:	61                   	popa   
   102c6:	83 c4 08             	add    $0x8,%esp
   102c9:	cf                   	iret   

000102ca <interrupt_switch>:
*/

    .text  
    .global interrupt_switch
interrupt_switch:
    mov 4(%esp), %eax
   102ca:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102ce:	8b 54 24 08          	mov    0x8(%esp),%edx

    
    push %ebp
   102d2:	55                   	push   %ebp
    push %ebx
   102d3:	53                   	push   %ebx
    push %esi
   102d4:	56                   	push   %esi
    push %edi
   102d5:	57                   	push   %edi
    pushf                # 保存EFLAGS寄存器
   102d6:	9c                   	pushf  
    mov %esp,(%eax)
   102d7:	89 20                	mov    %esp,(%eax)

    mov %edx,%esp
   102d9:	89 d4                	mov    %edx,%esp
    popf                 # 恢复EFLAGS寄存器
   102db:	9d                   	popf   
    pop %edi
   102dc:	5f                   	pop    %edi
    pop %esi
   102dd:	5e                   	pop    %esi
    pop %ebx
   102de:	5b                   	pop    %ebx
    pop %ebp
   102df:	5d                   	pop    %ebp
    

    ret
   102e0:	c3                   	ret    

000102e1 <simple_switch>:


    .text
    .global simple_switch
simple_switch:
    mov 4(%esp), %eax
   102e1:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102e5:	8b 54 24 08          	mov    0x8(%esp),%edx

    
    push %ebp
   102e9:	55                   	push   %ebp
    push %ebx
   102ea:	53                   	push   %ebx
    push %esi
   102eb:	56                   	push   %esi
    push %edi
   102ec:	57                   	push   %edi
    pushf                # 保存EFLAGS寄存器
   102ed:	9c                   	pushf  
    mov %esp,(%eax)
   102ee:	89 20                	mov    %esp,(%eax)

    mov %edx,%esp
   102f0:	89 d4                	mov    %edx,%esp
    popf                 # 恢复EFLAGS寄存器
   102f2:	9d                   	popf   
    pop %edi
   102f3:	5f                   	pop    %edi
    pop %esi
   102f4:	5e                   	pop    %esi
    pop %ebx
   102f5:	5b                   	pop    %ebx
    pop %ebp
   102f6:	5d                   	pop    %ebp
    

    ret
   102f7:	c3                   	ret    

000102f8 <down2>:
#ifndef KLIB_H
#define KLIB_H
#include <stdarg.h>
#include "comm/types.h"
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   102fe:	f7 d8                	neg    %eax
   10300:	23 45 08             	and    0x8(%ebp),%eax
}
   10303:	5d                   	pop    %ebp
   10304:	c3                   	ret    

00010305 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   10305:	55                   	push   %ebp
   10306:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10308:	8b 55 08             	mov    0x8(%ebp),%edx
   1030b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1030e:	01 d0                	add    %edx,%eax
   10310:	8d 50 ff             	lea    -0x1(%eax),%edx
   10313:	8b 45 0c             	mov    0xc(%ebp),%eax
   10316:	f7 d8                	neg    %eax
   10318:	21 d0                	and    %edx,%eax
}
   1031a:	5d                   	pop    %ebp
   1031b:	c3                   	ret    

0001031c <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   1031c:	55                   	push   %ebp
   1031d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1031f:	8b 45 08             	mov    0x8(%ebp),%eax
   10322:	0f 22 d8             	mov    %eax,%cr3
}
   10325:	90                   	nop
   10326:	5d                   	pop    %ebp
   10327:	c3                   	ret    

00010328 <pde_index>:
        uint32_t phy_page_addr : 20;
    }
}pte_t;

static inline uint32_t pde_index(uint32_t vaddr)
{
   10328:	55                   	push   %ebp
   10329:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 22) & 0x3FF;
   1032b:	8b 45 08             	mov    0x8(%ebp),%eax
   1032e:	c1 e8 16             	shr    $0x16,%eax
}
   10331:	5d                   	pop    %ebp
   10332:	c3                   	ret    

00010333 <pte_index>:

static inline uint32_t pte_index(uint32_t vaddr)
{
   10333:	55                   	push   %ebp
   10334:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;
   10336:	8b 45 08             	mov    0x8(%ebp),%eax
   10339:	c1 e8 0c             	shr    $0xc,%eax
   1033c:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10341:	5d                   	pop    %ebp
   10342:	c3                   	ret    

00010343 <pde_paddr>:

static inline uint32_t pde_paddr(pde_t * pde)
{
   10343:	55                   	push   %ebp
   10344:	89 e5                	mov    %esp,%ebp
    return (pde->phy_pt_addr << 12) ;
   10346:	8b 45 08             	mov    0x8(%ebp),%eax
   10349:	8b 00                	mov    (%eax),%eax
   1034b:	c1 e8 0c             	shr    $0xc,%eax
   1034e:	c1 e0 0c             	shl    $0xc,%eax
}
   10351:	5d                   	pop    %ebp
   10352:	c3                   	ret    

00010353 <mmu_set_page_dir>:
static inline uint32_t pte_paddr(pte_t * pte)
{
    return (pte->phy_page_addr << 12) ;
}
static inline void mmu_set_page_dir(uint32_t paddr)
{
   10353:	55                   	push   %ebp
   10354:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10356:	ff 75 08             	pushl  0x8(%ebp)
   10359:	e8 be ff ff ff       	call   1031c <write_cr3>
   1035e:	83 c4 04             	add    $0x4,%esp
}
   10361:	90                   	nop
   10362:	c9                   	leave  
   10363:	c3                   	ret    

00010364 <addr_alloc_init>:
static addr_alloc_t paddr_alloc;

static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE)));
static void addr_alloc_init(addr_alloc_t *addr_alloc,uint8_t* bits, 
    uint32_t start, uint32_t size, uint32_t page_size)
{
   10364:	55                   	push   %ebp
   10365:	89 e5                	mov    %esp,%ebp
   10367:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&addr_alloc->mutex);
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	83 ec 0c             	sub    $0xc,%esp
   10370:	50                   	push   %eax
   10371:	e8 0d 18 00 00       	call   11b83 <mutex_init>
   10376:	83 c4 10             	add    $0x10,%esp
    
    addr_alloc->start = start;
   10379:	8b 45 08             	mov    0x8(%ebp),%eax
   1037c:	8b 55 10             	mov    0x10(%ebp),%edx
   1037f:	89 50 1c             	mov    %edx,0x1c(%eax)
    addr_alloc->size = size;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	8b 55 14             	mov    0x14(%ebp),%edx
   10388:	89 50 20             	mov    %edx,0x20(%eax)
    addr_alloc->page_size = page_size;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	8b 55 18             	mov    0x18(%ebp),%edx
   10391:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&addr_alloc->bitmap, bits, size / page_size, 0);
   10394:	8b 45 14             	mov    0x14(%ebp),%eax
   10397:	ba 00 00 00 00       	mov    $0x0,%edx
   1039c:	f7 75 18             	divl   0x18(%ebp)
   1039f:	89 c2                	mov    %eax,%edx
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	83 c0 14             	add    $0x14,%eax
   103a7:	6a 00                	push   $0x0
   103a9:	52                   	push   %edx
   103aa:	ff 75 0c             	pushl  0xc(%ebp)
   103ad:	50                   	push   %eax
   103ae:	e8 a0 1a 00 00       	call   11e53 <bitmap_init>
   103b3:	83 c4 10             	add    $0x10,%esp
    
}
   103b6:	90                   	nop
   103b7:	c9                   	leave  
   103b8:	c3                   	ret    

000103b9 <addr_alloc_page>:

static uint32_t addr_alloc_page(addr_alloc_t *addr_alloc, int page_count)
{
   103b9:	55                   	push   %ebp
   103ba:	89 e5                	mov    %esp,%ebp
   103bc:	83 ec 18             	sub    $0x18,%esp
    uint32_t  addr = 0;
   103bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&addr_alloc->mutex);
   103c6:	8b 45 08             	mov    0x8(%ebp),%eax
   103c9:	83 ec 0c             	sub    $0xc,%esp
   103cc:	50                   	push   %eax
   103cd:	e8 dd 17 00 00       	call   11baf <mutex_lock>
   103d2:	83 c4 10             	add    $0x10,%esp
    int page_index = bitmap_alloc_nbits(&addr_alloc->bitmap, 0, page_count);
   103d5:	8b 45 08             	mov    0x8(%ebp),%eax
   103d8:	83 c0 14             	add    $0x14,%eax
   103db:	83 ec 04             	sub    $0x4,%esp
   103de:	ff 75 0c             	pushl  0xc(%ebp)
   103e1:	6a 00                	push   $0x0
   103e3:	50                   	push   %eax
   103e4:	e8 e3 1b 00 00       	call   11fcc <bitmap_alloc_nbits>
   103e9:	83 c4 10             	add    $0x10,%esp
   103ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   103ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103f3:	78 17                	js     1040c <addr_alloc_page+0x53>
    {
        addr = addr_alloc->start + page_index * addr_alloc->page_size;
   103f5:	8b 45 08             	mov    0x8(%ebp),%eax
   103f8:	8b 50 1c             	mov    0x1c(%eax),%edx
   103fb:	8b 45 08             	mov    0x8(%ebp),%eax
   103fe:	8b 48 24             	mov    0x24(%eax),%ecx
   10401:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10404:	0f af c1             	imul   %ecx,%eax
   10407:	01 d0                	add    %edx,%eax
   10409:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&addr_alloc->mutex);
   1040c:	8b 45 08             	mov    0x8(%ebp),%eax
   1040f:	83 ec 0c             	sub    $0xc,%esp
   10412:	50                   	push   %eax
   10413:	e8 27 18 00 00       	call   11c3f <mutex_unlock>
   10418:	83 c4 10             	add    $0x10,%esp
    return addr;
   1041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1041e:	c9                   	leave  
   1041f:	c3                   	ret    

00010420 <addr_free_page>:

static void addr_free_page(addr_alloc_t *addr_alloc, uint32_t addr, int page_count)
{
   10420:	55                   	push   %ebp
   10421:	89 e5                	mov    %esp,%ebp
   10423:	53                   	push   %ebx
   10424:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&addr_alloc->mutex);
   10427:	8b 45 08             	mov    0x8(%ebp),%eax
   1042a:	83 ec 0c             	sub    $0xc,%esp
   1042d:	50                   	push   %eax
   1042e:	e8 7c 17 00 00       	call   11baf <mutex_lock>
   10433:	83 c4 10             	add    $0x10,%esp
    uint32_t page_index = (addr - addr_alloc->start) / addr_alloc->page_size;
   10436:	8b 45 08             	mov    0x8(%ebp),%eax
   10439:	8b 40 1c             	mov    0x1c(%eax),%eax
   1043c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1043f:	89 d1                	mov    %edx,%ecx
   10441:	29 c1                	sub    %eax,%ecx
   10443:	8b 45 08             	mov    0x8(%ebp),%eax
   10446:	8b 58 24             	mov    0x24(%eax),%ebx
   10449:	89 c8                	mov    %ecx,%eax
   1044b:	ba 00 00 00 00       	mov    $0x0,%edx
   10450:	f7 f3                	div    %ebx
   10452:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&addr_alloc->bitmap, page_index, page_count,0);
   10455:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10458:	8b 55 08             	mov    0x8(%ebp),%edx
   1045b:	83 c2 14             	add    $0x14,%edx
   1045e:	6a 00                	push   $0x0
   10460:	ff 75 10             	pushl  0x10(%ebp)
   10463:	50                   	push   %eax
   10464:	52                   	push   %edx
   10465:	e8 73 1a 00 00       	call   11edd <bitmap_set_bit>
   1046a:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&addr_alloc->mutex);
   1046d:	8b 45 08             	mov    0x8(%ebp),%eax
   10470:	83 ec 0c             	sub    $0xc,%esp
   10473:	50                   	push   %eax
   10474:	e8 c6 17 00 00       	call   11c3f <mutex_unlock>
   10479:	83 c4 10             	add    $0x10,%esp
}
   1047c:	90                   	nop
   1047d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10480:	c9                   	leave  
   10481:	c3                   	ret    

00010482 <show_mem_info>:

void show_mem_info(boot_info_t *boot_info)
{
   10482:	55                   	push   %ebp
   10483:	89 e5                	mov    %esp,%ebp
   10485:	53                   	push   %ebx
   10486:	83 ec 14             	sub    $0x14,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   10489:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10490:	eb 42                	jmp    104d4 <show_mem_info+0x52>
    {
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10498:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
        boot_info->ram_region_cfg[i].start + boot_info->ram_region_cfg[i].size,
   1049c:	8b 45 08             	mov    0x8(%ebp),%eax
   1049f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104a2:	8b 1c c8             	mov    (%eax,%ecx,8),%ebx
   104a5:	8b 45 08             	mov    0x8(%ebp),%eax
   104a8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104ab:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   104af:	01 c3                	add    %eax,%ebx
   104b1:	8b 45 08             	mov    0x8(%ebp),%eax
   104b4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104b7:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104ba:	83 ec 0c             	sub    $0xc,%esp
   104bd:	52                   	push   %edx
   104be:	53                   	push   %ebx
   104bf:	50                   	push   %eax
   104c0:	ff 75 f4             	pushl  -0xc(%ebp)
   104c3:	68 0c 29 01 00       	push   $0x1290c
   104c8:	e8 75 23 00 00       	call   12842 <log_printf>
   104cd:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   104d0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104d4:	8b 45 08             	mov    0x8(%ebp),%eax
   104d7:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   104dd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104e0:	7c b0                	jl     10492 <show_mem_info+0x10>
        boot_info->ram_region_cfg[i].size);
    }
}
   104e2:	90                   	nop
   104e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104e6:	c9                   	leave  
   104e7:	c3                   	ret    

000104e8 <total_mem_size>:
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   104e8:	55                   	push   %ebp
   104e9:	89 e5                	mov    %esp,%ebp
   104eb:	83 ec 10             	sub    $0x10,%esp
    uint32_t total_size = 0;
   104ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   104f5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   104fc:	eb 11                	jmp    1050f <total_mem_size+0x27>
    {
        total_size += boot_info->ram_region_cfg[i].size;
   104fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10501:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10504:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10508:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   1050b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1050f:	8b 45 08             	mov    0x8(%ebp),%eax
   10512:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   10518:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1051b:	7c e1                	jl     104fe <total_mem_size+0x16>
    }
    return total_size;
   1051d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10520:	c9                   	leave  
   10521:	c3                   	ret    

00010522 <find_pte>:

pte_t * find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   10522:	55                   	push   %ebp
   10523:	89 e5                	mov    %esp,%ebp
   10525:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table = (pte_t *)0;
   10528:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    pde_t *pde = page_dir + pde_index(vaddr);
   1052f:	ff 75 0c             	pushl  0xc(%ebp)
   10532:	e8 f1 fd ff ff       	call   10328 <pde_index>
   10537:	83 c4 04             	add    $0x4,%esp
   1053a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10541:	8b 45 08             	mov    0x8(%ebp),%eax
   10544:	01 d0                	add    %edx,%eax
   10546:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   10549:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1054c:	0f b6 00             	movzbl (%eax),%eax
   1054f:	83 e0 01             	and    $0x1,%eax
   10552:	84 c0                	test   %al,%al
   10554:	74 10                	je     10566 <find_pte+0x44>
    {
        page_table = (pte_t *)pde_paddr(pde);
   10556:	ff 75 f0             	pushl  -0x10(%ebp)
   10559:	e8 e5 fd ff ff       	call   10343 <pde_paddr>
   1055e:	83 c4 04             	add    $0x4,%esp
   10561:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10564:	eb 4a                	jmp    105b0 <find_pte+0x8e>
    }
    else
    {
        if (alloc == 0)
   10566:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1056a:	75 07                	jne    10573 <find_pte+0x51>
        {
            return (pte_t *)0;
   1056c:	b8 00 00 00 00       	mov    $0x0,%eax
   10571:	eb 57                	jmp    105ca <find_pte+0xa8>
        }
        else
        {
            uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10573:	83 ec 08             	sub    $0x8,%esp
   10576:	6a 01                	push   $0x1
   10578:	68 00 30 01 00       	push   $0x13000
   1057d:	e8 37 fe ff ff       	call   103b9 <addr_alloc_page>
   10582:	83 c4 10             	add    $0x10,%esp
   10585:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (pg_paddr == 0)
   10588:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1058c:	75 07                	jne    10595 <find_pte+0x73>
            {
                return (pte_t *)0;
   1058e:	b8 00 00 00 00       	mov    $0x0,%eax
   10593:	eb 35                	jmp    105ca <find_pte+0xa8>
            }
            page_table = (pte_t *)pg_paddr;
   10595:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10598:	89 45 f4             	mov    %eax,-0xc(%ebp)
            kernel_memset(page_table, 0, MEM_PAGE_SIZE);        
   1059b:	83 ec 04             	sub    $0x4,%esp
   1059e:	68 00 10 00 00       	push   $0x1000
   105a3:	6a 00                	push   $0x0
   105a5:	ff 75 f4             	pushl  -0xc(%ebp)
   105a8:	e8 81 1c 00 00       	call   1222e <kernel_memset>
   105ad:	83 c4 10             	add    $0x10,%esp
        }
    }
    return page_table + pte_index(vaddr);
   105b0:	83 ec 0c             	sub    $0xc,%esp
   105b3:	ff 75 0c             	pushl  0xc(%ebp)
   105b6:	e8 78 fd ff ff       	call   10333 <pte_index>
   105bb:	83 c4 10             	add    $0x10,%esp
   105be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105c8:	01 d0                	add    %edx,%eax
    
    
}
   105ca:	c9                   	leave  
   105cb:	c3                   	ret    

000105cc <memory_create_map>:
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   105cc:	55                   	push   %ebp
   105cd:	89 e5                	mov    %esp,%ebp
   105cf:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < count; i++)
   105d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105d9:	eb 6a                	jmp    10645 <memory_create_map+0x79>
    {
        log_printf("create map %d: 0x%x - 0x%x, 0x%x\n", i, vaddr, vaddr + MEM_PAGE_SIZE, paddr,perm);
   105db:	8b 45 0c             	mov    0xc(%ebp),%eax
   105de:	05 00 10 00 00       	add    $0x1000,%eax
   105e3:	83 ec 08             	sub    $0x8,%esp
   105e6:	ff 75 18             	pushl  0x18(%ebp)
   105e9:	ff 75 10             	pushl  0x10(%ebp)
   105ec:	50                   	push   %eax
   105ed:	ff 75 0c             	pushl  0xc(%ebp)
   105f0:	ff 75 f4             	pushl  -0xc(%ebp)
   105f3:	68 2c 29 01 00       	push   $0x1292c
   105f8:	e8 45 22 00 00       	call   12842 <log_printf>
   105fd:	83 c4 20             	add    $0x20,%esp
        pte_t * pte = find_pte(page_dir, vaddr,1);
   10600:	83 ec 04             	sub    $0x4,%esp
   10603:	6a 01                	push   $0x1
   10605:	ff 75 0c             	pushl  0xc(%ebp)
   10608:	ff 75 08             	pushl  0x8(%ebp)
   1060b:	e8 12 ff ff ff       	call   10522 <find_pte>
   10610:	83 c4 10             	add    $0x10,%esp
   10613:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   10616:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1061a:	75 07                	jne    10623 <memory_create_map+0x57>
        {
            return -1;
   1061c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10621:	eb 2f                	jmp    10652 <memory_create_map+0x86>
        }
        ASSERT(pte->present == 0);
        pte->v = paddr | perm | PTE_P;
   10623:	8b 45 10             	mov    0x10(%ebp),%eax
   10626:	0b 45 18             	or     0x18(%ebp),%eax
   10629:	83 c8 01             	or     $0x1,%eax
   1062c:	89 c2                	mov    %eax,%edx
   1062e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10631:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   10633:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   1063a:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for(int i = 0; i < count; i++)
   10641:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10645:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10648:	3b 45 14             	cmp    0x14(%ebp),%eax
   1064b:	7c 8e                	jl     105db <memory_create_map+0xf>
    }
    return 0;
   1064d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10652:	c9                   	leave  
   10653:	c3                   	ret    

00010654 <create_kernel_table>:
void create_kernel_table(void)
{
   10654:	55                   	push   %ebp
   10655:	89 e5                	mov    %esp,%ebp
   10657:	83 ec 28             	sub    $0x28,%esp
    static memory_map_t kernel_map[] = {
        {kernel_base,s_text,0,0},
        {s_text,e_text,s_text,0},
        {s_data,(void *)MEM_EBDA_START,s_data,0},
    };
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   1065a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10661:	eb 6f                	jmp    106d2 <create_kernel_table+0x7e>
    {
        memory_map_t *map = &kernel_map[i];
   10663:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10666:	c1 e0 04             	shl    $0x4,%eax
   10669:	05 60 2d 01 00       	add    $0x12d60,%eax
   1066e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10671:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10674:	8b 00                	mov    (%eax),%eax
   10676:	68 00 10 00 00       	push   $0x1000
   1067b:	50                   	push   %eax
   1067c:	e8 77 fc ff ff       	call   102f8 <down2>
   10681:	83 c4 08             	add    $0x8,%esp
   10684:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10687:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068a:	8b 40 04             	mov    0x4(%eax),%eax
   1068d:	68 00 10 00 00       	push   $0x1000
   10692:	50                   	push   %eax
   10693:	e8 6d fc ff ff       	call   10305 <up2>
   10698:	83 c4 08             	add    $0x8,%esp
   1069b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1069e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   106a1:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106a4:	c1 e8 0c             	shr    $0xc,%eax
   106a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir,vstart, (uint32_t)map->pstart,page_count,map->perm);
   106aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ad:	8b 40 0c             	mov    0xc(%eax),%eax
   106b0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   106b3:	8b 52 08             	mov    0x8(%edx),%edx
   106b6:	83 ec 0c             	sub    $0xc,%esp
   106b9:	50                   	push   %eax
   106ba:	ff 75 e4             	pushl  -0x1c(%ebp)
   106bd:	52                   	push   %edx
   106be:	ff 75 ec             	pushl  -0x14(%ebp)
   106c1:	68 00 40 01 00       	push   $0x14000
   106c6:	e8 01 ff ff ff       	call   105cc <memory_create_map>
   106cb:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   106ce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d5:	83 f8 02             	cmp    $0x2,%eax
   106d8:	76 89                	jbe    10663 <create_kernel_table+0xf>
    }


}
   106da:	90                   	nop
   106db:	c9                   	leave  
   106dc:	c3                   	ret    

000106dd <memory_init>:
void memory_init(boot_info_t *boot_info)
{
   106dd:	55                   	push   %ebp
   106de:	89 e5                	mov    %esp,%ebp
   106e0:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    log_printf("mem init\n");
   106e3:	83 ec 0c             	sub    $0xc,%esp
   106e6:	68 4e 29 01 00       	push   $0x1294e
   106eb:	e8 52 21 00 00       	call   12842 <log_printf>
   106f0:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   106f3:	83 ec 0c             	sub    $0xc,%esp
   106f6:	ff 75 08             	pushl  0x8(%ebp)
   106f9:	e8 84 fd ff ff       	call   10482 <show_mem_info>
   106fe:	83 c4 10             	add    $0x10,%esp

    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10701:	c7 45 f4 e0 af 01 00 	movl   $0x1afe0,-0xc(%ebp)
    uint32_t mem_up1MB_free_size = total_mem_size(boot_info) - MEM_EXT_START;
   10708:	83 ec 0c             	sub    $0xc,%esp
   1070b:	ff 75 08             	pushl  0x8(%ebp)
   1070e:	e8 d5 fd ff ff       	call   104e8 <total_mem_size>
   10713:	83 c4 10             	add    $0x10,%esp
   10716:	2d 00 00 10 00       	sub    $0x100000,%eax
   1071b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free_size = down2(mem_up1MB_free_size,MEM_PAGE_SIZE);
   1071e:	83 ec 08             	sub    $0x8,%esp
   10721:	68 00 10 00 00       	push   $0x1000
   10726:	ff 75 f0             	pushl  -0x10(%ebp)
   10729:	e8 ca fb ff ff       	call   102f8 <down2>
   1072e:	83 c4 10             	add    $0x10,%esp
   10731:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory begin addr: 0x%x ,size 0x%x\n", MEM_EXT_START, mem_up1MB_free_size);
   10734:	83 ec 04             	sub    $0x4,%esp
   10737:	ff 75 f0             	pushl  -0x10(%ebp)
   1073a:	68 00 00 10 00       	push   $0x100000
   1073f:	68 58 29 01 00       	push   $0x12958
   10744:	e8 f9 20 00 00       	call   12842 <log_printf>
   10749:	83 c4 10             	add    $0x10,%esp
    
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free_size, MEM_PAGE_SIZE);
   1074c:	83 ec 0c             	sub    $0xc,%esp
   1074f:	68 00 10 00 00       	push   $0x1000
   10754:	ff 75 f0             	pushl  -0x10(%ebp)
   10757:	68 00 00 10 00       	push   $0x100000
   1075c:	ff 75 f4             	pushl  -0xc(%ebp)
   1075f:	68 00 30 01 00       	push   $0x13000
   10764:	e8 fb fb ff ff       	call   10364 <addr_alloc_init>
   10769:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   1076c:	a1 20 30 01 00       	mov    0x13020,%eax
   10771:	c1 e8 0c             	shr    $0xc,%eax
   10774:	83 ec 0c             	sub    $0xc,%esp
   10777:	50                   	push   %eax
   10778:	e8 c0 16 00 00       	call   11e3d <bitmap_byte_count>
   1077d:	83 c4 10             	add    $0x10,%esp
   10780:	01 45 f4             	add    %eax,-0xc(%ebp)
    
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);

    create_kernel_table();
   10783:	e8 cc fe ff ff       	call   10654 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10788:	b8 00 40 01 00       	mov    $0x14000,%eax
   1078d:	83 ec 0c             	sub    $0xc,%esp
   10790:	50                   	push   %eax
   10791:	e8 bd fb ff ff       	call   10353 <mmu_set_page_dir>
   10796:	83 c4 10             	add    $0x10,%esp
}
   10799:	90                   	nop
   1079a:	c9                   	leave  
   1079b:	c3                   	ret    

0001079c <list_node_init>:
    struct _list_node_t* next;
}list_node_t;


static inline void list_node_init(list_node_t *node)
{
   1079c:	55                   	push   %ebp
   1079d:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   1079f:	8b 45 08             	mov    0x8(%ebp),%eax
   107a2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   107a9:	8b 45 08             	mov    0x8(%ebp),%eax
   107ac:	8b 50 04             	mov    0x4(%eax),%edx
   107af:	8b 45 08             	mov    0x8(%ebp),%eax
   107b2:	89 10                	mov    %edx,(%eax)
}
   107b4:	90                   	nop
   107b5:	5d                   	pop    %ebp
   107b6:	c3                   	ret    

000107b7 <list_node_next>:
static inline list_node_t* list_node_pre(list_node_t* node)
{
    return node->pre;
} 
static inline list_node_t* list_node_next(list_node_t* node)
{
   107b7:	55                   	push   %ebp
   107b8:	89 e5                	mov    %esp,%ebp
    return node->next;
   107ba:	8b 45 08             	mov    0x8(%ebp),%eax
   107bd:	8b 40 04             	mov    0x4(%eax),%eax
}
   107c0:	5d                   	pop    %ebp
   107c1:	c3                   	ret    

000107c2 <list_count>:
{
    return list->count == 0;
}

static inline int list_count(list_t * list)
{
   107c2:	55                   	push   %ebp
   107c3:	89 e5                	mov    %esp,%ebp
    return list->count;
   107c5:	8b 45 08             	mov    0x8(%ebp),%eax
   107c8:	8b 40 08             	mov    0x8(%eax),%eax
}
   107cb:	5d                   	pop    %ebp
   107cc:	c3                   	ret    

000107cd <list_first>:
static inline list_node_t* list_first(list_t * list)
{
   107cd:	55                   	push   %ebp
   107ce:	89 e5                	mov    %esp,%ebp
    return list->first;
   107d0:	8b 45 08             	mov    0x8(%ebp),%eax
   107d3:	8b 00                	mov    (%eax),%eax
}
   107d5:	5d                   	pop    %ebp
   107d6:	c3                   	ret    

000107d7 <hlt>:
    uint32_t addr[] = {offset ,selector};
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}

static inline void hlt(void)
{
   107d7:	55                   	push   %ebp
   107d8:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   107da:	f4                   	hlt    
}
   107db:	90                   	nop
   107dc:	5d                   	pop    %ebp
   107dd:	c3                   	ret    

000107de <write_tr>:

static inline void write_tr(uint16_t selector)
{
   107de:	55                   	push   %ebp
   107df:	89 e5                	mov    %esp,%ebp
   107e1:	83 ec 04             	sub    $0x4,%esp
   107e4:	8b 45 08             	mov    0x8(%ebp),%eax
   107e7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(selector));
   107eb:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   107ef:	0f 00 d8             	ltr    %ax
}
   107f2:	90                   	nop
   107f3:	c9                   	leave  
   107f4:	c3                   	ret    

000107f5 <tss_init>:
#include "cpu/irq.h"
static task_manager_t task_manager;
int need_reschedule = 0;
static uint32_t idle_task_stack[1024];
static int tss_init(task_t *task,uint32_t entry,uint32_t esp)
{
   107f5:	55                   	push   %ebp
   107f6:	89 e5                	mov    %esp,%ebp
   107f8:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   107fb:	e8 a7 07 00 00       	call   10fa7 <gdt_alloc_desc>
   10800:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel == -1)
   10803:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   10807:	75 1a                	jne    10823 <tss_init+0x2e>
    {
        log_printf("tss_init: gdt_alloc_desc failed\n");
   10809:	83 ec 0c             	sub    $0xc,%esp
   1080c:	68 84 29 01 00       	push   $0x12984
   10811:	e8 2c 20 00 00       	call   12842 <log_printf>
   10816:	83 c4 10             	add    $0x10,%esp
        return -1;
   10819:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1081e:	e9 d4 00 00 00       	jmp    108f7 <tss_init+0x102>
    }
    segment_desc_set(tss_sel,(uint32_t)&task->tss,sizeof(tss_t),
   10823:	8b 45 08             	mov    0x8(%ebp),%eax
   10826:	83 c0 4c             	add    $0x4c,%eax
   10829:	68 89 00 00 00       	push   $0x89
   1082e:	6a 68                	push   $0x68
   10830:	50                   	push   %eax
   10831:	ff 75 f4             	pushl  -0xc(%ebp)
   10834:	e8 a4 06 00 00       	call   10edd <segment_desc_set>
   10839:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL_0 | SEG_TYPE_TSS);
    kernel_memset(&task->tss,0,sizeof(tss_t));
   1083c:	8b 45 08             	mov    0x8(%ebp),%eax
   1083f:	83 c0 4c             	add    $0x4c,%eax
   10842:	83 ec 04             	sub    $0x4,%esp
   10845:	6a 68                	push   $0x68
   10847:	6a 00                	push   $0x0
   10849:	50                   	push   %eax
   1084a:	e8 df 19 00 00       	call   1222e <kernel_memset>
   1084f:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10852:	8b 45 08             	mov    0x8(%ebp),%eax
   10855:	8b 55 0c             	mov    0xc(%ebp),%edx
   10858:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1085b:	8b 45 08             	mov    0x8(%ebp),%eax
   1085e:	8b 55 10             	mov    0x10(%ebp),%edx
   10861:	89 50 50             	mov    %edx,0x50(%eax)
   10864:	8b 45 08             	mov    0x8(%ebp),%eax
   10867:	8b 50 50             	mov    0x50(%eax),%edx
   1086a:	8b 45 08             	mov    0x8(%ebp),%eax
   1086d:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10873:	8b 45 08             	mov    0x8(%ebp),%eax
   10876:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
   1087d:	8b 45 08             	mov    0x8(%ebp),%eax
   10880:	8b 50 54             	mov    0x54(%eax),%edx
   10883:	8b 45 08             	mov    0x8(%ebp),%eax
   10886:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   1088c:	8b 45 08             	mov    0x8(%ebp),%eax
   1088f:	c7 80 a8 00 00 00 10 	movl   $0x10,0xa8(%eax)
   10896:	00 00 00 
   10899:	8b 45 08             	mov    0x8(%ebp),%eax
   1089c:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   108a2:	8b 45 08             	mov    0x8(%ebp),%eax
   108a5:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   108ab:	8b 45 08             	mov    0x8(%ebp),%eax
   108ae:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   108b4:	8b 45 08             	mov    0x8(%ebp),%eax
   108b7:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   108bd:	8b 45 08             	mov    0x8(%ebp),%eax
   108c0:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   108c6:	8b 45 08             	mov    0x8(%ebp),%eax
   108c9:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   108cf:	8b 45 08             	mov    0x8(%ebp),%eax
   108d2:	c7 80 98 00 00 00 08 	movl   $0x8,0x98(%eax)
   108d9:	00 00 00 
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   108dc:	8b 45 08             	mov    0x8(%ebp),%eax
   108df:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)
    task->tss_sel = tss_sel;
   108e6:	8b 45 08             	mov    0x8(%ebp),%eax
   108e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   108ec:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    return 0;
   108f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   108f7:	c9                   	leave  
   108f8:	c3                   	ret    

000108f9 <task_init>:
int task_init(task_t *task,const char *name,uint32_t entry,uint32_t esp)
{
   108f9:	55                   	push   %ebp
   108fa:	89 e5                	mov    %esp,%ebp
   108fc:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task *)0);
    //tss_init(task,entry,esp);
    uint32_t * pesp = (uint32_t *)esp;
   108ff:	8b 45 14             	mov    0x14(%ebp),%eax
   10902:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pesp)
   10905:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10909:	74 55                	je     10960 <task_init+0x67>
    {
       *(--pesp) = entry;              // 任务入口地址
   1090b:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   1090f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10912:	8b 55 10             	mov    0x10(%ebp),%edx
   10915:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;                  // ebp
   10917:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   1091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1091e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;                  // ebx
   10924:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10928:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1092b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;                  // esi
   10931:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10935:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10938:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;                  // edi
   1093e:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10942:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10945:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = EFLAGS_DEFAULT | EFLAGS_IF; // EFLAGS，允许中断
   1094b:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   1094f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10952:	c7 00 02 02 00 00    	movl   $0x202,(%eax)
        task->stack = pesp;
   10958:	8b 45 08             	mov    0x8(%ebp),%eax
   1095b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1095e:	89 10                	mov    %edx,(%eax)
    }
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   10960:	8b 45 08             	mov    0x8(%ebp),%eax
   10963:	83 c0 14             	add    $0x14,%eax
   10966:	83 ec 04             	sub    $0x4,%esp
   10969:	6a 20                	push   $0x20
   1096b:	ff 75 0c             	pushl  0xc(%ebp)
   1096e:	50                   	push   %eax
   1096f:	e8 4c 17 00 00       	call   120c0 <kernel_strncpy>
   10974:	83 c4 10             	add    $0x10,%esp
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10977:	8b 45 08             	mov    0x8(%ebp),%eax
   1097a:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
    task->slice_ticks = task->time_ticks;
   10981:	8b 45 08             	mov    0x8(%ebp),%eax
   10984:	8b 50 10             	mov    0x10(%eax),%edx
   10987:	8b 45 08             	mov    0x8(%ebp),%eax
   1098a:	89 50 0c             	mov    %edx,0xc(%eax)
    task->sleep_ticks = 0;
   1098d:	8b 45 08             	mov    0x8(%ebp),%eax
   10990:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    task->state = TASK_CREATED;
   10997:	8b 45 08             	mov    0x8(%ebp),%eax
   1099a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list_node_init(&task->run_node);
   109a1:	8b 45 08             	mov    0x8(%ebp),%eax
   109a4:	83 c0 34             	add    $0x34,%eax
   109a7:	83 ec 0c             	sub    $0xc,%esp
   109aa:	50                   	push   %eax
   109ab:	e8 ec fd ff ff       	call   1079c <list_node_init>
   109b0:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   109b3:	8b 45 08             	mov    0x8(%ebp),%eax
   109b6:	83 c0 3c             	add    $0x3c,%eax
   109b9:	83 ec 0c             	sub    $0xc,%esp
   109bc:	50                   	push   %eax
   109bd:	e8 da fd ff ff       	call   1079c <list_node_init>
   109c2:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   109c5:	8b 45 08             	mov    0x8(%ebp),%eax
   109c8:	83 c0 44             	add    $0x44,%eax
   109cb:	83 ec 0c             	sub    $0xc,%esp
   109ce:	50                   	push   %eax
   109cf:	e8 c8 fd ff ff       	call   1079c <list_node_init>
   109d4:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   109d7:	e8 c0 0e 00 00       	call   1189c <irq_enter_protection>
   109dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_ready(task);
   109df:	83 ec 0c             	sub    $0xc,%esp
   109e2:	ff 75 08             	pushl  0x8(%ebp)
   109e5:	e8 3b 01 00 00       	call   10b25 <task_set_ready>
   109ea:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   109ed:	8b 45 08             	mov    0x8(%ebp),%eax
   109f0:	83 c0 3c             	add    $0x3c,%eax
   109f3:	83 ec 08             	sub    $0x8,%esp
   109f6:	50                   	push   %eax
   109f7:	68 48 50 01 00       	push   $0x15048
   109fc:	e8 09 1c 00 00       	call   1260a <list_insert_last>
   10a01:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10a04:	83 ec 0c             	sub    $0xc,%esp
   10a07:	ff 75 f0             	pushl  -0x10(%ebp)
   10a0a:	e8 a5 0e 00 00       	call   118b4 <irq_leave_protection>
   10a0f:	83 c4 10             	add    $0x10,%esp
    return 0;
   10a12:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a17:	c9                   	leave  
   10a18:	c3                   	ret    

00010a19 <task_switch_from_to>:
void simple_switch(uint32_t ** from,uint32_t *to);
void interrupt_switch(uint32_t ** from,uint32_t *to);
void task_switch_from_to(task_t *from,task_t * to)
{
   10a19:	55                   	push   %ebp
   10a1a:	89 e5                	mov    %esp,%ebp
   10a1c:	83 ec 08             	sub    $0x8,%esp
    //switch_to_tss(to->tss_sel);
    interrupt_switch(&from->stack,to->stack);
   10a1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a22:	8b 10                	mov    (%eax),%edx
   10a24:	8b 45 08             	mov    0x8(%ebp),%eax
   10a27:	83 ec 08             	sub    $0x8,%esp
   10a2a:	52                   	push   %edx
   10a2b:	50                   	push   %eax
   10a2c:	e8 99 f8 ff ff       	call   102ca <interrupt_switch>
   10a31:	83 c4 10             	add    $0x10,%esp
}
   10a34:	90                   	nop
   10a35:	c9                   	leave  
   10a36:	c3                   	ret    

00010a37 <idle_task_entry>:
static void idle_task_entry(void)
{
   10a37:	55                   	push   %ebp
   10a38:	89 e5                	mov    %esp,%ebp
    while(1)
    {
        hlt();
   10a3a:	e8 98 fd ff ff       	call   107d7 <hlt>
   10a3f:	eb f9                	jmp    10a3a <idle_task_entry+0x3>

00010a41 <task_manager_init>:
    }
}
void task_manager_init()
{
   10a41:	55                   	push   %ebp
   10a42:	89 e5                	mov    %esp,%ebp
   10a44:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10a47:	83 ec 0c             	sub    $0xc,%esp
   10a4a:	68 30 50 01 00       	push   $0x15030
   10a4f:	e8 32 1b 00 00       	call   12586 <list_init>
   10a54:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10a57:	83 ec 0c             	sub    $0xc,%esp
   10a5a:	68 48 50 01 00       	push   $0x15048
   10a5f:	e8 22 1b 00 00       	call   12586 <list_init>
   10a64:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10a67:	83 ec 0c             	sub    $0xc,%esp
   10a6a:	68 3c 50 01 00       	push   $0x1503c
   10a6f:	e8 12 1b 00 00       	call   12586 <list_init>
   10a74:	83 c4 10             	add    $0x10,%esp

    task_manager.current_task = (task_t *)0;
   10a77:	c7 05 2c 50 01 00 00 	movl   $0x0,0x1502c
   10a7e:	00 00 00 
    task_manager.from_task = (task_t *)0;
   10a81:	c7 05 24 50 01 00 00 	movl   $0x0,0x15024
   10a88:	00 00 00 
    task_manager.to_task = (task_t *)0;
   10a8b:	c7 05 28 50 01 00 00 	movl   $0x0,0x15028
   10a92:	00 00 00 
    task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE ;
   10a95:	c7 05 20 50 01 00 00 	movl   $0x0,0x15020
   10a9c:	00 00 00 

    task_init(&task_manager.idle_task,"idle_task",idle_task_entry,(uint32_t)&idle_task_stack[1024]);
   10a9f:	ba e0 61 01 00       	mov    $0x161e0,%edx
   10aa4:	b8 37 0a 01 00       	mov    $0x10a37,%eax
   10aa9:	52                   	push   %edx
   10aaa:	50                   	push   %eax
   10aab:	68 a5 29 01 00       	push   $0x129a5
   10ab0:	68 0c 51 01 00       	push   $0x1510c
   10ab5:	e8 3f fe ff ff       	call   108f9 <task_init>
   10aba:	83 c4 10             	add    $0x10,%esp
}
   10abd:	90                   	nop
   10abe:	c9                   	leave  
   10abf:	c3                   	ret    

00010ac0 <task_first_init>:

void task_first_init()
{
   10ac0:	55                   	push   %ebp
   10ac1:	89 e5                	mov    %esp,%ebp
   10ac3:	83 ec 08             	sub    $0x8,%esp
    
    task_init(&task_manager.first_task,"first_task",0,0);
   10ac6:	6a 00                	push   $0x0
   10ac8:	6a 00                	push   $0x0
   10aca:	68 af 29 01 00       	push   $0x129af
   10acf:	68 54 50 01 00       	push   $0x15054
   10ad4:	e8 20 fe ff ff       	call   108f9 <task_init>
   10ad9:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10adc:	a1 08 51 01 00       	mov    0x15108,%eax
   10ae1:	0f b7 c0             	movzwl %ax,%eax
   10ae4:	83 ec 0c             	sub    $0xc,%esp
   10ae7:	50                   	push   %eax
   10ae8:	e8 f1 fc ff ff       	call   107de <write_tr>
   10aed:	83 c4 10             	add    $0x10,%esp
    task_manager.current_task = &task_manager.first_task;
   10af0:	c7 05 2c 50 01 00 54 	movl   $0x15054,0x1502c
   10af7:	50 01 00 
}
   10afa:	90                   	nop
   10afb:	c9                   	leave  
   10afc:	c3                   	ret    

00010afd <get_from_task>:
task_t * get_from_task()
{
   10afd:	55                   	push   %ebp
   10afe:	89 e5                	mov    %esp,%ebp
    return task_manager.from_task;
   10b00:	a1 24 50 01 00       	mov    0x15024,%eax
}
   10b05:	5d                   	pop    %ebp
   10b06:	c3                   	ret    

00010b07 <get_to_task>:
task_t * get_to_task()
{
   10b07:	55                   	push   %ebp
   10b08:	89 e5                	mov    %esp,%ebp
    return task_manager.to_task;
   10b0a:	a1 28 50 01 00       	mov    0x15028,%eax
}
   10b0f:	5d                   	pop    %ebp
   10b10:	c3                   	ret    

00010b11 <task_is_need_reschedule>:
uint32_t task_is_need_reschedule()
{
   10b11:	55                   	push   %ebp
   10b12:	89 e5                	mov    %esp,%ebp
    return task_manager.need_reschedule;
   10b14:	a1 20 50 01 00       	mov    0x15020,%eax
}
   10b19:	5d                   	pop    %ebp
   10b1a:	c3                   	ret    

00010b1b <task_first_task>:
task_t * task_first_task()
{
   10b1b:	55                   	push   %ebp
   10b1c:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10b1e:	b8 54 50 01 00       	mov    $0x15054,%eax
}
   10b23:	5d                   	pop    %ebp
   10b24:	c3                   	ret    

00010b25 <task_set_ready>:

void task_set_ready(task_t *task)
{
   10b25:	55                   	push   %ebp
   10b26:	89 e5                	mov    %esp,%ebp
   10b28:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   10b2b:	81 7d 08 0c 51 01 00 	cmpl   $0x1510c,0x8(%ebp)
   10b32:	74 23                	je     10b57 <task_set_ready+0x32>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   10b34:	8b 45 08             	mov    0x8(%ebp),%eax
   10b37:	83 c0 34             	add    $0x34,%eax
   10b3a:	83 ec 08             	sub    $0x8,%esp
   10b3d:	50                   	push   %eax
   10b3e:	68 30 50 01 00       	push   $0x15030
   10b43:	e8 c2 1a 00 00       	call   1260a <list_insert_last>
   10b48:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10b4b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4e:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
   10b55:	eb 01                	jmp    10b58 <task_set_ready+0x33>
        return;
   10b57:	90                   	nop
}
   10b58:	c9                   	leave  
   10b59:	c3                   	ret    

00010b5a <task_set_block>:

void task_set_block(task_t *task)
{
   10b5a:	55                   	push   %ebp
   10b5b:	89 e5                	mov    %esp,%ebp
   10b5d:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   10b60:	81 7d 08 0c 51 01 00 	cmpl   $0x1510c,0x8(%ebp)
   10b67:	74 19                	je     10b82 <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   10b69:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6c:	83 c0 34             	add    $0x34,%eax
   10b6f:	83 ec 08             	sub    $0x8,%esp
   10b72:	50                   	push   %eax
   10b73:	68 30 50 01 00       	push   $0x15030
   10b78:	e8 68 1b 00 00       	call   126e5 <list_remove>
   10b7d:	83 c4 10             	add    $0x10,%esp
   10b80:	eb 01                	jmp    10b83 <task_set_block+0x29>
        return;
   10b82:	90                   	nop
}
   10b83:	c9                   	leave  
   10b84:	c3                   	ret    

00010b85 <task_current>:

task_t * task_current()
{
   10b85:	55                   	push   %ebp
   10b86:	89 e5                	mov    %esp,%ebp
    return task_manager.current_task;
   10b88:	a1 2c 50 01 00       	mov    0x1502c,%eax
}
   10b8d:	5d                   	pop    %ebp
   10b8e:	c3                   	ret    

00010b8f <sys_sched_yield>:
int sys_sched_yield()
{
   10b8f:	55                   	push   %ebp
   10b90:	89 e5                	mov    %esp,%ebp
   10b92:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10b95:	e8 02 0d 00 00       	call   1189c <irq_enter_protection>
   10b9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&task_manager.ready_list) > 1)
   10b9d:	83 ec 0c             	sub    $0xc,%esp
   10ba0:	68 30 50 01 00       	push   $0x15030
   10ba5:	e8 18 fc ff ff       	call   107c2 <list_count>
   10baa:	83 c4 10             	add    $0x10,%esp
   10bad:	83 f8 01             	cmp    $0x1,%eax
   10bb0:	7e 29                	jle    10bdb <sys_sched_yield+0x4c>
    {
        task_t * current_task = task_current();
   10bb2:	e8 ce ff ff ff       	call   10b85 <task_current>
   10bb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(current_task);
   10bba:	83 ec 0c             	sub    $0xc,%esp
   10bbd:	ff 75 f0             	pushl  -0x10(%ebp)
   10bc0:	e8 95 ff ff ff       	call   10b5a <task_set_block>
   10bc5:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   10bc8:	83 ec 0c             	sub    $0xc,%esp
   10bcb:	ff 75 f0             	pushl  -0x10(%ebp)
   10bce:	e8 52 ff ff ff       	call   10b25 <task_set_ready>
   10bd3:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10bd6:	e8 78 00 00 00       	call   10c53 <task_dispatch>
    }
    irq_leave_protection(state);
   10bdb:	83 ec 0c             	sub    $0xc,%esp
   10bde:	ff 75 f4             	pushl  -0xc(%ebp)
   10be1:	e8 ce 0c 00 00       	call   118b4 <irq_leave_protection>
   10be6:	83 c4 10             	add    $0x10,%esp
    return 0;
   10be9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10bee:	c9                   	leave  
   10bef:	c3                   	ret    

00010bf0 <task_next_run>:

task_t * task_next_run()
{
   10bf0:	55                   	push   %ebp
   10bf1:	89 e5                	mov    %esp,%ebp
   10bf3:	83 ec 10             	sub    $0x10,%esp
    if(list_count(&task_manager.ready_list) == 0)
   10bf6:	68 30 50 01 00       	push   $0x15030
   10bfb:	e8 c2 fb ff ff       	call   107c2 <list_count>
   10c00:	83 c4 04             	add    $0x4,%esp
   10c03:	85 c0                	test   %eax,%eax
   10c05:	75 07                	jne    10c0e <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   10c07:	b8 0c 51 01 00       	mov    $0x1510c,%eax
   10c0c:	eb 30                	jmp    10c3e <task_next_run+0x4e>
    }
    list_node_t * node = list_first(&task_manager.ready_list);
   10c0e:	68 30 50 01 00       	push   $0x15030
   10c13:	e8 b5 fb ff ff       	call   107cd <list_first>
   10c18:	83 c4 04             	add    $0x4,%esp
   10c1b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(node)
   10c1e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10c22:	74 15                	je     10c39 <task_next_run+0x49>
    {
        return list_node_parent(node,task_t,run_node);
   10c24:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10c28:	74 08                	je     10c32 <task_next_run+0x42>
   10c2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c2d:	83 e8 34             	sub    $0x34,%eax
   10c30:	eb 0c                	jmp    10c3e <task_next_run+0x4e>
   10c32:	b8 00 00 00 00       	mov    $0x0,%eax
   10c37:	eb 05                	jmp    10c3e <task_next_run+0x4e>
    }
    return (task_t *)0;
   10c39:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c3e:	c9                   	leave  
   10c3f:	c3                   	ret    

00010c40 <schedule_switch>:

void schedule_switch()
{
   10c40:	55                   	push   %ebp
   10c41:	89 e5                	mov    %esp,%ebp
   10c43:	83 ec 08             	sub    $0x8,%esp
    task_dispatch();
   10c46:	e8 08 00 00 00       	call   10c53 <task_dispatch>
    do_schedule_switch();
   10c4b:	e8 45 01 00 00       	call   10d95 <do_schedule_switch>
}
   10c50:	90                   	nop
   10c51:	c9                   	leave  
   10c52:	c3                   	ret    

00010c53 <task_dispatch>:
void task_dispatch()
{
   10c53:	55                   	push   %ebp
   10c54:	89 e5                	mov    %esp,%ebp
   10c56:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10c59:	e8 3e 0c 00 00       	call   1189c <irq_enter_protection>
   10c5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * next_task = task_next_run();
   10c61:	e8 8a ff ff ff       	call   10bf0 <task_next_run>
   10c66:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next_task != task_current())
   10c69:	e8 17 ff ff ff       	call   10b85 <task_current>
   10c6e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10c71:	74 34                	je     10ca7 <task_dispatch+0x54>
    {
        task_t * from = task_current();
   10c73:	e8 0d ff ff ff       	call   10b85 <task_current>
   10c78:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.current_task = next_task;
   10c7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c7e:	a3 2c 50 01 00       	mov    %eax,0x1502c
        next_task->state = TASK_RUNNING;
   10c83:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c86:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        task_manager.need_reschedule = TASK_NEED_RESCHEDULE;
   10c8d:	c7 05 20 50 01 00 01 	movl   $0x1,0x15020
   10c94:	00 00 00 
        task_manager.from_task = from;
   10c97:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10c9a:	a3 24 50 01 00       	mov    %eax,0x15024
        task_manager.to_task = next_task;
   10c9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ca2:	a3 28 50 01 00       	mov    %eax,0x15028
    }
    irq_leave_protection(state);
   10ca7:	83 ec 0c             	sub    $0xc,%esp
   10caa:	ff 75 f4             	pushl  -0xc(%ebp)
   10cad:	e8 02 0c 00 00       	call   118b4 <irq_leave_protection>
   10cb2:	83 c4 10             	add    $0x10,%esp
}
   10cb5:	90                   	nop
   10cb6:	c9                   	leave  
   10cb7:	c3                   	ret    

00010cb8 <task_time_tick>:

void task_time_tick()
{
   10cb8:	55                   	push   %ebp
   10cb9:	89 e5                	mov    %esp,%ebp
   10cbb:	83 ec 18             	sub    $0x18,%esp
    if(task_manager.need_reschedule)
   10cbe:	a1 20 50 01 00       	mov    0x15020,%eax
   10cc3:	85 c0                	test   %eax,%eax
   10cc5:	0f 85 c7 00 00 00    	jne    10d92 <task_time_tick+0xda>
    {
        return; 
    }
    list_node_t * curr = list_first(&task_manager.sleep_list);
   10ccb:	68 3c 50 01 00       	push   $0x1503c
   10cd0:	e8 f8 fa ff ff       	call   107cd <list_first>
   10cd5:	83 c4 04             	add    $0x4,%esp
   10cd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   10cdb:	eb 5f                	jmp    10d3c <task_time_tick+0x84>
    {
        list_node_t * next = list_node_next(curr);
   10cdd:	ff 75 f4             	pushl  -0xc(%ebp)
   10ce0:	e8 d2 fa ff ff       	call   107b7 <list_node_next>
   10ce5:	83 c4 04             	add    $0x4,%esp
   10ce8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   10ceb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10cef:	74 08                	je     10cf9 <task_time_tick+0x41>
   10cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cf4:	83 e8 34             	sub    $0x34,%eax
   10cf7:	eb 05                	jmp    10cfe <task_time_tick+0x46>
   10cf9:	b8 00 00 00 00       	mov    $0x0,%eax
   10cfe:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task->sleep_ticks--;
   10d01:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10d04:	8b 40 08             	mov    0x8(%eax),%eax
   10d07:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10d0d:	89 50 08             	mov    %edx,0x8(%eax)
        if(task->sleep_ticks <= 0)
   10d10:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10d13:	8b 40 08             	mov    0x8(%eax),%eax
   10d16:	85 c0                	test   %eax,%eax
   10d18:	7f 1c                	jg     10d36 <task_time_tick+0x7e>
        {
            task_set_wakeup(task);
   10d1a:	83 ec 0c             	sub    $0xc,%esp
   10d1d:	ff 75 e8             	pushl  -0x18(%ebp)
   10d20:	e8 f9 00 00 00       	call   10e1e <task_set_wakeup>
   10d25:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   10d28:	83 ec 0c             	sub    $0xc,%esp
   10d2b:	ff 75 e8             	pushl  -0x18(%ebp)
   10d2e:	e8 f2 fd ff ff       	call   10b25 <task_set_ready>
   10d33:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   10d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10d39:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   10d3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d40:	75 9b                	jne    10cdd <task_time_tick+0x25>
    }
    task_t * current_task = task_current();
   10d42:	e8 3e fe ff ff       	call   10b85 <task_current>
   10d47:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current_task->slice_ticks--;
   10d4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d4d:	8b 40 0c             	mov    0xc(%eax),%eax
   10d50:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d53:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d56:	89 50 0c             	mov    %edx,0xc(%eax)
    if(current_task->slice_ticks <= 0)
   10d59:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d5c:	8b 40 0c             	mov    0xc(%eax),%eax
   10d5f:	85 c0                	test   %eax,%eax
   10d61:	7f 30                	jg     10d93 <task_time_tick+0xdb>
    {
        current_task->slice_ticks = current_task->time_ticks;
   10d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d66:	8b 50 10             	mov    0x10(%eax),%edx
   10d69:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d6c:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(current_task);
   10d6f:	83 ec 0c             	sub    $0xc,%esp
   10d72:	ff 75 f0             	pushl  -0x10(%ebp)
   10d75:	e8 e0 fd ff ff       	call   10b5a <task_set_block>
   10d7a:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   10d7d:	83 ec 0c             	sub    $0xc,%esp
   10d80:	ff 75 f0             	pushl  -0x10(%ebp)
   10d83:	e8 9d fd ff ff       	call   10b25 <task_set_ready>
   10d88:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   10d8b:	e8 c3 fe ff ff       	call   10c53 <task_dispatch>
   10d90:	eb 01                	jmp    10d93 <task_time_tick+0xdb>
        return; 
   10d92:	90                   	nop
    }
}
   10d93:	c9                   	leave  
   10d94:	c3                   	ret    

00010d95 <do_schedule_switch>:
void do_schedule_switch(void)
{
   10d95:	55                   	push   %ebp
   10d96:	89 e5                	mov    %esp,%ebp
   10d98:	83 ec 08             	sub    $0x8,%esp
    if (task_manager.need_reschedule) {
   10d9b:	a1 20 50 01 00       	mov    0x15020,%eax
   10da0:	85 c0                	test   %eax,%eax
   10da2:	74 3c                	je     10de0 <do_schedule_switch+0x4b>
        task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE;
   10da4:	c7 05 20 50 01 00 00 	movl   $0x0,0x15020
   10dab:	00 00 00 
        if (task_manager.from_task && task_manager.from_task != task_manager.to_task) {
   10dae:	a1 24 50 01 00       	mov    0x15024,%eax
   10db3:	85 c0                	test   %eax,%eax
   10db5:	74 29                	je     10de0 <do_schedule_switch+0x4b>
   10db7:	8b 15 24 50 01 00    	mov    0x15024,%edx
   10dbd:	a1 28 50 01 00       	mov    0x15028,%eax
   10dc2:	39 c2                	cmp    %eax,%edx
   10dc4:	74 1a                	je     10de0 <do_schedule_switch+0x4b>
            // 在这里进行任务切换
            // 使用简单的栈切换，避免复杂的中断上下文切换
            simple_switch(&task_manager.from_task->stack, task_manager.to_task->stack);
   10dc6:	a1 28 50 01 00       	mov    0x15028,%eax
   10dcb:	8b 00                	mov    (%eax),%eax
   10dcd:	8b 15 24 50 01 00    	mov    0x15024,%edx
   10dd3:	83 ec 08             	sub    $0x8,%esp
   10dd6:	50                   	push   %eax
   10dd7:	52                   	push   %edx
   10dd8:	e8 04 f5 ff ff       	call   102e1 <simple_switch>
   10ddd:	83 c4 10             	add    $0x10,%esp
        }
    }
}
   10de0:	90                   	nop
   10de1:	c9                   	leave  
   10de2:	c3                   	ret    

00010de3 <task_set_sleep>:

void task_set_sleep(task_t *task,uint32_t ticks)
{
   10de3:	55                   	push   %ebp
   10de4:	89 e5                	mov    %esp,%ebp
   10de6:	83 ec 08             	sub    $0x8,%esp
    if(ticks == 0)
   10de9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ded:	74 2c                	je     10e1b <task_set_sleep+0x38>
    {
        return;
    }
    task->sleep_ticks = ticks;
   10def:	8b 55 0c             	mov    0xc(%ebp),%edx
   10df2:	8b 45 08             	mov    0x8(%ebp),%eax
   10df5:	89 50 08             	mov    %edx,0x8(%eax)
    task->state = TASK_SLEEP;
   10df8:	8b 45 08             	mov    0x8(%ebp),%eax
   10dfb:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
    list_insert_last(&task_manager.sleep_list,&task->run_node);
   10e02:	8b 45 08             	mov    0x8(%ebp),%eax
   10e05:	83 c0 34             	add    $0x34,%eax
   10e08:	83 ec 08             	sub    $0x8,%esp
   10e0b:	50                   	push   %eax
   10e0c:	68 3c 50 01 00       	push   $0x1503c
   10e11:	e8 f4 17 00 00       	call   1260a <list_insert_last>
   10e16:	83 c4 10             	add    $0x10,%esp
   10e19:	eb 01                	jmp    10e1c <task_set_sleep+0x39>
        return;
   10e1b:	90                   	nop
}
   10e1c:	c9                   	leave  
   10e1d:	c3                   	ret    

00010e1e <task_set_wakeup>:

void task_set_wakeup(task_t *task)
{
   10e1e:	55                   	push   %ebp
   10e1f:	89 e5                	mov    %esp,%ebp
   10e21:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   10e24:	8b 45 08             	mov    0x8(%ebp),%eax
   10e27:	83 c0 34             	add    $0x34,%eax
   10e2a:	83 ec 08             	sub    $0x8,%esp
   10e2d:	50                   	push   %eax
   10e2e:	68 3c 50 01 00       	push   $0x1503c
   10e33:	e8 ad 18 00 00       	call   126e5 <list_remove>
   10e38:	83 c4 10             	add    $0x10,%esp

    //task->state = TASK_READY;
}
   10e3b:	90                   	nop
   10e3c:	c9                   	leave  
   10e3d:	c3                   	ret    

00010e3e <sys_sleep>:

void sys_sleep(uint32_t ms)
{
   10e3e:	55                   	push   %ebp
   10e3f:	89 e5                	mov    %esp,%ebp
   10e41:	53                   	push   %ebx
   10e42:	83 ec 14             	sub    $0x14,%esp
    irq_state_t state = irq_enter_protection();
   10e45:	e8 52 0a 00 00       	call   1189c <irq_enter_protection>
   10e4a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    
    task_set_block(task_current());
   10e4d:	e8 33 fd ff ff       	call   10b85 <task_current>
   10e52:	83 ec 0c             	sub    $0xc,%esp
   10e55:	50                   	push   %eax
   10e56:	e8 ff fc ff ff       	call   10b5a <task_set_block>
   10e5b:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_current(),(ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   10e5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10e61:	83 c0 18             	add    $0x18,%eax
   10e64:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10e69:	f7 e2                	mul    %edx
   10e6b:	89 d3                	mov    %edx,%ebx
   10e6d:	c1 eb 03             	shr    $0x3,%ebx
   10e70:	e8 10 fd ff ff       	call   10b85 <task_current>
   10e75:	83 ec 08             	sub    $0x8,%esp
   10e78:	53                   	push   %ebx
   10e79:	50                   	push   %eax
   10e7a:	e8 64 ff ff ff       	call   10de3 <task_set_sleep>
   10e7f:	83 c4 10             	add    $0x10,%esp

    schedule_switch();
   10e82:	e8 b9 fd ff ff       	call   10c40 <schedule_switch>
    irq_leave_protection(state);
   10e87:	83 ec 0c             	sub    $0xc,%esp
   10e8a:	ff 75 f4             	pushl  -0xc(%ebp)
   10e8d:	e8 22 0a 00 00       	call   118b4 <irq_leave_protection>
   10e92:	83 c4 10             	add    $0x10,%esp
}
   10e95:	90                   	nop
   10e96:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e99:	c9                   	leave  
   10e9a:	c3                   	ret    

00010e9b <lgdt>:
{
   10e9b:	55                   	push   %ebp
   10e9c:	89 e5                	mov    %esp,%ebp
   10e9e:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   10ea1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ea4:	c1 e8 10             	shr    $0x10,%eax
   10ea7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   10eab:	8b 45 08             	mov    0x8(%ebp),%eax
   10eae:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10eb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10eb5:	83 e8 01             	sub    $0x1,%eax
   10eb8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10ebc:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10ec0:	90                   	nop
   10ec1:	c9                   	leave  
   10ec2:	c3                   	ret    

00010ec3 <far_jump>:
{
   10ec3:	55                   	push   %ebp
   10ec4:	89 e5                	mov    %esp,%ebp
   10ec6:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset ,selector};
   10ec9:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ecc:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10ecf:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10ed5:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10ed8:	ff 28                	ljmp   *(%eax)
}
   10eda:	90                   	nop
   10edb:	c9                   	leave  
   10edc:	c3                   	ret    

00010edd <segment_desc_set>:
#include "ipc/mutex.h"
static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t gdt_mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   10edd:	55                   	push   %ebp
   10ede:	89 e5                	mov    %esp,%ebp
   10ee0:	83 ec 14             	sub    $0x14,%esp
   10ee3:	8b 45 14             	mov    0x14(%ebp),%eax
   10ee6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10eea:	8b 45 08             	mov    0x8(%ebp),%eax
   10eed:	83 e0 f8             	and    $0xfffffff8,%eax
   10ef0:	05 e0 61 01 00       	add    $0x161e0,%eax
   10ef5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(limit > 0xfffff)
   10ef8:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10eff:	76 0f                	jbe    10f10 <segment_desc_set+0x33>
    {
        limit /= 0x1000;
   10f01:	8b 45 10             	mov    0x10(%ebp),%eax
   10f04:	c1 e8 0c             	shr    $0xc,%eax
   10f07:	89 45 10             	mov    %eax,0x10(%ebp)
        attr |= SEG_G;
   10f0a:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   10f10:	8b 45 10             	mov    0x10(%ebp),%eax
   10f13:	89 c2                	mov    %eax,%edx
   10f15:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f18:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   10f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f1e:	89 c2                	mov    %eax,%edx
   10f20:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f23:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10f27:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f2a:	c1 e8 10             	shr    $0x10,%eax
   10f2d:	89 c2                	mov    %eax,%edx
   10f2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f32:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0x0f) << 8);
   10f35:	8b 45 10             	mov    0x10(%ebp),%eax
   10f38:	c1 e8 10             	shr    $0x10,%eax
   10f3b:	c1 e0 08             	shl    $0x8,%eax
   10f3e:	66 25 00 0f          	and    $0xf00,%ax
   10f42:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10f46:	89 c2                	mov    %eax,%edx
   10f48:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f4b:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10f4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f52:	c1 e8 18             	shr    $0x18,%eax
   10f55:	89 c2                	mov    %eax,%edx
   10f57:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f5a:	88 50 07             	mov    %dl,0x7(%eax)
}
   10f5d:	90                   	nop
   10f5e:	c9                   	leave  
   10f5f:	c3                   	ret    

00010f60 <gate_desc_set>:
void gate_desc_set(gate_desc_t * gate_desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   10f60:	55                   	push   %ebp
   10f61:	89 e5                	mov    %esp,%ebp
   10f63:	83 ec 08             	sub    $0x8,%esp
   10f66:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f69:	8b 45 14             	mov    0x14(%ebp),%eax
   10f6c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10f70:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    gate_desc->selector = selector;
   10f74:	8b 45 08             	mov    0x8(%ebp),%eax
   10f77:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10f7b:	66 89 50 02          	mov    %dx,0x2(%eax)
    gate_desc->offset15_0 = offset & 0xffff;
   10f7f:	8b 45 10             	mov    0x10(%ebp),%eax
   10f82:	89 c2                	mov    %eax,%edx
   10f84:	8b 45 08             	mov    0x8(%ebp),%eax
   10f87:	66 89 10             	mov    %dx,(%eax)
    gate_desc->offset31_16 = (offset >> 16) & 0xffff;
   10f8a:	8b 45 10             	mov    0x10(%ebp),%eax
   10f8d:	c1 e8 10             	shr    $0x10,%eax
   10f90:	89 c2                	mov    %eax,%edx
   10f92:	8b 45 08             	mov    0x8(%ebp),%eax
   10f95:	66 89 50 06          	mov    %dx,0x6(%eax)
    gate_desc->attr = attr;
   10f99:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9c:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10fa0:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   10fa4:	90                   	nop
   10fa5:	c9                   	leave  
   10fa6:	c3                   	ret    

00010fa7 <gdt_alloc_desc>:

int gdt_alloc_desc(void)
{
   10fa7:	55                   	push   %ebp
   10fa8:	89 e5                	mov    %esp,%ebp
   10faa:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&gdt_mutex);
   10fad:	83 ec 0c             	sub    $0xc,%esp
   10fb0:	68 e0 69 01 00       	push   $0x169e0
   10fb5:	e8 f5 0b 00 00       	call   11baf <mutex_lock>
   10fba:	83 c4 10             	add    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10fbd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10fc4:	eb 2c                	jmp    10ff2 <gdt_alloc_desc+0x4b>
    {
        if(gdt_table[i].attr == 0)
   10fc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fc9:	0f b7 04 c5 e5 61 01 	movzwl 0x161e5(,%eax,8),%eax
   10fd0:	00 
   10fd1:	66 85 c0             	test   %ax,%ax
   10fd4:	75 18                	jne    10fee <gdt_alloc_desc+0x47>
        {
            mutex_unlock(&gdt_mutex);
   10fd6:	83 ec 0c             	sub    $0xc,%esp
   10fd9:	68 e0 69 01 00       	push   $0x169e0
   10fde:	e8 5c 0c 00 00       	call   11c3f <mutex_unlock>
   10fe3:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fe9:	c1 e0 03             	shl    $0x3,%eax
   10fec:	eb 22                	jmp    11010 <gdt_alloc_desc+0x69>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10fee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10ff2:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10ff9:	7e cb                	jle    10fc6 <gdt_alloc_desc+0x1f>
        }
        
    }
    mutex_unlock(&gdt_mutex);
   10ffb:	83 ec 0c             	sub    $0xc,%esp
   10ffe:	68 e0 69 01 00       	push   $0x169e0
   11003:	e8 37 0c 00 00       	call   11c3f <mutex_unlock>
   11008:	83 c4 10             	add    $0x10,%esp
    return -1;
   1100b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11010:	c9                   	leave  
   11011:	c3                   	ret    

00011012 <init_gdt>:
void init_gdt(void)
{
   11012:	55                   	push   %ebp
   11013:	89 e5                	mov    %esp,%ebp
   11015:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   11018:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1101f:	eb 19                	jmp    1103a <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   11021:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11024:	c1 e0 03             	shl    $0x3,%eax
   11027:	6a 00                	push   $0x0
   11029:	6a 00                	push   $0x0
   1102b:	6a 00                	push   $0x0
   1102d:	50                   	push   %eax
   1102e:	e8 aa fe ff ff       	call   10edd <segment_desc_set>
   11033:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   11036:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1103a:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11041:	7e de                	jle    11021 <init_gdt+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   11043:	68 9a 40 00 00       	push   $0x409a
   11048:	6a ff                	push   $0xffffffff
   1104a:	6a 00                	push   $0x0
   1104c:	6a 08                	push   $0x8
   1104e:	e8 8a fe ff ff       	call   10edd <segment_desc_set>
   11053:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   11056:	68 92 40 00 00       	push   $0x4092
   1105b:	6a ff                	push   $0xffffffff
   1105d:	6a 00                	push   $0x0
   1105f:	6a 10                	push   $0x10
   11061:	e8 77 fe ff ff       	call   10edd <segment_desc_set>
   11066:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11069:	b8 e0 61 01 00       	mov    $0x161e0,%eax
   1106e:	68 00 08 00 00       	push   $0x800
   11073:	50                   	push   %eax
   11074:	e8 22 fe ff ff       	call   10e9b <lgdt>
   11079:	83 c4 08             	add    $0x8,%esp
}
   1107c:	90                   	nop
   1107d:	c9                   	leave  
   1107e:	c3                   	ret    

0001107f <cpu_init>:

void cpu_init(void)
{
   1107f:	55                   	push   %ebp
   11080:	89 e5                	mov    %esp,%ebp
   11082:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&gdt_mutex);
   11085:	83 ec 0c             	sub    $0xc,%esp
   11088:	68 e0 69 01 00       	push   $0x169e0
   1108d:	e8 f1 0a 00 00       	call   11b83 <mutex_init>
   11092:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11095:	e8 78 ff ff ff       	call   11012 <init_gdt>
    
}
   1109a:	90                   	nop
   1109b:	c9                   	leave  
   1109c:	c3                   	ret    

0001109d <switch_to_tss>:

void switch_to_tss (int tss_sel)
{
   1109d:	55                   	push   %ebp
   1109e:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   110a0:	8b 45 08             	mov    0x8(%ebp),%eax
   110a3:	6a 00                	push   $0x0
   110a5:	50                   	push   %eax
   110a6:	e8 18 fe ff ff       	call   10ec3 <far_jump>
   110ab:	83 c4 08             	add    $0x8,%esp
   110ae:	90                   	nop
   110af:	c9                   	leave  
   110b0:	c3                   	ret    

000110b1 <inb>:
{
   110b1:	55                   	push   %ebp
   110b2:	89 e5                	mov    %esp,%ebp
   110b4:	83 ec 14             	sub    $0x14,%esp
   110b7:	8b 45 08             	mov    0x8(%ebp),%eax
   110ba:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   110be:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   110c2:	89 c2                	mov    %eax,%edx
   110c4:	ec                   	in     (%dx),%al
   110c5:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   110c8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   110cc:	c9                   	leave  
   110cd:	c3                   	ret    

000110ce <outb>:
{
   110ce:	55                   	push   %ebp
   110cf:	89 e5                	mov    %esp,%ebp
   110d1:	83 ec 08             	sub    $0x8,%esp
   110d4:	8b 55 08             	mov    0x8(%ebp),%edx
   110d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   110da:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   110de:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   110e1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   110e5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   110e9:	ee                   	out    %al,(%dx)
}
   110ea:	90                   	nop
   110eb:	c9                   	leave  
   110ec:	c3                   	ret    

000110ed <cli>:
{
   110ed:	55                   	push   %ebp
   110ee:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   110f0:	fa                   	cli    
}
   110f1:	90                   	nop
   110f2:	5d                   	pop    %ebp
   110f3:	c3                   	ret    

000110f4 <sti>:
{
   110f4:	55                   	push   %ebp
   110f5:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   110f7:	fb                   	sti    
}
   110f8:	90                   	nop
   110f9:	5d                   	pop    %ebp
   110fa:	c3                   	ret    

000110fb <lidt>:
{
   110fb:	55                   	push   %ebp
   110fc:	89 e5                	mov    %esp,%ebp
   110fe:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   11101:	8b 45 08             	mov    0x8(%ebp),%eax
   11104:	c1 e8 10             	shr    $0x10,%eax
   11107:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   1110b:	8b 45 08             	mov    0x8(%ebp),%eax
   1110e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   11112:	8b 45 0c             	mov    0xc(%ebp),%eax
   11115:	83 e8 01             	sub    $0x1,%eax
   11118:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[i]"::[i]"m"(idt));
   1111c:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11120:	90                   	nop
   11121:	c9                   	leave  
   11122:	c3                   	ret    

00011123 <hlt>:
{
   11123:	55                   	push   %ebp
   11124:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11126:	f4                   	hlt    
}
   11127:	90                   	nop
   11128:	5d                   	pop    %ebp
   11129:	c3                   	ret    

0001112a <read_eflags>:

static inline uint32_t read_eflags(void)
{
   1112a:	55                   	push   %ebp
   1112b:	89 e5                	mov    %esp,%ebp
   1112d:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11130:	9c                   	pushf  
   11131:	58                   	pop    %eax
   11132:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11135:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11138:	c9                   	leave  
   11139:	c3                   	ret    

0001113a <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   1113a:	55                   	push   %ebp
   1113b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   1113d:	8b 45 08             	mov    0x8(%ebp),%eax
   11140:	50                   	push   %eax
   11141:	9d                   	popf   
}
   11142:	90                   	nop
   11143:	5d                   	pop    %ebp
   11144:	c3                   	ret    

00011145 <dump_core_regs>:
#include "os_cfg.h"
#include "tools/log.h"
#define IRQ_TABLE_NU 128
static gate_desc_t idt_table[IRQ_TABLE_NU];
static dump_core_regs(exception_frame_t *frame)
{
   11145:	55                   	push   %ebp
   11146:	89 e5                	mov    %esp,%ebp
   11148:	57                   	push   %edi
   11149:	56                   	push   %esi
   1114a:	53                   	push   %ebx
   1114b:	83 ec 0c             	sub    $0xc,%esp
    log_printf("IRQ: %d, error code: %d\n",frame->irq_num,frame->error_code);
   1114e:	8b 45 08             	mov    0x8(%ebp),%eax
   11151:	8b 50 34             	mov    0x34(%eax),%edx
   11154:	8b 45 08             	mov    0x8(%ebp),%eax
   11157:	8b 40 30             	mov    0x30(%eax),%eax
   1115a:	83 ec 04             	sub    $0x4,%esp
   1115d:	52                   	push   %edx
   1115e:	50                   	push   %eax
   1115f:	68 bc 29 01 00       	push   $0x129bc
   11164:	e8 d9 16 00 00       	call   12842 <log_printf>
   11169:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d DS: %d ES: %d SS: %d FS: %d GS: %d\n",frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
   1116c:	8b 45 08             	mov    0x8(%ebp),%eax
   1116f:	8b 38                	mov    (%eax),%edi
   11171:	8b 45 08             	mov    0x8(%ebp),%eax
   11174:	8b 70 04             	mov    0x4(%eax),%esi
   11177:	8b 45 08             	mov    0x8(%ebp),%eax
   1117a:	8b 58 0c             	mov    0xc(%eax),%ebx
   1117d:	8b 45 08             	mov    0x8(%ebp),%eax
   11180:	8b 48 08             	mov    0x8(%eax),%ecx
   11183:	8b 45 08             	mov    0x8(%ebp),%eax
   11186:	8b 50 0c             	mov    0xc(%eax),%edx
   11189:	8b 45 08             	mov    0x8(%ebp),%eax
   1118c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1118f:	83 ec 04             	sub    $0x4,%esp
   11192:	57                   	push   %edi
   11193:	56                   	push   %esi
   11194:	53                   	push   %ebx
   11195:	51                   	push   %ecx
   11196:	52                   	push   %edx
   11197:	50                   	push   %eax
   11198:	68 d8 29 01 00       	push   $0x129d8
   1119d:	e8 a0 16 00 00       	call   12842 <log_printf>
   111a2:	83 c4 20             	add    $0x20,%esp
    log_printf("EAX: 0x%x EBX: 0x%x ECX: 0x%x EDX: 0x%x\n",frame->eax,frame->ebx,frame->ecx,frame->edx);
   111a5:	8b 45 08             	mov    0x8(%ebp),%eax
   111a8:	8b 58 24             	mov    0x24(%eax),%ebx
   111ab:	8b 45 08             	mov    0x8(%ebp),%eax
   111ae:	8b 48 28             	mov    0x28(%eax),%ecx
   111b1:	8b 45 08             	mov    0x8(%ebp),%eax
   111b4:	8b 50 20             	mov    0x20(%eax),%edx
   111b7:	8b 45 08             	mov    0x8(%ebp),%eax
   111ba:	8b 40 2c             	mov    0x2c(%eax),%eax
   111bd:	83 ec 0c             	sub    $0xc,%esp
   111c0:	53                   	push   %ebx
   111c1:	51                   	push   %ecx
   111c2:	52                   	push   %edx
   111c3:	50                   	push   %eax
   111c4:	68 04 2a 01 00       	push   $0x12a04
   111c9:	e8 74 16 00 00       	call   12842 <log_printf>
   111ce:	83 c4 20             	add    $0x20,%esp
    log_printf("EIP: 0x%x EFLAGS: 0x%x ESP: 0x%x EBP: 0x%x\n",frame->eip,frame->eflags,frame->esp,frame->ebp);
   111d1:	8b 45 08             	mov    0x8(%ebp),%eax
   111d4:	8b 58 18             	mov    0x18(%eax),%ebx
   111d7:	8b 45 08             	mov    0x8(%ebp),%eax
   111da:	8b 48 1c             	mov    0x1c(%eax),%ecx
   111dd:	8b 45 08             	mov    0x8(%ebp),%eax
   111e0:	8b 50 40             	mov    0x40(%eax),%edx
   111e3:	8b 45 08             	mov    0x8(%ebp),%eax
   111e6:	8b 40 38             	mov    0x38(%eax),%eax
   111e9:	83 ec 0c             	sub    $0xc,%esp
   111ec:	53                   	push   %ebx
   111ed:	51                   	push   %ecx
   111ee:	52                   	push   %edx
   111ef:	50                   	push   %eax
   111f0:	68 30 2a 01 00       	push   $0x12a30
   111f5:	e8 48 16 00 00       	call   12842 <log_printf>
   111fa:	83 c4 20             	add    $0x20,%esp
    log_printf("EDI: 0x%x ESI: 0x%x EDI: 0x%x\n",frame->edi,frame->esi,frame->edi);
   111fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11200:	8b 48 10             	mov    0x10(%eax),%ecx
   11203:	8b 45 08             	mov    0x8(%ebp),%eax
   11206:	8b 50 14             	mov    0x14(%eax),%edx
   11209:	8b 45 08             	mov    0x8(%ebp),%eax
   1120c:	8b 40 10             	mov    0x10(%eax),%eax
   1120f:	51                   	push   %ecx
   11210:	52                   	push   %edx
   11211:	50                   	push   %eax
   11212:	68 5c 2a 01 00       	push   $0x12a5c
   11217:	e8 26 16 00 00       	call   12842 <log_printf>
   1121c:	83 c4 10             	add    $0x10,%esp
}
   1121f:	90                   	nop
   11220:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11223:	5b                   	pop    %ebx
   11224:	5e                   	pop    %esi
   11225:	5f                   	pop    %edi
   11226:	5d                   	pop    %ebp
   11227:	c3                   	ret    

00011228 <do_default_handler>:
static void do_default_handler(exception_frame_t *frame,const char *message)
{
   11228:	55                   	push   %ebp
   11229:	89 e5                	mov    %esp,%ebp
   1122b:	83 ec 08             	sub    $0x8,%esp
    log_printf("---------------------\n");
   1122e:	83 ec 0c             	sub    $0xc,%esp
   11231:	68 7b 2a 01 00       	push   $0x12a7b
   11236:	e8 07 16 00 00       	call   12842 <log_printf>
   1123b:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s\n",message);
   1123e:	83 ec 08             	sub    $0x8,%esp
   11241:	ff 75 0c             	pushl  0xc(%ebp)
   11244:	68 92 2a 01 00       	push   $0x12a92
   11249:	e8 f4 15 00 00       	call   12842 <log_printf>
   1124e:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   11251:	83 ec 0c             	sub    $0xc,%esp
   11254:	ff 75 08             	pushl  0x8(%ebp)
   11257:	e8 e9 fe ff ff       	call   11145 <dump_core_regs>
   1125c:	83 c4 10             	add    $0x10,%esp
    for(;;)
    {
        hlt();
   1125f:	e8 bf fe ff ff       	call   11123 <hlt>
   11264:	eb f9                	jmp    1125f <do_default_handler+0x37>

00011266 <do_handler_unknown>:
    }
}
void do_handler_unknown(exception_frame_t *frame)
{
   11266:	55                   	push   %ebp
   11267:	89 e5                	mov    %esp,%ebp
   11269:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"unknown exception");
   1126c:	83 ec 08             	sub    $0x8,%esp
   1126f:	68 ad 2a 01 00       	push   $0x12aad
   11274:	ff 75 08             	pushl  0x8(%ebp)
   11277:	e8 ac ff ff ff       	call   11228 <do_default_handler>
   1127c:	83 c4 10             	add    $0x10,%esp
}
   1127f:	90                   	nop
   11280:	c9                   	leave  
   11281:	c3                   	ret    

00011282 <do_handler_divider>:
void do_handler_divider(exception_frame_t *frame)
{
   11282:	55                   	push   %ebp
   11283:	89 e5                	mov    %esp,%ebp
   11285:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"divider exception");
   11288:	83 ec 08             	sub    $0x8,%esp
   1128b:	68 bf 2a 01 00       	push   $0x12abf
   11290:	ff 75 08             	pushl  0x8(%ebp)
   11293:	e8 90 ff ff ff       	call   11228 <do_default_handler>
   11298:	83 c4 10             	add    $0x10,%esp
}
   1129b:	90                   	nop
   1129c:	c9                   	leave  
   1129d:	c3                   	ret    

0001129e <do_handler_debug>:
void do_handler_debug(exception_frame_t *frame)
{
   1129e:	55                   	push   %ebp
   1129f:	89 e5                	mov    %esp,%ebp
   112a1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"debug exception");
   112a4:	83 ec 08             	sub    $0x8,%esp
   112a7:	68 d1 2a 01 00       	push   $0x12ad1
   112ac:	ff 75 08             	pushl  0x8(%ebp)
   112af:	e8 74 ff ff ff       	call   11228 <do_default_handler>
   112b4:	83 c4 10             	add    $0x10,%esp
}
   112b7:	90                   	nop
   112b8:	c9                   	leave  
   112b9:	c3                   	ret    

000112ba <do_handler_nmi>:
void do_handler_nmi(exception_frame_t *frame)   
{
   112ba:	55                   	push   %ebp
   112bb:	89 e5                	mov    %esp,%ebp
   112bd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"nmi exception");
   112c0:	83 ec 08             	sub    $0x8,%esp
   112c3:	68 e1 2a 01 00       	push   $0x12ae1
   112c8:	ff 75 08             	pushl  0x8(%ebp)
   112cb:	e8 58 ff ff ff       	call   11228 <do_default_handler>
   112d0:	83 c4 10             	add    $0x10,%esp
}
   112d3:	90                   	nop
   112d4:	c9                   	leave  
   112d5:	c3                   	ret    

000112d6 <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t *frame)
{
   112d6:	55                   	push   %ebp
   112d7:	89 e5                	mov    %esp,%ebp
   112d9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"breakpoint exception");
   112dc:	83 ec 08             	sub    $0x8,%esp
   112df:	68 ef 2a 01 00       	push   $0x12aef
   112e4:	ff 75 08             	pushl  0x8(%ebp)
   112e7:	e8 3c ff ff ff       	call   11228 <do_default_handler>
   112ec:	83 c4 10             	add    $0x10,%esp
}
   112ef:	90                   	nop
   112f0:	c9                   	leave  
   112f1:	c3                   	ret    

000112f2 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   112f2:	55                   	push   %ebp
   112f3:	89 e5                	mov    %esp,%ebp
   112f5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"overflow exception");
   112f8:	83 ec 08             	sub    $0x8,%esp
   112fb:	68 04 2b 01 00       	push   $0x12b04
   11300:	ff 75 08             	pushl  0x8(%ebp)
   11303:	e8 20 ff ff ff       	call   11228 <do_default_handler>
   11308:	83 c4 10             	add    $0x10,%esp
}
   1130b:	90                   	nop
   1130c:	c9                   	leave  
   1130d:	c3                   	ret    

0001130e <do_handler_bounds>:
void do_handler_bounds(exception_frame_t *frame)
{
   1130e:	55                   	push   %ebp
   1130f:	89 e5                	mov    %esp,%ebp
   11311:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"bounds exception");
   11314:	83 ec 08             	sub    $0x8,%esp
   11317:	68 17 2b 01 00       	push   $0x12b17
   1131c:	ff 75 08             	pushl  0x8(%ebp)
   1131f:	e8 04 ff ff ff       	call   11228 <do_default_handler>
   11324:	83 c4 10             	add    $0x10,%esp
}
   11327:	90                   	nop
   11328:	c9                   	leave  
   11329:	c3                   	ret    

0001132a <do_handler_invalid_op>:
void do_handler_invalid_op(exception_frame_t *frame)
{
   1132a:	55                   	push   %ebp
   1132b:	89 e5                	mov    %esp,%ebp
   1132d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid operation exception");
   11330:	83 ec 08             	sub    $0x8,%esp
   11333:	68 28 2b 01 00       	push   $0x12b28
   11338:	ff 75 08             	pushl  0x8(%ebp)
   1133b:	e8 e8 fe ff ff       	call   11228 <do_default_handler>
   11340:	83 c4 10             	add    $0x10,%esp
}
   11343:	90                   	nop
   11344:	c9                   	leave  
   11345:	c3                   	ret    

00011346 <do_handler_device_not_available>:
void do_handler_device_not_available(exception_frame_t *frame)
{
   11346:	55                   	push   %ebp
   11347:	89 e5                	mov    %esp,%ebp
   11349:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"device not available exception");
   1134c:	83 ec 08             	sub    $0x8,%esp
   1134f:	68 44 2b 01 00       	push   $0x12b44
   11354:	ff 75 08             	pushl  0x8(%ebp)
   11357:	e8 cc fe ff ff       	call   11228 <do_default_handler>
   1135c:	83 c4 10             	add    $0x10,%esp
}
   1135f:	90                   	nop
   11360:	c9                   	leave  
   11361:	c3                   	ret    

00011362 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   11362:	55                   	push   %ebp
   11363:	89 e5                	mov    %esp,%ebp
   11365:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"double fault exception");
   11368:	83 ec 08             	sub    $0x8,%esp
   1136b:	68 63 2b 01 00       	push   $0x12b63
   11370:	ff 75 08             	pushl  0x8(%ebp)
   11373:	e8 b0 fe ff ff       	call   11228 <do_default_handler>
   11378:	83 c4 10             	add    $0x10,%esp
}
   1137b:	90                   	nop
   1137c:	c9                   	leave  
   1137d:	c3                   	ret    

0001137e <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   1137e:	55                   	push   %ebp
   1137f:	89 e5                	mov    %esp,%ebp
   11381:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid tss exception");
   11384:	83 ec 08             	sub    $0x8,%esp
   11387:	68 7a 2b 01 00       	push   $0x12b7a
   1138c:	ff 75 08             	pushl  0x8(%ebp)
   1138f:	e8 94 fe ff ff       	call   11228 <do_default_handler>
   11394:	83 c4 10             	add    $0x10,%esp
}
   11397:	90                   	nop
   11398:	c9                   	leave  
   11399:	c3                   	ret    

0001139a <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   1139a:	55                   	push   %ebp
   1139b:	89 e5                	mov    %esp,%ebp
   1139d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"segment not present exception");
   113a0:	83 ec 08             	sub    $0x8,%esp
   113a3:	68 90 2b 01 00       	push   $0x12b90
   113a8:	ff 75 08             	pushl  0x8(%ebp)
   113ab:	e8 78 fe ff ff       	call   11228 <do_default_handler>
   113b0:	83 c4 10             	add    $0x10,%esp
}
   113b3:	90                   	nop
   113b4:	c9                   	leave  
   113b5:	c3                   	ret    

000113b6 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   113b6:	55                   	push   %ebp
   113b7:	89 e5                	mov    %esp,%ebp
   113b9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"stack segment fault exception");
   113bc:	83 ec 08             	sub    $0x8,%esp
   113bf:	68 ae 2b 01 00       	push   $0x12bae
   113c4:	ff 75 08             	pushl  0x8(%ebp)
   113c7:	e8 5c fe ff ff       	call   11228 <do_default_handler>
   113cc:	83 c4 10             	add    $0x10,%esp
}
   113cf:	90                   	nop
   113d0:	c9                   	leave  
   113d1:	c3                   	ret    

000113d2 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   113d2:	55                   	push   %ebp
   113d3:	89 e5                	mov    %esp,%ebp
   113d5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"general protection exception");
   113d8:	83 ec 08             	sub    $0x8,%esp
   113db:	68 cc 2b 01 00       	push   $0x12bcc
   113e0:	ff 75 08             	pushl  0x8(%ebp)
   113e3:	e8 40 fe ff ff       	call   11228 <do_default_handler>
   113e8:	83 c4 10             	add    $0x10,%esp
}
   113eb:	90                   	nop
   113ec:	c9                   	leave  
   113ed:	c3                   	ret    

000113ee <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   113ee:	55                   	push   %ebp
   113ef:	89 e5                	mov    %esp,%ebp
   113f1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"page fault exception");
   113f4:	83 ec 08             	sub    $0x8,%esp
   113f7:	68 e9 2b 01 00       	push   $0x12be9
   113fc:	ff 75 08             	pushl  0x8(%ebp)
   113ff:	e8 24 fe ff ff       	call   11228 <do_default_handler>
   11404:	83 c4 10             	add    $0x10,%esp
}
   11407:	90                   	nop
   11408:	c9                   	leave  
   11409:	c3                   	ret    

0001140a <do_handler_x87_floating_point>:
void do_handler_x87_floating_point(exception_frame_t *frame)
{   
   1140a:	55                   	push   %ebp
   1140b:	89 e5                	mov    %esp,%ebp
   1140d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"x87 floating point exception");
   11410:	83 ec 08             	sub    $0x8,%esp
   11413:	68 fe 2b 01 00       	push   $0x12bfe
   11418:	ff 75 08             	pushl  0x8(%ebp)
   1141b:	e8 08 fe ff ff       	call   11228 <do_default_handler>
   11420:	83 c4 10             	add    $0x10,%esp
}
   11423:	90                   	nop
   11424:	c9                   	leave  
   11425:	c3                   	ret    

00011426 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   11426:	55                   	push   %ebp
   11427:	89 e5                	mov    %esp,%ebp
   11429:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"alignment check exception");
   1142c:	83 ec 08             	sub    $0x8,%esp
   1142f:	68 1b 2c 01 00       	push   $0x12c1b
   11434:	ff 75 08             	pushl  0x8(%ebp)
   11437:	e8 ec fd ff ff       	call   11228 <do_default_handler>
   1143c:	83 c4 10             	add    $0x10,%esp
}
   1143f:	90                   	nop
   11440:	c9                   	leave  
   11441:	c3                   	ret    

00011442 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   11442:	55                   	push   %ebp
   11443:	89 e5                	mov    %esp,%ebp
   11445:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"machine check exception");
   11448:	83 ec 08             	sub    $0x8,%esp
   1144b:	68 35 2c 01 00       	push   $0x12c35
   11450:	ff 75 08             	pushl  0x8(%ebp)
   11453:	e8 d0 fd ff ff       	call   11228 <do_default_handler>
   11458:	83 c4 10             	add    $0x10,%esp
}
   1145b:	90                   	nop
   1145c:	c9                   	leave  
   1145d:	c3                   	ret    

0001145e <do_handler_simd_floating_point>:
void do_handler_simd_floating_point(exception_frame_t *frame)
{
   1145e:	55                   	push   %ebp
   1145f:	89 e5                	mov    %esp,%ebp
   11461:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"simd floating point exception");
   11464:	83 ec 08             	sub    $0x8,%esp
   11467:	68 4d 2c 01 00       	push   $0x12c4d
   1146c:	ff 75 08             	pushl  0x8(%ebp)
   1146f:	e8 b4 fd ff ff       	call   11228 <do_default_handler>
   11474:	83 c4 10             	add    $0x10,%esp
}
   11477:	90                   	nop
   11478:	c9                   	leave  
   11479:	c3                   	ret    

0001147a <do_handler_virtualization>:
void do_handler_virtualization(exception_frame_t *frame)
{
   1147a:	55                   	push   %ebp
   1147b:	89 e5                	mov    %esp,%ebp
   1147d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"virtualization exception");
   11480:	83 ec 08             	sub    $0x8,%esp
   11483:	68 6b 2c 01 00       	push   $0x12c6b
   11488:	ff 75 08             	pushl  0x8(%ebp)
   1148b:	e8 98 fd ff ff       	call   11228 <do_default_handler>
   11490:	83 c4 10             	add    $0x10,%esp
}
   11493:	90                   	nop
   11494:	c9                   	leave  
   11495:	c3                   	ret    

00011496 <do_handler_security>:
void do_handler_security(exception_frame_t *frame)
{
   11496:	55                   	push   %ebp
   11497:	89 e5                	mov    %esp,%ebp
   11499:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"security exception");
   1149c:	83 ec 08             	sub    $0x8,%esp
   1149f:	68 84 2c 01 00       	push   $0x12c84
   114a4:	ff 75 08             	pushl  0x8(%ebp)
   114a7:	e8 7c fd ff ff       	call   11228 <do_default_handler>
   114ac:	83 c4 10             	add    $0x10,%esp
}
   114af:	90                   	nop
   114b0:	c9                   	leave  
   114b1:	c3                   	ret    

000114b2 <init_pic>:

static void init_pic(void)
{
   114b2:	55                   	push   %ebp
   114b3:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   114b5:	6a 11                	push   $0x11
   114b7:	6a 20                	push   $0x20
   114b9:	e8 10 fc ff ff       	call   110ce <outb>
   114be:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2,IRQ_PIC_START);
   114c1:	6a 20                	push   $0x20
   114c3:	6a 21                	push   $0x21
   114c5:	e8 04 fc ff ff       	call   110ce <outb>
   114ca:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3,1 << IRQ2_NMI);
   114cd:	6a 04                	push   $0x4
   114cf:	6a 21                	push   $0x21
   114d1:	e8 f8 fb ff ff       	call   110ce <outb>
   114d6:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4,PIC_ICW4_8086);
   114d9:	6a 01                	push   $0x1
   114db:	6a 21                	push   $0x21
   114dd:	e8 ec fb ff ff       	call   110ce <outb>
   114e2:	83 c4 08             	add    $0x8,%esp


    outb(PIC1_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   114e5:	6a 11                	push   $0x11
   114e7:	68 a0 00 00 00       	push   $0xa0
   114ec:	e8 dd fb ff ff       	call   110ce <outb>
   114f1:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2,IRQ_PIC_START + 8);
   114f4:	6a 28                	push   $0x28
   114f6:	68 a1 00 00 00       	push   $0xa1
   114fb:	e8 ce fb ff ff       	call   110ce <outb>
   11500:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3,2);
   11503:	6a 02                	push   $0x2
   11505:	68 a1 00 00 00       	push   $0xa1
   1150a:	e8 bf fb ff ff       	call   110ce <outb>
   1150f:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4,PIC_ICW4_8086);
   11512:	6a 01                	push   $0x1
   11514:	68 a1 00 00 00       	push   $0xa1
   11519:	e8 b0 fb ff ff       	call   110ce <outb>
   1151e:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR,0xff & ~ (1 << 2));
   11521:	68 fb 00 00 00       	push   $0xfb
   11526:	6a 21                	push   $0x21
   11528:	e8 a1 fb ff ff       	call   110ce <outb>
   1152d:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR,0xff);
   11530:	68 ff 00 00 00       	push   $0xff
   11535:	68 a1 00 00 00       	push   $0xa1
   1153a:	e8 8f fb ff ff       	call   110ce <outb>
   1153f:	83 c4 08             	add    $0x8,%esp
}
   11542:	90                   	nop
   11543:	c9                   	leave  
   11544:	c3                   	ret    

00011545 <irq_init>:

void irq_init(void)
{
   11545:	55                   	push   %ebp
   11546:	89 e5                	mov    %esp,%ebp
   11548:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   1154b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11552:	eb 25                	jmp    11579 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   11554:	ba 4f 00 01 00       	mov    $0x1004f,%edx
   11559:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1155c:	c1 e0 03             	shl    $0x3,%eax
   1155f:	05 00 6a 01 00       	add    $0x16a00,%eax
   11564:	68 00 8e 00 00       	push   $0x8e00
   11569:	52                   	push   %edx
   1156a:	6a 08                	push   $0x8
   1156c:	50                   	push   %eax
   1156d:	e8 ee f9 ff ff       	call   10f60 <gate_desc_set>
   11572:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   11575:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11579:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1157d:	7e d5                	jle    11554 <irq_init+0xf>
        GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    }
    //irq_install(IRQ0_DE,do_handler_divider); 用这个的话能进入do_handler_divider 但是跳不到.S的地方出栈
    irq_install(IRQ0_DE,exception_handler_divider);
   1157f:	83 ec 08             	sub    $0x8,%esp
   11582:	68 6e 00 01 00       	push   $0x1006e
   11587:	6a 00                	push   $0x0
   11589:	e8 77 01 00 00       	call   11705 <irq_install>
   1158e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB,exception_handler_debug);
   11591:	83 ec 08             	sub    $0x8,%esp
   11594:	68 8d 00 01 00       	push   $0x1008d
   11599:	6a 01                	push   $0x1
   1159b:	e8 65 01 00 00       	call   11705 <irq_install>
   115a0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI,exception_handler_nmi);
   115a3:	83 ec 08             	sub    $0x8,%esp
   115a6:	68 ac 00 01 00       	push   $0x100ac
   115ab:	6a 02                	push   $0x2
   115ad:	e8 53 01 00 00       	call   11705 <irq_install>
   115b2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP,exception_handler_breakpoint);
   115b5:	83 ec 08             	sub    $0x8,%esp
   115b8:	68 cb 00 01 00       	push   $0x100cb
   115bd:	6a 03                	push   $0x3
   115bf:	e8 41 01 00 00       	call   11705 <irq_install>
   115c4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF,exception_handler_overflow);
   115c7:	83 ec 08             	sub    $0x8,%esp
   115ca:	68 ea 00 01 00       	push   $0x100ea
   115cf:	6a 04                	push   $0x4
   115d1:	e8 2f 01 00 00       	call   11705 <irq_install>
   115d6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR,exception_handler_bounds);
   115d9:	83 ec 08             	sub    $0x8,%esp
   115dc:	68 09 01 01 00       	push   $0x10109
   115e1:	6a 05                	push   $0x5
   115e3:	e8 1d 01 00 00       	call   11705 <irq_install>
   115e8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD,exception_handler_invalid_op);
   115eb:	83 ec 08             	sub    $0x8,%esp
   115ee:	68 28 01 01 00       	push   $0x10128
   115f3:	6a 06                	push   $0x6
   115f5:	e8 0b 01 00 00       	call   11705 <irq_install>
   115fa:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM,exception_handler_device_not_available);
   115fd:	83 ec 08             	sub    $0x8,%esp
   11600:	68 47 01 01 00       	push   $0x10147
   11605:	6a 07                	push   $0x7
   11607:	e8 f9 00 00 00       	call   11705 <irq_install>
   1160c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF,exception_handler_double_fault);
   1160f:	83 ec 08             	sub    $0x8,%esp
   11612:	68 66 01 01 00       	push   $0x10166
   11617:	6a 08                	push   $0x8
   11619:	e8 e7 00 00 00       	call   11705 <irq_install>
   1161e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS,exception_handler_invalid_tss);
   11621:	83 ec 08             	sub    $0x8,%esp
   11624:	68 83 01 01 00       	push   $0x10183
   11629:	6a 0a                	push   $0xa
   1162b:	e8 d5 00 00 00       	call   11705 <irq_install>
   11630:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP,exception_handler_segment_not_present);
   11633:	83 ec 08             	sub    $0x8,%esp
   11636:	68 a0 01 01 00       	push   $0x101a0
   1163b:	6a 0b                	push   $0xb
   1163d:	e8 c3 00 00 00       	call   11705 <irq_install>
   11642:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS,exception_handler_stack_segment_fault);
   11645:	83 ec 08             	sub    $0x8,%esp
   11648:	68 bd 01 01 00       	push   $0x101bd
   1164d:	6a 0c                	push   $0xc
   1164f:	e8 b1 00 00 00       	call   11705 <irq_install>
   11654:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP,exception_handler_general_protection);
   11657:	83 ec 08             	sub    $0x8,%esp
   1165a:	68 da 01 01 00       	push   $0x101da
   1165f:	6a 0d                	push   $0xd
   11661:	e8 9f 00 00 00       	call   11705 <irq_install>
   11666:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF,exception_handler_page_fault);
   11669:	83 ec 08             	sub    $0x8,%esp
   1166c:	68 f7 01 01 00       	push   $0x101f7
   11671:	6a 0e                	push   $0xe
   11673:	e8 8d 00 00 00       	call   11705 <irq_install>
   11678:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF,exception_handler_x87_floating_point);
   1167b:	83 ec 08             	sub    $0x8,%esp
   1167e:	68 14 02 01 00       	push   $0x10214
   11683:	6a 10                	push   $0x10
   11685:	e8 7b 00 00 00       	call   11705 <irq_install>
   1168a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC,exception_handler_alignment_check);
   1168d:	83 ec 08             	sub    $0x8,%esp
   11690:	68 33 02 01 00       	push   $0x10233
   11695:	6a 11                	push   $0x11
   11697:	e8 69 00 00 00       	call   11705 <irq_install>
   1169c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC,exception_handler_machine_check);
   1169f:	83 ec 08             	sub    $0x8,%esp
   116a2:	68 50 02 01 00       	push   $0x10250
   116a7:	6a 12                	push   $0x12
   116a9:	e8 57 00 00 00       	call   11705 <irq_install>
   116ae:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM,exception_handler_simd_floating_point);
   116b1:	83 ec 08             	sub    $0x8,%esp
   116b4:	68 6f 02 01 00       	push   $0x1026f
   116b9:	6a 13                	push   $0x13
   116bb:	e8 45 00 00 00       	call   11705 <irq_install>
   116c0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE,exception_handler_virtualization);
   116c3:	83 ec 08             	sub    $0x8,%esp
   116c6:	68 8e 02 01 00       	push   $0x1028e
   116cb:	6a 14                	push   $0x14
   116cd:	e8 33 00 00 00       	call   11705 <irq_install>
   116d2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP,exception_handler_security);
   116d5:	83 ec 08             	sub    $0x8,%esp
   116d8:	68 ad 02 01 00       	push   $0x102ad
   116dd:	6a 15                	push   $0x15
   116df:	e8 21 00 00 00       	call   11705 <irq_install>
   116e4:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   116e7:	b8 00 6a 01 00       	mov    $0x16a00,%eax
   116ec:	83 ec 08             	sub    $0x8,%esp
   116ef:	68 00 04 00 00       	push   $0x400
   116f4:	50                   	push   %eax
   116f5:	e8 01 fa ff ff       	call   110fb <lidt>
   116fa:	83 c4 10             	add    $0x10,%esp

    init_pic();
   116fd:	e8 b0 fd ff ff       	call   114b2 <init_pic>
}
   11702:	90                   	nop
   11703:	c9                   	leave  
   11704:	c3                   	ret    

00011705 <irq_install>:

int irq_install(int irq_num,irq_handler_t handler)
{
   11705:	55                   	push   %ebp
   11706:	89 e5                	mov    %esp,%ebp
   11708:	83 ec 08             	sub    $0x8,%esp
    if(irq_num < 0 || irq_num >= IRQ_TABLE_NU)
   1170b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1170f:	78 06                	js     11717 <irq_install+0x12>
   11711:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11715:	7e 07                	jle    1171e <irq_install+0x19>
    {
        return -1;
   11717:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1171c:	eb 25                	jmp    11743 <irq_install+0x3e>
    }
    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   1171e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11721:	8b 55 08             	mov    0x8(%ebp),%edx
   11724:	c1 e2 03             	shl    $0x3,%edx
   11727:	81 c2 00 6a 01 00    	add    $0x16a00,%edx
   1172d:	68 00 8e 00 00       	push   $0x8e00
   11732:	50                   	push   %eax
   11733:	6a 08                	push   $0x8
   11735:	52                   	push   %edx
   11736:	e8 25 f8 ff ff       	call   10f60 <gate_desc_set>
   1173b:	83 c4 10             	add    $0x10,%esp
    GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    return 0;
   1173e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11743:	c9                   	leave  
   11744:	c3                   	ret    

00011745 <irq_enable>:

void irq_enable(int irq_num)
{
   11745:	55                   	push   %ebp
   11746:	89 e5                	mov    %esp,%ebp
   11748:	53                   	push   %ebx
   11749:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   1174c:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11750:	7e 78                	jle    117ca <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11752:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   11756:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1175a:	7f 32                	jg     1178e <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   1175c:	6a 21                	push   $0x21
   1175e:	e8 4e f9 ff ff       	call   110b1 <inb>
   11763:	83 c4 04             	add    $0x4,%esp
   11766:	89 c2                	mov    %eax,%edx
   11768:	8b 45 08             	mov    0x8(%ebp),%eax
   1176b:	bb 01 00 00 00       	mov    $0x1,%ebx
   11770:	89 c1                	mov    %eax,%ecx
   11772:	d3 e3                	shl    %cl,%ebx
   11774:	89 d8                	mov    %ebx,%eax
   11776:	f7 d0                	not    %eax
   11778:	21 d0                	and    %edx,%eax
   1177a:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   1177d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11781:	50                   	push   %eax
   11782:	6a 21                	push   $0x21
   11784:	e8 45 f9 ff ff       	call   110ce <outb>
   11789:	83 c4 08             	add    $0x8,%esp
   1178c:	eb 3d                	jmp    117cb <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   1178e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num));
   11792:	68 a1 00 00 00       	push   $0xa1
   11797:	e8 15 f9 ff ff       	call   110b1 <inb>
   1179c:	83 c4 04             	add    $0x4,%esp
   1179f:	89 c2                	mov    %eax,%edx
   117a1:	8b 45 08             	mov    0x8(%ebp),%eax
   117a4:	bb 01 00 00 00       	mov    $0x1,%ebx
   117a9:	89 c1                	mov    %eax,%ecx
   117ab:	d3 e3                	shl    %cl,%ebx
   117ad:	89 d8                	mov    %ebx,%eax
   117af:	f7 d0                	not    %eax
   117b1:	21 d0                	and    %edx,%eax
   117b3:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   117b6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   117ba:	50                   	push   %eax
   117bb:	68 a1 00 00 00       	push   $0xa1
   117c0:	e8 09 f9 ff ff       	call   110ce <outb>
   117c5:	83 c4 08             	add    $0x8,%esp
   117c8:	eb 01                	jmp    117cb <irq_enable+0x86>
        return;
   117ca:	90                   	nop
    }
}
   117cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   117ce:	c9                   	leave  
   117cf:	c3                   	ret    

000117d0 <irq_disable>:

void irq_disable(int irq_num)
{
   117d0:	55                   	push   %ebp
   117d1:	89 e5                	mov    %esp,%ebp
   117d3:	53                   	push   %ebx
   117d4:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   117d7:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   117db:	7e 78                	jle    11855 <irq_disable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   117dd:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   117e1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   117e5:	7f 32                	jg     11819 <irq_disable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) | ~(1 << irq_num);
   117e7:	6a 21                	push   $0x21
   117e9:	e8 c3 f8 ff ff       	call   110b1 <inb>
   117ee:	83 c4 04             	add    $0x4,%esp
   117f1:	89 c3                	mov    %eax,%ebx
   117f3:	8b 45 08             	mov    0x8(%ebp),%eax
   117f6:	ba 01 00 00 00       	mov    $0x1,%edx
   117fb:	89 c1                	mov    %eax,%ecx
   117fd:	d3 e2                	shl    %cl,%edx
   117ff:	89 d0                	mov    %edx,%eax
   11801:	f7 d0                	not    %eax
   11803:	09 d8                	or     %ebx,%eax
   11805:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   11808:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1180c:	50                   	push   %eax
   1180d:	6a 21                	push   $0x21
   1180f:	e8 ba f8 ff ff       	call   110ce <outb>
   11814:	83 c4 08             	add    $0x8,%esp
   11817:	eb 3d                	jmp    11856 <irq_disable+0x86>
    }
    else
    {
        irq_num -= 8;
   11819:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | ~(1 << (irq_num));
   1181d:	68 a1 00 00 00       	push   $0xa1
   11822:	e8 8a f8 ff ff       	call   110b1 <inb>
   11827:	83 c4 04             	add    $0x4,%esp
   1182a:	89 c3                	mov    %eax,%ebx
   1182c:	8b 45 08             	mov    0x8(%ebp),%eax
   1182f:	ba 01 00 00 00       	mov    $0x1,%edx
   11834:	89 c1                	mov    %eax,%ecx
   11836:	d3 e2                	shl    %cl,%edx
   11838:	89 d0                	mov    %edx,%eax
   1183a:	f7 d0                	not    %eax
   1183c:	09 d8                	or     %ebx,%eax
   1183e:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   11841:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11845:	50                   	push   %eax
   11846:	68 a1 00 00 00       	push   $0xa1
   1184b:	e8 7e f8 ff ff       	call   110ce <outb>
   11850:	83 c4 08             	add    $0x8,%esp
   11853:	eb 01                	jmp    11856 <irq_disable+0x86>
        return;
   11855:	90                   	nop
    }
}
   11856:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11859:	c9                   	leave  
   1185a:	c3                   	ret    

0001185b <irq_disable_global>:
void irq_disable_global(void)
{
   1185b:	55                   	push   %ebp
   1185c:	89 e5                	mov    %esp,%ebp
    cli();
   1185e:	e8 8a f8 ff ff       	call   110ed <cli>
}
   11863:	90                   	nop
   11864:	5d                   	pop    %ebp
   11865:	c3                   	ret    

00011866 <irq_enable_global>:

void irq_enable_global(void)
{
   11866:	55                   	push   %ebp
   11867:	89 e5                	mov    %esp,%ebp
    sti();
   11869:	e8 86 f8 ff ff       	call   110f4 <sti>
}
   1186e:	90                   	nop
   1186f:	5d                   	pop    %ebp
   11870:	c3                   	ret    

00011871 <pic_send_eoi>:
void pic_send_eoi(int irq_num)
{
   11871:	55                   	push   %ebp
   11872:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11874:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num >= 8)
   11878:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1187c:	7e 0f                	jle    1188d <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   1187e:	6a 20                	push   $0x20
   11880:	68 a0 00 00 00       	push   $0xa0
   11885:	e8 44 f8 ff ff       	call   110ce <outb>
   1188a:	83 c4 08             	add    $0x8,%esp
    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   1188d:	6a 20                	push   $0x20
   1188f:	6a 20                	push   $0x20
   11891:	e8 38 f8 ff ff       	call   110ce <outb>
   11896:	83 c4 08             	add    $0x8,%esp
}
   11899:	90                   	nop
   1189a:	c9                   	leave  
   1189b:	c3                   	ret    

0001189c <irq_enter_protection>:

irq_state_t irq_enter_protection(void)
{
   1189c:	55                   	push   %ebp
   1189d:	89 e5                	mov    %esp,%ebp
   1189f:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   118a2:	e8 83 f8 ff ff       	call   1112a <read_eflags>
   118a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   118aa:	e8 ac ff ff ff       	call   1185b <irq_disable_global>
    return state;
   118af:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   118b2:	c9                   	leave  
   118b3:	c3                   	ret    

000118b4 <irq_leave_protection>:

void irq_leave_protection(irq_state_t state)
{
   118b4:	55                   	push   %ebp
   118b5:	89 e5                	mov    %esp,%ebp
    
    write_eflags(state);
   118b7:	ff 75 08             	pushl  0x8(%ebp)
   118ba:	e8 7b f8 ff ff       	call   1113a <write_eflags>
   118bf:	83 c4 04             	add    $0x4,%esp
}
   118c2:	90                   	nop
   118c3:	c9                   	leave  
   118c4:	c3                   	ret    

000118c5 <outb>:
{
   118c5:	55                   	push   %ebp
   118c6:	89 e5                	mov    %esp,%ebp
   118c8:	83 ec 08             	sub    $0x8,%esp
   118cb:	8b 55 08             	mov    0x8(%ebp),%edx
   118ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   118d1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   118d5:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   118d8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   118dc:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   118e0:	ee                   	out    %al,(%dx)
}
   118e1:	90                   	nop
   118e2:	c9                   	leave  
   118e3:	c3                   	ret    

000118e4 <do_handler_time>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
void do_handler_time(exception_frame_t *frame)
{
   118e4:	55                   	push   %ebp
   118e5:	89 e5                	mov    %esp,%ebp
   118e7:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   118ea:	a1 00 6e 01 00       	mov    0x16e00,%eax
   118ef:	83 c0 01             	add    $0x1,%eax
   118f2:	a3 00 6e 01 00       	mov    %eax,0x16e00
    pic_send_eoi(IRQ0_TIMER);
   118f7:	83 ec 0c             	sub    $0xc,%esp
   118fa:	6a 20                	push   $0x20
   118fc:	e8 70 ff ff ff       	call   11871 <pic_send_eoi>
   11901:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   11904:	e8 af f3 ff ff       	call   10cb8 <task_time_tick>
    
}
   11909:	90                   	nop
   1190a:	c9                   	leave  
   1190b:	c3                   	ret    

0001190c <init_pit>:
static void init_pit(void)
{
   1190c:	55                   	push   %ebp
   1190d:	89 e5                	mov    %esp,%ebp
   1190f:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = (PIT_OSC_FREQ * OS_TICK_MS )/ 1000.0;
   11912:	c7 45 f4 85 74 00 00 	movl   $0x7485,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT,PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11919:	6a 36                	push   $0x36
   1191b:	6a 43                	push   $0x43
   1191d:	e8 a3 ff ff ff       	call   118c5 <outb>
   11922:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,reload_count & 0xff);
   11925:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11928:	0f b6 c0             	movzbl %al,%eax
   1192b:	50                   	push   %eax
   1192c:	6a 40                	push   $0x40
   1192e:	e8 92 ff ff ff       	call   118c5 <outb>
   11933:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,(reload_count >> 8) & 0xff);
   11936:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11939:	c1 e8 08             	shr    $0x8,%eax
   1193c:	0f b6 c0             	movzbl %al,%eax
   1193f:	50                   	push   %eax
   11940:	6a 40                	push   $0x40
   11942:	e8 7e ff ff ff       	call   118c5 <outb>
   11947:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER,exception_handler_time);
   1194a:	83 ec 08             	sub    $0x8,%esp
   1194d:	68 2b 00 01 00       	push   $0x1002b
   11952:	6a 20                	push   $0x20
   11954:	e8 ac fd ff ff       	call   11705 <irq_install>
   11959:	83 c4 10             	add    $0x10,%esp

    irq_enable(IRQ0_TIMER);
   1195c:	83 ec 0c             	sub    $0xc,%esp
   1195f:	6a 20                	push   $0x20
   11961:	e8 df fd ff ff       	call   11745 <irq_enable>
   11966:	83 c4 10             	add    $0x10,%esp
}
   11969:	90                   	nop
   1196a:	c9                   	leave  
   1196b:	c3                   	ret    

0001196c <time_init>:
void time_init(void)
{
   1196c:	55                   	push   %ebp
   1196d:	89 e5                	mov    %esp,%ebp
   1196f:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11972:	c7 05 00 6e 01 00 00 	movl   $0x0,0x16e00
   11979:	00 00 00 
    init_pit();
   1197c:	e8 8b ff ff ff       	call   1190c <init_pit>
}
   11981:	90                   	nop
   11982:	c9                   	leave  
   11983:	c3                   	ret    

00011984 <kernel_init>:
#include "ipc/sem.h"
#include "ipc/mutex.h"
#include "core/memory.h"

void kernel_init(boot_info_t * boot_info)
{
   11984:	55                   	push   %ebp
   11985:	89 e5                	mov    %esp,%ebp
   11987:	83 ec 08             	sub    $0x8,%esp
    //ASSERT(boot_info->ram_region_count != 2);
    cpu_init();
   1198a:	e8 f0 f6 ff ff       	call   1107f <cpu_init>
    memory_init(boot_info);
   1198f:	83 ec 0c             	sub    $0xc,%esp
   11992:	ff 75 08             	pushl  0x8(%ebp)
   11995:	e8 43 ed ff ff       	call   106dd <memory_init>
   1199a:	83 c4 10             	add    $0x10,%esp
    log_init(); 
   1199d:	e8 03 0e 00 00       	call   127a5 <log_init>
    irq_init();
   119a2:	e8 9e fb ff ff       	call   11545 <irq_init>
    time_init();
   119a7:	e8 c0 ff ff ff       	call   1196c <time_init>

    task_manager_init();
   119ac:	e8 90 f0 ff ff       	call   10a41 <task_manager_init>
}
   119b1:	90                   	nop
   119b2:	c9                   	leave  
   119b3:	c3                   	ret    

000119b4 <init_task_entry>:

static sem_t sem;
static mutex_t mutex;
static int gobal_count = 0;
void init_task_entry(void)
{
   119b4:	55                   	push   %ebp
   119b5:	89 e5                	mov    %esp,%ebp
   119b7:	83 ec 18             	sub    $0x18,%esp
    //test();
    int count = 0;
   119ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;)
    {
        //sys_sleep(3000);
        //sem_wait(&sem);
        mutex_lock(&mutex);
   119c1:	83 ec 0c             	sub    $0xc,%esp
   119c4:	68 b0 8f 01 00       	push   $0x18fb0
   119c9:	e8 e1 01 00 00       	call   11baf <mutex_lock>
   119ce:	83 c4 10             	add    $0x10,%esp
        //log_printf("init task count = %d\n", count++);
        gobal_count++;
   119d1:	a1 c4 8f 01 00       	mov    0x18fc4,%eax
   119d6:	83 c0 01             	add    $0x1,%eax
   119d9:	a3 c4 8f 01 00       	mov    %eax,0x18fc4
        log_printf("gobal_count = %d init task\n",gobal_count);
   119de:	a1 c4 8f 01 00       	mov    0x18fc4,%eax
   119e3:	83 ec 08             	sub    $0x8,%esp
   119e6:	50                   	push   %eax
   119e7:	68 97 2c 01 00       	push   $0x12c97
   119ec:	e8 51 0e 00 00       	call   12842 <log_printf>
   119f1:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   119f4:	83 ec 0c             	sub    $0xc,%esp
   119f7:	68 e8 03 00 00       	push   $0x3e8
   119fc:	e8 3d f4 ff ff       	call   10e3e <sys_sleep>
   11a01:	83 c4 10             	add    $0x10,%esp
        mutex_unlock(&mutex);
   11a04:	83 ec 0c             	sub    $0xc,%esp
   11a07:	68 b0 8f 01 00       	push   $0x18fb0
   11a0c:	e8 2e 02 00 00       	call   11c3f <mutex_unlock>
   11a11:	83 c4 10             	add    $0x10,%esp
        mutex_lock(&mutex);
   11a14:	eb ab                	jmp    119c1 <init_task_entry+0xd>

00011a16 <test_task_entry>:
    }
}

void test_task_entry(void)
{
   11a16:	55                   	push   %ebp
   11a17:	89 e5                	mov    %esp,%ebp
   11a19:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11a1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;)
    {
        //sys_sleep(4000);
        //sem_wait(&sem);
        mutex_lock(&mutex);
   11a23:	83 ec 0c             	sub    $0xc,%esp
   11a26:	68 b0 8f 01 00       	push   $0x18fb0
   11a2b:	e8 7f 01 00 00       	call   11baf <mutex_lock>
   11a30:	83 c4 10             	add    $0x10,%esp
        //log_printf("init idle count = %d\n", count++);
        gobal_count++;
   11a33:	a1 c4 8f 01 00       	mov    0x18fc4,%eax
   11a38:	83 c0 01             	add    $0x1,%eax
   11a3b:	a3 c4 8f 01 00       	mov    %eax,0x18fc4
        log_printf("gobal_count = %d test task\n",gobal_count);
   11a40:	a1 c4 8f 01 00       	mov    0x18fc4,%eax
   11a45:	83 ec 08             	sub    $0x8,%esp
   11a48:	50                   	push   %eax
   11a49:	68 b3 2c 01 00       	push   $0x12cb3
   11a4e:	e8 ef 0d 00 00       	call   12842 <log_printf>
   11a53:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11a56:	83 ec 0c             	sub    $0xc,%esp
   11a59:	68 e8 03 00 00       	push   $0x3e8
   11a5e:	e8 db f3 ff ff       	call   10e3e <sys_sleep>
   11a63:	83 c4 10             	add    $0x10,%esp
        mutex_unlock(&mutex);
   11a66:	83 ec 0c             	sub    $0xc,%esp
   11a69:	68 b0 8f 01 00       	push   $0x18fb0
   11a6e:	e8 cc 01 00 00       	call   11c3f <mutex_unlock>
   11a73:	83 c4 10             	add    $0x10,%esp
        mutex_lock(&mutex);
   11a76:	eb ab                	jmp    11a23 <test_task_entry+0xd>

00011a78 <init_main>:
    }
}

void init_main(void)
{
   11a78:	55                   	push   %ebp
   11a79:	89 e5                	mov    %esp,%ebp
   11a7b:	83 ec 18             	sub    $0x18,%esp
    sem_init(&sem,0);
   11a7e:	83 ec 08             	sub    $0x8,%esp
   11a81:	6a 00                	push   $0x0
   11a83:	68 a0 8f 01 00       	push   $0x18fa0
   11a88:	e8 77 02 00 00       	call   11d04 <sem_init>
   11a8d:	83 c4 10             	add    $0x10,%esp
    
    //int a = 3 / 0;
    log_printf("init main\n");
   11a90:	83 ec 0c             	sub    $0xc,%esp
   11a93:	68 cf 2c 01 00       	push   $0x12ccf
   11a98:	e8 a5 0d 00 00       	call   12842 <log_printf>
   11a9d:	83 c4 10             	add    $0x10,%esp
    task_init(&init_task,"init_task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   11aa0:	ba e0 7e 01 00       	mov    $0x17ee0,%edx
   11aa5:	b8 b4 19 01 00       	mov    $0x119b4,%eax
   11aaa:	52                   	push   %edx
   11aab:	50                   	push   %eax
   11aac:	68 da 2c 01 00       	push   $0x12cda
   11ab1:	68 20 6e 01 00       	push   $0x16e20
   11ab6:	e8 3e ee ff ff       	call   108f9 <task_init>
   11abb:	83 c4 10             	add    $0x10,%esp
    task_init(&test_task,"test_task",(uint32_t)test_task_entry,(uint32_t)&test_task_stack[1024]);
   11abe:	ba a0 8f 01 00       	mov    $0x18fa0,%edx
   11ac3:	b8 16 1a 01 00       	mov    $0x11a16,%eax
   11ac8:	52                   	push   %edx
   11ac9:	50                   	push   %eax
   11aca:	68 e4 2c 01 00       	push   $0x12ce4
   11acf:	68 e0 7e 01 00       	push   $0x17ee0
   11ad4:	e8 20 ee ff ff       	call   108f9 <task_init>
   11ad9:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11adc:	e8 df ef ff ff       	call   10ac0 <task_first_init>

    irq_enable_global();
   11ae1:	e8 80 fd ff ff       	call   11866 <irq_enable_global>
    int count = 0;
   11ae6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;)
    {
        mutex_lock(&mutex);
   11aed:	83 ec 0c             	sub    $0xc,%esp
   11af0:	68 b0 8f 01 00       	push   $0x18fb0
   11af5:	e8 b5 00 00 00       	call   11baf <mutex_lock>
   11afa:	83 c4 10             	add    $0x10,%esp
        //log_printf("init main count = %d\n", count++);
        //sys_sleep(3000);
        //sem_notify(&sem);
        gobal_count++;
   11afd:	a1 c4 8f 01 00       	mov    0x18fc4,%eax
   11b02:	83 c0 01             	add    $0x1,%eax
   11b05:	a3 c4 8f 01 00       	mov    %eax,0x18fc4
        log_printf("gobal_count = %d init main\n",gobal_count);
   11b0a:	a1 c4 8f 01 00       	mov    0x18fc4,%eax
   11b0f:	83 ec 08             	sub    $0x8,%esp
   11b12:	50                   	push   %eax
   11b13:	68 ee 2c 01 00       	push   $0x12cee
   11b18:	e8 25 0d 00 00       	call   12842 <log_printf>
   11b1d:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11b20:	83 ec 0c             	sub    $0xc,%esp
   11b23:	68 e8 03 00 00       	push   $0x3e8
   11b28:	e8 11 f3 ff ff       	call   10e3e <sys_sleep>
   11b2d:	83 c4 10             	add    $0x10,%esp
        gobal_count++;
   11b30:	a1 c4 8f 01 00       	mov    0x18fc4,%eax
   11b35:	83 c0 01             	add    $0x1,%eax
   11b38:	a3 c4 8f 01 00       	mov    %eax,0x18fc4
        log_printf("gobal_count = %d init main\n",gobal_count);
   11b3d:	a1 c4 8f 01 00       	mov    0x18fc4,%eax
   11b42:	83 ec 08             	sub    $0x8,%esp
   11b45:	50                   	push   %eax
   11b46:	68 ee 2c 01 00       	push   $0x12cee
   11b4b:	e8 f2 0c 00 00       	call   12842 <log_printf>
   11b50:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11b53:	83 ec 0c             	sub    $0xc,%esp
   11b56:	68 e8 03 00 00       	push   $0x3e8
   11b5b:	e8 de f2 ff ff       	call   10e3e <sys_sleep>
   11b60:	83 c4 10             	add    $0x10,%esp
        mutex_unlock(&mutex);
   11b63:	83 ec 0c             	sub    $0xc,%esp
   11b66:	68 b0 8f 01 00       	push   $0x18fb0
   11b6b:	e8 cf 00 00 00       	call   11c3f <mutex_unlock>
   11b70:	83 c4 10             	add    $0x10,%esp
        mutex_lock(&mutex);
   11b73:	e9 75 ff ff ff       	jmp    11aed <init_main+0x75>

00011b78 <list_count>:
{
   11b78:	55                   	push   %ebp
   11b79:	89 e5                	mov    %esp,%ebp
    return list->count;
   11b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7e:	8b 40 08             	mov    0x8(%eax),%eax
}
   11b81:	5d                   	pop    %ebp
   11b82:	c3                   	ret    

00011b83 <mutex_init>:
 */
#include "ipc/mutex.h"
#include "cpu/irq.h"

void mutex_init(mutex_t *mutex)
{
   11b83:	55                   	push   %ebp
   11b84:	89 e5                	mov    %esp,%ebp
   11b86:	83 ec 08             	sub    $0x8,%esp
    mutex->owner = (task_t *)0;
   11b89:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mutex->locked_count = 0;
   11b93:	8b 45 08             	mov    0x8(%ebp),%eax
   11b96:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    list_init(&mutex->wait_list);
   11b9d:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba0:	83 ec 0c             	sub    $0xc,%esp
   11ba3:	50                   	push   %eax
   11ba4:	e8 dd 09 00 00       	call   12586 <list_init>
   11ba9:	83 c4 10             	add    $0x10,%esp
}
   11bac:	90                   	nop
   11bad:	c9                   	leave  
   11bae:	c3                   	ret    

00011baf <mutex_lock>:

void mutex_lock(mutex_t *mutex)
{
   11baf:	55                   	push   %ebp
   11bb0:	89 e5                	mov    %esp,%ebp
   11bb2:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11bb5:	e8 e2 fc ff ff       	call   1189c <irq_enter_protection>
   11bba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   11bbd:	e8 c3 ef ff ff       	call   10b85 <task_current>
   11bc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->locked_count == 0)
   11bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc8:	8b 40 10             	mov    0x10(%eax),%eax
   11bcb:	85 c0                	test   %eax,%eax
   11bcd:	75 1a                	jne    11be9 <mutex_lock+0x3a>
    {
        mutex->locked_count++;
   11bcf:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd2:	8b 40 10             	mov    0x10(%eax),%eax
   11bd5:	8d 50 01             	lea    0x1(%eax),%edx
   11bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   11bdb:	89 50 10             	mov    %edx,0x10(%eax)
        mutex->owner = curr;
   11bde:	8b 45 08             	mov    0x8(%ebp),%eax
   11be1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11be4:	89 50 0c             	mov    %edx,0xc(%eax)
   11be7:	eb 45                	jmp    11c2e <mutex_lock+0x7f>
    }else if(mutex->owner == curr)
   11be9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bec:	8b 40 0c             	mov    0xc(%eax),%eax
   11bef:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11bf2:	75 11                	jne    11c05 <mutex_lock+0x56>
    {
        mutex->locked_count++;
   11bf4:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf7:	8b 40 10             	mov    0x10(%eax),%eax
   11bfa:	8d 50 01             	lea    0x1(%eax),%edx
   11bfd:	8b 45 08             	mov    0x8(%ebp),%eax
   11c00:	89 50 10             	mov    %edx,0x10(%eax)
   11c03:	eb 29                	jmp    11c2e <mutex_lock+0x7f>
    }else
    {
        task_set_block(curr);
   11c05:	83 ec 0c             	sub    $0xc,%esp
   11c08:	ff 75 f0             	pushl  -0x10(%ebp)
   11c0b:	e8 4a ef ff ff       	call   10b5a <task_set_block>
   11c10:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list,&curr->wait_node);
   11c13:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c16:	8d 50 44             	lea    0x44(%eax),%edx
   11c19:	8b 45 08             	mov    0x8(%ebp),%eax
   11c1c:	83 ec 08             	sub    $0x8,%esp
   11c1f:	52                   	push   %edx
   11c20:	50                   	push   %eax
   11c21:	e8 e4 09 00 00       	call   1260a <list_insert_last>
   11c26:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   11c29:	e8 12 f0 ff ff       	call   10c40 <schedule_switch>
    }
    irq_leave_protection(state);
   11c2e:	83 ec 0c             	sub    $0xc,%esp
   11c31:	ff 75 f4             	pushl  -0xc(%ebp)
   11c34:	e8 7b fc ff ff       	call   118b4 <irq_leave_protection>
   11c39:	83 c4 10             	add    $0x10,%esp
}
   11c3c:	90                   	nop
   11c3d:	c9                   	leave  
   11c3e:	c3                   	ret    

00011c3f <mutex_unlock>:

void mutex_unlock(mutex_t *mutex)
{
   11c3f:	55                   	push   %ebp
   11c40:	89 e5                	mov    %esp,%ebp
   11c42:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11c45:	e8 52 fc ff ff       	call   1189c <irq_enter_protection>
   11c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   11c4d:	e8 33 ef ff ff       	call   10b85 <task_current>
   11c52:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->owner == curr)
   11c55:	8b 45 08             	mov    0x8(%ebp),%eax
   11c58:	8b 40 0c             	mov    0xc(%eax),%eax
   11c5b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11c5e:	0f 85 84 00 00 00    	jne    11ce8 <mutex_unlock+0xa9>
    {
        if(--mutex->locked_count == 0)
   11c64:	8b 45 08             	mov    0x8(%ebp),%eax
   11c67:	8b 40 10             	mov    0x10(%eax),%eax
   11c6a:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c70:	89 50 10             	mov    %edx,0x10(%eax)
   11c73:	8b 45 08             	mov    0x8(%ebp),%eax
   11c76:	8b 40 10             	mov    0x10(%eax),%eax
   11c79:	85 c0                	test   %eax,%eax
   11c7b:	75 6b                	jne    11ce8 <mutex_unlock+0xa9>
        {
            mutex->owner = (task_t *)0;
   11c7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c80:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            if(list_count(&mutex->wait_list))
   11c87:	8b 45 08             	mov    0x8(%ebp),%eax
   11c8a:	83 ec 0c             	sub    $0xc,%esp
   11c8d:	50                   	push   %eax
   11c8e:	e8 e5 fe ff ff       	call   11b78 <list_count>
   11c93:	83 c4 10             	add    $0x10,%esp
   11c96:	85 c0                	test   %eax,%eax
   11c98:	74 4e                	je     11ce8 <mutex_unlock+0xa9>
            {
                list_node_t * node = list_remove_first(&mutex->wait_list);
   11c9a:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9d:	83 ec 0c             	sub    $0xc,%esp
   11ca0:	50                   	push   %eax
   11ca1:	e8 c8 09 00 00       	call   1266e <list_remove_first>
   11ca6:	83 c4 10             	add    $0x10,%esp
   11ca9:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node,task_t,wait_node);
   11cac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11cb0:	74 08                	je     11cba <mutex_unlock+0x7b>
   11cb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cb5:	83 e8 44             	sub    $0x44,%eax
   11cb8:	eb 05                	jmp    11cbf <mutex_unlock+0x80>
   11cba:	b8 00 00 00 00       	mov    $0x0,%eax
   11cbf:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11cc2:	83 ec 0c             	sub    $0xc,%esp
   11cc5:	ff 75 e8             	pushl  -0x18(%ebp)
   11cc8:	e8 58 ee ff ff       	call   10b25 <task_set_ready>
   11ccd:	83 c4 10             	add    $0x10,%esp
                mutex->locked_count = 1;
   11cd0:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd3:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
                mutex->owner = task;
   11cda:	8b 45 08             	mov    0x8(%ebp),%eax
   11cdd:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11ce0:	89 50 0c             	mov    %edx,0xc(%eax)
                schedule_switch();
   11ce3:	e8 58 ef ff ff       	call   10c40 <schedule_switch>
            }
        }
    }
    irq_leave_protection(state);
   11ce8:	83 ec 0c             	sub    $0xc,%esp
   11ceb:	ff 75 f4             	pushl  -0xc(%ebp)
   11cee:	e8 c1 fb ff ff       	call   118b4 <irq_leave_protection>
   11cf3:	83 c4 10             	add    $0x10,%esp
}
   11cf6:	90                   	nop
   11cf7:	c9                   	leave  
   11cf8:	c3                   	ret    

00011cf9 <list_count>:
{
   11cf9:	55                   	push   %ebp
   11cfa:	89 e5                	mov    %esp,%ebp
    return list->count;
   11cfc:	8b 45 08             	mov    0x8(%ebp),%eax
   11cff:	8b 40 08             	mov    0x8(%eax),%eax
}
   11d02:	5d                   	pop    %ebp
   11d03:	c3                   	ret    

00011d04 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"
void sem_init(sem_t *sem,int count)
{
   11d04:	55                   	push   %ebp
   11d05:	89 e5                	mov    %esp,%ebp
   11d07:	83 ec 08             	sub    $0x8,%esp
    sem->count = count;
   11d0a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d0d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11d10:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11d12:	8b 45 08             	mov    0x8(%ebp),%eax
   11d15:	83 c0 04             	add    $0x4,%eax
   11d18:	83 ec 0c             	sub    $0xc,%esp
   11d1b:	50                   	push   %eax
   11d1c:	e8 65 08 00 00       	call   12586 <list_init>
   11d21:	83 c4 10             	add    $0x10,%esp
}
   11d24:	90                   	nop
   11d25:	c9                   	leave  
   11d26:	c3                   	ret    

00011d27 <sem_wait>:

void sem_wait(sem_t *sem)
{
   11d27:	55                   	push   %ebp
   11d28:	89 e5                	mov    %esp,%ebp
   11d2a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11d2d:	e8 6a fb ff ff       	call   1189c <irq_enter_protection>
   11d32:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(sem->count > 0)
   11d35:	8b 45 08             	mov    0x8(%ebp),%eax
   11d38:	8b 00                	mov    (%eax),%eax
   11d3a:	85 c0                	test   %eax,%eax
   11d3c:	7e 0f                	jle    11d4d <sem_wait+0x26>
    {
        sem->count--;
   11d3e:	8b 45 08             	mov    0x8(%ebp),%eax
   11d41:	8b 00                	mov    (%eax),%eax
   11d43:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d46:	8b 45 08             	mov    0x8(%ebp),%eax
   11d49:	89 10                	mov    %edx,(%eax)
   11d4b:	eb 34                	jmp    11d81 <sem_wait+0x5a>
    }
    else
    {
        task_t *curr = task_current();
   11d4d:	e8 33 ee ff ff       	call   10b85 <task_current>
   11d52:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   11d55:	83 ec 0c             	sub    $0xc,%esp
   11d58:	ff 75 f0             	pushl  -0x10(%ebp)
   11d5b:	e8 fa ed ff ff       	call   10b5a <task_set_block>
   11d60:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list,&curr->wait_node);
   11d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d66:	8d 50 44             	lea    0x44(%eax),%edx
   11d69:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6c:	83 c0 04             	add    $0x4,%eax
   11d6f:	83 ec 08             	sub    $0x8,%esp
   11d72:	52                   	push   %edx
   11d73:	50                   	push   %eax
   11d74:	e8 91 08 00 00       	call   1260a <list_insert_last>
   11d79:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   11d7c:	e8 bf ee ff ff       	call   10c40 <schedule_switch>
    }
    irq_leave_protection(state);
   11d81:	83 ec 0c             	sub    $0xc,%esp
   11d84:	ff 75 f4             	pushl  -0xc(%ebp)
   11d87:	e8 28 fb ff ff       	call   118b4 <irq_leave_protection>
   11d8c:	83 c4 10             	add    $0x10,%esp
}
   11d8f:	90                   	nop
   11d90:	c9                   	leave  
   11d91:	c3                   	ret    

00011d92 <sem_notify>:


void sem_notify(sem_t *sem)
{
   11d92:	55                   	push   %ebp
   11d93:	89 e5                	mov    %esp,%ebp
   11d95:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11d98:	e8 ff fa ff ff       	call   1189c <irq_enter_protection>
   11d9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&sem->wait_list) > 0)
   11da0:	8b 45 08             	mov    0x8(%ebp),%eax
   11da3:	83 c0 04             	add    $0x4,%eax
   11da6:	83 ec 0c             	sub    $0xc,%esp
   11da9:	50                   	push   %eax
   11daa:	e8 4a ff ff ff       	call   11cf9 <list_count>
   11daf:	83 c4 10             	add    $0x10,%esp
   11db2:	85 c0                	test   %eax,%eax
   11db4:	7e 40                	jle    11df6 <sem_notify+0x64>
    {
        list_node_t * node = list_remove_first(&sem->wait_list);
   11db6:	8b 45 08             	mov    0x8(%ebp),%eax
   11db9:	83 c0 04             	add    $0x4,%eax
   11dbc:	83 ec 0c             	sub    $0xc,%esp
   11dbf:	50                   	push   %eax
   11dc0:	e8 a9 08 00 00       	call   1266e <list_remove_first>
   11dc5:	83 c4 10             	add    $0x10,%esp
   11dc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node,task_t,wait_node);
   11dcb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11dcf:	74 08                	je     11dd9 <sem_notify+0x47>
   11dd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11dd4:	83 e8 44             	sub    $0x44,%eax
   11dd7:	eb 05                	jmp    11dde <sem_notify+0x4c>
   11dd9:	b8 00 00 00 00       	mov    $0x0,%eax
   11dde:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11de1:	83 ec 0c             	sub    $0xc,%esp
   11de4:	ff 75 ec             	pushl  -0x14(%ebp)
   11de7:	e8 39 ed ff ff       	call   10b25 <task_set_ready>
   11dec:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   11def:	e8 4c ee ff ff       	call   10c40 <schedule_switch>
   11df4:	eb 0d                	jmp    11e03 <sem_notify+0x71>
    }
    else
    {
        sem->count++;
   11df6:	8b 45 08             	mov    0x8(%ebp),%eax
   11df9:	8b 00                	mov    (%eax),%eax
   11dfb:	8d 50 01             	lea    0x1(%eax),%edx
   11dfe:	8b 45 08             	mov    0x8(%ebp),%eax
   11e01:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);
   11e03:	83 ec 0c             	sub    $0xc,%esp
   11e06:	ff 75 f4             	pushl  -0xc(%ebp)
   11e09:	e8 a6 fa ff ff       	call   118b4 <irq_leave_protection>
   11e0e:	83 c4 10             	add    $0x10,%esp
}
   11e11:	90                   	nop
   11e12:	c9                   	leave  
   11e13:	c3                   	ret    

00011e14 <sem_count>:
int sem_count(sem_t *sem)
{
   11e14:	55                   	push   %ebp
   11e15:	89 e5                	mov    %esp,%ebp
   11e17:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11e1a:	e8 7d fa ff ff       	call   1189c <irq_enter_protection>
   11e1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11e22:	8b 45 08             	mov    0x8(%ebp),%eax
   11e25:	8b 00                	mov    (%eax),%eax
   11e27:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   11e2a:	83 ec 0c             	sub    $0xc,%esp
   11e2d:	ff 75 f4             	pushl  -0xc(%ebp)
   11e30:	e8 7f fa ff ff       	call   118b4 <irq_leave_protection>
   11e35:	83 c4 10             	add    $0x10,%esp
    return count;
   11e38:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   11e3b:	c9                   	leave  
   11e3c:	c3                   	ret    

00011e3d <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   11e3d:	55                   	push   %ebp
   11e3e:	89 e5                	mov    %esp,%ebp
    return (bit_count + 7) / 8;
   11e40:	8b 45 08             	mov    0x8(%ebp),%eax
   11e43:	83 c0 07             	add    $0x7,%eax
   11e46:	8d 50 07             	lea    0x7(%eax),%edx
   11e49:	85 c0                	test   %eax,%eax
   11e4b:	0f 48 c2             	cmovs  %edx,%eax
   11e4e:	c1 f8 03             	sar    $0x3,%eax
}
   11e51:	5d                   	pop    %ebp
   11e52:	c3                   	ret    

00011e53 <bitmap_init>:
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count ,int init_bit)
{
   11e53:	55                   	push   %ebp
   11e54:	89 e5                	mov    %esp,%ebp
   11e56:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   11e59:	8b 45 08             	mov    0x8(%ebp),%eax
   11e5c:	8b 55 10             	mov    0x10(%ebp),%edx
   11e5f:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11e61:	8b 45 08             	mov    0x8(%ebp),%eax
   11e64:	8b 55 0c             	mov    0xc(%ebp),%edx
   11e67:	89 50 04             	mov    %edx,0x4(%eax)
    int bytes = bitmap_byte_count(count);
   11e6a:	ff 75 10             	pushl  0x10(%ebp)
   11e6d:	e8 cb ff ff ff       	call   11e3d <bitmap_byte_count>
   11e72:	83 c4 04             	add    $0x4,%esp
   11e75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bits, init_bit ? 0xff : 0x00, bytes);
   11e78:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11e7c:	74 07                	je     11e85 <bitmap_init+0x32>
   11e7e:	b8 ff 00 00 00       	mov    $0xff,%eax
   11e83:	eb 05                	jmp    11e8a <bitmap_init+0x37>
   11e85:	b8 00 00 00 00       	mov    $0x0,%eax
   11e8a:	83 ec 04             	sub    $0x4,%esp
   11e8d:	ff 75 f4             	pushl  -0xc(%ebp)
   11e90:	50                   	push   %eax
   11e91:	ff 75 0c             	pushl  0xc(%ebp)
   11e94:	e8 95 03 00 00       	call   1222e <kernel_memset>
   11e99:	83 c4 10             	add    $0x10,%esp
}
   11e9c:	90                   	nop
   11e9d:	c9                   	leave  
   11e9e:	c3                   	ret    

00011e9f <bitmap_get_bit>:

int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   11e9f:	55                   	push   %ebp
   11ea0:	89 e5                	mov    %esp,%ebp
   11ea2:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   11ea3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ea6:	8b 50 04             	mov    0x4(%eax),%edx
   11ea9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eac:	8d 48 07             	lea    0x7(%eax),%ecx
   11eaf:	85 c0                	test   %eax,%eax
   11eb1:	0f 48 c1             	cmovs  %ecx,%eax
   11eb4:	c1 f8 03             	sar    $0x3,%eax
   11eb7:	01 d0                	add    %edx,%eax
   11eb9:	0f b6 00             	movzbl (%eax),%eax
   11ebc:	0f b6 d8             	movzbl %al,%ebx
   11ebf:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ec2:	99                   	cltd   
   11ec3:	c1 ea 1d             	shr    $0x1d,%edx
   11ec6:	01 d0                	add    %edx,%eax
   11ec8:	83 e0 07             	and    $0x7,%eax
   11ecb:	29 d0                	sub    %edx,%eax
   11ecd:	ba 01 00 00 00       	mov    $0x1,%edx
   11ed2:	89 c1                	mov    %eax,%ecx
   11ed4:	d3 e2                	shl    %cl,%edx
   11ed6:	89 d0                	mov    %edx,%eax
   11ed8:	21 d8                	and    %ebx,%eax
}
   11eda:	5b                   	pop    %ebx
   11edb:	5d                   	pop    %ebp
   11edc:	c3                   	ret    

00011edd <bitmap_set_bit>:
void bitmap_set_bit(bitmap_t *bitmap, int index, int count,int bit)
{
   11edd:	55                   	push   %ebp
   11ede:	89 e5                	mov    %esp,%ebp
   11ee0:	56                   	push   %esi
   11ee1:	53                   	push   %ebx
   11ee2:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   11ee5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11eec:	e9 a2 00 00 00       	jmp    11f93 <bitmap_set_bit+0xb6>
    {
        if(bit)
   11ef1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11ef5:	74 4a                	je     11f41 <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= (1 << (index % 8));
   11ef7:	8b 45 08             	mov    0x8(%ebp),%eax
   11efa:	8b 50 04             	mov    0x4(%eax),%edx
   11efd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f00:	8d 48 07             	lea    0x7(%eax),%ecx
   11f03:	85 c0                	test   %eax,%eax
   11f05:	0f 48 c1             	cmovs  %ecx,%eax
   11f08:	c1 f8 03             	sar    $0x3,%eax
   11f0b:	89 c3                	mov    %eax,%ebx
   11f0d:	89 d8                	mov    %ebx,%eax
   11f0f:	01 d0                	add    %edx,%eax
   11f11:	0f b6 00             	movzbl (%eax),%eax
   11f14:	89 c6                	mov    %eax,%esi
   11f16:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f19:	99                   	cltd   
   11f1a:	c1 ea 1d             	shr    $0x1d,%edx
   11f1d:	01 d0                	add    %edx,%eax
   11f1f:	83 e0 07             	and    $0x7,%eax
   11f22:	29 d0                	sub    %edx,%eax
   11f24:	ba 01 00 00 00       	mov    $0x1,%edx
   11f29:	89 c1                	mov    %eax,%ecx
   11f2b:	d3 e2                	shl    %cl,%edx
   11f2d:	89 d0                	mov    %edx,%eax
   11f2f:	89 f2                	mov    %esi,%edx
   11f31:	09 c2                	or     %eax,%edx
   11f33:	8b 45 08             	mov    0x8(%ebp),%eax
   11f36:	8b 40 04             	mov    0x4(%eax),%eax
   11f39:	89 d9                	mov    %ebx,%ecx
   11f3b:	01 c8                	add    %ecx,%eax
   11f3d:	88 10                	mov    %dl,(%eax)
   11f3f:	eb 4a                	jmp    11f8b <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   11f41:	8b 45 08             	mov    0x8(%ebp),%eax
   11f44:	8b 50 04             	mov    0x4(%eax),%edx
   11f47:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f4a:	8d 48 07             	lea    0x7(%eax),%ecx
   11f4d:	85 c0                	test   %eax,%eax
   11f4f:	0f 48 c1             	cmovs  %ecx,%eax
   11f52:	c1 f8 03             	sar    $0x3,%eax
   11f55:	89 c3                	mov    %eax,%ebx
   11f57:	89 d8                	mov    %ebx,%eax
   11f59:	01 d0                	add    %edx,%eax
   11f5b:	0f b6 00             	movzbl (%eax),%eax
   11f5e:	89 c6                	mov    %eax,%esi
   11f60:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f63:	99                   	cltd   
   11f64:	c1 ea 1d             	shr    $0x1d,%edx
   11f67:	01 d0                	add    %edx,%eax
   11f69:	83 e0 07             	and    $0x7,%eax
   11f6c:	29 d0                	sub    %edx,%eax
   11f6e:	ba 01 00 00 00       	mov    $0x1,%edx
   11f73:	89 c1                	mov    %eax,%ecx
   11f75:	d3 e2                	shl    %cl,%edx
   11f77:	89 d0                	mov    %edx,%eax
   11f79:	f7 d0                	not    %eax
   11f7b:	89 f2                	mov    %esi,%edx
   11f7d:	21 c2                	and    %eax,%edx
   11f7f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f82:	8b 40 04             	mov    0x4(%eax),%eax
   11f85:	89 d9                	mov    %ebx,%ecx
   11f87:	01 c8                	add    %ecx,%eax
   11f89:	88 10                	mov    %dl,(%eax)
        }
        index++;
   11f8b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   11f8f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11f93:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f96:	3b 45 10             	cmp    0x10(%ebp),%eax
   11f99:	7d 0e                	jge    11fa9 <bitmap_set_bit+0xcc>
   11f9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9e:	8b 00                	mov    (%eax),%eax
   11fa0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11fa3:	0f 8c 48 ff ff ff    	jl     11ef1 <bitmap_set_bit+0x14>
    }
}
   11fa9:	90                   	nop
   11faa:	83 c4 10             	add    $0x10,%esp
   11fad:	5b                   	pop    %ebx
   11fae:	5e                   	pop    %esi
   11faf:	5d                   	pop    %ebp
   11fb0:	c3                   	ret    

00011fb1 <bitmap_is_set>:
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   11fb1:	55                   	push   %ebp
   11fb2:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   11fb4:	ff 75 0c             	pushl  0xc(%ebp)
   11fb7:	ff 75 08             	pushl  0x8(%ebp)
   11fba:	e8 e0 fe ff ff       	call   11e9f <bitmap_get_bit>
   11fbf:	83 c4 08             	add    $0x8,%esp
   11fc2:	85 c0                	test   %eax,%eax
   11fc4:	0f 95 c0             	setne  %al
   11fc7:	0f b6 c0             	movzbl %al,%eax
}
   11fca:	c9                   	leave  
   11fcb:	c3                   	ret    

00011fcc <bitmap_alloc_nbits>:
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   11fcc:	55                   	push   %ebp
   11fcd:	89 e5                	mov    %esp,%ebp
   11fcf:	83 ec 10             	sub    $0x10,%esp
    int index = 0;
   11fd2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   11fd9:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
    while(index < bitmap->bit_count)
   11fe0:	e9 8c 00 00 00       	jmp    12071 <bitmap_alloc_nbits+0xa5>
    {
        if(bitmap_get_bit(bitmap, index) != bit)
   11fe5:	ff 75 fc             	pushl  -0x4(%ebp)
   11fe8:	ff 75 08             	pushl  0x8(%ebp)
   11feb:	e8 af fe ff ff       	call   11e9f <bitmap_get_bit>
   11ff0:	83 c4 08             	add    $0x8,%esp
   11ff3:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11ff6:	74 06                	je     11ffe <bitmap_alloc_nbits+0x32>
        {
            index++;
   11ff8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   11ffc:	eb 73                	jmp    12071 <bitmap_alloc_nbits+0xa5>
        }
        ok_index = index;
   11ffe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12001:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i = 0;
   12004:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   1200b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12012:	eb 27                	jmp    1203b <bitmap_alloc_nbits+0x6f>
        {
            if(bitmap_get_bit(bitmap, index++) != bit)
   12014:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12017:	8d 50 01             	lea    0x1(%eax),%edx
   1201a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1201d:	50                   	push   %eax
   1201e:	ff 75 08             	pushl  0x8(%ebp)
   12021:	e8 79 fe ff ff       	call   11e9f <bitmap_get_bit>
   12026:	83 c4 08             	add    $0x8,%esp
   12029:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1202c:	74 09                	je     12037 <bitmap_alloc_nbits+0x6b>
            {
                ok_index = -1;
   1202e:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12035:	eb 16                	jmp    1204d <bitmap_alloc_nbits+0x81>
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   12037:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1203b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1203e:	3b 45 10             	cmp    0x10(%ebp),%eax
   12041:	7d 0a                	jge    1204d <bitmap_alloc_nbits+0x81>
   12043:	8b 45 08             	mov    0x8(%ebp),%eax
   12046:	8b 00                	mov    (%eax),%eax
   12048:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1204b:	7c c7                	jl     12014 <bitmap_alloc_nbits+0x48>
            }
        }
        if(i >= count)
   1204d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12050:	3b 45 10             	cmp    0x10(%ebp),%eax
   12053:	7c 1c                	jl     12071 <bitmap_alloc_nbits+0xa5>
        {
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12055:	8b 45 0c             	mov    0xc(%ebp),%eax
   12058:	f7 d0                	not    %eax
   1205a:	50                   	push   %eax
   1205b:	ff 75 10             	pushl  0x10(%ebp)
   1205e:	ff 75 f8             	pushl  -0x8(%ebp)
   12061:	ff 75 08             	pushl  0x8(%ebp)
   12064:	e8 74 fe ff ff       	call   11edd <bitmap_set_bit>
   12069:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   1206c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1206f:	eb 13                	jmp    12084 <bitmap_alloc_nbits+0xb8>
    while(index < bitmap->bit_count)
   12071:	8b 45 08             	mov    0x8(%ebp),%eax
   12074:	8b 00                	mov    (%eax),%eax
   12076:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12079:	0f 8c 66 ff ff ff    	jl     11fe5 <bitmap_alloc_nbits+0x19>
        }
    }        
    return -1;
   1207f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12084:	c9                   	leave  
   12085:	c3                   	ret    

00012086 <hlt>:
{
   12086:	55                   	push   %ebp
   12087:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12089:	f4                   	hlt    
}
   1208a:	90                   	nop
   1208b:	5d                   	pop    %ebp
   1208c:	c3                   	ret    

0001208d <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"
void kernel_strcpy (char *dest, const char *src)
{
   1208d:	55                   	push   %ebp
   1208e:	89 e5                	mov    %esp,%ebp
    if(!dest || !src)
   12090:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12094:	74 27                	je     120bd <kernel_strcpy+0x30>
   12096:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1209a:	74 21                	je     120bd <kernel_strcpy+0x30>
    {
        return;
    }
    while((*dest++ = *src++) != '\0');
   1209c:	90                   	nop
   1209d:	8b 55 0c             	mov    0xc(%ebp),%edx
   120a0:	8d 42 01             	lea    0x1(%edx),%eax
   120a3:	89 45 0c             	mov    %eax,0xc(%ebp)
   120a6:	8b 45 08             	mov    0x8(%ebp),%eax
   120a9:	8d 48 01             	lea    0x1(%eax),%ecx
   120ac:	89 4d 08             	mov    %ecx,0x8(%ebp)
   120af:	0f b6 12             	movzbl (%edx),%edx
   120b2:	88 10                	mov    %dl,(%eax)
   120b4:	0f b6 00             	movzbl (%eax),%eax
   120b7:	84 c0                	test   %al,%al
   120b9:	75 e2                	jne    1209d <kernel_strcpy+0x10>
   120bb:	eb 01                	jmp    120be <kernel_strcpy+0x31>
        return;
   120bd:	90                   	nop
    //*dest = '\0';
}
   120be:	5d                   	pop    %ebp
   120bf:	c3                   	ret    

000120c0 <kernel_strncpy>:

void kernel_strncpy (char *dest, const char *src, int size)
{
   120c0:	55                   	push   %ebp
   120c1:	89 e5                	mov    %esp,%ebp
   120c3:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src)
   120c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120ca:	74 5b                	je     12127 <kernel_strncpy+0x67>
   120cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   120d0:	74 55                	je     12127 <kernel_strncpy+0x67>
    {
        return;
    }
    char *d = dest;
   120d2:	8b 45 08             	mov    0x8(%ebp),%eax
   120d5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   120d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   120db:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s))
   120de:	eb 17                	jmp    120f7 <kernel_strncpy+0x37>
    {
        *d++ = *s++;
   120e0:	8b 55 f8             	mov    -0x8(%ebp),%edx
   120e3:	8d 42 01             	lea    0x1(%edx),%eax
   120e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
   120e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120ec:	8d 48 01             	lea    0x1(%eax),%ecx
   120ef:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   120f2:	0f b6 12             	movzbl (%edx),%edx
   120f5:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s))
   120f7:	8b 45 10             	mov    0x10(%ebp),%eax
   120fa:	8d 50 ff             	lea    -0x1(%eax),%edx
   120fd:	89 55 10             	mov    %edx,0x10(%ebp)
   12100:	85 c0                	test   %eax,%eax
   12102:	7e 0a                	jle    1210e <kernel_strncpy+0x4e>
   12104:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12107:	0f b6 00             	movzbl (%eax),%eax
   1210a:	84 c0                	test   %al,%al
   1210c:	75 d2                	jne    120e0 <kernel_strncpy+0x20>
    }
    if(size == 0)
   1210e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12112:	75 0b                	jne    1211f <kernel_strncpy+0x5f>
    {
        *(d - 1) = '\0';
   12114:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12117:	83 e8 01             	sub    $0x1,%eax
   1211a:	c6 00 00             	movb   $0x0,(%eax)
   1211d:	eb 09                	jmp    12128 <kernel_strncpy+0x68>
    }
    else
    {
        *d = '\0';
   1211f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12122:	c6 00 00             	movb   $0x0,(%eax)
   12125:	eb 01                	jmp    12128 <kernel_strncpy+0x68>
        return;
   12127:	90                   	nop
    }
}
   12128:	c9                   	leave  
   12129:	c3                   	ret    

0001212a <kernel_strncmp>:

int kernel_strncmp (const char *str1, const char *str2, int size)
{
   1212a:	55                   	push   %ebp
   1212b:	89 e5                	mov    %esp,%ebp
    if(!str1 || !str2)
   1212d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12131:	74 06                	je     12139 <kernel_strncmp+0xf>
   12133:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12137:	75 0f                	jne    12148 <kernel_strncmp+0x1e>
    {
        return 0;
   12139:	b8 00 00 00 00       	mov    $0x0,%eax
   1213e:	eb 62                	jmp    121a2 <kernel_strncmp+0x78>
    }
    while(*str1 && *str2 && (*str1 == *str2) && size)
    {
        str1++;
   12140:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        str2++;
   12144:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*str1 && *str2 && (*str1 == *str2) && size)
   12148:	8b 45 08             	mov    0x8(%ebp),%eax
   1214b:	0f b6 00             	movzbl (%eax),%eax
   1214e:	84 c0                	test   %al,%al
   12150:	74 20                	je     12172 <kernel_strncmp+0x48>
   12152:	8b 45 0c             	mov    0xc(%ebp),%eax
   12155:	0f b6 00             	movzbl (%eax),%eax
   12158:	84 c0                	test   %al,%al
   1215a:	74 16                	je     12172 <kernel_strncmp+0x48>
   1215c:	8b 45 08             	mov    0x8(%ebp),%eax
   1215f:	0f b6 10             	movzbl (%eax),%edx
   12162:	8b 45 0c             	mov    0xc(%ebp),%eax
   12165:	0f b6 00             	movzbl (%eax),%eax
   12168:	38 c2                	cmp    %al,%dl
   1216a:	75 06                	jne    12172 <kernel_strncmp+0x48>
   1216c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12170:	75 ce                	jne    12140 <kernel_strncmp+0x16>
    }
    return !((*str1 == '\0') || (*str2 == '\0') || (*str1 == *str2));
   12172:	8b 45 08             	mov    0x8(%ebp),%eax
   12175:	0f b6 00             	movzbl (%eax),%eax
   12178:	84 c0                	test   %al,%al
   1217a:	74 21                	je     1219d <kernel_strncmp+0x73>
   1217c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1217f:	0f b6 00             	movzbl (%eax),%eax
   12182:	84 c0                	test   %al,%al
   12184:	74 17                	je     1219d <kernel_strncmp+0x73>
   12186:	8b 45 08             	mov    0x8(%ebp),%eax
   12189:	0f b6 10             	movzbl (%eax),%edx
   1218c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1218f:	0f b6 00             	movzbl (%eax),%eax
   12192:	38 c2                	cmp    %al,%dl
   12194:	74 07                	je     1219d <kernel_strncmp+0x73>
   12196:	b8 01 00 00 00       	mov    $0x1,%eax
   1219b:	eb 05                	jmp    121a2 <kernel_strncmp+0x78>
   1219d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   121a2:	5d                   	pop    %ebp
   121a3:	c3                   	ret    

000121a4 <kernel_strlen>:

int kernel_strlen (const char *str)
{
   121a4:	55                   	push   %ebp
   121a5:	89 e5                	mov    %esp,%ebp
   121a7:	83 ec 10             	sub    $0x10,%esp
    if(!str)
   121aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121ae:	75 07                	jne    121b7 <kernel_strlen+0x13>
    {
        return 0;
   121b0:	b8 00 00 00 00       	mov    $0x0,%eax
   121b5:	eb 26                	jmp    121dd <kernel_strlen+0x39>
    }
    const char *s = str;
   121b7:	8b 45 08             	mov    0x8(%ebp),%eax
   121ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   121bd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while(*s++)
   121c4:	eb 04                	jmp    121ca <kernel_strlen+0x26>
    {
        len++;
   121c6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(*s++)
   121ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121cd:	8d 50 01             	lea    0x1(%eax),%edx
   121d0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   121d3:	0f b6 00             	movzbl (%eax),%eax
   121d6:	84 c0                	test   %al,%al
   121d8:	75 ec                	jne    121c6 <kernel_strlen+0x22>
    }
    return len;
   121da:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   121dd:	c9                   	leave  
   121de:	c3                   	ret    

000121df <kernel_memcpy>:


void kernel_memcpy (void *dest, void *src, int size)
{
   121df:	55                   	push   %ebp
   121e0:	89 e5                	mov    %esp,%ebp
   121e2:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src || size <= 0)
   121e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121e9:	74 40                	je     1222b <kernel_memcpy+0x4c>
   121eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   121ef:	74 3a                	je     1222b <kernel_memcpy+0x4c>
   121f1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   121f5:	7e 34                	jle    1222b <kernel_memcpy+0x4c>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   121f7:	8b 45 08             	mov    0x8(%ebp),%eax
   121fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t *)src;
   121fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12200:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   12203:	eb 17                	jmp    1221c <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   12205:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12208:	8d 42 01             	lea    0x1(%edx),%eax
   1220b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1220e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12211:	8d 48 01             	lea    0x1(%eax),%ecx
   12214:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12217:	0f b6 12             	movzbl (%edx),%edx
   1221a:	88 10                	mov    %dl,(%eax)
    while(size--)
   1221c:	8b 45 10             	mov    0x10(%ebp),%eax
   1221f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12222:	89 55 10             	mov    %edx,0x10(%ebp)
   12225:	85 c0                	test   %eax,%eax
   12227:	75 dc                	jne    12205 <kernel_memcpy+0x26>
   12229:	eb 01                	jmp    1222c <kernel_memcpy+0x4d>
        return;
   1222b:	90                   	nop
    }
}
   1222c:	c9                   	leave  
   1222d:	c3                   	ret    

0001222e <kernel_memset>:

void kernel_memset (void *dest, int c, int size)
{
   1222e:	55                   	push   %ebp
   1222f:	89 e5                	mov    %esp,%ebp
   12231:	83 ec 10             	sub    $0x10,%esp
    if(!dest || size <= 0)
   12234:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12238:	74 2b                	je     12265 <kernel_memset+0x37>
   1223a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1223e:	7e 25                	jle    12265 <kernel_memset+0x37>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   12240:	8b 45 08             	mov    0x8(%ebp),%eax
   12243:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--)
   12246:	eb 0e                	jmp    12256 <kernel_memset+0x28>
    {
        *d++ = (uint8_t)c;
   12248:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1224b:	8d 50 01             	lea    0x1(%eax),%edx
   1224e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12251:	8b 55 0c             	mov    0xc(%ebp),%edx
   12254:	88 10                	mov    %dl,(%eax)
    while(size--)
   12256:	8b 45 10             	mov    0x10(%ebp),%eax
   12259:	8d 50 ff             	lea    -0x1(%eax),%edx
   1225c:	89 55 10             	mov    %edx,0x10(%ebp)
   1225f:	85 c0                	test   %eax,%eax
   12261:	75 e5                	jne    12248 <kernel_memset+0x1a>
   12263:	eb 01                	jmp    12266 <kernel_memset+0x38>
        return;
   12265:	90                   	nop
    }
}
   12266:	c9                   	leave  
   12267:	c3                   	ret    

00012268 <kernel_memcmp>:

int kernel_memcmp (void *d1, void *d2, int size)
{
   12268:	55                   	push   %ebp
   12269:	89 e5                	mov    %esp,%ebp
   1226b:	83 ec 10             	sub    $0x10,%esp
    if(!d1 || !d2 || !size)
   1226e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12272:	74 0c                	je     12280 <kernel_memcmp+0x18>
   12274:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12278:	74 06                	je     12280 <kernel_memcmp+0x18>
   1227a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1227e:	75 07                	jne    12287 <kernel_memcmp+0x1f>
    {
        return 1;
   12280:	b8 01 00 00 00       	mov    $0x1,%eax
   12285:	eb 43                	jmp    122ca <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t *)d1;
   12287:	8b 45 08             	mov    0x8(%ebp),%eax
   1228a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   1228d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12290:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   12293:	eb 23                	jmp    122b8 <kernel_memcmp+0x50>
    {
        if(*p_d1++ != *p_d2++)
   12295:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12298:	8d 50 01             	lea    0x1(%eax),%edx
   1229b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1229e:	0f b6 08             	movzbl (%eax),%ecx
   122a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   122a4:	8d 50 01             	lea    0x1(%eax),%edx
   122a7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   122aa:	0f b6 00             	movzbl (%eax),%eax
   122ad:	38 c1                	cmp    %al,%cl
   122af:	74 07                	je     122b8 <kernel_memcmp+0x50>
        {
            return 1;
   122b1:	b8 01 00 00 00       	mov    $0x1,%eax
   122b6:	eb 12                	jmp    122ca <kernel_memcmp+0x62>
    while(size--)
   122b8:	8b 45 10             	mov    0x10(%ebp),%eax
   122bb:	8d 50 ff             	lea    -0x1(%eax),%edx
   122be:	89 55 10             	mov    %edx,0x10(%ebp)
   122c1:	85 c0                	test   %eax,%eax
   122c3:	75 d0                	jne    12295 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   122c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   122ca:	c9                   	leave  
   122cb:	c3                   	ret    

000122cc <kernel_itoa>:

void kernel_itoa (char *buf, int num, int base)
{
   122cc:	55                   	push   %ebp
   122cd:	89 e5                	mov    %esp,%ebp
   122cf:	83 ec 10             	sub    $0x10,%esp
    int is_neg = 0;
   122d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    is_neg = num < 0 ? 1 : 0;
   122d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   122dc:	c1 e8 1f             	shr    $0x1f,%eax
   122df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static const char * num2ch = "0123456789abcdef";
    char *p = buf;
   122e2:	8b 45 08             	mov    0x8(%ebp),%eax
   122e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(base != 2 && base != 8 && base != 10 && base != 16)
   122e8:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   122ec:	74 1d                	je     1230b <kernel_itoa+0x3f>
   122ee:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   122f2:	74 17                	je     1230b <kernel_itoa+0x3f>
   122f4:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   122f8:	74 11                	je     1230b <kernel_itoa+0x3f>
   122fa:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   122fe:	74 0b                	je     1230b <kernel_itoa+0x3f>
    {
        *p = '\0';
   12300:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12303:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12306:	e9 9e 00 00 00       	jmp    123a9 <kernel_itoa+0xdd>
    }
    if(num < 0 && base == 10)
   1230b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1230f:	79 09                	jns    1231a <kernel_itoa+0x4e>
   12311:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12315:	75 03                	jne    1231a <kernel_itoa+0x4e>
    {
        //*p++ = '-';
        num = -num;
   12317:	f7 5d 0c             	negl   0xc(%ebp)
    }
    do{
        char ch = num2ch[num % base];
   1231a:	8b 0d 90 2d 01 00    	mov    0x12d90,%ecx
   12320:	8b 45 0c             	mov    0xc(%ebp),%eax
   12323:	99                   	cltd   
   12324:	f7 7d 10             	idivl  0x10(%ebp)
   12327:	89 d0                	mov    %edx,%eax
   12329:	01 c8                	add    %ecx,%eax
   1232b:	0f b6 00             	movzbl (%eax),%eax
   1232e:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   12331:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12334:	8d 50 01             	lea    0x1(%eax),%edx
   12337:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1233a:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1233e:	88 10                	mov    %dl,(%eax)
        num /= base;
   12340:	8b 45 0c             	mov    0xc(%ebp),%eax
   12343:	99                   	cltd   
   12344:	f7 7d 10             	idivl  0x10(%ebp)
   12347:	89 45 0c             	mov    %eax,0xc(%ebp)
    }while (num);
   1234a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1234e:	75 ca                	jne    1231a <kernel_itoa+0x4e>
    if(base == 10 && is_neg)
   12350:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12354:	75 12                	jne    12368 <kernel_itoa+0x9c>
   12356:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1235a:	74 0c                	je     12368 <kernel_itoa+0x9c>
    {
        *p++ = '-';
   1235c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1235f:	8d 50 01             	lea    0x1(%eax),%edx
   12362:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12365:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    *p-- = '\0';
   12368:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1236b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1236e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12371:	c6 00 00             	movb   $0x0,(%eax)

    char *start = buf;
   12374:	8b 45 08             	mov    0x8(%ebp),%eax
   12377:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p)
   1237a:	eb 25                	jmp    123a1 <kernel_itoa+0xd5>
    {
        char tmp = *start;
   1237c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1237f:	0f b6 00             	movzbl (%eax),%eax
   12382:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   12385:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12388:	0f b6 10             	movzbl (%eax),%edx
   1238b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1238e:	88 10                	mov    %dl,(%eax)
        *p = tmp;
   12390:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12393:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   12397:	88 10                	mov    %dl,(%eax)
        p--;
   12399:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   1239d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p)
   123a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   123a4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   123a7:	72 d3                	jb     1237c <kernel_itoa+0xb0>
    }
    
}
   123a9:	c9                   	leave  
   123aa:	c3                   	ret    

000123ab <kernel_sprintf>:
void kernel_sprintf (char *buf, const char *fmt, ...)
{
   123ab:	55                   	push   %ebp
   123ac:	89 e5                	mov    %esp,%ebp
   123ae:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   123b1:	8d 45 10             	lea    0x10(%ebp),%eax
   123b4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buf, fmt, args);
   123b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123ba:	83 ec 04             	sub    $0x4,%esp
   123bd:	50                   	push   %eax
   123be:	ff 75 0c             	pushl  0xc(%ebp)
   123c1:	ff 75 08             	pushl  0x8(%ebp)
   123c4:	e8 06 00 00 00       	call   123cf <kernel_vsprintf>
   123c9:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   123cc:	90                   	nop
   123cd:	c9                   	leave  
   123ce:	c3                   	ret    

000123cf <kernel_vsprintf>:
void kernel_vsprintf (char *buf, const char *fmt, va_list args)
{
   123cf:	55                   	push   %ebp
   123d0:	89 e5                	mov    %esp,%ebp
   123d2:	83 ec 20             	sub    $0x20,%esp
    enum{
        NORMAL,READ_FMT
    }state = NORMAL;
   123d5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char * curr = buf;
   123dc:	8b 45 08             	mov    0x8(%ebp),%eax
   123df:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++))
   123e2:	e9 17 01 00 00       	jmp    124fe <kernel_vsprintf+0x12f>
    {
       switch(state)
   123e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123ea:	85 c0                	test   %eax,%eax
   123ec:	74 0a                	je     123f8 <kernel_vsprintf+0x29>
   123ee:	83 f8 01             	cmp    $0x1,%eax
   123f1:	74 2b                	je     1241e <kernel_vsprintf+0x4f>
   123f3:	e9 06 01 00 00       	jmp    124fe <kernel_vsprintf+0x12f>
       {
        case NORMAL:
            if(ch == '%')
   123f8:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   123fc:	75 0c                	jne    1240a <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   123fe:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12405:	e9 f4 00 00 00       	jmp    124fe <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   1240a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1240d:	8d 50 01             	lea    0x1(%eax),%edx
   12410:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12413:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12417:	88 10                	mov    %dl,(%eax)
            }
            break;
   12419:	e9 e0 00 00 00       	jmp    124fe <kernel_vsprintf+0x12f>
        case READ_FMT:
            if(ch == 'd')
   1241e:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12422:	75 31                	jne    12455 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args,int);
   12424:	8b 45 10             	mov    0x10(%ebp),%eax
   12427:	8d 50 04             	lea    0x4(%eax),%edx
   1242a:	89 55 10             	mov    %edx,0x10(%ebp)
   1242d:	8b 00                	mov    (%eax),%eax
   1242f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr,num,10);
   12432:	6a 0a                	push   $0xa
   12434:	ff 75 e4             	pushl  -0x1c(%ebp)
   12437:	ff 75 f8             	pushl  -0x8(%ebp)
   1243a:	e8 8d fe ff ff       	call   122cc <kernel_itoa>
   1243f:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   12442:	ff 75 f8             	pushl  -0x8(%ebp)
   12445:	e8 5a fd ff ff       	call   121a4 <kernel_strlen>
   1244a:	83 c4 04             	add    $0x4,%esp
   1244d:	01 45 f8             	add    %eax,-0x8(%ebp)
   12450:	e9 a1 00 00 00       	jmp    124f6 <kernel_vsprintf+0x127>
            }
            else if(ch == 'x')
   12455:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12459:	75 2e                	jne    12489 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args,int);
   1245b:	8b 45 10             	mov    0x10(%ebp),%eax
   1245e:	8d 50 04             	lea    0x4(%eax),%edx
   12461:	89 55 10             	mov    %edx,0x10(%ebp)
   12464:	8b 00                	mov    (%eax),%eax
   12466:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr,num,16);
   12469:	6a 10                	push   $0x10
   1246b:	ff 75 e8             	pushl  -0x18(%ebp)
   1246e:	ff 75 f8             	pushl  -0x8(%ebp)
   12471:	e8 56 fe ff ff       	call   122cc <kernel_itoa>
   12476:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   12479:	ff 75 f8             	pushl  -0x8(%ebp)
   1247c:	e8 23 fd ff ff       	call   121a4 <kernel_strlen>
   12481:	83 c4 04             	add    $0x4,%esp
   12484:	01 45 f8             	add    %eax,-0x8(%ebp)
   12487:	eb 6d                	jmp    124f6 <kernel_vsprintf+0x127>
            }
            else if(ch == 'c')
   12489:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1248d:	75 1f                	jne    124ae <kernel_vsprintf+0xdf>
            {
                char ch = va_arg(args,int);
   1248f:	8b 45 10             	mov    0x10(%ebp),%eax
   12492:	8d 50 04             	lea    0x4(%eax),%edx
   12495:	89 55 10             	mov    %edx,0x10(%ebp)
   12498:	8b 00                	mov    (%eax),%eax
   1249a:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = ch;
   1249d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124a0:	8d 50 01             	lea    0x1(%eax),%edx
   124a3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   124a6:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   124aa:	88 10                	mov    %dl,(%eax)
   124ac:	eb 48                	jmp    124f6 <kernel_vsprintf+0x127>
            }
            else if(ch == 's')
   124ae:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   124b2:	75 42                	jne    124f6 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args,char *);
   124b4:	8b 45 10             	mov    0x10(%ebp),%eax
   124b7:	8d 50 04             	lea    0x4(%eax),%edx
   124ba:	89 55 10             	mov    %edx,0x10(%ebp)
   124bd:	8b 00                	mov    (%eax),%eax
   124bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   124c2:	ff 75 f4             	pushl  -0xc(%ebp)
   124c5:	e8 da fc ff ff       	call   121a4 <kernel_strlen>
   124ca:	83 c4 04             	add    $0x4,%esp
   124cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--)
   124d0:	eb 17                	jmp    124e9 <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   124d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   124d5:	8d 42 01             	lea    0x1(%edx),%eax
   124d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
   124db:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124de:	8d 48 01             	lea    0x1(%eax),%ecx
   124e1:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   124e4:	0f b6 12             	movzbl (%edx),%edx
   124e7:	88 10                	mov    %dl,(%eax)
                while(len--)
   124e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124ec:	8d 50 ff             	lea    -0x1(%eax),%edx
   124ef:	89 55 f0             	mov    %edx,-0x10(%ebp)
   124f2:	85 c0                	test   %eax,%eax
   124f4:	75 dc                	jne    124d2 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   124f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   124fd:	90                   	nop
    while((ch = *fmt++))
   124fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   12501:	8d 50 01             	lea    0x1(%eax),%edx
   12504:	89 55 0c             	mov    %edx,0xc(%ebp)
   12507:	0f b6 00             	movzbl (%eax),%eax
   1250a:	88 45 ef             	mov    %al,-0x11(%ebp)
   1250d:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12511:	0f 85 d0 fe ff ff    	jne    123e7 <kernel_vsprintf+0x18>
       }
    }
}
   12517:	90                   	nop
   12518:	c9                   	leave  
   12519:	c3                   	ret    

0001251a <panic>:
void panic(const char *file,int line,const char *func,const char *cond)
{
   1251a:	55                   	push   %ebp
   1251b:	89 e5                	mov    %esp,%ebp
   1251d:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed: %s\n",cond);
   12520:	83 ec 08             	sub    $0x8,%esp
   12523:	ff 75 14             	pushl  0x14(%ebp)
   12526:	68 0a 2d 01 00       	push   $0x12d0a
   1252b:	e8 12 03 00 00       	call   12842 <log_printf>
   12530:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\n",file);
   12533:	83 ec 08             	sub    $0x8,%esp
   12536:	ff 75 08             	pushl  0x8(%ebp)
   12539:	68 1d 2d 01 00       	push   $0x12d1d
   1253e:	e8 ff 02 00 00       	call   12842 <log_printf>
   12543:	83 c4 10             	add    $0x10,%esp
    log_printf("line: %d\n",line);
   12546:	83 ec 08             	sub    $0x8,%esp
   12549:	ff 75 0c             	pushl  0xc(%ebp)
   1254c:	68 27 2d 01 00       	push   $0x12d27
   12551:	e8 ec 02 00 00       	call   12842 <log_printf>
   12556:	83 c4 10             	add    $0x10,%esp
    log_printf("function: %s\n",func);
   12559:	83 ec 08             	sub    $0x8,%esp
   1255c:	ff 75 10             	pushl  0x10(%ebp)
   1255f:	68 31 2d 01 00       	push   $0x12d31
   12564:	e8 d9 02 00 00       	call   12842 <log_printf>
   12569:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   1256c:	e8 15 fb ff ff       	call   12086 <hlt>
   12571:	eb f9                	jmp    1256c <panic+0x52>

00012573 <list_is_empty>:
{
   12573:	55                   	push   %ebp
   12574:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12576:	8b 45 08             	mov    0x8(%ebp),%eax
   12579:	8b 40 08             	mov    0x8(%eax),%eax
   1257c:	85 c0                	test   %eax,%eax
   1257e:	0f 94 c0             	sete   %al
   12581:	0f b6 c0             	movzbl %al,%eax
}
   12584:	5d                   	pop    %ebp
   12585:	c3                   	ret    

00012586 <list_init>:
#include "tools/list.h"

void list_init(list_t *list)
{
   12586:	55                   	push   %ebp
   12587:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12589:	8b 45 08             	mov    0x8(%ebp),%eax
   1258c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12593:	8b 45 08             	mov    0x8(%ebp),%eax
   12596:	8b 50 04             	mov    0x4(%eax),%edx
   12599:	8b 45 08             	mov    0x8(%ebp),%eax
   1259c:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   1259e:	8b 45 08             	mov    0x8(%ebp),%eax
   125a1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   125a8:	90                   	nop
   125a9:	5d                   	pop    %ebp
   125aa:	c3                   	ret    

000125ab <list_insert_first>:

void list_insert_first(list_t * list,list_node_t * node)
{
   125ab:	55                   	push   %ebp
   125ac:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   125ae:	8b 45 08             	mov    0x8(%ebp),%eax
   125b1:	8b 10                	mov    (%eax),%edx
   125b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   125b6:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   125b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   125bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if(list_is_empty(list))
   125c2:	ff 75 08             	pushl  0x8(%ebp)
   125c5:	e8 a9 ff ff ff       	call   12573 <list_is_empty>
   125ca:	83 c4 04             	add    $0x4,%esp
   125cd:	85 c0                	test   %eax,%eax
   125cf:	74 15                	je     125e6 <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   125d1:	8b 45 08             	mov    0x8(%ebp),%eax
   125d4:	8b 55 0c             	mov    0xc(%ebp),%edx
   125d7:	89 10                	mov    %edx,(%eax)
   125d9:	8b 45 08             	mov    0x8(%ebp),%eax
   125dc:	8b 10                	mov    (%eax),%edx
   125de:	8b 45 08             	mov    0x8(%ebp),%eax
   125e1:	89 50 04             	mov    %edx,0x4(%eax)
   125e4:	eb 12                	jmp    125f8 <list_insert_first+0x4d>
    }
    else
    {
        list->first->pre = node;
   125e6:	8b 45 08             	mov    0x8(%ebp),%eax
   125e9:	8b 00                	mov    (%eax),%eax
   125eb:	8b 55 0c             	mov    0xc(%ebp),%edx
   125ee:	89 10                	mov    %edx,(%eax)
        list->first = node;
   125f0:	8b 45 08             	mov    0x8(%ebp),%eax
   125f3:	8b 55 0c             	mov    0xc(%ebp),%edx
   125f6:	89 10                	mov    %edx,(%eax)
    }
    list->count++;
   125f8:	8b 45 08             	mov    0x8(%ebp),%eax
   125fb:	8b 40 08             	mov    0x8(%eax),%eax
   125fe:	8d 50 01             	lea    0x1(%eax),%edx
   12601:	8b 45 08             	mov    0x8(%ebp),%eax
   12604:	89 50 08             	mov    %edx,0x8(%eax)
}
   12607:	90                   	nop
   12608:	c9                   	leave  
   12609:	c3                   	ret    

0001260a <list_insert_last>:

void list_insert_last(list_t * list,list_node_t * node)
{
   1260a:	55                   	push   %ebp
   1260b:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1260d:	8b 45 08             	mov    0x8(%ebp),%eax
   12610:	8b 50 04             	mov    0x4(%eax),%edx
   12613:	8b 45 0c             	mov    0xc(%ebp),%eax
   12616:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   12618:	8b 45 0c             	mov    0xc(%ebp),%eax
   1261b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if(list_is_empty(list))
   12622:	ff 75 08             	pushl  0x8(%ebp)
   12625:	e8 49 ff ff ff       	call   12573 <list_is_empty>
   1262a:	83 c4 04             	add    $0x4,%esp
   1262d:	85 c0                	test   %eax,%eax
   1262f:	74 16                	je     12647 <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   12631:	8b 45 08             	mov    0x8(%ebp),%eax
   12634:	8b 55 0c             	mov    0xc(%ebp),%edx
   12637:	89 50 04             	mov    %edx,0x4(%eax)
   1263a:	8b 45 08             	mov    0x8(%ebp),%eax
   1263d:	8b 50 04             	mov    0x4(%eax),%edx
   12640:	8b 45 08             	mov    0x8(%ebp),%eax
   12643:	89 10                	mov    %edx,(%eax)
   12645:	eb 15                	jmp    1265c <list_insert_last+0x52>
    }
    else
    {
        list->last->next = node;
   12647:	8b 45 08             	mov    0x8(%ebp),%eax
   1264a:	8b 40 04             	mov    0x4(%eax),%eax
   1264d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12650:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12653:	8b 45 08             	mov    0x8(%ebp),%eax
   12656:	8b 55 0c             	mov    0xc(%ebp),%edx
   12659:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list->count++;
   1265c:	8b 45 08             	mov    0x8(%ebp),%eax
   1265f:	8b 40 08             	mov    0x8(%eax),%eax
   12662:	8d 50 01             	lea    0x1(%eax),%edx
   12665:	8b 45 08             	mov    0x8(%ebp),%eax
   12668:	89 50 08             	mov    %edx,0x8(%eax)
}
   1266b:	90                   	nop
   1266c:	c9                   	leave  
   1266d:	c3                   	ret    

0001266e <list_remove_first>:

list_node_t* list_remove_first(list_t * list)
{
   1266e:	55                   	push   %ebp
   1266f:	89 e5                	mov    %esp,%ebp
   12671:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list))
   12674:	ff 75 08             	pushl  0x8(%ebp)
   12677:	e8 f7 fe ff ff       	call   12573 <list_is_empty>
   1267c:	83 c4 04             	add    $0x4,%esp
   1267f:	85 c0                	test   %eax,%eax
   12681:	74 07                	je     1268a <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   12683:	b8 00 00 00 00       	mov    $0x0,%eax
   12688:	eb 59                	jmp    126e3 <list_remove_first+0x75>
    }
    list_node_t * node = list->first;
   1268a:	8b 45 08             	mov    0x8(%ebp),%eax
   1268d:	8b 00                	mov    (%eax),%eax
   1268f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = node->next;
   12692:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12695:	8b 50 04             	mov    0x4(%eax),%edx
   12698:	8b 45 08             	mov    0x8(%ebp),%eax
   1269b:	89 10                	mov    %edx,(%eax)
    if(list->first == (list_node_t *)0)
   1269d:	8b 45 08             	mov    0x8(%ebp),%eax
   126a0:	8b 00                	mov    (%eax),%eax
   126a2:	85 c0                	test   %eax,%eax
   126a4:	75 0c                	jne    126b2 <list_remove_first+0x44>
    {
        list->last = (list_node_t *)0;
   126a6:	8b 45 08             	mov    0x8(%ebp),%eax
   126a9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   126b0:	eb 0b                	jmp    126bd <list_remove_first+0x4f>
    }
    else
    {
        list->first->pre = (list_node_t *)0;
   126b2:	8b 45 08             	mov    0x8(%ebp),%eax
   126b5:	8b 00                	mov    (%eax),%eax
   126b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   126bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   126c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126c9:	8b 10                	mov    (%eax),%edx
   126cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126ce:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   126d1:	8b 45 08             	mov    0x8(%ebp),%eax
   126d4:	8b 40 08             	mov    0x8(%eax),%eax
   126d7:	8d 50 ff             	lea    -0x1(%eax),%edx
   126da:	8b 45 08             	mov    0x8(%ebp),%eax
   126dd:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   126e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   126e3:	c9                   	leave  
   126e4:	c3                   	ret    

000126e5 <list_remove>:

list_node_t* list_remove(list_t * list,list_node_t * node)
{
   126e5:	55                   	push   %ebp
   126e6:	89 e5                	mov    %esp,%ebp
    if(node == list->first)
   126e8:	8b 45 08             	mov    0x8(%ebp),%eax
   126eb:	8b 00                	mov    (%eax),%eax
   126ed:	39 45 0c             	cmp    %eax,0xc(%ebp)
   126f0:	75 0b                	jne    126fd <list_remove+0x18>
    {
        list->first = node->next;
   126f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   126f5:	8b 50 04             	mov    0x4(%eax),%edx
   126f8:	8b 45 08             	mov    0x8(%ebp),%eax
   126fb:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last)
   126fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12700:	8b 40 04             	mov    0x4(%eax),%eax
   12703:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12706:	75 0b                	jne    12713 <list_remove+0x2e>
    {
        list->last = node->pre;
   12708:	8b 45 0c             	mov    0xc(%ebp),%eax
   1270b:	8b 10                	mov    (%eax),%edx
   1270d:	8b 45 08             	mov    0x8(%ebp),%eax
   12710:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->pre)
   12713:	8b 45 0c             	mov    0xc(%ebp),%eax
   12716:	8b 00                	mov    (%eax),%eax
   12718:	85 c0                	test   %eax,%eax
   1271a:	74 0e                	je     1272a <list_remove+0x45>
    {
        node->pre->next = node->next;
   1271c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1271f:	8b 00                	mov    (%eax),%eax
   12721:	8b 55 0c             	mov    0xc(%ebp),%edx
   12724:	8b 52 04             	mov    0x4(%edx),%edx
   12727:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) 
   1272a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1272d:	8b 40 04             	mov    0x4(%eax),%eax
   12730:	85 c0                	test   %eax,%eax
   12732:	74 0d                	je     12741 <list_remove+0x5c>
    {
        node->next->pre = node->pre;
   12734:	8b 45 0c             	mov    0xc(%ebp),%eax
   12737:	8b 40 04             	mov    0x4(%eax),%eax
   1273a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1273d:	8b 12                	mov    (%edx),%edx
   1273f:	89 10                	mov    %edx,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   12741:	8b 45 0c             	mov    0xc(%ebp),%eax
   12744:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1274a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1274d:	8b 10                	mov    (%eax),%edx
   1274f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12752:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   12755:	8b 45 08             	mov    0x8(%ebp),%eax
   12758:	8b 40 08             	mov    0x8(%eax),%eax
   1275b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1275e:	8b 45 08             	mov    0x8(%ebp),%eax
   12761:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12764:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   12767:	5d                   	pop    %ebp
   12768:	c3                   	ret    

00012769 <inb>:
{
   12769:	55                   	push   %ebp
   1276a:	89 e5                	mov    %esp,%ebp
   1276c:	83 ec 14             	sub    $0x14,%esp
   1276f:	8b 45 08             	mov    0x8(%ebp),%eax
   12772:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   12776:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1277a:	89 c2                	mov    %eax,%edx
   1277c:	ec                   	in     (%dx),%al
   1277d:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12780:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12784:	c9                   	leave  
   12785:	c3                   	ret    

00012786 <outb>:
{
   12786:	55                   	push   %ebp
   12787:	89 e5                	mov    %esp,%ebp
   12789:	83 ec 08             	sub    $0x8,%esp
   1278c:	8b 55 08             	mov    0x8(%ebp),%edx
   1278f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12792:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12796:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   12799:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1279d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   127a1:	ee                   	out    %al,(%dx)
}
   127a2:	90                   	nop
   127a3:	c9                   	leave  
   127a4:	c3                   	ret    

000127a5 <log_init>:
#include "cpu/irq.h"    
#include "ipc/mutex.h"
#define COM_PORT 0x3f8
static mutex_t log_mutex;
void log_init (void)
{
   127a5:	55                   	push   %ebp
   127a6:	89 e5                	mov    %esp,%ebp
   127a8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&log_mutex);
   127ab:	83 ec 0c             	sub    $0xc,%esp
   127ae:	68 c8 8f 01 00       	push   $0x18fc8
   127b3:	e8 cb f3 ff ff       	call   11b83 <mutex_init>
   127b8:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   127bb:	83 ec 08             	sub    $0x8,%esp
   127be:	6a 00                	push   $0x0
   127c0:	68 f9 03 00 00       	push   $0x3f9
   127c5:	e8 bc ff ff ff       	call   12786 <outb>
   127ca:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x80);
   127cd:	83 ec 08             	sub    $0x8,%esp
   127d0:	68 80 00 00 00       	push   $0x80
   127d5:	68 fb 03 00 00       	push   $0x3fb
   127da:	e8 a7 ff ff ff       	call   12786 <outb>
   127df:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 0, 0x03);
   127e2:	83 ec 08             	sub    $0x8,%esp
   127e5:	6a 03                	push   $0x3
   127e7:	68 f8 03 00 00       	push   $0x3f8
   127ec:	e8 95 ff ff ff       	call   12786 <outb>
   127f1:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   127f4:	83 ec 08             	sub    $0x8,%esp
   127f7:	6a 00                	push   $0x0
   127f9:	68 f9 03 00 00       	push   $0x3f9
   127fe:	e8 83 ff ff ff       	call   12786 <outb>
   12803:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x03);
   12806:	83 ec 08             	sub    $0x8,%esp
   12809:	6a 03                	push   $0x3
   1280b:	68 fb 03 00 00       	push   $0x3fb
   12810:	e8 71 ff ff ff       	call   12786 <outb>
   12815:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 2, 0xC7);
   12818:	83 ec 08             	sub    $0x8,%esp
   1281b:	68 c7 00 00 00       	push   $0xc7
   12820:	68 fa 03 00 00       	push   $0x3fa
   12825:	e8 5c ff ff ff       	call   12786 <outb>
   1282a:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 4, 0x0F);
   1282d:	83 ec 08             	sub    $0x8,%esp
   12830:	6a 0f                	push   $0xf
   12832:	68 fc 03 00 00       	push   $0x3fc
   12837:	e8 4a ff ff ff       	call   12786 <outb>
   1283c:	83 c4 10             	add    $0x10,%esp
}
   1283f:	90                   	nop
   12840:	c9                   	leave  
   12841:	c3                   	ret    

00012842 <log_printf>:


void log_printf (const char *fmt, ...)
{
   12842:	55                   	push   %ebp
   12843:	89 e5                	mov    %esp,%ebp
   12845:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    kernel_memset(buf, 0, sizeof(buf));
   1284b:	83 ec 04             	sub    $0x4,%esp
   1284e:	68 80 00 00 00       	push   $0x80
   12853:	6a 00                	push   $0x0
   12855:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1285b:	50                   	push   %eax
   1285c:	e8 cd f9 ff ff       	call   1222e <kernel_memset>
   12861:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12864:	8d 45 0c             	lea    0xc(%ebp),%eax
   12867:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(buf, fmt, args);
   1286d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12873:	83 ec 04             	sub    $0x4,%esp
   12876:	50                   	push   %eax
   12877:	ff 75 08             	pushl  0x8(%ebp)
   1287a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12880:	50                   	push   %eax
   12881:	e8 49 fb ff ff       	call   123cf <kernel_vsprintf>
   12886:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&log_mutex);
   12889:	83 ec 0c             	sub    $0xc,%esp
   1288c:	68 c8 8f 01 00       	push   $0x18fc8
   12891:	e8 19 f3 ff ff       	call   11baf <mutex_lock>
   12896:	83 c4 10             	add    $0x10,%esp
    const char *p = buf;
   12899:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1289f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   128a2:	eb 39                	jmp    128dd <log_printf+0x9b>
    {
        while ((inb(COM_PORT + 5) & (1 << 6)) == 0);
   128a4:	90                   	nop
   128a5:	83 ec 0c             	sub    $0xc,%esp
   128a8:	68 fd 03 00 00       	push   $0x3fd
   128ad:	e8 b7 fe ff ff       	call   12769 <inb>
   128b2:	83 c4 10             	add    $0x10,%esp
   128b5:	0f b6 c0             	movzbl %al,%eax
   128b8:	83 e0 40             	and    $0x40,%eax
   128bb:	85 c0                	test   %eax,%eax
   128bd:	74 e6                	je     128a5 <log_printf+0x63>
        outb(COM_PORT, *p);
   128bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128c2:	0f b6 00             	movzbl (%eax),%eax
   128c5:	0f b6 c0             	movzbl %al,%eax
   128c8:	83 ec 08             	sub    $0x8,%esp
   128cb:	50                   	push   %eax
   128cc:	68 f8 03 00 00       	push   $0x3f8
   128d1:	e8 b0 fe ff ff       	call   12786 <outb>
   128d6:	83 c4 10             	add    $0x10,%esp
        p++;
   128d9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    while (*p != '\0')
   128dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128e0:	0f b6 00             	movzbl (%eax),%eax
   128e3:	84 c0                	test   %al,%al
   128e5:	75 bd                	jne    128a4 <log_printf+0x62>
    }

    outb(COM_PORT, '\r');
   128e7:	83 ec 08             	sub    $0x8,%esp
   128ea:	6a 0d                	push   $0xd
   128ec:	68 f8 03 00 00       	push   $0x3f8
   128f1:	e8 90 fe ff ff       	call   12786 <outb>
   128f6:	83 c4 10             	add    $0x10,%esp
    //outb(COM_PORT, '\n');
    mutex_unlock(&log_mutex);
   128f9:	83 ec 0c             	sub    $0xc,%esp
   128fc:	68 c8 8f 01 00       	push   $0x18fc8
   12901:	e8 39 f3 ff ff       	call   11c3f <mutex_unlock>
   12906:	83 c4 10             	add    $0x10,%esp
}
   12909:	90                   	nop
   1290a:	c9                   	leave  
   1290b:	c3                   	ret    
