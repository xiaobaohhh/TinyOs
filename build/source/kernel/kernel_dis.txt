
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/ubuntu/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002dce memsz 0x00002dce flags r-x
    LOAD off    0x00004000 vaddr 0x00013000 paddr 0x00013000 align 2**12
         filesz 0x00000044 memsz 0x00008fe0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029f1  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000003da  000129f4  000129f4  000039f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00013000  00013000  00004000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00007fe0  00014000  00014000  00004044  2**12
                  ALLOC
  4 .debug_line   00001910  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004138  00000000  00000000  00005954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001142  00000000  00000000  00009a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a0  00000000  00000000  0000abd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000010a4  00000000  00000000  0000ad70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000be14  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000012b0  00000000  00000000  0000be28  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000129f4 l    d  .rodata	00000000 .rodata
00013000 l    d  .data	00000000 .data
00014000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 source/kernel/CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102e1 l     F .text	0000000d down2
000102ee l     F .text	00000017 up2
00010305 l     F .text	0000000c write_cr3
00010311 l     F .text	0000000b pde_index
0001031c l     F .text	00000010 pte_index
0001032c l     F .text	00000010 pde_paddr
0001033c l     F .text	00000011 mmu_set_page_dir
00014000 l     O .bss	00000028 paddr_alloc
00015000 l     O .bss	00001000 kernel_page_dir
0001034d l     F .text	00000055 addr_alloc_init
000103a2 l     F .text	00000067 addr_alloc_page
00010409 l     F .text	00000062 addr_free_page
000104d1 l     F .text	0000003a total_mem_size
00013000 l     O .data	00000040 kernel_map.2194
00000000 l    df *ABS*	00000000 task.c
000107e8 l     F .text	0000001b list_node_init
00010803 l     F .text	0000000b list_node_next
0001080e l     F .text	0000000b list_count
00010819 l     F .text	0000000a list_first
00010823 l     F .text	00000011 read_cr3
00010834 l     F .text	0000000c write_cr3
00010840 l     F .text	00000007 hlt
00010847 l     F .text	00000017 write_tr
00016020 l     O .bss	000001a4 task_manager
000161e0 l     O .bss	00001000 idle_task_stack
0001085e l     F .text	00000130 tss_init
00010acc l     F .text	0000000a idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00010f78 l     F .text	00000028 lgdt
00010fa0 l     F .text	0000001a far_jump
000171e0 l     O .bss	00000800 gdt_table
000179e0 l     O .bss	00000014 gdt_mutex
00000000 l    df *ABS*	00000000 irq.c
000111c7 l     F .text	0000001d inb
000111e4 l     F .text	0000001f outb
00011203 l     F .text	00000007 cli
0001120a l     F .text	00000007 sti
00011211 l     F .text	00000028 lidt
00011239 l     F .text	00000007 hlt
00011240 l     F .text	00000010 read_eflags
00011250 l     F .text	0000000b write_eflags
00017a00 l     O .bss	00000400 idt_table
0001125b l     F .text	000000e3 dump_core_regs
0001133e l     F .text	0000003e do_default_handler
000115c8 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
000119db l     F .text	0000001f outb
00017e00 l     O .bss	00000004 sys_tick
00011a22 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00017e20 l     O .bss	000000b8 init_task
00017ee0 l     O .bss	00001000 init_task_stack
00018ee0 l     O .bss	000000b8 test_task
00018fa0 l     O .bss	00001000 test_task_stack
00019fa0 l     O .bss	00000010 sem
00019fb0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mutex.c
00011c5d l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00011dde l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
0001216b l     F .text	00000007 hlt
00013040 l     O .data	00000004 num2ch.1917
00000000 l    df *ABS*	00000000 list.c
00012658 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001284e l     F .text	0000001d inb
0001286b l     F .text	0000001f outb
00019fc4 l     O .bss	00000014 log_mutex
00011574 g     F .text	0000001c do_handler_simd_floating_point
00011f84 g     F .text	0000003e bitmap_get_bit
000122c4 g     F .text	0000004f kernel_memcpy
00010c1a g     F .text	0000000a task_current
0001197c g     F .text	0000000b irq_enable_global
000126ef g     F .text	00000064 list_insert_last
000114b0 g     F .text	0000001c do_handler_segment_not_present
00010bba g     F .text	00000035 task_set_ready
00012096 g     F .text	0000001b bitmap_is_set
00012313 g     F .text	0000003a kernel_memset
000100ac g       .text	00000000 exception_handler_nmi
00011195 g     F .text	0000001e cpu_init
0001288a g     F .text	0000009d log_init
00011b9c g     F .text	000000c1 init_main
00010233 g       .text	00000000 exception_handler_alignment_check
000102ad g       .text	00000000 exception_handler_security
00010e64 g     F .text	0000005c do_schedule_switch
00012172 g     F .text	00000033 kernel_strcpy
00016000 g     O .bss	00000004 need_reschedule
00013000 g       .data	00000000 s_data
0001185b g     F .text	0000008b irq_enable
0001004f g       .text	00000000 exception_handler_unknown
000100cb g       .text	00000000 exception_handler_breakpoint
00011440 g     F .text	0000001c do_handler_invalid_op
00011408 g     F .text	0000001c do_handler_overflow
0001026f g       .text	00000000 exception_handler_simd_floating_point
0001153c g     F .text	0000001c do_handler_alignment_check
000105c2 g     F .text	00000063 memory_create_map
000101da g       .text	00000000 exception_handler_general_protection
000114e8 g     F .text	0000001c do_handler_general_protection
00011ef9 g     F .text	00000029 sem_count
00011398 g     F .text	0000001c do_handler_divider
00011fc2 g     F .text	000000d4 bitmap_set_bit
00011478 g     F .text	0000001c do_handler_double_fault
00010e2a g     F .text	0000003a mmu_set_page_dir
00011aca g     F .text	00000069 init_task_entry
00011504 g     F .text	0000001c do_handler_page_fault
00010166 g       .text	00000000 exception_handler_double_fault
00011987 g     F .text	0000002b pic_send_eoi
00010bb0 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00011e0c g     F .text	0000006b sem_wait
000115ac g     F .text	0000001c do_handler_security
000101bd g       .text	00000000 exception_handler_stack_segment_fault
000100ea g       .text	00000000 exception_handler_overflow
000102ca g       .text	00000000 simple_switch
0001002b g       .text	00000000 exception_handler_time
000113b4 g     F .text	0000001c do_handler_debug
00019fe0 g     O .bss	00002000 stack
00010ba6 g     F .text	0000000a task_is_need_reschedule
00010f1b g     F .text	0000005d sys_sleep
00010cd5 g     F .text	00000013 schedule_switch
00011b33 g     F .text	00000069 test_task_entry
00011e77 g     F .text	00000082 sem_notify
00010183 g       .text	00000000 exception_handler_invalid_tss
00010b55 g     F .text	0000003d task_first_init
00011558 g     F .text	0000001c do_handler_machine_check
0001046b g     F .text	00000066 show_mem_info
000110ef g     F .text	00000039 gdt_free_desc
00012690 g     F .text	0000005f list_insert_first
00010efb g     F .text	00000020 task_set_wakeup
0001006e g       .text	00000000 exception_handler_divider
000121a5 g     F .text	0000006a kernel_strncpy
00011971 g     F .text	0000000b irq_disable_global
00010c24 g     F .text	00000061 sys_sched_yield
0001bfe0 g       .bss	00000000 mem_free_start
00011a9a g     F .text	00000030 kernel_init
00011de9 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
000124b4 g     F .text	0000014b kernel_vsprintf
00010b92 g     F .text	0000000a get_from_task
00011c94 g     F .text	00000090 mutex_lock
00010250 g       .text	00000000 exception_handler_machine_check
00010b9c g     F .text	0000000a get_to_task
00011494 g     F .text	0000001c do_handler_invalid_tss
00000000 g       .text	00000000 kernel_base
00010ec0 g     F .text	0000003b task_set_sleep
000125ff g     F .text	00000059 panic
0001181b g     F .text	00000040 irq_install
00011128 g     F .text	0000006d init_gdt
000113d0 g     F .text	0000001c do_handler_nmi
000119b2 g     F .text	00000018 irq_enter_protection
00011c68 g     F .text	0000002c mutex_init
0001028e g       .text	00000000 exception_handler_virtualization
000118e6 g     F .text	0000008b irq_disable
0001145c g     F .text	0000001c do_handler_device_not_available
00011f22 g     F .text	00000016 bitmap_byte_count
00010ce8 g     F .text	00000065 task_dispatch
000111b3 g     F .text	00000014 switch_to_tss
00011424 g     F .text	0000001c do_handler_bounds
00010c85 g     F .text	00000050 task_next_run
0001234d g     F .text	00000064 kernel_memcmp
00010625 g     F .text	000000a7 create_kernel_table
0001266b g     F .text	00000025 list_init
000101f7 g       .text	00000000 exception_handler_page_fault
00010bef g     F .text	0000002b task_set_block
0001137c g     F .text	0000001c do_handler_unknown
0001165b g     F .text	000001c0 irq_init
00011d24 g     F .text	000000ba mutex_unlock
00011590 g     F .text	0000001c do_handler_virtualization
000119ca g     F .text	00000011 irq_leave_protection
00011520 g     F .text	0000001c do_handler_x87_floating_point
00012289 g     F .text	0000003b kernel_strlen
0001008d g       .text	00000000 exception_handler_debug
00010fba g     F .text	00000083 segment_desc_set
00010128 g       .text	00000000 exception_handler_invalid_op
00012753 g     F .text	00000077 list_remove_first
00012dce g       .rodata	00000000 e_text
0001220f g     F .text	0000007a kernel_strncmp
00011f38 g     F .text	0000004c bitmap_init
000101a0 g       .text	00000000 exception_handler_segment_not_present
000120b1 g     F .text	000000ba bitmap_alloc_nbits
00010ad6 g     F .text	0000007f task_manager_init
00010d4d g     F .text	000000dd task_time_tick
00010751 g     F .text	00000097 memory_init
000114cc g     F .text	0000001c do_handler_stack_segment_fault
000113ec g     F .text	0000001c do_handler_breakpoint
000106cc g     F .text	00000085 memory_create_user_space
00012927 g     F .text	000000ca log_printf
0001098e g     F .text	0000013e task_init
00010214 g       .text	00000000 exception_handler_x87_floating_point
00012490 g     F .text	00000024 kernel_sprintf
00011084 g     F .text	0000006b gdt_alloc_desc
000123b1 g     F .text	000000df kernel_itoa
000127ca g     F .text	00000084 list_remove
0001103d g     F .text	00000047 gate_desc_set
00010109 g       .text	00000000 exception_handler_bounds
00010147 g       .text	00000000 exception_handler_device_not_available
0001050b g     F .text	000000b7 find_pte
000119fa g     F .text	00000028 do_handler_time
00011a82 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .global _start
    .extern init_main
    .extern need_reschedule
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax

    push %eax 
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 8e 1a 00 00       	call   11a9a <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
    mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   10019:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001b:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001d:	8e e8                	mov    %eax,%gs
    mov %ax, %ss    
   1001f:	8e d0                	mov    %eax,%ss
    
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc e0 bf 01 00       	mov    $0x1bfe0,%esp
    jmp init_main
   10026:	e9 71 1b 00 00       	jmp    11b9c <init_main>

0001002b <exception_handler_time>:

.text
    .extern do_handler_time
    .global exception_handler_time
exception_handler_time:
    push $0
   1002b:	6a 00                	push   $0x0

    push $0x20
   1002d:	6a 20                	push   $0x20
    pusha
   1002f:	60                   	pusha  
    push %ds
   10030:	1e                   	push   %ds
    push %es
   10031:	06                   	push   %es
    push %fs
   10032:	0f a0                	push   %fs
    push %gs
   10034:	0f a8                	push   %gs
    push %esp
   10036:	54                   	push   %esp
    call do_handler_time
   10037:	e8 be 19 00 00       	call   119fa <do_handler_time>
    add $(1*4), %esp
   1003c:	83 c4 04             	add    $0x4,%esp
    pop %gs
   1003f:	0f a9                	pop    %gs
    pop %fs
   10041:	0f a1                	pop    %fs
    pop %es
   10043:	07                   	pop    %es
    pop %ds
   10044:	1f                   	pop    %ds
    popa
   10045:	61                   	popa   

    add $(2*4), %esp
   10046:	83 c4 08             	add    $0x8,%esp
    call do_schedule_switch
   10049:	e8 16 0e 00 00       	call   10e64 <do_schedule_switch>

    iret 
   1004e:	cf                   	iret   

0001004f <exception_handler_unknown>:

exception_handler unknown,-1,0
   1004f:	6a 00                	push   $0x0
   10051:	6a ff                	push   $0xffffffff
   10053:	60                   	pusha  
   10054:	1e                   	push   %ds
   10055:	06                   	push   %es
   10056:	0f a0                	push   %fs
   10058:	0f a8                	push   %gs
   1005a:	54                   	push   %esp
   1005b:	e8 1c 13 00 00       	call   1137c <do_handler_unknown>
   10060:	83 c4 04             	add    $0x4,%esp
   10063:	0f a9                	pop    %gs
   10065:	0f a1                	pop    %fs
   10067:	07                   	pop    %es
   10068:	1f                   	pop    %ds
   10069:	61                   	popa   
   1006a:	83 c4 08             	add    $0x8,%esp
   1006d:	cf                   	iret   

0001006e <exception_handler_divider>:
exception_handler divider,0,0
   1006e:	6a 00                	push   $0x0
   10070:	6a 00                	push   $0x0
   10072:	60                   	pusha  
   10073:	1e                   	push   %ds
   10074:	06                   	push   %es
   10075:	0f a0                	push   %fs
   10077:	0f a8                	push   %gs
   10079:	54                   	push   %esp
   1007a:	e8 19 13 00 00       	call   11398 <do_handler_divider>
   1007f:	83 c4 04             	add    $0x4,%esp
   10082:	0f a9                	pop    %gs
   10084:	0f a1                	pop    %fs
   10086:	07                   	pop    %es
   10087:	1f                   	pop    %ds
   10088:	61                   	popa   
   10089:	83 c4 08             	add    $0x8,%esp
   1008c:	cf                   	iret   

0001008d <exception_handler_debug>:
exception_handler debug,1,0
   1008d:	6a 00                	push   $0x0
   1008f:	6a 01                	push   $0x1
   10091:	60                   	pusha  
   10092:	1e                   	push   %ds
   10093:	06                   	push   %es
   10094:	0f a0                	push   %fs
   10096:	0f a8                	push   %gs
   10098:	54                   	push   %esp
   10099:	e8 16 13 00 00       	call   113b4 <do_handler_debug>
   1009e:	83 c4 04             	add    $0x4,%esp
   100a1:	0f a9                	pop    %gs
   100a3:	0f a1                	pop    %fs
   100a5:	07                   	pop    %es
   100a6:	1f                   	pop    %ds
   100a7:	61                   	popa   
   100a8:	83 c4 08             	add    $0x8,%esp
   100ab:	cf                   	iret   

000100ac <exception_handler_nmi>:
exception_handler nmi,2,0
   100ac:	6a 00                	push   $0x0
   100ae:	6a 02                	push   $0x2
   100b0:	60                   	pusha  
   100b1:	1e                   	push   %ds
   100b2:	06                   	push   %es
   100b3:	0f a0                	push   %fs
   100b5:	0f a8                	push   %gs
   100b7:	54                   	push   %esp
   100b8:	e8 13 13 00 00       	call   113d0 <do_handler_nmi>
   100bd:	83 c4 04             	add    $0x4,%esp
   100c0:	0f a9                	pop    %gs
   100c2:	0f a1                	pop    %fs
   100c4:	07                   	pop    %es
   100c5:	1f                   	pop    %ds
   100c6:	61                   	popa   
   100c7:	83 c4 08             	add    $0x8,%esp
   100ca:	cf                   	iret   

000100cb <exception_handler_breakpoint>:
exception_handler breakpoint,3,0
   100cb:	6a 00                	push   $0x0
   100cd:	6a 03                	push   $0x3
   100cf:	60                   	pusha  
   100d0:	1e                   	push   %ds
   100d1:	06                   	push   %es
   100d2:	0f a0                	push   %fs
   100d4:	0f a8                	push   %gs
   100d6:	54                   	push   %esp
   100d7:	e8 10 13 00 00       	call   113ec <do_handler_breakpoint>
   100dc:	83 c4 04             	add    $0x4,%esp
   100df:	0f a9                	pop    %gs
   100e1:	0f a1                	pop    %fs
   100e3:	07                   	pop    %es
   100e4:	1f                   	pop    %ds
   100e5:	61                   	popa   
   100e6:	83 c4 08             	add    $0x8,%esp
   100e9:	cf                   	iret   

000100ea <exception_handler_overflow>:
exception_handler overflow,4,0
   100ea:	6a 00                	push   $0x0
   100ec:	6a 04                	push   $0x4
   100ee:	60                   	pusha  
   100ef:	1e                   	push   %ds
   100f0:	06                   	push   %es
   100f1:	0f a0                	push   %fs
   100f3:	0f a8                	push   %gs
   100f5:	54                   	push   %esp
   100f6:	e8 0d 13 00 00       	call   11408 <do_handler_overflow>
   100fb:	83 c4 04             	add    $0x4,%esp
   100fe:	0f a9                	pop    %gs
   10100:	0f a1                	pop    %fs
   10102:	07                   	pop    %es
   10103:	1f                   	pop    %ds
   10104:	61                   	popa   
   10105:	83 c4 08             	add    $0x8,%esp
   10108:	cf                   	iret   

00010109 <exception_handler_bounds>:
exception_handler bounds,5,0
   10109:	6a 00                	push   $0x0
   1010b:	6a 05                	push   $0x5
   1010d:	60                   	pusha  
   1010e:	1e                   	push   %ds
   1010f:	06                   	push   %es
   10110:	0f a0                	push   %fs
   10112:	0f a8                	push   %gs
   10114:	54                   	push   %esp
   10115:	e8 0a 13 00 00       	call   11424 <do_handler_bounds>
   1011a:	83 c4 04             	add    $0x4,%esp
   1011d:	0f a9                	pop    %gs
   1011f:	0f a1                	pop    %fs
   10121:	07                   	pop    %es
   10122:	1f                   	pop    %ds
   10123:	61                   	popa   
   10124:	83 c4 08             	add    $0x8,%esp
   10127:	cf                   	iret   

00010128 <exception_handler_invalid_op>:
exception_handler invalid_op,6,0
   10128:	6a 00                	push   $0x0
   1012a:	6a 06                	push   $0x6
   1012c:	60                   	pusha  
   1012d:	1e                   	push   %ds
   1012e:	06                   	push   %es
   1012f:	0f a0                	push   %fs
   10131:	0f a8                	push   %gs
   10133:	54                   	push   %esp
   10134:	e8 07 13 00 00       	call   11440 <do_handler_invalid_op>
   10139:	83 c4 04             	add    $0x4,%esp
   1013c:	0f a9                	pop    %gs
   1013e:	0f a1                	pop    %fs
   10140:	07                   	pop    %es
   10141:	1f                   	pop    %ds
   10142:	61                   	popa   
   10143:	83 c4 08             	add    $0x8,%esp
   10146:	cf                   	iret   

00010147 <exception_handler_device_not_available>:
exception_handler device_not_available,7,0
   10147:	6a 00                	push   $0x0
   10149:	6a 07                	push   $0x7
   1014b:	60                   	pusha  
   1014c:	1e                   	push   %ds
   1014d:	06                   	push   %es
   1014e:	0f a0                	push   %fs
   10150:	0f a8                	push   %gs
   10152:	54                   	push   %esp
   10153:	e8 04 13 00 00       	call   1145c <do_handler_device_not_available>
   10158:	83 c4 04             	add    $0x4,%esp
   1015b:	0f a9                	pop    %gs
   1015d:	0f a1                	pop    %fs
   1015f:	07                   	pop    %es
   10160:	1f                   	pop    %ds
   10161:	61                   	popa   
   10162:	83 c4 08             	add    $0x8,%esp
   10165:	cf                   	iret   

00010166 <exception_handler_double_fault>:
exception_handler double_fault,8,1
   10166:	6a 08                	push   $0x8
   10168:	60                   	pusha  
   10169:	1e                   	push   %ds
   1016a:	06                   	push   %es
   1016b:	0f a0                	push   %fs
   1016d:	0f a8                	push   %gs
   1016f:	54                   	push   %esp
   10170:	e8 03 13 00 00       	call   11478 <do_handler_double_fault>
   10175:	83 c4 04             	add    $0x4,%esp
   10178:	0f a9                	pop    %gs
   1017a:	0f a1                	pop    %fs
   1017c:	07                   	pop    %es
   1017d:	1f                   	pop    %ds
   1017e:	61                   	popa   
   1017f:	83 c4 08             	add    $0x8,%esp
   10182:	cf                   	iret   

00010183 <exception_handler_invalid_tss>:

exception_handler invalid_tss,10,1
   10183:	6a 0a                	push   $0xa
   10185:	60                   	pusha  
   10186:	1e                   	push   %ds
   10187:	06                   	push   %es
   10188:	0f a0                	push   %fs
   1018a:	0f a8                	push   %gs
   1018c:	54                   	push   %esp
   1018d:	e8 02 13 00 00       	call   11494 <do_handler_invalid_tss>
   10192:	83 c4 04             	add    $0x4,%esp
   10195:	0f a9                	pop    %gs
   10197:	0f a1                	pop    %fs
   10199:	07                   	pop    %es
   1019a:	1f                   	pop    %ds
   1019b:	61                   	popa   
   1019c:	83 c4 08             	add    $0x8,%esp
   1019f:	cf                   	iret   

000101a0 <exception_handler_segment_not_present>:
exception_handler segment_not_present,11,1
   101a0:	6a 0b                	push   $0xb
   101a2:	60                   	pusha  
   101a3:	1e                   	push   %ds
   101a4:	06                   	push   %es
   101a5:	0f a0                	push   %fs
   101a7:	0f a8                	push   %gs
   101a9:	54                   	push   %esp
   101aa:	e8 01 13 00 00       	call   114b0 <do_handler_segment_not_present>
   101af:	83 c4 04             	add    $0x4,%esp
   101b2:	0f a9                	pop    %gs
   101b4:	0f a1                	pop    %fs
   101b6:	07                   	pop    %es
   101b7:	1f                   	pop    %ds
   101b8:	61                   	popa   
   101b9:	83 c4 08             	add    $0x8,%esp
   101bc:	cf                   	iret   

000101bd <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,12,1
   101bd:	6a 0c                	push   $0xc
   101bf:	60                   	pusha  
   101c0:	1e                   	push   %ds
   101c1:	06                   	push   %es
   101c2:	0f a0                	push   %fs
   101c4:	0f a8                	push   %gs
   101c6:	54                   	push   %esp
   101c7:	e8 00 13 00 00       	call   114cc <do_handler_stack_segment_fault>
   101cc:	83 c4 04             	add    $0x4,%esp
   101cf:	0f a9                	pop    %gs
   101d1:	0f a1                	pop    %fs
   101d3:	07                   	pop    %es
   101d4:	1f                   	pop    %ds
   101d5:	61                   	popa   
   101d6:	83 c4 08             	add    $0x8,%esp
   101d9:	cf                   	iret   

000101da <exception_handler_general_protection>:
exception_handler general_protection,13,1
   101da:	6a 0d                	push   $0xd
   101dc:	60                   	pusha  
   101dd:	1e                   	push   %ds
   101de:	06                   	push   %es
   101df:	0f a0                	push   %fs
   101e1:	0f a8                	push   %gs
   101e3:	54                   	push   %esp
   101e4:	e8 ff 12 00 00       	call   114e8 <do_handler_general_protection>
   101e9:	83 c4 04             	add    $0x4,%esp
   101ec:	0f a9                	pop    %gs
   101ee:	0f a1                	pop    %fs
   101f0:	07                   	pop    %es
   101f1:	1f                   	pop    %ds
   101f2:	61                   	popa   
   101f3:	83 c4 08             	add    $0x8,%esp
   101f6:	cf                   	iret   

000101f7 <exception_handler_page_fault>:
exception_handler page_fault,14,1
   101f7:	6a 0e                	push   $0xe
   101f9:	60                   	pusha  
   101fa:	1e                   	push   %ds
   101fb:	06                   	push   %es
   101fc:	0f a0                	push   %fs
   101fe:	0f a8                	push   %gs
   10200:	54                   	push   %esp
   10201:	e8 fe 12 00 00       	call   11504 <do_handler_page_fault>
   10206:	83 c4 04             	add    $0x4,%esp
   10209:	0f a9                	pop    %gs
   1020b:	0f a1                	pop    %fs
   1020d:	07                   	pop    %es
   1020e:	1f                   	pop    %ds
   1020f:	61                   	popa   
   10210:	83 c4 08             	add    $0x8,%esp
   10213:	cf                   	iret   

00010214 <exception_handler_x87_floating_point>:
exception_handler x87_floating_point,16,0
   10214:	6a 00                	push   $0x0
   10216:	6a 10                	push   $0x10
   10218:	60                   	pusha  
   10219:	1e                   	push   %ds
   1021a:	06                   	push   %es
   1021b:	0f a0                	push   %fs
   1021d:	0f a8                	push   %gs
   1021f:	54                   	push   %esp
   10220:	e8 fb 12 00 00       	call   11520 <do_handler_x87_floating_point>
   10225:	83 c4 04             	add    $0x4,%esp
   10228:	0f a9                	pop    %gs
   1022a:	0f a1                	pop    %fs
   1022c:	07                   	pop    %es
   1022d:	1f                   	pop    %ds
   1022e:	61                   	popa   
   1022f:	83 c4 08             	add    $0x8,%esp
   10232:	cf                   	iret   

00010233 <exception_handler_alignment_check>:
exception_handler alignment_check,17,1
   10233:	6a 11                	push   $0x11
   10235:	60                   	pusha  
   10236:	1e                   	push   %ds
   10237:	06                   	push   %es
   10238:	0f a0                	push   %fs
   1023a:	0f a8                	push   %gs
   1023c:	54                   	push   %esp
   1023d:	e8 fa 12 00 00       	call   1153c <do_handler_alignment_check>
   10242:	83 c4 04             	add    $0x4,%esp
   10245:	0f a9                	pop    %gs
   10247:	0f a1                	pop    %fs
   10249:	07                   	pop    %es
   1024a:	1f                   	pop    %ds
   1024b:	61                   	popa   
   1024c:	83 c4 08             	add    $0x8,%esp
   1024f:	cf                   	iret   

00010250 <exception_handler_machine_check>:
exception_handler machine_check,18,0
   10250:	6a 00                	push   $0x0
   10252:	6a 12                	push   $0x12
   10254:	60                   	pusha  
   10255:	1e                   	push   %ds
   10256:	06                   	push   %es
   10257:	0f a0                	push   %fs
   10259:	0f a8                	push   %gs
   1025b:	54                   	push   %esp
   1025c:	e8 f7 12 00 00       	call   11558 <do_handler_machine_check>
   10261:	83 c4 04             	add    $0x4,%esp
   10264:	0f a9                	pop    %gs
   10266:	0f a1                	pop    %fs
   10268:	07                   	pop    %es
   10269:	1f                   	pop    %ds
   1026a:	61                   	popa   
   1026b:	83 c4 08             	add    $0x8,%esp
   1026e:	cf                   	iret   

0001026f <exception_handler_simd_floating_point>:
exception_handler simd_floating_point,19,0
   1026f:	6a 00                	push   $0x0
   10271:	6a 13                	push   $0x13
   10273:	60                   	pusha  
   10274:	1e                   	push   %ds
   10275:	06                   	push   %es
   10276:	0f a0                	push   %fs
   10278:	0f a8                	push   %gs
   1027a:	54                   	push   %esp
   1027b:	e8 f4 12 00 00       	call   11574 <do_handler_simd_floating_point>
   10280:	83 c4 04             	add    $0x4,%esp
   10283:	0f a9                	pop    %gs
   10285:	0f a1                	pop    %fs
   10287:	07                   	pop    %es
   10288:	1f                   	pop    %ds
   10289:	61                   	popa   
   1028a:	83 c4 08             	add    $0x8,%esp
   1028d:	cf                   	iret   

0001028e <exception_handler_virtualization>:
exception_handler virtualization,20,0
   1028e:	6a 00                	push   $0x0
   10290:	6a 14                	push   $0x14
   10292:	60                   	pusha  
   10293:	1e                   	push   %ds
   10294:	06                   	push   %es
   10295:	0f a0                	push   %fs
   10297:	0f a8                	push   %gs
   10299:	54                   	push   %esp
   1029a:	e8 f1 12 00 00       	call   11590 <do_handler_virtualization>
   1029f:	83 c4 04             	add    $0x4,%esp
   102a2:	0f a9                	pop    %gs
   102a4:	0f a1                	pop    %fs
   102a6:	07                   	pop    %es
   102a7:	1f                   	pop    %ds
   102a8:	61                   	popa   
   102a9:	83 c4 08             	add    $0x8,%esp
   102ac:	cf                   	iret   

000102ad <exception_handler_security>:
exception_handler security,21,1
   102ad:	6a 15                	push   $0x15
   102af:	60                   	pusha  
   102b0:	1e                   	push   %ds
   102b1:	06                   	push   %es
   102b2:	0f a0                	push   %fs
   102b4:	0f a8                	push   %gs
   102b6:	54                   	push   %esp
   102b7:	e8 f0 12 00 00       	call   115ac <do_handler_security>
   102bc:	83 c4 04             	add    $0x4,%esp
   102bf:	0f a9                	pop    %gs
   102c1:	0f a1                	pop    %fs
   102c3:	07                   	pop    %es
   102c4:	1f                   	pop    %ds
   102c5:	61                   	popa   
   102c6:	83 c4 08             	add    $0x8,%esp
   102c9:	cf                   	iret   

000102ca <simple_switch>:
*/

    .text
    .global simple_switch
simple_switch:
    mov 4(%esp), %eax
   102ca:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102ce:	8b 54 24 08          	mov    0x8(%esp),%edx

    
    push %ebp
   102d2:	55                   	push   %ebp
    push %ebx
   102d3:	53                   	push   %ebx
    push %esi
   102d4:	56                   	push   %esi
    push %edi
   102d5:	57                   	push   %edi
    pushf                # 保存EFLAGS寄存器
   102d6:	9c                   	pushf  
    mov %esp,(%eax)
   102d7:	89 20                	mov    %esp,(%eax)

    mov %edx,%esp
   102d9:	89 d4                	mov    %edx,%esp
    popf                 # 恢复EFLAGS寄存器
   102db:	9d                   	popf   
    pop %edi
   102dc:	5f                   	pop    %edi
    pop %esi
   102dd:	5e                   	pop    %esi
    pop %ebx
   102de:	5b                   	pop    %ebx
    pop %ebp
   102df:	5d                   	pop    %ebp
    

    ret
   102e0:	c3                   	ret    

000102e1 <down2>:
#ifndef KLIB_H
#define KLIB_H
#include <stdarg.h>
#include "comm/types.h"
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   102e1:	55                   	push   %ebp
   102e2:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e7:	f7 d8                	neg    %eax
   102e9:	23 45 08             	and    0x8(%ebp),%eax
}
   102ec:	5d                   	pop    %ebp
   102ed:	c3                   	ret    

000102ee <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   102ee:	55                   	push   %ebp
   102ef:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102f1:	8b 55 08             	mov    0x8(%ebp),%edx
   102f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f7:	01 d0                	add    %edx,%eax
   102f9:	8d 50 ff             	lea    -0x1(%eax),%edx
   102fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ff:	f7 d8                	neg    %eax
   10301:	21 d0                	and    %edx,%eax
}
   10303:	5d                   	pop    %ebp
   10304:	c3                   	ret    

00010305 <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   10305:	55                   	push   %ebp
   10306:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10308:	8b 45 08             	mov    0x8(%ebp),%eax
   1030b:	0f 22 d8             	mov    %eax,%cr3
}
   1030e:	90                   	nop
   1030f:	5d                   	pop    %ebp
   10310:	c3                   	ret    

00010311 <pde_index>:
        uint32_t phy_page_addr : 20;
    }
}pte_t;

static inline uint32_t pde_index(uint32_t vaddr)
{
   10311:	55                   	push   %ebp
   10312:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 22) & 0x3FF;
   10314:	8b 45 08             	mov    0x8(%ebp),%eax
   10317:	c1 e8 16             	shr    $0x16,%eax
}
   1031a:	5d                   	pop    %ebp
   1031b:	c3                   	ret    

0001031c <pte_index>:

static inline uint32_t pte_index(uint32_t vaddr)
{
   1031c:	55                   	push   %ebp
   1031d:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;
   1031f:	8b 45 08             	mov    0x8(%ebp),%eax
   10322:	c1 e8 0c             	shr    $0xc,%eax
   10325:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1032a:	5d                   	pop    %ebp
   1032b:	c3                   	ret    

0001032c <pde_paddr>:

static inline uint32_t pde_paddr(pde_t * pde)
{
   1032c:	55                   	push   %ebp
   1032d:	89 e5                	mov    %esp,%ebp
    return (pde->phy_pt_addr << 12) ;
   1032f:	8b 45 08             	mov    0x8(%ebp),%eax
   10332:	8b 00                	mov    (%eax),%eax
   10334:	c1 e8 0c             	shr    $0xc,%eax
   10337:	c1 e0 0c             	shl    $0xc,%eax
}
   1033a:	5d                   	pop    %ebp
   1033b:	c3                   	ret    

0001033c <mmu_set_page_dir>:
static inline uint32_t pte_paddr(pte_t * pte)
{
    return (pte->phy_page_addr << 12) ;
}
static inline void mmu_set_page_dir(uint32_t paddr)
{
   1033c:	55                   	push   %ebp
   1033d:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1033f:	ff 75 08             	pushl  0x8(%ebp)
   10342:	e8 be ff ff ff       	call   10305 <write_cr3>
   10347:	83 c4 04             	add    $0x4,%esp
}
   1034a:	90                   	nop
   1034b:	c9                   	leave  
   1034c:	c3                   	ret    

0001034d <addr_alloc_init>:
static addr_alloc_t paddr_alloc;

static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE)));
static void addr_alloc_init(addr_alloc_t *addr_alloc,uint8_t* bits, 
    uint32_t start, uint32_t size, uint32_t page_size)
{
   1034d:	55                   	push   %ebp
   1034e:	89 e5                	mov    %esp,%ebp
   10350:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&addr_alloc->mutex);
   10353:	8b 45 08             	mov    0x8(%ebp),%eax
   10356:	83 ec 0c             	sub    $0xc,%esp
   10359:	50                   	push   %eax
   1035a:	e8 09 19 00 00       	call   11c68 <mutex_init>
   1035f:	83 c4 10             	add    $0x10,%esp
    
    addr_alloc->start = start;
   10362:	8b 45 08             	mov    0x8(%ebp),%eax
   10365:	8b 55 10             	mov    0x10(%ebp),%edx
   10368:	89 50 1c             	mov    %edx,0x1c(%eax)
    addr_alloc->size = size;
   1036b:	8b 45 08             	mov    0x8(%ebp),%eax
   1036e:	8b 55 14             	mov    0x14(%ebp),%edx
   10371:	89 50 20             	mov    %edx,0x20(%eax)
    addr_alloc->page_size = page_size;
   10374:	8b 45 08             	mov    0x8(%ebp),%eax
   10377:	8b 55 18             	mov    0x18(%ebp),%edx
   1037a:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&addr_alloc->bitmap, bits, size / page_size, 0);
   1037d:	8b 45 14             	mov    0x14(%ebp),%eax
   10380:	ba 00 00 00 00       	mov    $0x0,%edx
   10385:	f7 75 18             	divl   0x18(%ebp)
   10388:	89 c2                	mov    %eax,%edx
   1038a:	8b 45 08             	mov    0x8(%ebp),%eax
   1038d:	83 c0 14             	add    $0x14,%eax
   10390:	6a 00                	push   $0x0
   10392:	52                   	push   %edx
   10393:	ff 75 0c             	pushl  0xc(%ebp)
   10396:	50                   	push   %eax
   10397:	e8 9c 1b 00 00       	call   11f38 <bitmap_init>
   1039c:	83 c4 10             	add    $0x10,%esp
    
}
   1039f:	90                   	nop
   103a0:	c9                   	leave  
   103a1:	c3                   	ret    

000103a2 <addr_alloc_page>:

static uint32_t addr_alloc_page(addr_alloc_t *addr_alloc, int page_count)
{
   103a2:	55                   	push   %ebp
   103a3:	89 e5                	mov    %esp,%ebp
   103a5:	83 ec 18             	sub    $0x18,%esp
    uint32_t  addr = 0;
   103a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&addr_alloc->mutex);
   103af:	8b 45 08             	mov    0x8(%ebp),%eax
   103b2:	83 ec 0c             	sub    $0xc,%esp
   103b5:	50                   	push   %eax
   103b6:	e8 d9 18 00 00       	call   11c94 <mutex_lock>
   103bb:	83 c4 10             	add    $0x10,%esp
    int page_index = bitmap_alloc_nbits(&addr_alloc->bitmap, 0, page_count);
   103be:	8b 45 08             	mov    0x8(%ebp),%eax
   103c1:	83 c0 14             	add    $0x14,%eax
   103c4:	83 ec 04             	sub    $0x4,%esp
   103c7:	ff 75 0c             	pushl  0xc(%ebp)
   103ca:	6a 00                	push   $0x0
   103cc:	50                   	push   %eax
   103cd:	e8 df 1c 00 00       	call   120b1 <bitmap_alloc_nbits>
   103d2:	83 c4 10             	add    $0x10,%esp
   103d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   103d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103dc:	78 17                	js     103f5 <addr_alloc_page+0x53>
    {
        addr = addr_alloc->start + page_index * addr_alloc->page_size;
   103de:	8b 45 08             	mov    0x8(%ebp),%eax
   103e1:	8b 50 1c             	mov    0x1c(%eax),%edx
   103e4:	8b 45 08             	mov    0x8(%ebp),%eax
   103e7:	8b 48 24             	mov    0x24(%eax),%ecx
   103ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103ed:	0f af c1             	imul   %ecx,%eax
   103f0:	01 d0                	add    %edx,%eax
   103f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&addr_alloc->mutex);
   103f5:	8b 45 08             	mov    0x8(%ebp),%eax
   103f8:	83 ec 0c             	sub    $0xc,%esp
   103fb:	50                   	push   %eax
   103fc:	e8 23 19 00 00       	call   11d24 <mutex_unlock>
   10401:	83 c4 10             	add    $0x10,%esp
    return addr;
   10404:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10407:	c9                   	leave  
   10408:	c3                   	ret    

00010409 <addr_free_page>:

static void addr_free_page(addr_alloc_t *addr_alloc, uint32_t addr, int page_count)
{
   10409:	55                   	push   %ebp
   1040a:	89 e5                	mov    %esp,%ebp
   1040c:	53                   	push   %ebx
   1040d:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&addr_alloc->mutex);
   10410:	8b 45 08             	mov    0x8(%ebp),%eax
   10413:	83 ec 0c             	sub    $0xc,%esp
   10416:	50                   	push   %eax
   10417:	e8 78 18 00 00       	call   11c94 <mutex_lock>
   1041c:	83 c4 10             	add    $0x10,%esp
    uint32_t page_index = (addr - addr_alloc->start) / addr_alloc->page_size;
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	8b 40 1c             	mov    0x1c(%eax),%eax
   10425:	8b 55 0c             	mov    0xc(%ebp),%edx
   10428:	89 d1                	mov    %edx,%ecx
   1042a:	29 c1                	sub    %eax,%ecx
   1042c:	8b 45 08             	mov    0x8(%ebp),%eax
   1042f:	8b 58 24             	mov    0x24(%eax),%ebx
   10432:	89 c8                	mov    %ecx,%eax
   10434:	ba 00 00 00 00       	mov    $0x0,%edx
   10439:	f7 f3                	div    %ebx
   1043b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&addr_alloc->bitmap, page_index, page_count,0);
   1043e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10441:	8b 55 08             	mov    0x8(%ebp),%edx
   10444:	83 c2 14             	add    $0x14,%edx
   10447:	6a 00                	push   $0x0
   10449:	ff 75 10             	pushl  0x10(%ebp)
   1044c:	50                   	push   %eax
   1044d:	52                   	push   %edx
   1044e:	e8 6f 1b 00 00       	call   11fc2 <bitmap_set_bit>
   10453:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&addr_alloc->mutex);
   10456:	8b 45 08             	mov    0x8(%ebp),%eax
   10459:	83 ec 0c             	sub    $0xc,%esp
   1045c:	50                   	push   %eax
   1045d:	e8 c2 18 00 00       	call   11d24 <mutex_unlock>
   10462:	83 c4 10             	add    $0x10,%esp
}
   10465:	90                   	nop
   10466:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10469:	c9                   	leave  
   1046a:	c3                   	ret    

0001046b <show_mem_info>:

void show_mem_info(boot_info_t *boot_info)
{
   1046b:	55                   	push   %ebp
   1046c:	89 e5                	mov    %esp,%ebp
   1046e:	53                   	push   %ebx
   1046f:	83 ec 14             	sub    $0x14,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   10472:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10479:	eb 42                	jmp    104bd <show_mem_info+0x52>
    {
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   1047b:	8b 45 08             	mov    0x8(%ebp),%eax
   1047e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10481:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
        boot_info->ram_region_cfg[i].start + boot_info->ram_region_cfg[i].size,
   10485:	8b 45 08             	mov    0x8(%ebp),%eax
   10488:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1048b:	8b 1c c8             	mov    (%eax,%ecx,8),%ebx
   1048e:	8b 45 08             	mov    0x8(%ebp),%eax
   10491:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10494:	8b 44 c8 04          	mov    0x4(%eax,%ecx,8),%eax
        log_printf("ram region %d: 0x%x - 0x%x, %d\n", i, boot_info->ram_region_cfg[i].start, 
   10498:	01 c3                	add    %eax,%ebx
   1049a:	8b 45 08             	mov    0x8(%ebp),%eax
   1049d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104a0:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104a3:	83 ec 0c             	sub    $0xc,%esp
   104a6:	52                   	push   %edx
   104a7:	53                   	push   %ebx
   104a8:	50                   	push   %eax
   104a9:	ff 75 f4             	pushl  -0xc(%ebp)
   104ac:	68 f4 29 01 00       	push   $0x129f4
   104b1:	e8 71 24 00 00       	call   12927 <log_printf>
   104b6:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < boot_info->ram_region_count; i++)
   104b9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104bd:	8b 45 08             	mov    0x8(%ebp),%eax
   104c0:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   104c6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104c9:	7c b0                	jl     1047b <show_mem_info+0x10>
        boot_info->ram_region_cfg[i].size);
    }
}
   104cb:	90                   	nop
   104cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104cf:	c9                   	leave  
   104d0:	c3                   	ret    

000104d1 <total_mem_size>:
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   104d1:	55                   	push   %ebp
   104d2:	89 e5                	mov    %esp,%ebp
   104d4:	83 ec 10             	sub    $0x10,%esp
    uint32_t total_size = 0;
   104d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   104de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   104e5:	eb 11                	jmp    104f8 <total_mem_size+0x27>
    {
        total_size += boot_info->ram_region_cfg[i].size;
   104e7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
   104ed:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   104f1:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i = 0; i < boot_info->ram_region_count; i++)
   104f4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
   10501:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10504:	7c e1                	jl     104e7 <total_mem_size+0x16>
    }
    return total_size;
   10506:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10509:	c9                   	leave  
   1050a:	c3                   	ret    

0001050b <find_pte>:

pte_t * find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   1050b:	55                   	push   %ebp
   1050c:	89 e5                	mov    %esp,%ebp
   1050e:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table = (pte_t *)0;
   10511:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    pde_t *pde = page_dir + pde_index(vaddr);
   10518:	ff 75 0c             	pushl  0xc(%ebp)
   1051b:	e8 f1 fd ff ff       	call   10311 <pde_index>
   10520:	83 c4 04             	add    $0x4,%esp
   10523:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1052a:	8b 45 08             	mov    0x8(%ebp),%eax
   1052d:	01 d0                	add    %edx,%eax
   1052f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   10532:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10535:	0f b6 00             	movzbl (%eax),%eax
   10538:	83 e0 01             	and    $0x1,%eax
   1053b:	84 c0                	test   %al,%al
   1053d:	74 10                	je     1054f <find_pte+0x44>
    {
        page_table = (pte_t *)pde_paddr(pde);
   1053f:	ff 75 f0             	pushl  -0x10(%ebp)
   10542:	e8 e5 fd ff ff       	call   1032c <pde_paddr>
   10547:	83 c4 04             	add    $0x4,%esp
   1054a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1054d:	eb 57                	jmp    105a6 <find_pte+0x9b>
    }
    else
    {
        if (alloc == 0)
   1054f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10553:	75 07                	jne    1055c <find_pte+0x51>
        {
            return (pte_t *)0;
   10555:	b8 00 00 00 00       	mov    $0x0,%eax
   1055a:	eb 64                	jmp    105c0 <find_pte+0xb5>
        }
        else
        {
            uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   1055c:	83 ec 08             	sub    $0x8,%esp
   1055f:	6a 01                	push   $0x1
   10561:	68 00 40 01 00       	push   $0x14000
   10566:	e8 37 fe ff ff       	call   103a2 <addr_alloc_page>
   1056b:	83 c4 10             	add    $0x10,%esp
   1056e:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (pg_paddr == 0)
   10571:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10575:	75 07                	jne    1057e <find_pte+0x73>
            {
                return (pte_t *)0;
   10577:	b8 00 00 00 00       	mov    $0x0,%eax
   1057c:	eb 42                	jmp    105c0 <find_pte+0xb5>
            }
            pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   1057e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10581:	83 c8 07             	or     $0x7,%eax
   10584:	89 c2                	mov    %eax,%edx
   10586:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10589:	89 10                	mov    %edx,(%eax)
            page_table = (pte_t *)pg_paddr;
   1058b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1058e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            kernel_memset(page_table, 0, MEM_PAGE_SIZE);        
   10591:	83 ec 04             	sub    $0x4,%esp
   10594:	68 00 10 00 00       	push   $0x1000
   10599:	6a 00                	push   $0x0
   1059b:	ff 75 f4             	pushl  -0xc(%ebp)
   1059e:	e8 70 1d 00 00       	call   12313 <kernel_memset>
   105a3:	83 c4 10             	add    $0x10,%esp
        }
    }
    return page_table + pte_index(vaddr);
   105a6:	83 ec 0c             	sub    $0xc,%esp
   105a9:	ff 75 0c             	pushl  0xc(%ebp)
   105ac:	e8 6b fd ff ff       	call   1031c <pte_index>
   105b1:	83 c4 10             	add    $0x10,%esp
   105b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105be:	01 d0                	add    %edx,%eax
    
    
}
   105c0:	c9                   	leave  
   105c1:	c3                   	ret    

000105c2 <memory_create_map>:
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   105c2:	55                   	push   %ebp
   105c3:	89 e5                	mov    %esp,%ebp
   105c5:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < count; i++)
   105c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105cf:	eb 45                	jmp    10616 <memory_create_map+0x54>
    {
        //log_printf("create map %d: 0x%x - 0x%x, 0x%x, perm :%d\n", i, vaddr, vaddr + MEM_PAGE_SIZE, paddr,perm);
        pte_t * pte = find_pte(page_dir, vaddr,1);
   105d1:	83 ec 04             	sub    $0x4,%esp
   105d4:	6a 01                	push   $0x1
   105d6:	ff 75 0c             	pushl  0xc(%ebp)
   105d9:	ff 75 08             	pushl  0x8(%ebp)
   105dc:	e8 2a ff ff ff       	call   1050b <find_pte>
   105e1:	83 c4 10             	add    $0x10,%esp
   105e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   105e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105eb:	75 07                	jne    105f4 <memory_create_map+0x32>
        {
            return -1;
   105ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   105f2:	eb 2f                	jmp    10623 <memory_create_map+0x61>
        }
        //log_printf("pte addr: 0x%x\n", pte);
        ASSERT(pte->present == 0);
        pte->v = paddr | perm | PTE_P;
   105f4:	8b 45 10             	mov    0x10(%ebp),%eax
   105f7:	0b 45 18             	or     0x18(%ebp),%eax
   105fa:	83 c8 01             	or     $0x1,%eax
   105fd:	89 c2                	mov    %eax,%edx
   105ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10602:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   10604:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   1060b:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for(int i = 0; i < count; i++)
   10612:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10616:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10619:	3b 45 14             	cmp    0x14(%ebp),%eax
   1061c:	7c b3                	jl     105d1 <memory_create_map+0xf>
    }
    return 0;
   1061e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10623:	c9                   	leave  
   10624:	c3                   	ret    

00010625 <create_kernel_table>:
void create_kernel_table(void)
{
   10625:	55                   	push   %ebp
   10626:	89 e5                	mov    %esp,%ebp
   10628:	83 ec 28             	sub    $0x28,%esp
        {kernel_base,s_text,kernel_base,PTE_W},
        {s_text,e_text,s_text,0},
        {s_data,(void *)MEM_EBDA_START,s_data,PTE_W},
        {(void *)MEM_EXT_START,(void *)MEM_EXT_END,(void *)MEM_EXT_START,PTE_W}
    };
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   1062b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10632:	e9 86 00 00 00       	jmp    106bd <create_kernel_table+0x98>
    {
        memory_map_t *map = &kernel_map[i];
   10637:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1063a:	c1 e0 04             	shl    $0x4,%eax
   1063d:	05 00 30 01 00       	add    $0x13000,%eax
   10642:	89 45 f0             	mov    %eax,-0x10(%ebp)
        uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10645:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10648:	8b 00                	mov    (%eax),%eax
   1064a:	68 00 10 00 00       	push   $0x1000
   1064f:	50                   	push   %eax
   10650:	e8 8c fc ff ff       	call   102e1 <down2>
   10655:	83 c4 08             	add    $0x8,%esp
   10658:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   1065b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1065e:	8b 40 04             	mov    0x4(%eax),%eax
   10661:	68 00 10 00 00       	push   $0x1000
   10666:	50                   	push   %eax
   10667:	e8 82 fc ff ff       	call   102ee <up2>
   1066c:	83 c4 08             	add    $0x8,%esp
   1066f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10672:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10675:	8b 40 08             	mov    0x8(%eax),%eax
   10678:	68 00 10 00 00       	push   $0x1000
   1067d:	50                   	push   %eax
   1067e:	e8 5e fc ff ff       	call   102e1 <down2>
   10683:	83 c4 08             	add    $0x8,%esp
   10686:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10689:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1068c:	2b 45 ec             	sub    -0x14(%ebp),%eax
   1068f:	c1 e8 0c             	shr    $0xc,%eax
   10692:	89 45 e0             	mov    %eax,-0x20(%ebp)
        memory_create_map(kernel_page_dir,vstart, (uint32_t)map->pstart,page_count,map->perm);
   10695:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10698:	8b 40 0c             	mov    0xc(%eax),%eax
   1069b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1069e:	8b 52 08             	mov    0x8(%edx),%edx
   106a1:	83 ec 0c             	sub    $0xc,%esp
   106a4:	50                   	push   %eax
   106a5:	ff 75 e0             	pushl  -0x20(%ebp)
   106a8:	52                   	push   %edx
   106a9:	ff 75 ec             	pushl  -0x14(%ebp)
   106ac:	68 00 50 01 00       	push   $0x15000
   106b1:	e8 0c ff ff ff       	call   105c2 <memory_create_map>
   106b6:	83 c4 20             	add    $0x20,%esp
    for(int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   106b9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106c0:	83 f8 03             	cmp    $0x3,%eax
   106c3:	0f 86 6e ff ff ff    	jbe    10637 <create_kernel_table+0x12>
    }
}
   106c9:	90                   	nop
   106ca:	c9                   	leave  
   106cb:	c3                   	ret    

000106cc <memory_create_user_space>:

uint32_t memory_create_user_space()
{
   106cc:	55                   	push   %ebp
   106cd:	89 e5                	mov    %esp,%ebp
   106cf:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   106d2:	83 ec 08             	sub    $0x8,%esp
   106d5:	6a 01                	push   $0x1
   106d7:	68 00 40 01 00       	push   $0x14000
   106dc:	e8 c1 fc ff ff       	call   103a2 <addr_alloc_page>
   106e1:	83 c4 10             	add    $0x10,%esp
   106e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == (pde_t *)0)
   106e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106eb:	75 07                	jne    106f4 <memory_create_user_space+0x28>
    {
        return 0;
   106ed:	b8 00 00 00 00       	mov    $0x0,%eax
   106f2:	eb 5b                	jmp    1074f <memory_create_user_space+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   106f4:	83 ec 04             	sub    $0x4,%esp
   106f7:	68 00 10 00 00       	push   $0x1000
   106fc:	6a 00                	push   $0x0
   106fe:	ff 75 f0             	pushl  -0x10(%ebp)
   10701:	e8 0d 1c 00 00       	call   12313 <kernel_memset>
   10706:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10709:	83 ec 0c             	sub    $0xc,%esp
   1070c:	68 00 00 00 80       	push   $0x80000000
   10711:	e8 fb fb ff ff       	call   10311 <pde_index>
   10716:	83 c4 10             	add    $0x10,%esp
   10719:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i = 0; i < user_pde_start; i++)
   1071c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10723:	eb 1f                	jmp    10744 <memory_create_user_space+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   10725:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10728:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1072f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10732:	01 c2                	add    %eax,%edx
   10734:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10737:	8b 04 85 00 50 01 00 	mov    0x15000(,%eax,4),%eax
   1073e:	89 02                	mov    %eax,(%edx)
    for(int i = 0; i < user_pde_start; i++)
   10740:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10744:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10747:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1074a:	77 d9                	ja     10725 <memory_create_user_space+0x59>
    }
    return (uint32_t)page_dir;
   1074c:	8b 45 f0             	mov    -0x10(%ebp),%eax
    
}
   1074f:	c9                   	leave  
   10750:	c3                   	ret    

00010751 <memory_init>:
void memory_init(boot_info_t *boot_info)
{
   10751:	55                   	push   %ebp
   10752:	89 e5                	mov    %esp,%ebp
   10754:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    //log_printf("mem init\n");
    show_mem_info(boot_info);
   10757:	83 ec 0c             	sub    $0xc,%esp
   1075a:	ff 75 08             	pushl  0x8(%ebp)
   1075d:	e8 09 fd ff ff       	call   1046b <show_mem_info>
   10762:	83 c4 10             	add    $0x10,%esp

    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10765:	c7 45 f4 e0 bf 01 00 	movl   $0x1bfe0,-0xc(%ebp)
    uint32_t mem_up1MB_free_size = total_mem_size(boot_info) - MEM_EXT_START;
   1076c:	83 ec 0c             	sub    $0xc,%esp
   1076f:	ff 75 08             	pushl  0x8(%ebp)
   10772:	e8 5a fd ff ff       	call   104d1 <total_mem_size>
   10777:	83 c4 10             	add    $0x10,%esp
   1077a:	2d 00 00 10 00       	sub    $0x100000,%eax
   1077f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free_size = down2(mem_up1MB_free_size,MEM_PAGE_SIZE);
   10782:	83 ec 08             	sub    $0x8,%esp
   10785:	68 00 10 00 00       	push   $0x1000
   1078a:	ff 75 f0             	pushl  -0x10(%ebp)
   1078d:	e8 4f fb ff ff       	call   102e1 <down2>
   10792:	83 c4 10             	add    $0x10,%esp
   10795:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //log_printf("free memory begin addr: 0x%x ,size 0x%x\n", MEM_EXT_START, mem_up1MB_free_size);
    
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free_size, MEM_PAGE_SIZE);
   10798:	83 ec 0c             	sub    $0xc,%esp
   1079b:	68 00 10 00 00       	push   $0x1000
   107a0:	ff 75 f0             	pushl  -0x10(%ebp)
   107a3:	68 00 00 10 00       	push   $0x100000
   107a8:	ff 75 f4             	pushl  -0xc(%ebp)
   107ab:	68 00 40 01 00       	push   $0x14000
   107b0:	e8 98 fb ff ff       	call   1034d <addr_alloc_init>
   107b5:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   107b8:	a1 20 40 01 00       	mov    0x14020,%eax
   107bd:	c1 e8 0c             	shr    $0xc,%eax
   107c0:	83 ec 0c             	sub    $0xc,%esp
   107c3:	50                   	push   %eax
   107c4:	e8 59 17 00 00       	call   11f22 <bitmap_byte_count>
   107c9:	83 c4 10             	add    $0x10,%esp
   107cc:	01 45 f4             	add    %eax,-0xc(%ebp)
    
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);

    create_kernel_table();
   107cf:	e8 51 fe ff ff       	call   10625 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   107d4:	b8 00 50 01 00       	mov    $0x15000,%eax
   107d9:	83 ec 0c             	sub    $0xc,%esp
   107dc:	50                   	push   %eax
   107dd:	e8 5a fb ff ff       	call   1033c <mmu_set_page_dir>
   107e2:	83 c4 10             	add    $0x10,%esp
}
   107e5:	90                   	nop
   107e6:	c9                   	leave  
   107e7:	c3                   	ret    

000107e8 <list_node_init>:
    struct _list_node_t* next;
}list_node_t;


static inline void list_node_init(list_node_t *node)
{
   107e8:	55                   	push   %ebp
   107e9:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   107eb:	8b 45 08             	mov    0x8(%ebp),%eax
   107ee:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   107f5:	8b 45 08             	mov    0x8(%ebp),%eax
   107f8:	8b 50 04             	mov    0x4(%eax),%edx
   107fb:	8b 45 08             	mov    0x8(%ebp),%eax
   107fe:	89 10                	mov    %edx,(%eax)
}
   10800:	90                   	nop
   10801:	5d                   	pop    %ebp
   10802:	c3                   	ret    

00010803 <list_node_next>:
static inline list_node_t* list_node_pre(list_node_t* node)
{
    return node->pre;
} 
static inline list_node_t* list_node_next(list_node_t* node)
{
   10803:	55                   	push   %ebp
   10804:	89 e5                	mov    %esp,%ebp
    return node->next;
   10806:	8b 45 08             	mov    0x8(%ebp),%eax
   10809:	8b 40 04             	mov    0x4(%eax),%eax
}
   1080c:	5d                   	pop    %ebp
   1080d:	c3                   	ret    

0001080e <list_count>:
{
    return list->count == 0;
}

static inline int list_count(list_t * list)
{
   1080e:	55                   	push   %ebp
   1080f:	89 e5                	mov    %esp,%ebp
    return list->count;
   10811:	8b 45 08             	mov    0x8(%ebp),%eax
   10814:	8b 40 08             	mov    0x8(%eax),%eax
}
   10817:	5d                   	pop    %ebp
   10818:	c3                   	ret    

00010819 <list_first>:
static inline list_node_t* list_first(list_t * list)
{
   10819:	55                   	push   %ebp
   1081a:	89 e5                	mov    %esp,%ebp
    return list->first;
   1081c:	8b 45 08             	mov    0x8(%ebp),%eax
   1081f:	8b 00                	mov    (%eax),%eax
}
   10821:	5d                   	pop    %ebp
   10822:	c3                   	ret    

00010823 <read_cr3>:
{
   10823:	55                   	push   %ebp
   10824:	89 e5                	mov    %esp,%ebp
   10826:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr3, %[v]":[v]"=r"(cr3));
   10829:	0f 20 d8             	mov    %cr3,%eax
   1082c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr3;
   1082f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10832:	c9                   	leave  
   10833:	c3                   	ret    

00010834 <write_cr3>:
{
   10834:	55                   	push   %ebp
   10835:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10837:	8b 45 08             	mov    0x8(%ebp),%eax
   1083a:	0f 22 d8             	mov    %eax,%cr3
}
   1083d:	90                   	nop
   1083e:	5d                   	pop    %ebp
   1083f:	c3                   	ret    

00010840 <hlt>:
    uint32_t addr[] = {offset ,selector};
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}

static inline void hlt(void)
{
   10840:	55                   	push   %ebp
   10841:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10843:	f4                   	hlt    
}
   10844:	90                   	nop
   10845:	5d                   	pop    %ebp
   10846:	c3                   	ret    

00010847 <write_tr>:

static inline void write_tr(uint16_t selector)
{
   10847:	55                   	push   %ebp
   10848:	89 e5                	mov    %esp,%ebp
   1084a:	83 ec 04             	sub    $0x4,%esp
   1084d:	8b 45 08             	mov    0x8(%ebp),%eax
   10850:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(selector));
   10854:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10858:	0f 00 d8             	ltr    %ax
}
   1085b:	90                   	nop
   1085c:	c9                   	leave  
   1085d:	c3                   	ret    

0001085e <tss_init>:
#include "core/memory.h"
static task_manager_t task_manager;
int need_reschedule = 0;
static uint32_t idle_task_stack[1024];
static int tss_init(task_t *task,uint32_t entry,uint32_t esp)
{
   1085e:	55                   	push   %ebp
   1085f:	89 e5                	mov    %esp,%ebp
   10861:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   10864:	e8 1b 08 00 00       	call   11084 <gdt_alloc_desc>
   10869:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(tss_sel == -1)
   1086c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   10870:	75 1a                	jne    1088c <tss_init+0x2e>
    {
        log_printf("tss_init: gdt_alloc_desc failed\n");
   10872:	83 ec 0c             	sub    $0xc,%esp
   10875:	68 14 2a 01 00       	push   $0x12a14
   1087a:	e8 a8 20 00 00       	call   12927 <log_printf>
   1087f:	83 c4 10             	add    $0x10,%esp
        return -1;
   10882:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10887:	e9 00 01 00 00       	jmp    1098c <tss_init+0x12e>
    }
    segment_desc_set(tss_sel,(uint32_t)&task->tss,sizeof(tss_t),
   1088c:	8b 45 08             	mov    0x8(%ebp),%eax
   1088f:	83 c0 4c             	add    $0x4c,%eax
   10892:	68 89 00 00 00       	push   $0x89
   10897:	6a 68                	push   $0x68
   10899:	50                   	push   %eax
   1089a:	ff 75 f4             	pushl  -0xc(%ebp)
   1089d:	e8 18 07 00 00       	call   10fba <segment_desc_set>
   108a2:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL_0 | SEG_TYPE_TSS);
    kernel_memset(&task->tss,0,sizeof(tss_t));
   108a5:	8b 45 08             	mov    0x8(%ebp),%eax
   108a8:	83 c0 4c             	add    $0x4c,%eax
   108ab:	83 ec 04             	sub    $0x4,%esp
   108ae:	6a 68                	push   $0x68
   108b0:	6a 00                	push   $0x0
   108b2:	50                   	push   %eax
   108b3:	e8 5b 1a 00 00       	call   12313 <kernel_memset>
   108b8:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   108bb:	8b 45 08             	mov    0x8(%ebp),%eax
   108be:	8b 55 0c             	mov    0xc(%ebp),%edx
   108c1:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   108c4:	8b 45 08             	mov    0x8(%ebp),%eax
   108c7:	8b 55 10             	mov    0x10(%ebp),%edx
   108ca:	89 50 50             	mov    %edx,0x50(%eax)
   108cd:	8b 45 08             	mov    0x8(%ebp),%eax
   108d0:	8b 50 50             	mov    0x50(%eax),%edx
   108d3:	8b 45 08             	mov    0x8(%ebp),%eax
   108d6:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   108dc:	8b 45 08             	mov    0x8(%ebp),%eax
   108df:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
   108e6:	8b 45 08             	mov    0x8(%ebp),%eax
   108e9:	8b 50 54             	mov    0x54(%eax),%edx
   108ec:	8b 45 08             	mov    0x8(%ebp),%eax
   108ef:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   108f5:	8b 45 08             	mov    0x8(%ebp),%eax
   108f8:	c7 80 a8 00 00 00 10 	movl   $0x10,0xa8(%eax)
   108ff:	00 00 00 
   10902:	8b 45 08             	mov    0x8(%ebp),%eax
   10905:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   1090b:	8b 45 08             	mov    0x8(%ebp),%eax
   1090e:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10914:	8b 45 08             	mov    0x8(%ebp),%eax
   10917:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   1091d:	8b 45 08             	mov    0x8(%ebp),%eax
   10920:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10926:	8b 45 08             	mov    0x8(%ebp),%eax
   10929:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   1092f:	8b 45 08             	mov    0x8(%ebp),%eax
   10932:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   10938:	8b 45 08             	mov    0x8(%ebp),%eax
   1093b:	c7 80 98 00 00 00 08 	movl   $0x8,0x98(%eax)
   10942:	00 00 00 
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10945:	8b 45 08             	mov    0x8(%ebp),%eax
   10948:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)
    task->tss_sel = tss_sel;
   1094f:	8b 45 08             	mov    0x8(%ebp),%eax
   10952:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10955:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    uint32_t page_dir = memory_create_user_space();
   1095b:	e8 6c fd ff ff       	call   106cc <memory_create_user_space>
   10960:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == 0)
   10963:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10967:	75 15                	jne    1097e <tss_init+0x120>
    {
        gdt_free_desc(tss_sel);
   10969:	83 ec 0c             	sub    $0xc,%esp
   1096c:	ff 75 f4             	pushl  -0xc(%ebp)
   1096f:	e8 7b 07 00 00       	call   110ef <gdt_free_desc>
   10974:	83 c4 10             	add    $0x10,%esp
        return -1;
   10977:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1097c:	eb 0e                	jmp    1098c <tss_init+0x12e>
    }
    task->tss.cr3 = page_dir;
   1097e:	8b 45 08             	mov    0x8(%ebp),%eax
   10981:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10984:	89 50 68             	mov    %edx,0x68(%eax)
    return 0;
   10987:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1098c:	c9                   	leave  
   1098d:	c3                   	ret    

0001098e <task_init>:
int task_init(task_t *task,const char *name,uint32_t entry,uint32_t esp)
{
   1098e:	55                   	push   %ebp
   1098f:	89 e5                	mov    %esp,%ebp
   10991:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task *)0);
    //tss_init(task,entry,esp);
    uint32_t * pesp = (uint32_t *)esp;
   10994:	8b 45 14             	mov    0x14(%ebp),%eax
   10997:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pesp)
   1099a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1099e:	74 55                	je     109f5 <task_init+0x67>
    {
       *(--pesp) = entry;              // 任务入口地址
   109a0:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   109a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109a7:	8b 55 10             	mov    0x10(%ebp),%edx
   109aa:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;                  // ebp
   109ac:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   109b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;                  // ebx
   109b9:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   109bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;                  // esi
   109c6:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   109ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;                  // edi
   109d3:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   109d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = EFLAGS_DEFAULT | EFLAGS_IF; // EFLAGS，允许中断
   109e0:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   109e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109e7:	c7 00 02 02 00 00    	movl   $0x202,(%eax)
        task->stack = pesp;
   109ed:	8b 45 08             	mov    0x8(%ebp),%eax
   109f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   109f3:	89 10                	mov    %edx,(%eax)
    }
    kernel_strncpy(task->name,name,TASK_NAME_SIZE);
   109f5:	8b 45 08             	mov    0x8(%ebp),%eax
   109f8:	83 c0 14             	add    $0x14,%eax
   109fb:	83 ec 04             	sub    $0x4,%esp
   109fe:	6a 20                	push   $0x20
   10a00:	ff 75 0c             	pushl  0xc(%ebp)
   10a03:	50                   	push   %eax
   10a04:	e8 9c 17 00 00       	call   121a5 <kernel_strncpy>
   10a09:	83 c4 10             	add    $0x10,%esp
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10a0c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0f:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
    task->slice_ticks = task->time_ticks;
   10a16:	8b 45 08             	mov    0x8(%ebp),%eax
   10a19:	8b 50 10             	mov    0x10(%eax),%edx
   10a1c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a1f:	89 50 0c             	mov    %edx,0xc(%eax)
    task->sleep_ticks = 0;
   10a22:	8b 45 08             	mov    0x8(%ebp),%eax
   10a25:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    task->state = TASK_CREATED;
   10a2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a2f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    uint32_t page_dir = memory_create_user_space();
   10a36:	e8 91 fc ff ff       	call   106cc <memory_create_user_space>
   10a3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == 0)
   10a3e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10a42:	75 07                	jne    10a4b <task_init+0xbd>
    {
        return -1;
   10a44:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10a49:	eb 7f                	jmp    10aca <task_init+0x13c>
    }
    task->tss.cr3 = page_dir;
   10a4b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10a51:	89 50 68             	mov    %edx,0x68(%eax)
    list_node_init(&task->run_node);
   10a54:	8b 45 08             	mov    0x8(%ebp),%eax
   10a57:	83 c0 34             	add    $0x34,%eax
   10a5a:	83 ec 0c             	sub    $0xc,%esp
   10a5d:	50                   	push   %eax
   10a5e:	e8 85 fd ff ff       	call   107e8 <list_node_init>
   10a63:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   10a66:	8b 45 08             	mov    0x8(%ebp),%eax
   10a69:	83 c0 3c             	add    $0x3c,%eax
   10a6c:	83 ec 0c             	sub    $0xc,%esp
   10a6f:	50                   	push   %eax
   10a70:	e8 73 fd ff ff       	call   107e8 <list_node_init>
   10a75:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10a78:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7b:	83 c0 44             	add    $0x44,%eax
   10a7e:	83 ec 0c             	sub    $0xc,%esp
   10a81:	50                   	push   %eax
   10a82:	e8 61 fd ff ff       	call   107e8 <list_node_init>
   10a87:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   10a8a:	e8 23 0f 00 00       	call   119b2 <irq_enter_protection>
   10a8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    task_set_ready(task);
   10a92:	83 ec 0c             	sub    $0xc,%esp
   10a95:	ff 75 08             	pushl  0x8(%ebp)
   10a98:	e8 1d 01 00 00       	call   10bba <task_set_ready>
   10a9d:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list,&task->all_node);
   10aa0:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa3:	83 c0 3c             	add    $0x3c,%eax
   10aa6:	83 ec 08             	sub    $0x8,%esp
   10aa9:	50                   	push   %eax
   10aaa:	68 48 60 01 00       	push   $0x16048
   10aaf:	e8 3b 1c 00 00       	call   126ef <list_insert_last>
   10ab4:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10ab7:	83 ec 0c             	sub    $0xc,%esp
   10aba:	ff 75 ec             	pushl  -0x14(%ebp)
   10abd:	e8 08 0f 00 00       	call   119ca <irq_leave_protection>
   10ac2:	83 c4 10             	add    $0x10,%esp
    return 0;
   10ac5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10aca:	c9                   	leave  
   10acb:	c3                   	ret    

00010acc <idle_task_entry>:
void simple_switch(uint32_t ** from,uint32_t *to);
void interrupt_switch(uint32_t ** from,uint32_t *to);
static void idle_task_entry(void)
{
   10acc:	55                   	push   %ebp
   10acd:	89 e5                	mov    %esp,%ebp
    while(1)
    {
        hlt();
   10acf:	e8 6c fd ff ff       	call   10840 <hlt>
   10ad4:	eb f9                	jmp    10acf <idle_task_entry+0x3>

00010ad6 <task_manager_init>:
    }
}
void task_manager_init()
{
   10ad6:	55                   	push   %ebp
   10ad7:	89 e5                	mov    %esp,%ebp
   10ad9:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10adc:	83 ec 0c             	sub    $0xc,%esp
   10adf:	68 30 60 01 00       	push   $0x16030
   10ae4:	e8 82 1b 00 00       	call   1266b <list_init>
   10ae9:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10aec:	83 ec 0c             	sub    $0xc,%esp
   10aef:	68 48 60 01 00       	push   $0x16048
   10af4:	e8 72 1b 00 00       	call   1266b <list_init>
   10af9:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10afc:	83 ec 0c             	sub    $0xc,%esp
   10aff:	68 3c 60 01 00       	push   $0x1603c
   10b04:	e8 62 1b 00 00       	call   1266b <list_init>
   10b09:	83 c4 10             	add    $0x10,%esp

    task_manager.current_task = (task_t *)0;
   10b0c:	c7 05 2c 60 01 00 00 	movl   $0x0,0x1602c
   10b13:	00 00 00 
    task_manager.from_task = (task_t *)0;
   10b16:	c7 05 24 60 01 00 00 	movl   $0x0,0x16024
   10b1d:	00 00 00 
    task_manager.to_task = (task_t *)0;
   10b20:	c7 05 28 60 01 00 00 	movl   $0x0,0x16028
   10b27:	00 00 00 
    task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE ;
   10b2a:	c7 05 20 60 01 00 00 	movl   $0x0,0x16020
   10b31:	00 00 00 

    task_init(&task_manager.idle_task,"idle_task",idle_task_entry,(uint32_t)&idle_task_stack[1024]);
   10b34:	ba e0 71 01 00       	mov    $0x171e0,%edx
   10b39:	b8 cc 0a 01 00       	mov    $0x10acc,%eax
   10b3e:	52                   	push   %edx
   10b3f:	50                   	push   %eax
   10b40:	68 35 2a 01 00       	push   $0x12a35
   10b45:	68 0c 61 01 00       	push   $0x1610c
   10b4a:	e8 3f fe ff ff       	call   1098e <task_init>
   10b4f:	83 c4 10             	add    $0x10,%esp
}
   10b52:	90                   	nop
   10b53:	c9                   	leave  
   10b54:	c3                   	ret    

00010b55 <task_first_init>:

void task_first_init()
{
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
   10b58:	83 ec 08             	sub    $0x8,%esp
    
    task_init(&task_manager.first_task,"first_task",0,0);
   10b5b:	6a 00                	push   $0x0
   10b5d:	6a 00                	push   $0x0
   10b5f:	68 3f 2a 01 00       	push   $0x12a3f
   10b64:	68 54 60 01 00       	push   $0x16054
   10b69:	e8 20 fe ff ff       	call   1098e <task_init>
   10b6e:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10b71:	a1 08 61 01 00       	mov    0x16108,%eax
   10b76:	0f b7 c0             	movzwl %ax,%eax
   10b79:	83 ec 0c             	sub    $0xc,%esp
   10b7c:	50                   	push   %eax
   10b7d:	e8 c5 fc ff ff       	call   10847 <write_tr>
   10b82:	83 c4 10             	add    $0x10,%esp
    task_manager.current_task = &task_manager.first_task;
   10b85:	c7 05 2c 60 01 00 54 	movl   $0x16054,0x1602c
   10b8c:	60 01 00 
}
   10b8f:	90                   	nop
   10b90:	c9                   	leave  
   10b91:	c3                   	ret    

00010b92 <get_from_task>:
task_t * get_from_task()
{
   10b92:	55                   	push   %ebp
   10b93:	89 e5                	mov    %esp,%ebp
    return task_manager.from_task;
   10b95:	a1 24 60 01 00       	mov    0x16024,%eax
}
   10b9a:	5d                   	pop    %ebp
   10b9b:	c3                   	ret    

00010b9c <get_to_task>:
task_t * get_to_task()
{
   10b9c:	55                   	push   %ebp
   10b9d:	89 e5                	mov    %esp,%ebp
    return task_manager.to_task;
   10b9f:	a1 28 60 01 00       	mov    0x16028,%eax
}
   10ba4:	5d                   	pop    %ebp
   10ba5:	c3                   	ret    

00010ba6 <task_is_need_reschedule>:
uint32_t task_is_need_reschedule()
{
   10ba6:	55                   	push   %ebp
   10ba7:	89 e5                	mov    %esp,%ebp
    return task_manager.need_reschedule;
   10ba9:	a1 20 60 01 00       	mov    0x16020,%eax
}
   10bae:	5d                   	pop    %ebp
   10baf:	c3                   	ret    

00010bb0 <task_first_task>:
task_t * task_first_task()
{
   10bb0:	55                   	push   %ebp
   10bb1:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10bb3:	b8 54 60 01 00       	mov    $0x16054,%eax
}
   10bb8:	5d                   	pop    %ebp
   10bb9:	c3                   	ret    

00010bba <task_set_ready>:

void task_set_ready(task_t *task)
{
   10bba:	55                   	push   %ebp
   10bbb:	89 e5                	mov    %esp,%ebp
   10bbd:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   10bc0:	81 7d 08 0c 61 01 00 	cmpl   $0x1610c,0x8(%ebp)
   10bc7:	74 23                	je     10bec <task_set_ready+0x32>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list,&task->run_node);
   10bc9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcc:	83 c0 34             	add    $0x34,%eax
   10bcf:	83 ec 08             	sub    $0x8,%esp
   10bd2:	50                   	push   %eax
   10bd3:	68 30 60 01 00       	push   $0x16030
   10bd8:	e8 12 1b 00 00       	call   126ef <list_insert_last>
   10bdd:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;  
   10be0:	8b 45 08             	mov    0x8(%ebp),%eax
   10be3:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
   10bea:	eb 01                	jmp    10bed <task_set_ready+0x33>
        return;
   10bec:	90                   	nop
}
   10bed:	c9                   	leave  
   10bee:	c3                   	ret    

00010bef <task_set_block>:

void task_set_block(task_t *task)
{
   10bef:	55                   	push   %ebp
   10bf0:	89 e5                	mov    %esp,%ebp
   10bf2:	83 ec 08             	sub    $0x8,%esp
    if(task == &task_manager.idle_task)
   10bf5:	81 7d 08 0c 61 01 00 	cmpl   $0x1610c,0x8(%ebp)
   10bfc:	74 19                	je     10c17 <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list,&task->run_node);
   10bfe:	8b 45 08             	mov    0x8(%ebp),%eax
   10c01:	83 c0 34             	add    $0x34,%eax
   10c04:	83 ec 08             	sub    $0x8,%esp
   10c07:	50                   	push   %eax
   10c08:	68 30 60 01 00       	push   $0x16030
   10c0d:	e8 b8 1b 00 00       	call   127ca <list_remove>
   10c12:	83 c4 10             	add    $0x10,%esp
   10c15:	eb 01                	jmp    10c18 <task_set_block+0x29>
        return;
   10c17:	90                   	nop
}
   10c18:	c9                   	leave  
   10c19:	c3                   	ret    

00010c1a <task_current>:

task_t * task_current()
{
   10c1a:	55                   	push   %ebp
   10c1b:	89 e5                	mov    %esp,%ebp
    return task_manager.current_task;
   10c1d:	a1 2c 60 01 00       	mov    0x1602c,%eax
}
   10c22:	5d                   	pop    %ebp
   10c23:	c3                   	ret    

00010c24 <sys_sched_yield>:
int sys_sched_yield()
{
   10c24:	55                   	push   %ebp
   10c25:	89 e5                	mov    %esp,%ebp
   10c27:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10c2a:	e8 83 0d 00 00       	call   119b2 <irq_enter_protection>
   10c2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&task_manager.ready_list) > 1)
   10c32:	83 ec 0c             	sub    $0xc,%esp
   10c35:	68 30 60 01 00       	push   $0x16030
   10c3a:	e8 cf fb ff ff       	call   1080e <list_count>
   10c3f:	83 c4 10             	add    $0x10,%esp
   10c42:	83 f8 01             	cmp    $0x1,%eax
   10c45:	7e 29                	jle    10c70 <sys_sched_yield+0x4c>
    {
        task_t * current_task = task_current();
   10c47:	e8 ce ff ff ff       	call   10c1a <task_current>
   10c4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(current_task);
   10c4f:	83 ec 0c             	sub    $0xc,%esp
   10c52:	ff 75 f0             	pushl  -0x10(%ebp)
   10c55:	e8 95 ff ff ff       	call   10bef <task_set_block>
   10c5a:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   10c5d:	83 ec 0c             	sub    $0xc,%esp
   10c60:	ff 75 f0             	pushl  -0x10(%ebp)
   10c63:	e8 52 ff ff ff       	call   10bba <task_set_ready>
   10c68:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10c6b:	e8 78 00 00 00       	call   10ce8 <task_dispatch>
    }
    irq_leave_protection(state);
   10c70:	83 ec 0c             	sub    $0xc,%esp
   10c73:	ff 75 f4             	pushl  -0xc(%ebp)
   10c76:	e8 4f 0d 00 00       	call   119ca <irq_leave_protection>
   10c7b:	83 c4 10             	add    $0x10,%esp
    return 0;
   10c7e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c83:	c9                   	leave  
   10c84:	c3                   	ret    

00010c85 <task_next_run>:

task_t * task_next_run()
{
   10c85:	55                   	push   %ebp
   10c86:	89 e5                	mov    %esp,%ebp
   10c88:	83 ec 10             	sub    $0x10,%esp
    if(list_count(&task_manager.ready_list) == 0)
   10c8b:	68 30 60 01 00       	push   $0x16030
   10c90:	e8 79 fb ff ff       	call   1080e <list_count>
   10c95:	83 c4 04             	add    $0x4,%esp
   10c98:	85 c0                	test   %eax,%eax
   10c9a:	75 07                	jne    10ca3 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   10c9c:	b8 0c 61 01 00       	mov    $0x1610c,%eax
   10ca1:	eb 30                	jmp    10cd3 <task_next_run+0x4e>
    }
    list_node_t * node = list_first(&task_manager.ready_list);
   10ca3:	68 30 60 01 00       	push   $0x16030
   10ca8:	e8 6c fb ff ff       	call   10819 <list_first>
   10cad:	83 c4 04             	add    $0x4,%esp
   10cb0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(node)
   10cb3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10cb7:	74 15                	je     10cce <task_next_run+0x49>
    {
        return list_node_parent(node,task_t,run_node);
   10cb9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10cbd:	74 08                	je     10cc7 <task_next_run+0x42>
   10cbf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10cc2:	83 e8 34             	sub    $0x34,%eax
   10cc5:	eb 0c                	jmp    10cd3 <task_next_run+0x4e>
   10cc7:	b8 00 00 00 00       	mov    $0x0,%eax
   10ccc:	eb 05                	jmp    10cd3 <task_next_run+0x4e>
    }
    return (task_t *)0;
   10cce:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10cd3:	c9                   	leave  
   10cd4:	c3                   	ret    

00010cd5 <schedule_switch>:

void schedule_switch()
{
   10cd5:	55                   	push   %ebp
   10cd6:	89 e5                	mov    %esp,%ebp
   10cd8:	83 ec 08             	sub    $0x8,%esp
    task_dispatch();
   10cdb:	e8 08 00 00 00       	call   10ce8 <task_dispatch>
    do_schedule_switch();
   10ce0:	e8 7f 01 00 00       	call   10e64 <do_schedule_switch>
}
   10ce5:	90                   	nop
   10ce6:	c9                   	leave  
   10ce7:	c3                   	ret    

00010ce8 <task_dispatch>:
void task_dispatch()
{
   10ce8:	55                   	push   %ebp
   10ce9:	89 e5                	mov    %esp,%ebp
   10ceb:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10cee:	e8 bf 0c 00 00       	call   119b2 <irq_enter_protection>
   10cf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * next_task = task_next_run();
   10cf6:	e8 8a ff ff ff       	call   10c85 <task_next_run>
   10cfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next_task != task_current())
   10cfe:	e8 17 ff ff ff       	call   10c1a <task_current>
   10d03:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10d06:	74 34                	je     10d3c <task_dispatch+0x54>
    {
        task_t * from = task_current();
   10d08:	e8 0d ff ff ff       	call   10c1a <task_current>
   10d0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.current_task = next_task;
   10d10:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d13:	a3 2c 60 01 00       	mov    %eax,0x1602c
        next_task->state = TASK_RUNNING;
   10d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d1b:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        task_manager.need_reschedule = TASK_NEED_RESCHEDULE;
   10d22:	c7 05 20 60 01 00 01 	movl   $0x1,0x16020
   10d29:	00 00 00 
        task_manager.from_task = from;
   10d2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10d2f:	a3 24 60 01 00       	mov    %eax,0x16024
        task_manager.to_task = next_task;
   10d34:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d37:	a3 28 60 01 00       	mov    %eax,0x16028
    }
    irq_leave_protection(state);
   10d3c:	83 ec 0c             	sub    $0xc,%esp
   10d3f:	ff 75 f4             	pushl  -0xc(%ebp)
   10d42:	e8 83 0c 00 00       	call   119ca <irq_leave_protection>
   10d47:	83 c4 10             	add    $0x10,%esp
}
   10d4a:	90                   	nop
   10d4b:	c9                   	leave  
   10d4c:	c3                   	ret    

00010d4d <task_time_tick>:

void task_time_tick()
{
   10d4d:	55                   	push   %ebp
   10d4e:	89 e5                	mov    %esp,%ebp
   10d50:	83 ec 18             	sub    $0x18,%esp
    if(task_manager.need_reschedule)
   10d53:	a1 20 60 01 00       	mov    0x16020,%eax
   10d58:	85 c0                	test   %eax,%eax
   10d5a:	0f 85 c7 00 00 00    	jne    10e27 <task_time_tick+0xda>
    {
        return; 
    }
    list_node_t * curr = list_first(&task_manager.sleep_list);
   10d60:	68 3c 60 01 00       	push   $0x1603c
   10d65:	e8 af fa ff ff       	call   10819 <list_first>
   10d6a:	83 c4 04             	add    $0x4,%esp
   10d6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   10d70:	eb 5f                	jmp    10dd1 <task_time_tick+0x84>
    {
        list_node_t * next = list_node_next(curr);
   10d72:	ff 75 f4             	pushl  -0xc(%ebp)
   10d75:	e8 89 fa ff ff       	call   10803 <list_node_next>
   10d7a:	83 c4 04             	add    $0x4,%esp
   10d7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent(curr,task_t,run_node);
   10d80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d84:	74 08                	je     10d8e <task_time_tick+0x41>
   10d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d89:	83 e8 34             	sub    $0x34,%eax
   10d8c:	eb 05                	jmp    10d93 <task_time_tick+0x46>
   10d8e:	b8 00 00 00 00       	mov    $0x0,%eax
   10d93:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task->sleep_ticks--;
   10d96:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10d99:	8b 40 08             	mov    0x8(%eax),%eax
   10d9c:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10da2:	89 50 08             	mov    %edx,0x8(%eax)
        if(task->sleep_ticks <= 0)
   10da5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10da8:	8b 40 08             	mov    0x8(%eax),%eax
   10dab:	85 c0                	test   %eax,%eax
   10dad:	7f 1c                	jg     10dcb <task_time_tick+0x7e>
        {
            task_set_wakeup(task);
   10daf:	83 ec 0c             	sub    $0xc,%esp
   10db2:	ff 75 e8             	pushl  -0x18(%ebp)
   10db5:	e8 41 01 00 00       	call   10efb <task_set_wakeup>
   10dba:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   10dbd:	83 ec 0c             	sub    $0xc,%esp
   10dc0:	ff 75 e8             	pushl  -0x18(%ebp)
   10dc3:	e8 f2 fd ff ff       	call   10bba <task_set_ready>
   10dc8:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   10dcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10dce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(curr)
   10dd1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10dd5:	75 9b                	jne    10d72 <task_time_tick+0x25>
    }
    task_t * current_task = task_current();
   10dd7:	e8 3e fe ff ff       	call   10c1a <task_current>
   10ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current_task->slice_ticks--;
   10ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10de2:	8b 40 0c             	mov    0xc(%eax),%eax
   10de5:	8d 50 ff             	lea    -0x1(%eax),%edx
   10de8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10deb:	89 50 0c             	mov    %edx,0xc(%eax)
    if(current_task->slice_ticks <= 0)
   10dee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10df1:	8b 40 0c             	mov    0xc(%eax),%eax
   10df4:	85 c0                	test   %eax,%eax
   10df6:	7f 30                	jg     10e28 <task_time_tick+0xdb>
    {
        current_task->slice_ticks = current_task->time_ticks;
   10df8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dfb:	8b 50 10             	mov    0x10(%eax),%edx
   10dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e01:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(current_task);
   10e04:	83 ec 0c             	sub    $0xc,%esp
   10e07:	ff 75 f0             	pushl  -0x10(%ebp)
   10e0a:	e8 e0 fd ff ff       	call   10bef <task_set_block>
   10e0f:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   10e12:	83 ec 0c             	sub    $0xc,%esp
   10e15:	ff 75 f0             	pushl  -0x10(%ebp)
   10e18:	e8 9d fd ff ff       	call   10bba <task_set_ready>
   10e1d:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   10e20:	e8 c3 fe ff ff       	call   10ce8 <task_dispatch>
   10e25:	eb 01                	jmp    10e28 <task_time_tick+0xdb>
        return; 
   10e27:	90                   	nop
    }
}
   10e28:	c9                   	leave  
   10e29:	c3                   	ret    

00010e2a <mmu_set_page_dir>:

void mmu_set_page_dir(task_t * to_task)
{
   10e2a:	55                   	push   %ebp
   10e2b:	89 e5                	mov    %esp,%ebp
   10e2d:	53                   	push   %ebx
    if(to_task == (task_t *)0)
   10e2e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e32:	74 2a                	je     10e5e <mmu_set_page_dir+0x34>
    {
        return;
    }
    if(to_task->tss.cr3 != read_cr3() && to_task->tss.cr3 != 0)
   10e34:	8b 45 08             	mov    0x8(%ebp),%eax
   10e37:	8b 58 68             	mov    0x68(%eax),%ebx
   10e3a:	e8 e4 f9 ff ff       	call   10823 <read_cr3>
   10e3f:	39 c3                	cmp    %eax,%ebx
   10e41:	74 1c                	je     10e5f <mmu_set_page_dir+0x35>
   10e43:	8b 45 08             	mov    0x8(%ebp),%eax
   10e46:	8b 40 68             	mov    0x68(%eax),%eax
   10e49:	85 c0                	test   %eax,%eax
   10e4b:	74 12                	je     10e5f <mmu_set_page_dir+0x35>
    {
        write_cr3(to_task->tss.cr3);
   10e4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e50:	8b 40 68             	mov    0x68(%eax),%eax
   10e53:	50                   	push   %eax
   10e54:	e8 db f9 ff ff       	call   10834 <write_cr3>
   10e59:	83 c4 04             	add    $0x4,%esp
   10e5c:	eb 01                	jmp    10e5f <mmu_set_page_dir+0x35>
        return;
   10e5e:	90                   	nop
    }
}
   10e5f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e62:	c9                   	leave  
   10e63:	c3                   	ret    

00010e64 <do_schedule_switch>:
void do_schedule_switch(void)
{
   10e64:	55                   	push   %ebp
   10e65:	89 e5                	mov    %esp,%ebp
   10e67:	83 ec 08             	sub    $0x8,%esp
    if (task_manager.need_reschedule) {
   10e6a:	a1 20 60 01 00       	mov    0x16020,%eax
   10e6f:	85 c0                	test   %eax,%eax
   10e71:	74 4a                	je     10ebd <do_schedule_switch+0x59>
        task_manager.need_reschedule = TASK_NOT_NEED_RESCHEDULE;
   10e73:	c7 05 20 60 01 00 00 	movl   $0x0,0x16020
   10e7a:	00 00 00 
        if (task_manager.from_task && task_manager.from_task != task_manager.to_task) {
   10e7d:	a1 24 60 01 00       	mov    0x16024,%eax
   10e82:	85 c0                	test   %eax,%eax
   10e84:	74 37                	je     10ebd <do_schedule_switch+0x59>
   10e86:	8b 15 24 60 01 00    	mov    0x16024,%edx
   10e8c:	a1 28 60 01 00       	mov    0x16028,%eax
   10e91:	39 c2                	cmp    %eax,%edx
   10e93:	74 28                	je     10ebd <do_schedule_switch+0x59>
            // 在这里进行任务切换
            // 使用简单的栈切换，避免复杂的中断上下文切换
            mmu_set_page_dir(task_manager.to_task);
   10e95:	a1 28 60 01 00       	mov    0x16028,%eax
   10e9a:	50                   	push   %eax
   10e9b:	e8 8a ff ff ff       	call   10e2a <mmu_set_page_dir>
   10ea0:	83 c4 04             	add    $0x4,%esp
            simple_switch(&task_manager.from_task->stack, task_manager.to_task->stack);
   10ea3:	a1 28 60 01 00       	mov    0x16028,%eax
   10ea8:	8b 00                	mov    (%eax),%eax
   10eaa:	8b 15 24 60 01 00    	mov    0x16024,%edx
   10eb0:	83 ec 08             	sub    $0x8,%esp
   10eb3:	50                   	push   %eax
   10eb4:	52                   	push   %edx
   10eb5:	e8 10 f4 ff ff       	call   102ca <simple_switch>
   10eba:	83 c4 10             	add    $0x10,%esp
        }
    }
}
   10ebd:	90                   	nop
   10ebe:	c9                   	leave  
   10ebf:	c3                   	ret    

00010ec0 <task_set_sleep>:

void task_set_sleep(task_t *task,uint32_t ticks)
{
   10ec0:	55                   	push   %ebp
   10ec1:	89 e5                	mov    %esp,%ebp
   10ec3:	83 ec 08             	sub    $0x8,%esp
    if(ticks == 0)
   10ec6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10eca:	74 2c                	je     10ef8 <task_set_sleep+0x38>
    {
        return;
    }
    task->sleep_ticks = ticks;
   10ecc:	8b 55 0c             	mov    0xc(%ebp),%edx
   10ecf:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed2:	89 50 08             	mov    %edx,0x8(%eax)
    task->state = TASK_SLEEP;
   10ed5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed8:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
    list_insert_last(&task_manager.sleep_list,&task->run_node);
   10edf:	8b 45 08             	mov    0x8(%ebp),%eax
   10ee2:	83 c0 34             	add    $0x34,%eax
   10ee5:	83 ec 08             	sub    $0x8,%esp
   10ee8:	50                   	push   %eax
   10ee9:	68 3c 60 01 00       	push   $0x1603c
   10eee:	e8 fc 17 00 00       	call   126ef <list_insert_last>
   10ef3:	83 c4 10             	add    $0x10,%esp
   10ef6:	eb 01                	jmp    10ef9 <task_set_sleep+0x39>
        return;
   10ef8:	90                   	nop
}
   10ef9:	c9                   	leave  
   10efa:	c3                   	ret    

00010efb <task_set_wakeup>:

void task_set_wakeup(task_t *task)
{
   10efb:	55                   	push   %ebp
   10efc:	89 e5                	mov    %esp,%ebp
   10efe:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list,&task->run_node);
   10f01:	8b 45 08             	mov    0x8(%ebp),%eax
   10f04:	83 c0 34             	add    $0x34,%eax
   10f07:	83 ec 08             	sub    $0x8,%esp
   10f0a:	50                   	push   %eax
   10f0b:	68 3c 60 01 00       	push   $0x1603c
   10f10:	e8 b5 18 00 00       	call   127ca <list_remove>
   10f15:	83 c4 10             	add    $0x10,%esp

    //task->state = TASK_READY;
}
   10f18:	90                   	nop
   10f19:	c9                   	leave  
   10f1a:	c3                   	ret    

00010f1b <sys_sleep>:

void sys_sleep(uint32_t ms)
{
   10f1b:	55                   	push   %ebp
   10f1c:	89 e5                	mov    %esp,%ebp
   10f1e:	53                   	push   %ebx
   10f1f:	83 ec 14             	sub    $0x14,%esp
    irq_state_t state = irq_enter_protection();
   10f22:	e8 8b 0a 00 00       	call   119b2 <irq_enter_protection>
   10f27:	89 45 f4             	mov    %eax,-0xc(%ebp)

    
    task_set_block(task_current());
   10f2a:	e8 eb fc ff ff       	call   10c1a <task_current>
   10f2f:	83 ec 0c             	sub    $0xc,%esp
   10f32:	50                   	push   %eax
   10f33:	e8 b7 fc ff ff       	call   10bef <task_set_block>
   10f38:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_current(),(ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   10f3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f3e:	83 c0 18             	add    $0x18,%eax
   10f41:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10f46:	f7 e2                	mul    %edx
   10f48:	89 d3                	mov    %edx,%ebx
   10f4a:	c1 eb 03             	shr    $0x3,%ebx
   10f4d:	e8 c8 fc ff ff       	call   10c1a <task_current>
   10f52:	83 ec 08             	sub    $0x8,%esp
   10f55:	53                   	push   %ebx
   10f56:	50                   	push   %eax
   10f57:	e8 64 ff ff ff       	call   10ec0 <task_set_sleep>
   10f5c:	83 c4 10             	add    $0x10,%esp

    schedule_switch();
   10f5f:	e8 71 fd ff ff       	call   10cd5 <schedule_switch>
    irq_leave_protection(state);
   10f64:	83 ec 0c             	sub    $0xc,%esp
   10f67:	ff 75 f4             	pushl  -0xc(%ebp)
   10f6a:	e8 5b 0a 00 00       	call   119ca <irq_leave_protection>
   10f6f:	83 c4 10             	add    $0x10,%esp
}
   10f72:	90                   	nop
   10f73:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f76:	c9                   	leave  
   10f77:	c3                   	ret    

00010f78 <lgdt>:
{
   10f78:	55                   	push   %ebp
   10f79:	89 e5                	mov    %esp,%ebp
   10f7b:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   10f7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10f81:	c1 e8 10             	shr    $0x10,%eax
   10f84:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
   10f88:	8b 45 08             	mov    0x8(%ebp),%eax
   10f8b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10f8f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f92:	83 e8 01             	sub    $0x1,%eax
   10f95:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10f99:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10f9d:	90                   	nop
   10f9e:	c9                   	leave  
   10f9f:	c3                   	ret    

00010fa0 <far_jump>:
{
   10fa0:	55                   	push   %ebp
   10fa1:	89 e5                	mov    %esp,%ebp
   10fa3:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset ,selector};
   10fa6:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fa9:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10fac:	8b 45 08             	mov    0x8(%ebp),%eax
   10faf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10fb2:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10fb5:	ff 28                	ljmp   *(%eax)
}
   10fb7:	90                   	nop
   10fb8:	c9                   	leave  
   10fb9:	c3                   	ret    

00010fba <segment_desc_set>:
#include "ipc/mutex.h"
static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t gdt_mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   10fba:	55                   	push   %ebp
   10fbb:	89 e5                	mov    %esp,%ebp
   10fbd:	83 ec 14             	sub    $0x14,%esp
   10fc0:	8b 45 14             	mov    0x14(%ebp),%eax
   10fc3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10fc7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fca:	83 e0 f8             	and    $0xfffffff8,%eax
   10fcd:	05 e0 71 01 00       	add    $0x171e0,%eax
   10fd2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(limit > 0xfffff)
   10fd5:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10fdc:	76 0f                	jbe    10fed <segment_desc_set+0x33>
    {
        limit /= 0x1000;
   10fde:	8b 45 10             	mov    0x10(%ebp),%eax
   10fe1:	c1 e8 0c             	shr    $0xc,%eax
   10fe4:	89 45 10             	mov    %eax,0x10(%ebp)
        attr |= SEG_G;
   10fe7:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   10fed:	8b 45 10             	mov    0x10(%ebp),%eax
   10ff0:	89 c2                	mov    %eax,%edx
   10ff2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ff5:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   10ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ffb:	89 c2                	mov    %eax,%edx
   10ffd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11000:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   11004:	8b 45 0c             	mov    0xc(%ebp),%eax
   11007:	c1 e8 10             	shr    $0x10,%eax
   1100a:	89 c2                	mov    %eax,%edx
   1100c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1100f:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0x0f) << 8);
   11012:	8b 45 10             	mov    0x10(%ebp),%eax
   11015:	c1 e8 10             	shr    $0x10,%eax
   11018:	c1 e0 08             	shl    $0x8,%eax
   1101b:	66 25 00 0f          	and    $0xf00,%ax
   1101f:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   11023:	89 c2                	mov    %eax,%edx
   11025:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11028:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   1102c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1102f:	c1 e8 18             	shr    $0x18,%eax
   11032:	89 c2                	mov    %eax,%edx
   11034:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11037:	88 50 07             	mov    %dl,0x7(%eax)
}
   1103a:	90                   	nop
   1103b:	c9                   	leave  
   1103c:	c3                   	ret    

0001103d <gate_desc_set>:
void gate_desc_set(gate_desc_t * gate_desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   1103d:	55                   	push   %ebp
   1103e:	89 e5                	mov    %esp,%ebp
   11040:	83 ec 08             	sub    $0x8,%esp
   11043:	8b 55 0c             	mov    0xc(%ebp),%edx
   11046:	8b 45 14             	mov    0x14(%ebp),%eax
   11049:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1104d:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    gate_desc->selector = selector;
   11051:	8b 45 08             	mov    0x8(%ebp),%eax
   11054:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11058:	66 89 50 02          	mov    %dx,0x2(%eax)
    gate_desc->offset15_0 = offset & 0xffff;
   1105c:	8b 45 10             	mov    0x10(%ebp),%eax
   1105f:	89 c2                	mov    %eax,%edx
   11061:	8b 45 08             	mov    0x8(%ebp),%eax
   11064:	66 89 10             	mov    %dx,(%eax)
    gate_desc->offset31_16 = (offset >> 16) & 0xffff;
   11067:	8b 45 10             	mov    0x10(%ebp),%eax
   1106a:	c1 e8 10             	shr    $0x10,%eax
   1106d:	89 c2                	mov    %eax,%edx
   1106f:	8b 45 08             	mov    0x8(%ebp),%eax
   11072:	66 89 50 06          	mov    %dx,0x6(%eax)
    gate_desc->attr = attr;
   11076:	8b 45 08             	mov    0x8(%ebp),%eax
   11079:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1107d:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   11081:	90                   	nop
   11082:	c9                   	leave  
   11083:	c3                   	ret    

00011084 <gdt_alloc_desc>:

int gdt_alloc_desc(void)
{
   11084:	55                   	push   %ebp
   11085:	89 e5                	mov    %esp,%ebp
   11087:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&gdt_mutex);
   1108a:	83 ec 0c             	sub    $0xc,%esp
   1108d:	68 e0 79 01 00       	push   $0x179e0
   11092:	e8 fd 0b 00 00       	call   11c94 <mutex_lock>
   11097:	83 c4 10             	add    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1109a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   110a1:	eb 2c                	jmp    110cf <gdt_alloc_desc+0x4b>
    {
        if(gdt_table[i].attr == 0)
   110a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110a6:	0f b7 04 c5 e5 71 01 	movzwl 0x171e5(,%eax,8),%eax
   110ad:	00 
   110ae:	66 85 c0             	test   %ax,%ax
   110b1:	75 18                	jne    110cb <gdt_alloc_desc+0x47>
        {
            mutex_unlock(&gdt_mutex);
   110b3:	83 ec 0c             	sub    $0xc,%esp
   110b6:	68 e0 79 01 00       	push   $0x179e0
   110bb:	e8 64 0c 00 00       	call   11d24 <mutex_unlock>
   110c0:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   110c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110c6:	c1 e0 03             	shl    $0x3,%eax
   110c9:	eb 22                	jmp    110ed <gdt_alloc_desc+0x69>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   110cb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   110cf:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   110d6:	7e cb                	jle    110a3 <gdt_alloc_desc+0x1f>
        }
        
    }
    mutex_unlock(&gdt_mutex);
   110d8:	83 ec 0c             	sub    $0xc,%esp
   110db:	68 e0 79 01 00       	push   $0x179e0
   110e0:	e8 3f 0c 00 00       	call   11d24 <mutex_unlock>
   110e5:	83 c4 10             	add    $0x10,%esp
    return -1;
   110e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   110ed:	c9                   	leave  
   110ee:	c3                   	ret    

000110ef <gdt_free_desc>:

void gdt_free_desc(int selector)
{
   110ef:	55                   	push   %ebp
   110f0:	89 e5                	mov    %esp,%ebp
   110f2:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&gdt_mutex);
   110f5:	83 ec 0c             	sub    $0xc,%esp
   110f8:	68 e0 79 01 00       	push   $0x179e0
   110fd:	e8 92 0b 00 00       	call   11c94 <mutex_lock>
   11102:	83 c4 10             	add    $0x10,%esp
    gdt_table[selector / sizeof(segment_desc_t)].attr = 0;
   11105:	8b 45 08             	mov    0x8(%ebp),%eax
   11108:	c1 e8 03             	shr    $0x3,%eax
   1110b:	66 c7 04 c5 e5 71 01 	movw   $0x0,0x171e5(,%eax,8)
   11112:	00 00 00 
    mutex_unlock(&gdt_mutex);
   11115:	83 ec 0c             	sub    $0xc,%esp
   11118:	68 e0 79 01 00       	push   $0x179e0
   1111d:	e8 02 0c 00 00       	call   11d24 <mutex_unlock>
   11122:	83 c4 10             	add    $0x10,%esp
}
   11125:	90                   	nop
   11126:	c9                   	leave  
   11127:	c3                   	ret    

00011128 <init_gdt>:
void init_gdt(void)
{
   11128:	55                   	push   %ebp
   11129:	89 e5                	mov    %esp,%ebp
   1112b:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1112e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11135:	eb 19                	jmp    11150 <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   11137:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1113a:	c1 e0 03             	shl    $0x3,%eax
   1113d:	6a 00                	push   $0x0
   1113f:	6a 00                	push   $0x0
   11141:	6a 00                	push   $0x0
   11143:	50                   	push   %eax
   11144:	e8 71 fe ff ff       	call   10fba <segment_desc_set>
   11149:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1114c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11150:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11157:	7e de                	jle    11137 <init_gdt+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   11159:	68 9a 40 00 00       	push   $0x409a
   1115e:	6a ff                	push   $0xffffffff
   11160:	6a 00                	push   $0x0
   11162:	6a 08                	push   $0x8
   11164:	e8 51 fe ff ff       	call   10fba <segment_desc_set>
   11169:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL_0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   1116c:	68 92 40 00 00       	push   $0x4092
   11171:	6a ff                	push   $0xffffffff
   11173:	6a 00                	push   $0x0
   11175:	6a 10                	push   $0x10
   11177:	e8 3e fe ff ff       	call   10fba <segment_desc_set>
   1117c:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1117f:	b8 e0 71 01 00       	mov    $0x171e0,%eax
   11184:	68 00 08 00 00       	push   $0x800
   11189:	50                   	push   %eax
   1118a:	e8 e9 fd ff ff       	call   10f78 <lgdt>
   1118f:	83 c4 08             	add    $0x8,%esp
}
   11192:	90                   	nop
   11193:	c9                   	leave  
   11194:	c3                   	ret    

00011195 <cpu_init>:

void cpu_init(void)
{
   11195:	55                   	push   %ebp
   11196:	89 e5                	mov    %esp,%ebp
   11198:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&gdt_mutex);
   1119b:	83 ec 0c             	sub    $0xc,%esp
   1119e:	68 e0 79 01 00       	push   $0x179e0
   111a3:	e8 c0 0a 00 00       	call   11c68 <mutex_init>
   111a8:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   111ab:	e8 78 ff ff ff       	call   11128 <init_gdt>
    
}
   111b0:	90                   	nop
   111b1:	c9                   	leave  
   111b2:	c3                   	ret    

000111b3 <switch_to_tss>:

void switch_to_tss (int tss_sel)
{
   111b3:	55                   	push   %ebp
   111b4:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel,0);
   111b6:	8b 45 08             	mov    0x8(%ebp),%eax
   111b9:	6a 00                	push   $0x0
   111bb:	50                   	push   %eax
   111bc:	e8 df fd ff ff       	call   10fa0 <far_jump>
   111c1:	83 c4 08             	add    $0x8,%esp
   111c4:	90                   	nop
   111c5:	c9                   	leave  
   111c6:	c3                   	ret    

000111c7 <inb>:
{
   111c7:	55                   	push   %ebp
   111c8:	89 e5                	mov    %esp,%ebp
   111ca:	83 ec 14             	sub    $0x14,%esp
   111cd:	8b 45 08             	mov    0x8(%ebp),%eax
   111d0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   111d4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   111d8:	89 c2                	mov    %eax,%edx
   111da:	ec                   	in     (%dx),%al
   111db:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   111de:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   111e2:	c9                   	leave  
   111e3:	c3                   	ret    

000111e4 <outb>:
{
   111e4:	55                   	push   %ebp
   111e5:	89 e5                	mov    %esp,%ebp
   111e7:	83 ec 08             	sub    $0x8,%esp
   111ea:	8b 55 08             	mov    0x8(%ebp),%edx
   111ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   111f0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   111f4:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   111f7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   111fb:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   111ff:	ee                   	out    %al,(%dx)
}
   11200:	90                   	nop
   11201:	c9                   	leave  
   11202:	c3                   	ret    

00011203 <cli>:
{
   11203:	55                   	push   %ebp
   11204:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   11206:	fa                   	cli    
}
   11207:	90                   	nop
   11208:	5d                   	pop    %ebp
   11209:	c3                   	ret    

0001120a <sti>:
{
   1120a:	55                   	push   %ebp
   1120b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   1120d:	fb                   	sti    
}
   1120e:	90                   	nop
   1120f:	5d                   	pop    %ebp
   11210:	c3                   	ret    

00011211 <lidt>:
{
   11211:	55                   	push   %ebp
   11212:	89 e5                	mov    %esp,%ebp
   11214:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   11217:	8b 45 08             	mov    0x8(%ebp),%eax
   1121a:	c1 e8 10             	shr    $0x10,%eax
   1121d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xffff;
   11221:	8b 45 08             	mov    0x8(%ebp),%eax
   11224:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   11228:	8b 45 0c             	mov    0xc(%ebp),%eax
   1122b:	83 e8 01             	sub    $0x1,%eax
   1122e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[i]"::[i]"m"(idt));
   11232:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11236:	90                   	nop
   11237:	c9                   	leave  
   11238:	c3                   	ret    

00011239 <hlt>:
{
   11239:	55                   	push   %ebp
   1123a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1123c:	f4                   	hlt    
}
   1123d:	90                   	nop
   1123e:	5d                   	pop    %ebp
   1123f:	c3                   	ret    

00011240 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   11240:	55                   	push   %ebp
   11241:	89 e5                	mov    %esp,%ebp
   11243:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11246:	9c                   	pushf  
   11247:	58                   	pop    %eax
   11248:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   1124b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1124e:	c9                   	leave  
   1124f:	c3                   	ret    

00011250 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   11250:	55                   	push   %ebp
   11251:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   11253:	8b 45 08             	mov    0x8(%ebp),%eax
   11256:	50                   	push   %eax
   11257:	9d                   	popf   
}
   11258:	90                   	nop
   11259:	5d                   	pop    %ebp
   1125a:	c3                   	ret    

0001125b <dump_core_regs>:
#include "os_cfg.h"
#include "tools/log.h"
#define IRQ_TABLE_NU 128
static gate_desc_t idt_table[IRQ_TABLE_NU];
static dump_core_regs(exception_frame_t *frame)
{
   1125b:	55                   	push   %ebp
   1125c:	89 e5                	mov    %esp,%ebp
   1125e:	57                   	push   %edi
   1125f:	56                   	push   %esi
   11260:	53                   	push   %ebx
   11261:	83 ec 0c             	sub    $0xc,%esp
    log_printf("IRQ: %d, error code: %d\n",frame->irq_num,frame->error_code);
   11264:	8b 45 08             	mov    0x8(%ebp),%eax
   11267:	8b 50 34             	mov    0x34(%eax),%edx
   1126a:	8b 45 08             	mov    0x8(%ebp),%eax
   1126d:	8b 40 30             	mov    0x30(%eax),%eax
   11270:	83 ec 04             	sub    $0x4,%esp
   11273:	52                   	push   %edx
   11274:	50                   	push   %eax
   11275:	68 4c 2a 01 00       	push   $0x12a4c
   1127a:	e8 a8 16 00 00       	call   12927 <log_printf>
   1127f:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d DS: %d ES: %d SS: %d FS: %d GS: %d\n",frame->cs,frame->ds,frame->es,frame->ds,frame->fs,frame->gs);
   11282:	8b 45 08             	mov    0x8(%ebp),%eax
   11285:	8b 38                	mov    (%eax),%edi
   11287:	8b 45 08             	mov    0x8(%ebp),%eax
   1128a:	8b 70 04             	mov    0x4(%eax),%esi
   1128d:	8b 45 08             	mov    0x8(%ebp),%eax
   11290:	8b 58 0c             	mov    0xc(%eax),%ebx
   11293:	8b 45 08             	mov    0x8(%ebp),%eax
   11296:	8b 48 08             	mov    0x8(%eax),%ecx
   11299:	8b 45 08             	mov    0x8(%ebp),%eax
   1129c:	8b 50 0c             	mov    0xc(%eax),%edx
   1129f:	8b 45 08             	mov    0x8(%ebp),%eax
   112a2:	8b 40 3c             	mov    0x3c(%eax),%eax
   112a5:	83 ec 04             	sub    $0x4,%esp
   112a8:	57                   	push   %edi
   112a9:	56                   	push   %esi
   112aa:	53                   	push   %ebx
   112ab:	51                   	push   %ecx
   112ac:	52                   	push   %edx
   112ad:	50                   	push   %eax
   112ae:	68 68 2a 01 00       	push   $0x12a68
   112b3:	e8 6f 16 00 00       	call   12927 <log_printf>
   112b8:	83 c4 20             	add    $0x20,%esp
    log_printf("EAX: 0x%x EBX: 0x%x ECX: 0x%x EDX: 0x%x\n",frame->eax,frame->ebx,frame->ecx,frame->edx);
   112bb:	8b 45 08             	mov    0x8(%ebp),%eax
   112be:	8b 58 24             	mov    0x24(%eax),%ebx
   112c1:	8b 45 08             	mov    0x8(%ebp),%eax
   112c4:	8b 48 28             	mov    0x28(%eax),%ecx
   112c7:	8b 45 08             	mov    0x8(%ebp),%eax
   112ca:	8b 50 20             	mov    0x20(%eax),%edx
   112cd:	8b 45 08             	mov    0x8(%ebp),%eax
   112d0:	8b 40 2c             	mov    0x2c(%eax),%eax
   112d3:	83 ec 0c             	sub    $0xc,%esp
   112d6:	53                   	push   %ebx
   112d7:	51                   	push   %ecx
   112d8:	52                   	push   %edx
   112d9:	50                   	push   %eax
   112da:	68 94 2a 01 00       	push   $0x12a94
   112df:	e8 43 16 00 00       	call   12927 <log_printf>
   112e4:	83 c4 20             	add    $0x20,%esp
    log_printf("EIP: 0x%x EFLAGS: 0x%x ESP: 0x%x EBP: 0x%x\n",frame->eip,frame->eflags,frame->esp,frame->ebp);
   112e7:	8b 45 08             	mov    0x8(%ebp),%eax
   112ea:	8b 58 18             	mov    0x18(%eax),%ebx
   112ed:	8b 45 08             	mov    0x8(%ebp),%eax
   112f0:	8b 48 1c             	mov    0x1c(%eax),%ecx
   112f3:	8b 45 08             	mov    0x8(%ebp),%eax
   112f6:	8b 50 40             	mov    0x40(%eax),%edx
   112f9:	8b 45 08             	mov    0x8(%ebp),%eax
   112fc:	8b 40 38             	mov    0x38(%eax),%eax
   112ff:	83 ec 0c             	sub    $0xc,%esp
   11302:	53                   	push   %ebx
   11303:	51                   	push   %ecx
   11304:	52                   	push   %edx
   11305:	50                   	push   %eax
   11306:	68 c0 2a 01 00       	push   $0x12ac0
   1130b:	e8 17 16 00 00       	call   12927 <log_printf>
   11310:	83 c4 20             	add    $0x20,%esp
    log_printf("EDI: 0x%x ESI: 0x%x EDI: 0x%x\n",frame->edi,frame->esi,frame->edi);
   11313:	8b 45 08             	mov    0x8(%ebp),%eax
   11316:	8b 48 10             	mov    0x10(%eax),%ecx
   11319:	8b 45 08             	mov    0x8(%ebp),%eax
   1131c:	8b 50 14             	mov    0x14(%eax),%edx
   1131f:	8b 45 08             	mov    0x8(%ebp),%eax
   11322:	8b 40 10             	mov    0x10(%eax),%eax
   11325:	51                   	push   %ecx
   11326:	52                   	push   %edx
   11327:	50                   	push   %eax
   11328:	68 ec 2a 01 00       	push   $0x12aec
   1132d:	e8 f5 15 00 00       	call   12927 <log_printf>
   11332:	83 c4 10             	add    $0x10,%esp
}
   11335:	90                   	nop
   11336:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11339:	5b                   	pop    %ebx
   1133a:	5e                   	pop    %esi
   1133b:	5f                   	pop    %edi
   1133c:	5d                   	pop    %ebp
   1133d:	c3                   	ret    

0001133e <do_default_handler>:
static void do_default_handler(exception_frame_t *frame,const char *message)
{
   1133e:	55                   	push   %ebp
   1133f:	89 e5                	mov    %esp,%ebp
   11341:	83 ec 08             	sub    $0x8,%esp
    log_printf("---------------------\n");
   11344:	83 ec 0c             	sub    $0xc,%esp
   11347:	68 0b 2b 01 00       	push   $0x12b0b
   1134c:	e8 d6 15 00 00       	call   12927 <log_printf>
   11351:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s\n",message);
   11354:	83 ec 08             	sub    $0x8,%esp
   11357:	ff 75 0c             	pushl  0xc(%ebp)
   1135a:	68 22 2b 01 00       	push   $0x12b22
   1135f:	e8 c3 15 00 00       	call   12927 <log_printf>
   11364:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   11367:	83 ec 0c             	sub    $0xc,%esp
   1136a:	ff 75 08             	pushl  0x8(%ebp)
   1136d:	e8 e9 fe ff ff       	call   1125b <dump_core_regs>
   11372:	83 c4 10             	add    $0x10,%esp
    for(;;)
    {
        hlt();
   11375:	e8 bf fe ff ff       	call   11239 <hlt>
   1137a:	eb f9                	jmp    11375 <do_default_handler+0x37>

0001137c <do_handler_unknown>:
    }
}
void do_handler_unknown(exception_frame_t *frame)
{
   1137c:	55                   	push   %ebp
   1137d:	89 e5                	mov    %esp,%ebp
   1137f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"unknown exception");
   11382:	83 ec 08             	sub    $0x8,%esp
   11385:	68 3d 2b 01 00       	push   $0x12b3d
   1138a:	ff 75 08             	pushl  0x8(%ebp)
   1138d:	e8 ac ff ff ff       	call   1133e <do_default_handler>
   11392:	83 c4 10             	add    $0x10,%esp
}
   11395:	90                   	nop
   11396:	c9                   	leave  
   11397:	c3                   	ret    

00011398 <do_handler_divider>:
void do_handler_divider(exception_frame_t *frame)
{
   11398:	55                   	push   %ebp
   11399:	89 e5                	mov    %esp,%ebp
   1139b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"divider exception");
   1139e:	83 ec 08             	sub    $0x8,%esp
   113a1:	68 4f 2b 01 00       	push   $0x12b4f
   113a6:	ff 75 08             	pushl  0x8(%ebp)
   113a9:	e8 90 ff ff ff       	call   1133e <do_default_handler>
   113ae:	83 c4 10             	add    $0x10,%esp
}
   113b1:	90                   	nop
   113b2:	c9                   	leave  
   113b3:	c3                   	ret    

000113b4 <do_handler_debug>:
void do_handler_debug(exception_frame_t *frame)
{
   113b4:	55                   	push   %ebp
   113b5:	89 e5                	mov    %esp,%ebp
   113b7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"debug exception");
   113ba:	83 ec 08             	sub    $0x8,%esp
   113bd:	68 61 2b 01 00       	push   $0x12b61
   113c2:	ff 75 08             	pushl  0x8(%ebp)
   113c5:	e8 74 ff ff ff       	call   1133e <do_default_handler>
   113ca:	83 c4 10             	add    $0x10,%esp
}
   113cd:	90                   	nop
   113ce:	c9                   	leave  
   113cf:	c3                   	ret    

000113d0 <do_handler_nmi>:
void do_handler_nmi(exception_frame_t *frame)   
{
   113d0:	55                   	push   %ebp
   113d1:	89 e5                	mov    %esp,%ebp
   113d3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"nmi exception");
   113d6:	83 ec 08             	sub    $0x8,%esp
   113d9:	68 71 2b 01 00       	push   $0x12b71
   113de:	ff 75 08             	pushl  0x8(%ebp)
   113e1:	e8 58 ff ff ff       	call   1133e <do_default_handler>
   113e6:	83 c4 10             	add    $0x10,%esp
}
   113e9:	90                   	nop
   113ea:	c9                   	leave  
   113eb:	c3                   	ret    

000113ec <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t *frame)
{
   113ec:	55                   	push   %ebp
   113ed:	89 e5                	mov    %esp,%ebp
   113ef:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"breakpoint exception");
   113f2:	83 ec 08             	sub    $0x8,%esp
   113f5:	68 7f 2b 01 00       	push   $0x12b7f
   113fa:	ff 75 08             	pushl  0x8(%ebp)
   113fd:	e8 3c ff ff ff       	call   1133e <do_default_handler>
   11402:	83 c4 10             	add    $0x10,%esp
}
   11405:	90                   	nop
   11406:	c9                   	leave  
   11407:	c3                   	ret    

00011408 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   11408:	55                   	push   %ebp
   11409:	89 e5                	mov    %esp,%ebp
   1140b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"overflow exception");
   1140e:	83 ec 08             	sub    $0x8,%esp
   11411:	68 94 2b 01 00       	push   $0x12b94
   11416:	ff 75 08             	pushl  0x8(%ebp)
   11419:	e8 20 ff ff ff       	call   1133e <do_default_handler>
   1141e:	83 c4 10             	add    $0x10,%esp
}
   11421:	90                   	nop
   11422:	c9                   	leave  
   11423:	c3                   	ret    

00011424 <do_handler_bounds>:
void do_handler_bounds(exception_frame_t *frame)
{
   11424:	55                   	push   %ebp
   11425:	89 e5                	mov    %esp,%ebp
   11427:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"bounds exception");
   1142a:	83 ec 08             	sub    $0x8,%esp
   1142d:	68 a7 2b 01 00       	push   $0x12ba7
   11432:	ff 75 08             	pushl  0x8(%ebp)
   11435:	e8 04 ff ff ff       	call   1133e <do_default_handler>
   1143a:	83 c4 10             	add    $0x10,%esp
}
   1143d:	90                   	nop
   1143e:	c9                   	leave  
   1143f:	c3                   	ret    

00011440 <do_handler_invalid_op>:
void do_handler_invalid_op(exception_frame_t *frame)
{
   11440:	55                   	push   %ebp
   11441:	89 e5                	mov    %esp,%ebp
   11443:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid operation exception");
   11446:	83 ec 08             	sub    $0x8,%esp
   11449:	68 b8 2b 01 00       	push   $0x12bb8
   1144e:	ff 75 08             	pushl  0x8(%ebp)
   11451:	e8 e8 fe ff ff       	call   1133e <do_default_handler>
   11456:	83 c4 10             	add    $0x10,%esp
}
   11459:	90                   	nop
   1145a:	c9                   	leave  
   1145b:	c3                   	ret    

0001145c <do_handler_device_not_available>:
void do_handler_device_not_available(exception_frame_t *frame)
{
   1145c:	55                   	push   %ebp
   1145d:	89 e5                	mov    %esp,%ebp
   1145f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"device not available exception");
   11462:	83 ec 08             	sub    $0x8,%esp
   11465:	68 d4 2b 01 00       	push   $0x12bd4
   1146a:	ff 75 08             	pushl  0x8(%ebp)
   1146d:	e8 cc fe ff ff       	call   1133e <do_default_handler>
   11472:	83 c4 10             	add    $0x10,%esp
}
   11475:	90                   	nop
   11476:	c9                   	leave  
   11477:	c3                   	ret    

00011478 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   11478:	55                   	push   %ebp
   11479:	89 e5                	mov    %esp,%ebp
   1147b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"double fault exception");
   1147e:	83 ec 08             	sub    $0x8,%esp
   11481:	68 f3 2b 01 00       	push   $0x12bf3
   11486:	ff 75 08             	pushl  0x8(%ebp)
   11489:	e8 b0 fe ff ff       	call   1133e <do_default_handler>
   1148e:	83 c4 10             	add    $0x10,%esp
}
   11491:	90                   	nop
   11492:	c9                   	leave  
   11493:	c3                   	ret    

00011494 <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   11494:	55                   	push   %ebp
   11495:	89 e5                	mov    %esp,%ebp
   11497:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"invalid tss exception");
   1149a:	83 ec 08             	sub    $0x8,%esp
   1149d:	68 0a 2c 01 00       	push   $0x12c0a
   114a2:	ff 75 08             	pushl  0x8(%ebp)
   114a5:	e8 94 fe ff ff       	call   1133e <do_default_handler>
   114aa:	83 c4 10             	add    $0x10,%esp
}
   114ad:	90                   	nop
   114ae:	c9                   	leave  
   114af:	c3                   	ret    

000114b0 <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   114b0:	55                   	push   %ebp
   114b1:	89 e5                	mov    %esp,%ebp
   114b3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"segment not present exception");
   114b6:	83 ec 08             	sub    $0x8,%esp
   114b9:	68 20 2c 01 00       	push   $0x12c20
   114be:	ff 75 08             	pushl  0x8(%ebp)
   114c1:	e8 78 fe ff ff       	call   1133e <do_default_handler>
   114c6:	83 c4 10             	add    $0x10,%esp
}
   114c9:	90                   	nop
   114ca:	c9                   	leave  
   114cb:	c3                   	ret    

000114cc <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   114cc:	55                   	push   %ebp
   114cd:	89 e5                	mov    %esp,%ebp
   114cf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"stack segment fault exception");
   114d2:	83 ec 08             	sub    $0x8,%esp
   114d5:	68 3e 2c 01 00       	push   $0x12c3e
   114da:	ff 75 08             	pushl  0x8(%ebp)
   114dd:	e8 5c fe ff ff       	call   1133e <do_default_handler>
   114e2:	83 c4 10             	add    $0x10,%esp
}
   114e5:	90                   	nop
   114e6:	c9                   	leave  
   114e7:	c3                   	ret    

000114e8 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   114e8:	55                   	push   %ebp
   114e9:	89 e5                	mov    %esp,%ebp
   114eb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"general protection exception");
   114ee:	83 ec 08             	sub    $0x8,%esp
   114f1:	68 5c 2c 01 00       	push   $0x12c5c
   114f6:	ff 75 08             	pushl  0x8(%ebp)
   114f9:	e8 40 fe ff ff       	call   1133e <do_default_handler>
   114fe:	83 c4 10             	add    $0x10,%esp
}
   11501:	90                   	nop
   11502:	c9                   	leave  
   11503:	c3                   	ret    

00011504 <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   11504:	55                   	push   %ebp
   11505:	89 e5                	mov    %esp,%ebp
   11507:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"page fault exception");
   1150a:	83 ec 08             	sub    $0x8,%esp
   1150d:	68 79 2c 01 00       	push   $0x12c79
   11512:	ff 75 08             	pushl  0x8(%ebp)
   11515:	e8 24 fe ff ff       	call   1133e <do_default_handler>
   1151a:	83 c4 10             	add    $0x10,%esp
}
   1151d:	90                   	nop
   1151e:	c9                   	leave  
   1151f:	c3                   	ret    

00011520 <do_handler_x87_floating_point>:
void do_handler_x87_floating_point(exception_frame_t *frame)
{   
   11520:	55                   	push   %ebp
   11521:	89 e5                	mov    %esp,%ebp
   11523:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"x87 floating point exception");
   11526:	83 ec 08             	sub    $0x8,%esp
   11529:	68 8e 2c 01 00       	push   $0x12c8e
   1152e:	ff 75 08             	pushl  0x8(%ebp)
   11531:	e8 08 fe ff ff       	call   1133e <do_default_handler>
   11536:	83 c4 10             	add    $0x10,%esp
}
   11539:	90                   	nop
   1153a:	c9                   	leave  
   1153b:	c3                   	ret    

0001153c <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   1153c:	55                   	push   %ebp
   1153d:	89 e5                	mov    %esp,%ebp
   1153f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"alignment check exception");
   11542:	83 ec 08             	sub    $0x8,%esp
   11545:	68 ab 2c 01 00       	push   $0x12cab
   1154a:	ff 75 08             	pushl  0x8(%ebp)
   1154d:	e8 ec fd ff ff       	call   1133e <do_default_handler>
   11552:	83 c4 10             	add    $0x10,%esp
}
   11555:	90                   	nop
   11556:	c9                   	leave  
   11557:	c3                   	ret    

00011558 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   11558:	55                   	push   %ebp
   11559:	89 e5                	mov    %esp,%ebp
   1155b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"machine check exception");
   1155e:	83 ec 08             	sub    $0x8,%esp
   11561:	68 c5 2c 01 00       	push   $0x12cc5
   11566:	ff 75 08             	pushl  0x8(%ebp)
   11569:	e8 d0 fd ff ff       	call   1133e <do_default_handler>
   1156e:	83 c4 10             	add    $0x10,%esp
}
   11571:	90                   	nop
   11572:	c9                   	leave  
   11573:	c3                   	ret    

00011574 <do_handler_simd_floating_point>:
void do_handler_simd_floating_point(exception_frame_t *frame)
{
   11574:	55                   	push   %ebp
   11575:	89 e5                	mov    %esp,%ebp
   11577:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"simd floating point exception");
   1157a:	83 ec 08             	sub    $0x8,%esp
   1157d:	68 dd 2c 01 00       	push   $0x12cdd
   11582:	ff 75 08             	pushl  0x8(%ebp)
   11585:	e8 b4 fd ff ff       	call   1133e <do_default_handler>
   1158a:	83 c4 10             	add    $0x10,%esp
}
   1158d:	90                   	nop
   1158e:	c9                   	leave  
   1158f:	c3                   	ret    

00011590 <do_handler_virtualization>:
void do_handler_virtualization(exception_frame_t *frame)
{
   11590:	55                   	push   %ebp
   11591:	89 e5                	mov    %esp,%ebp
   11593:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"virtualization exception");
   11596:	83 ec 08             	sub    $0x8,%esp
   11599:	68 fb 2c 01 00       	push   $0x12cfb
   1159e:	ff 75 08             	pushl  0x8(%ebp)
   115a1:	e8 98 fd ff ff       	call   1133e <do_default_handler>
   115a6:	83 c4 10             	add    $0x10,%esp
}
   115a9:	90                   	nop
   115aa:	c9                   	leave  
   115ab:	c3                   	ret    

000115ac <do_handler_security>:
void do_handler_security(exception_frame_t *frame)
{
   115ac:	55                   	push   %ebp
   115ad:	89 e5                	mov    %esp,%ebp
   115af:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame,"security exception");
   115b2:	83 ec 08             	sub    $0x8,%esp
   115b5:	68 14 2d 01 00       	push   $0x12d14
   115ba:	ff 75 08             	pushl  0x8(%ebp)
   115bd:	e8 7c fd ff ff       	call   1133e <do_default_handler>
   115c2:	83 c4 10             	add    $0x10,%esp
}
   115c5:	90                   	nop
   115c6:	c9                   	leave  
   115c7:	c3                   	ret    

000115c8 <init_pic>:

static void init_pic(void)
{
   115c8:	55                   	push   %ebp
   115c9:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   115cb:	6a 11                	push   $0x11
   115cd:	6a 20                	push   $0x20
   115cf:	e8 10 fc ff ff       	call   111e4 <outb>
   115d4:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2,IRQ_PIC_START);
   115d7:	6a 20                	push   $0x20
   115d9:	6a 21                	push   $0x21
   115db:	e8 04 fc ff ff       	call   111e4 <outb>
   115e0:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3,1 << IRQ2_NMI);
   115e3:	6a 04                	push   $0x4
   115e5:	6a 21                	push   $0x21
   115e7:	e8 f8 fb ff ff       	call   111e4 <outb>
   115ec:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4,PIC_ICW4_8086);
   115ef:	6a 01                	push   $0x1
   115f1:	6a 21                	push   $0x21
   115f3:	e8 ec fb ff ff       	call   111e4 <outb>
   115f8:	83 c4 08             	add    $0x8,%esp


    outb(PIC1_ICW1,PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   115fb:	6a 11                	push   $0x11
   115fd:	68 a0 00 00 00       	push   $0xa0
   11602:	e8 dd fb ff ff       	call   111e4 <outb>
   11607:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2,IRQ_PIC_START + 8);
   1160a:	6a 28                	push   $0x28
   1160c:	68 a1 00 00 00       	push   $0xa1
   11611:	e8 ce fb ff ff       	call   111e4 <outb>
   11616:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3,2);
   11619:	6a 02                	push   $0x2
   1161b:	68 a1 00 00 00       	push   $0xa1
   11620:	e8 bf fb ff ff       	call   111e4 <outb>
   11625:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4,PIC_ICW4_8086);
   11628:	6a 01                	push   $0x1
   1162a:	68 a1 00 00 00       	push   $0xa1
   1162f:	e8 b0 fb ff ff       	call   111e4 <outb>
   11634:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR,0xff & ~ (1 << 2));
   11637:	68 fb 00 00 00       	push   $0xfb
   1163c:	6a 21                	push   $0x21
   1163e:	e8 a1 fb ff ff       	call   111e4 <outb>
   11643:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR,0xff);
   11646:	68 ff 00 00 00       	push   $0xff
   1164b:	68 a1 00 00 00       	push   $0xa1
   11650:	e8 8f fb ff ff       	call   111e4 <outb>
   11655:	83 c4 08             	add    $0x8,%esp
}
   11658:	90                   	nop
   11659:	c9                   	leave  
   1165a:	c3                   	ret    

0001165b <irq_init>:

void irq_init(void)
{
   1165b:	55                   	push   %ebp
   1165c:	89 e5                	mov    %esp,%ebp
   1165e:	83 ec 18             	sub    $0x18,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   11661:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11668:	eb 25                	jmp    1168f <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, 
   1166a:	ba 4f 00 01 00       	mov    $0x1004f,%edx
   1166f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11672:	c1 e0 03             	shl    $0x3,%eax
   11675:	05 00 7a 01 00       	add    $0x17a00,%eax
   1167a:	68 00 8e 00 00       	push   $0x8e00
   1167f:	52                   	push   %edx
   11680:	6a 08                	push   $0x8
   11682:	50                   	push   %eax
   11683:	e8 b5 f9 ff ff       	call   1103d <gate_desc_set>
   11688:	83 c4 10             	add    $0x10,%esp
    for(int i = 0; i < IRQ_TABLE_NU; i++)
   1168b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1168f:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11693:	7e d5                	jle    1166a <irq_init+0xf>
        GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    }
    //irq_install(IRQ0_DE,do_handler_divider); 用这个的话能进入do_handler_divider 但是跳不到.S的地方出栈
    irq_install(IRQ0_DE,exception_handler_divider);
   11695:	83 ec 08             	sub    $0x8,%esp
   11698:	68 6e 00 01 00       	push   $0x1006e
   1169d:	6a 00                	push   $0x0
   1169f:	e8 77 01 00 00       	call   1181b <irq_install>
   116a4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB,exception_handler_debug);
   116a7:	83 ec 08             	sub    $0x8,%esp
   116aa:	68 8d 00 01 00       	push   $0x1008d
   116af:	6a 01                	push   $0x1
   116b1:	e8 65 01 00 00       	call   1181b <irq_install>
   116b6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI,exception_handler_nmi);
   116b9:	83 ec 08             	sub    $0x8,%esp
   116bc:	68 ac 00 01 00       	push   $0x100ac
   116c1:	6a 02                	push   $0x2
   116c3:	e8 53 01 00 00       	call   1181b <irq_install>
   116c8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP,exception_handler_breakpoint);
   116cb:	83 ec 08             	sub    $0x8,%esp
   116ce:	68 cb 00 01 00       	push   $0x100cb
   116d3:	6a 03                	push   $0x3
   116d5:	e8 41 01 00 00       	call   1181b <irq_install>
   116da:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF,exception_handler_overflow);
   116dd:	83 ec 08             	sub    $0x8,%esp
   116e0:	68 ea 00 01 00       	push   $0x100ea
   116e5:	6a 04                	push   $0x4
   116e7:	e8 2f 01 00 00       	call   1181b <irq_install>
   116ec:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR,exception_handler_bounds);
   116ef:	83 ec 08             	sub    $0x8,%esp
   116f2:	68 09 01 01 00       	push   $0x10109
   116f7:	6a 05                	push   $0x5
   116f9:	e8 1d 01 00 00       	call   1181b <irq_install>
   116fe:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD,exception_handler_invalid_op);
   11701:	83 ec 08             	sub    $0x8,%esp
   11704:	68 28 01 01 00       	push   $0x10128
   11709:	6a 06                	push   $0x6
   1170b:	e8 0b 01 00 00       	call   1181b <irq_install>
   11710:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM,exception_handler_device_not_available);
   11713:	83 ec 08             	sub    $0x8,%esp
   11716:	68 47 01 01 00       	push   $0x10147
   1171b:	6a 07                	push   $0x7
   1171d:	e8 f9 00 00 00       	call   1181b <irq_install>
   11722:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF,exception_handler_double_fault);
   11725:	83 ec 08             	sub    $0x8,%esp
   11728:	68 66 01 01 00       	push   $0x10166
   1172d:	6a 08                	push   $0x8
   1172f:	e8 e7 00 00 00       	call   1181b <irq_install>
   11734:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS,exception_handler_invalid_tss);
   11737:	83 ec 08             	sub    $0x8,%esp
   1173a:	68 83 01 01 00       	push   $0x10183
   1173f:	6a 0a                	push   $0xa
   11741:	e8 d5 00 00 00       	call   1181b <irq_install>
   11746:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP,exception_handler_segment_not_present);
   11749:	83 ec 08             	sub    $0x8,%esp
   1174c:	68 a0 01 01 00       	push   $0x101a0
   11751:	6a 0b                	push   $0xb
   11753:	e8 c3 00 00 00       	call   1181b <irq_install>
   11758:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS,exception_handler_stack_segment_fault);
   1175b:	83 ec 08             	sub    $0x8,%esp
   1175e:	68 bd 01 01 00       	push   $0x101bd
   11763:	6a 0c                	push   $0xc
   11765:	e8 b1 00 00 00       	call   1181b <irq_install>
   1176a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP,exception_handler_general_protection);
   1176d:	83 ec 08             	sub    $0x8,%esp
   11770:	68 da 01 01 00       	push   $0x101da
   11775:	6a 0d                	push   $0xd
   11777:	e8 9f 00 00 00       	call   1181b <irq_install>
   1177c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF,exception_handler_page_fault);
   1177f:	83 ec 08             	sub    $0x8,%esp
   11782:	68 f7 01 01 00       	push   $0x101f7
   11787:	6a 0e                	push   $0xe
   11789:	e8 8d 00 00 00       	call   1181b <irq_install>
   1178e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF,exception_handler_x87_floating_point);
   11791:	83 ec 08             	sub    $0x8,%esp
   11794:	68 14 02 01 00       	push   $0x10214
   11799:	6a 10                	push   $0x10
   1179b:	e8 7b 00 00 00       	call   1181b <irq_install>
   117a0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC,exception_handler_alignment_check);
   117a3:	83 ec 08             	sub    $0x8,%esp
   117a6:	68 33 02 01 00       	push   $0x10233
   117ab:	6a 11                	push   $0x11
   117ad:	e8 69 00 00 00       	call   1181b <irq_install>
   117b2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC,exception_handler_machine_check);
   117b5:	83 ec 08             	sub    $0x8,%esp
   117b8:	68 50 02 01 00       	push   $0x10250
   117bd:	6a 12                	push   $0x12
   117bf:	e8 57 00 00 00       	call   1181b <irq_install>
   117c4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM,exception_handler_simd_floating_point);
   117c7:	83 ec 08             	sub    $0x8,%esp
   117ca:	68 6f 02 01 00       	push   $0x1026f
   117cf:	6a 13                	push   $0x13
   117d1:	e8 45 00 00 00       	call   1181b <irq_install>
   117d6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE,exception_handler_virtualization);
   117d9:	83 ec 08             	sub    $0x8,%esp
   117dc:	68 8e 02 01 00       	push   $0x1028e
   117e1:	6a 14                	push   $0x14
   117e3:	e8 33 00 00 00       	call   1181b <irq_install>
   117e8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP,exception_handler_security);
   117eb:	83 ec 08             	sub    $0x8,%esp
   117ee:	68 ad 02 01 00       	push   $0x102ad
   117f3:	6a 15                	push   $0x15
   117f5:	e8 21 00 00 00       	call   1181b <irq_install>
   117fa:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   117fd:	b8 00 7a 01 00       	mov    $0x17a00,%eax
   11802:	83 ec 08             	sub    $0x8,%esp
   11805:	68 00 04 00 00       	push   $0x400
   1180a:	50                   	push   %eax
   1180b:	e8 01 fa ff ff       	call   11211 <lidt>
   11810:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11813:	e8 b0 fd ff ff       	call   115c8 <init_pic>
}
   11818:	90                   	nop
   11819:	c9                   	leave  
   1181a:	c3                   	ret    

0001181b <irq_install>:

int irq_install(int irq_num,irq_handler_t handler)
{
   1181b:	55                   	push   %ebp
   1181c:	89 e5                	mov    %esp,%ebp
   1181e:	83 ec 08             	sub    $0x8,%esp
    if(irq_num < 0 || irq_num >= IRQ_TABLE_NU)
   11821:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11825:	78 06                	js     1182d <irq_install+0x12>
   11827:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1182b:	7e 07                	jle    11834 <irq_install+0x19>
    {
        return -1;
   1182d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11832:	eb 25                	jmp    11859 <irq_install+0x3e>
    }
    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   11834:	8b 45 0c             	mov    0xc(%ebp),%eax
   11837:	8b 55 08             	mov    0x8(%ebp),%edx
   1183a:	c1 e2 03             	shl    $0x3,%edx
   1183d:	81 c2 00 7a 01 00    	add    $0x17a00,%edx
   11843:	68 00 8e 00 00       	push   $0x8e00
   11848:	50                   	push   %eax
   11849:	6a 08                	push   $0x8
   1184b:	52                   	push   %edx
   1184c:	e8 ec f7 ff ff       	call   1103d <gate_desc_set>
   11851:	83 c4 10             	add    $0x10,%esp
    GATE_P_PRESENT | GATE_DPL_0 | GATE_TYPE_INT);
    return 0;
   11854:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11859:	c9                   	leave  
   1185a:	c3                   	ret    

0001185b <irq_enable>:

void irq_enable(int irq_num)
{
   1185b:	55                   	push   %ebp
   1185c:	89 e5                	mov    %esp,%ebp
   1185e:	53                   	push   %ebx
   1185f:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   11862:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11866:	7e 78                	jle    118e0 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11868:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   1186c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11870:	7f 32                	jg     118a4 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11872:	6a 21                	push   $0x21
   11874:	e8 4e f9 ff ff       	call   111c7 <inb>
   11879:	83 c4 04             	add    $0x4,%esp
   1187c:	89 c2                	mov    %eax,%edx
   1187e:	8b 45 08             	mov    0x8(%ebp),%eax
   11881:	bb 01 00 00 00       	mov    $0x1,%ebx
   11886:	89 c1                	mov    %eax,%ecx
   11888:	d3 e3                	shl    %cl,%ebx
   1188a:	89 d8                	mov    %ebx,%eax
   1188c:	f7 d0                	not    %eax
   1188e:	21 d0                	and    %edx,%eax
   11890:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   11893:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11897:	50                   	push   %eax
   11898:	6a 21                	push   $0x21
   1189a:	e8 45 f9 ff ff       	call   111e4 <outb>
   1189f:	83 c4 08             	add    $0x8,%esp
   118a2:	eb 3d                	jmp    118e1 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   118a4:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num));
   118a8:	68 a1 00 00 00       	push   $0xa1
   118ad:	e8 15 f9 ff ff       	call   111c7 <inb>
   118b2:	83 c4 04             	add    $0x4,%esp
   118b5:	89 c2                	mov    %eax,%edx
   118b7:	8b 45 08             	mov    0x8(%ebp),%eax
   118ba:	bb 01 00 00 00       	mov    $0x1,%ebx
   118bf:	89 c1                	mov    %eax,%ecx
   118c1:	d3 e3                	shl    %cl,%ebx
   118c3:	89 d8                	mov    %ebx,%eax
   118c5:	f7 d0                	not    %eax
   118c7:	21 d0                	and    %edx,%eax
   118c9:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   118cc:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   118d0:	50                   	push   %eax
   118d1:	68 a1 00 00 00       	push   $0xa1
   118d6:	e8 09 f9 ff ff       	call   111e4 <outb>
   118db:	83 c4 08             	add    $0x8,%esp
   118de:	eb 01                	jmp    118e1 <irq_enable+0x86>
        return;
   118e0:	90                   	nop
    }
}
   118e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   118e4:	c9                   	leave  
   118e5:	c3                   	ret    

000118e6 <irq_disable>:

void irq_disable(int irq_num)
{
   118e6:	55                   	push   %ebp
   118e7:	89 e5                	mov    %esp,%ebp
   118e9:	53                   	push   %ebx
   118ea:	83 ec 10             	sub    $0x10,%esp
    if(irq_num < IRQ_PIC_START)
   118ed:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   118f1:	7e 78                	jle    1196b <irq_disable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   118f3:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num < 8)
   118f7:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   118fb:	7f 32                	jg     1192f <irq_disable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) | ~(1 << irq_num);
   118fd:	6a 21                	push   $0x21
   118ff:	e8 c3 f8 ff ff       	call   111c7 <inb>
   11904:	83 c4 04             	add    $0x4,%esp
   11907:	89 c3                	mov    %eax,%ebx
   11909:	8b 45 08             	mov    0x8(%ebp),%eax
   1190c:	ba 01 00 00 00       	mov    $0x1,%edx
   11911:	89 c1                	mov    %eax,%ecx
   11913:	d3 e2                	shl    %cl,%edx
   11915:	89 d0                	mov    %edx,%eax
   11917:	f7 d0                	not    %eax
   11919:	09 d8                	or     %ebx,%eax
   1191b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR,mask);
   1191e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11922:	50                   	push   %eax
   11923:	6a 21                	push   $0x21
   11925:	e8 ba f8 ff ff       	call   111e4 <outb>
   1192a:	83 c4 08             	add    $0x8,%esp
   1192d:	eb 3d                	jmp    1196c <irq_disable+0x86>
    }
    else
    {
        irq_num -= 8;
   1192f:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | ~(1 << (irq_num));
   11933:	68 a1 00 00 00       	push   $0xa1
   11938:	e8 8a f8 ff ff       	call   111c7 <inb>
   1193d:	83 c4 04             	add    $0x4,%esp
   11940:	89 c3                	mov    %eax,%ebx
   11942:	8b 45 08             	mov    0x8(%ebp),%eax
   11945:	ba 01 00 00 00       	mov    $0x1,%edx
   1194a:	89 c1                	mov    %eax,%ecx
   1194c:	d3 e2                	shl    %cl,%edx
   1194e:	89 d0                	mov    %edx,%eax
   11950:	f7 d0                	not    %eax
   11952:	09 d8                	or     %ebx,%eax
   11954:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR,mask);
   11957:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1195b:	50                   	push   %eax
   1195c:	68 a1 00 00 00       	push   $0xa1
   11961:	e8 7e f8 ff ff       	call   111e4 <outb>
   11966:	83 c4 08             	add    $0x8,%esp
   11969:	eb 01                	jmp    1196c <irq_disable+0x86>
        return;
   1196b:	90                   	nop
    }
}
   1196c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1196f:	c9                   	leave  
   11970:	c3                   	ret    

00011971 <irq_disable_global>:
void irq_disable_global(void)
{
   11971:	55                   	push   %ebp
   11972:	89 e5                	mov    %esp,%ebp
    cli();
   11974:	e8 8a f8 ff ff       	call   11203 <cli>
}
   11979:	90                   	nop
   1197a:	5d                   	pop    %ebp
   1197b:	c3                   	ret    

0001197c <irq_enable_global>:

void irq_enable_global(void)
{
   1197c:	55                   	push   %ebp
   1197d:	89 e5                	mov    %esp,%ebp
    sti();
   1197f:	e8 86 f8 ff ff       	call   1120a <sti>
}
   11984:	90                   	nop
   11985:	5d                   	pop    %ebp
   11986:	c3                   	ret    

00011987 <pic_send_eoi>:
void pic_send_eoi(int irq_num)
{
   11987:	55                   	push   %ebp
   11988:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   1198a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if(irq_num >= 8)
   1198e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11992:	7e 0f                	jle    119a3 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2,PIC_OCW2_EOI);
   11994:	6a 20                	push   $0x20
   11996:	68 a0 00 00 00       	push   $0xa0
   1199b:	e8 44 f8 ff ff       	call   111e4 <outb>
   119a0:	83 c4 08             	add    $0x8,%esp
    }
    outb(PIC0_OCW2,PIC_OCW2_EOI);
   119a3:	6a 20                	push   $0x20
   119a5:	6a 20                	push   $0x20
   119a7:	e8 38 f8 ff ff       	call   111e4 <outb>
   119ac:	83 c4 08             	add    $0x8,%esp
}
   119af:	90                   	nop
   119b0:	c9                   	leave  
   119b1:	c3                   	ret    

000119b2 <irq_enter_protection>:

irq_state_t irq_enter_protection(void)
{
   119b2:	55                   	push   %ebp
   119b3:	89 e5                	mov    %esp,%ebp
   119b5:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   119b8:	e8 83 f8 ff ff       	call   11240 <read_eflags>
   119bd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   119c0:	e8 ac ff ff ff       	call   11971 <irq_disable_global>
    return state;
   119c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   119c8:	c9                   	leave  
   119c9:	c3                   	ret    

000119ca <irq_leave_protection>:

void irq_leave_protection(irq_state_t state)
{
   119ca:	55                   	push   %ebp
   119cb:	89 e5                	mov    %esp,%ebp
    
    write_eflags(state);
   119cd:	ff 75 08             	pushl  0x8(%ebp)
   119d0:	e8 7b f8 ff ff       	call   11250 <write_eflags>
   119d5:	83 c4 04             	add    $0x4,%esp
}
   119d8:	90                   	nop
   119d9:	c9                   	leave  
   119da:	c3                   	ret    

000119db <outb>:
{
   119db:	55                   	push   %ebp
   119dc:	89 e5                	mov    %esp,%ebp
   119de:	83 ec 08             	sub    $0x8,%esp
   119e1:	8b 55 08             	mov    0x8(%ebp),%edx
   119e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   119e7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   119eb:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   119ee:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   119f2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   119f6:	ee                   	out    %al,(%dx)
}
   119f7:	90                   	nop
   119f8:	c9                   	leave  
   119f9:	c3                   	ret    

000119fa <do_handler_time>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
void do_handler_time(exception_frame_t *frame)
{
   119fa:	55                   	push   %ebp
   119fb:	89 e5                	mov    %esp,%ebp
   119fd:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11a00:	a1 00 7e 01 00       	mov    0x17e00,%eax
   11a05:	83 c0 01             	add    $0x1,%eax
   11a08:	a3 00 7e 01 00       	mov    %eax,0x17e00
    pic_send_eoi(IRQ0_TIMER);
   11a0d:	83 ec 0c             	sub    $0xc,%esp
   11a10:	6a 20                	push   $0x20
   11a12:	e8 70 ff ff ff       	call   11987 <pic_send_eoi>
   11a17:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   11a1a:	e8 2e f3 ff ff       	call   10d4d <task_time_tick>
    
}
   11a1f:	90                   	nop
   11a20:	c9                   	leave  
   11a21:	c3                   	ret    

00011a22 <init_pit>:
static void init_pit(void)
{
   11a22:	55                   	push   %ebp
   11a23:	89 e5                	mov    %esp,%ebp
   11a25:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = (PIT_OSC_FREQ * OS_TICK_MS )/ 1000.0;
   11a28:	c7 45 f4 85 74 00 00 	movl   $0x7485,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT,PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11a2f:	6a 36                	push   $0x36
   11a31:	6a 43                	push   $0x43
   11a33:	e8 a3 ff ff ff       	call   119db <outb>
   11a38:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,reload_count & 0xff);
   11a3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a3e:	0f b6 c0             	movzbl %al,%eax
   11a41:	50                   	push   %eax
   11a42:	6a 40                	push   $0x40
   11a44:	e8 92 ff ff ff       	call   119db <outb>
   11a49:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT,(reload_count >> 8) & 0xff);
   11a4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a4f:	c1 e8 08             	shr    $0x8,%eax
   11a52:	0f b6 c0             	movzbl %al,%eax
   11a55:	50                   	push   %eax
   11a56:	6a 40                	push   $0x40
   11a58:	e8 7e ff ff ff       	call   119db <outb>
   11a5d:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER,exception_handler_time);
   11a60:	83 ec 08             	sub    $0x8,%esp
   11a63:	68 2b 00 01 00       	push   $0x1002b
   11a68:	6a 20                	push   $0x20
   11a6a:	e8 ac fd ff ff       	call   1181b <irq_install>
   11a6f:	83 c4 10             	add    $0x10,%esp

    irq_enable(IRQ0_TIMER);
   11a72:	83 ec 0c             	sub    $0xc,%esp
   11a75:	6a 20                	push   $0x20
   11a77:	e8 df fd ff ff       	call   1185b <irq_enable>
   11a7c:	83 c4 10             	add    $0x10,%esp
}
   11a7f:	90                   	nop
   11a80:	c9                   	leave  
   11a81:	c3                   	ret    

00011a82 <time_init>:
void time_init(void)
{
   11a82:	55                   	push   %ebp
   11a83:	89 e5                	mov    %esp,%ebp
   11a85:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11a88:	c7 05 00 7e 01 00 00 	movl   $0x0,0x17e00
   11a8f:	00 00 00 
    init_pit();
   11a92:	e8 8b ff ff ff       	call   11a22 <init_pit>
}
   11a97:	90                   	nop
   11a98:	c9                   	leave  
   11a99:	c3                   	ret    

00011a9a <kernel_init>:
#include "ipc/sem.h"
#include "ipc/mutex.h"
#include "core/memory.h"
#include "dev/time.h"
void kernel_init(boot_info_t * boot_info)
{
   11a9a:	55                   	push   %ebp
   11a9b:	89 e5                	mov    %esp,%ebp
   11a9d:	83 ec 08             	sub    $0x8,%esp
    //ASSERT(boot_info->ram_region_count != 2);
    cpu_init();
   11aa0:	e8 f0 f6 ff ff       	call   11195 <cpu_init>
    memory_init(boot_info);
   11aa5:	83 ec 0c             	sub    $0xc,%esp
   11aa8:	ff 75 08             	pushl  0x8(%ebp)
   11aab:	e8 a1 ec ff ff       	call   10751 <memory_init>
   11ab0:	83 c4 10             	add    $0x10,%esp
    log_init(); 
   11ab3:	e8 d2 0d 00 00       	call   1288a <log_init>
    irq_init();
   11ab8:	e8 9e fb ff ff       	call   1165b <irq_init>
    time_init();
   11abd:	e8 c0 ff ff ff       	call   11a82 <time_init>

    task_manager_init();
   11ac2:	e8 0f f0 ff ff       	call   10ad6 <task_manager_init>
}
   11ac7:	90                   	nop
   11ac8:	c9                   	leave  
   11ac9:	c3                   	ret    

00011aca <init_task_entry>:
static uint32_t test_task_stack[1024];

static sem_t sem;
static mutex_t mutex;
void init_task_entry(void)
{
   11aca:	55                   	push   %ebp
   11acb:	89 e5                	mov    %esp,%ebp
   11acd:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11ad0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;)
    {
        sys_sleep(3000);
   11ad7:	83 ec 0c             	sub    $0xc,%esp
   11ada:	68 b8 0b 00 00       	push   $0xbb8
   11adf:	e8 37 f4 ff ff       	call   10f1b <sys_sleep>
   11ae4:	83 c4 10             	add    $0x10,%esp
        mutex_lock(&mutex);
   11ae7:	83 ec 0c             	sub    $0xc,%esp
   11aea:	68 b0 9f 01 00       	push   $0x19fb0
   11aef:	e8 a0 01 00 00       	call   11c94 <mutex_lock>
   11af4:	83 c4 10             	add    $0x10,%esp
        log_printf("init task count = %d\n", count++);
   11af7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11afa:	8d 50 01             	lea    0x1(%eax),%edx
   11afd:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11b00:	83 ec 08             	sub    $0x8,%esp
   11b03:	50                   	push   %eax
   11b04:	68 27 2d 01 00       	push   $0x12d27
   11b09:	e8 19 0e 00 00       	call   12927 <log_printf>
   11b0e:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11b11:	83 ec 0c             	sub    $0xc,%esp
   11b14:	68 e8 03 00 00       	push   $0x3e8
   11b19:	e8 fd f3 ff ff       	call   10f1b <sys_sleep>
   11b1e:	83 c4 10             	add    $0x10,%esp
        mutex_unlock(&mutex);
   11b21:	83 ec 0c             	sub    $0xc,%esp
   11b24:	68 b0 9f 01 00       	push   $0x19fb0
   11b29:	e8 f6 01 00 00       	call   11d24 <mutex_unlock>
   11b2e:	83 c4 10             	add    $0x10,%esp
        sys_sleep(3000);
   11b31:	eb a4                	jmp    11ad7 <init_task_entry+0xd>

00011b33 <test_task_entry>:
    }
}

void test_task_entry(void)
{
   11b33:	55                   	push   %ebp
   11b34:	89 e5                	mov    %esp,%ebp
   11b36:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11b39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;)
    {
        sys_sleep(4000);
   11b40:	83 ec 0c             	sub    $0xc,%esp
   11b43:	68 a0 0f 00 00       	push   $0xfa0
   11b48:	e8 ce f3 ff ff       	call   10f1b <sys_sleep>
   11b4d:	83 c4 10             	add    $0x10,%esp
        mutex_lock(&mutex);
   11b50:	83 ec 0c             	sub    $0xc,%esp
   11b53:	68 b0 9f 01 00       	push   $0x19fb0
   11b58:	e8 37 01 00 00       	call   11c94 <mutex_lock>
   11b5d:	83 c4 10             	add    $0x10,%esp
        log_printf("init idle count = %d\n", count++);
   11b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b63:	8d 50 01             	lea    0x1(%eax),%edx
   11b66:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11b69:	83 ec 08             	sub    $0x8,%esp
   11b6c:	50                   	push   %eax
   11b6d:	68 3d 2d 01 00       	push   $0x12d3d
   11b72:	e8 b0 0d 00 00       	call   12927 <log_printf>
   11b77:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11b7a:	83 ec 0c             	sub    $0xc,%esp
   11b7d:	68 e8 03 00 00       	push   $0x3e8
   11b82:	e8 94 f3 ff ff       	call   10f1b <sys_sleep>
   11b87:	83 c4 10             	add    $0x10,%esp
        mutex_unlock(&mutex);
   11b8a:	83 ec 0c             	sub    $0xc,%esp
   11b8d:	68 b0 9f 01 00       	push   $0x19fb0
   11b92:	e8 8d 01 00 00       	call   11d24 <mutex_unlock>
   11b97:	83 c4 10             	add    $0x10,%esp
        sys_sleep(4000);
   11b9a:	eb a4                	jmp    11b40 <test_task_entry+0xd>

00011b9c <init_main>:
    }
}

void init_main(void)
{
   11b9c:	55                   	push   %ebp
   11b9d:	89 e5                	mov    %esp,%ebp
   11b9f:	83 ec 18             	sub    $0x18,%esp
    sem_init(&sem,0);
   11ba2:	83 ec 08             	sub    $0x8,%esp
   11ba5:	6a 00                	push   $0x0
   11ba7:	68 a0 9f 01 00       	push   $0x19fa0
   11bac:	e8 38 02 00 00       	call   11de9 <sem_init>
   11bb1:	83 c4 10             	add    $0x10,%esp
    log_printf("init main\n");
   11bb4:	83 ec 0c             	sub    $0xc,%esp
   11bb7:	68 53 2d 01 00       	push   $0x12d53
   11bbc:	e8 66 0d 00 00       	call   12927 <log_printf>
   11bc1:	83 c4 10             	add    $0x10,%esp
    task_init(&init_task,"init_task",(uint32_t)init_task_entry,(uint32_t)&init_task_stack[1024]);
   11bc4:	ba e0 8e 01 00       	mov    $0x18ee0,%edx
   11bc9:	b8 ca 1a 01 00       	mov    $0x11aca,%eax
   11bce:	52                   	push   %edx
   11bcf:	50                   	push   %eax
   11bd0:	68 5e 2d 01 00       	push   $0x12d5e
   11bd5:	68 20 7e 01 00       	push   $0x17e20
   11bda:	e8 af ed ff ff       	call   1098e <task_init>
   11bdf:	83 c4 10             	add    $0x10,%esp
    task_init(&test_task,"test_task",(uint32_t)test_task_entry,(uint32_t)&test_task_stack[1024]);
   11be2:	ba a0 9f 01 00       	mov    $0x19fa0,%edx
   11be7:	b8 33 1b 01 00       	mov    $0x11b33,%eax
   11bec:	52                   	push   %edx
   11bed:	50                   	push   %eax
   11bee:	68 68 2d 01 00       	push   $0x12d68
   11bf3:	68 e0 8e 01 00       	push   $0x18ee0
   11bf8:	e8 91 ed ff ff       	call   1098e <task_init>
   11bfd:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11c00:	e8 50 ef ff ff       	call   10b55 <task_first_init>

    irq_enable_global();
   11c05:	e8 72 fd ff ff       	call   1197c <irq_enable_global>
    int count = 0;
   11c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;)
    {
        mutex_lock(&mutex);
   11c11:	83 ec 0c             	sub    $0xc,%esp
   11c14:	68 b0 9f 01 00       	push   $0x19fb0
   11c19:	e8 76 00 00 00       	call   11c94 <mutex_lock>
   11c1e:	83 c4 10             	add    $0x10,%esp
        log_printf("init main count = %d\n", count++);
   11c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c24:	8d 50 01             	lea    0x1(%eax),%edx
   11c27:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11c2a:	83 ec 08             	sub    $0x8,%esp
   11c2d:	50                   	push   %eax
   11c2e:	68 72 2d 01 00       	push   $0x12d72
   11c33:	e8 ef 0c 00 00       	call   12927 <log_printf>
   11c38:	83 c4 10             	add    $0x10,%esp
        sys_sleep(3000);
   11c3b:	83 ec 0c             	sub    $0xc,%esp
   11c3e:	68 b8 0b 00 00       	push   $0xbb8
   11c43:	e8 d3 f2 ff ff       	call   10f1b <sys_sleep>
   11c48:	83 c4 10             	add    $0x10,%esp
        mutex_unlock(&mutex);
   11c4b:	83 ec 0c             	sub    $0xc,%esp
   11c4e:	68 b0 9f 01 00       	push   $0x19fb0
   11c53:	e8 cc 00 00 00       	call   11d24 <mutex_unlock>
   11c58:	83 c4 10             	add    $0x10,%esp
        mutex_lock(&mutex);
   11c5b:	eb b4                	jmp    11c11 <init_main+0x75>

00011c5d <list_count>:
{
   11c5d:	55                   	push   %ebp
   11c5e:	89 e5                	mov    %esp,%ebp
    return list->count;
   11c60:	8b 45 08             	mov    0x8(%ebp),%eax
   11c63:	8b 40 08             	mov    0x8(%eax),%eax
}
   11c66:	5d                   	pop    %ebp
   11c67:	c3                   	ret    

00011c68 <mutex_init>:
 */
#include "ipc/mutex.h"
#include "cpu/irq.h"

void mutex_init(mutex_t *mutex)
{
   11c68:	55                   	push   %ebp
   11c69:	89 e5                	mov    %esp,%ebp
   11c6b:	83 ec 08             	sub    $0x8,%esp
    mutex->owner = (task_t *)0;
   11c6e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c71:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mutex->locked_count = 0;
   11c78:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    list_init(&mutex->wait_list);
   11c82:	8b 45 08             	mov    0x8(%ebp),%eax
   11c85:	83 ec 0c             	sub    $0xc,%esp
   11c88:	50                   	push   %eax
   11c89:	e8 dd 09 00 00       	call   1266b <list_init>
   11c8e:	83 c4 10             	add    $0x10,%esp
}
   11c91:	90                   	nop
   11c92:	c9                   	leave  
   11c93:	c3                   	ret    

00011c94 <mutex_lock>:

void mutex_lock(mutex_t *mutex)
{
   11c94:	55                   	push   %ebp
   11c95:	89 e5                	mov    %esp,%ebp
   11c97:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11c9a:	e8 13 fd ff ff       	call   119b2 <irq_enter_protection>
   11c9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   11ca2:	e8 73 ef ff ff       	call   10c1a <task_current>
   11ca7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->locked_count == 0)
   11caa:	8b 45 08             	mov    0x8(%ebp),%eax
   11cad:	8b 40 10             	mov    0x10(%eax),%eax
   11cb0:	85 c0                	test   %eax,%eax
   11cb2:	75 1a                	jne    11cce <mutex_lock+0x3a>
    {
        mutex->locked_count++;
   11cb4:	8b 45 08             	mov    0x8(%ebp),%eax
   11cb7:	8b 40 10             	mov    0x10(%eax),%eax
   11cba:	8d 50 01             	lea    0x1(%eax),%edx
   11cbd:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc0:	89 50 10             	mov    %edx,0x10(%eax)
        mutex->owner = curr;
   11cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11cc9:	89 50 0c             	mov    %edx,0xc(%eax)
   11ccc:	eb 45                	jmp    11d13 <mutex_lock+0x7f>
    }else if(mutex->owner == curr)
   11cce:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd1:	8b 40 0c             	mov    0xc(%eax),%eax
   11cd4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11cd7:	75 11                	jne    11cea <mutex_lock+0x56>
    {
        mutex->locked_count++;
   11cd9:	8b 45 08             	mov    0x8(%ebp),%eax
   11cdc:	8b 40 10             	mov    0x10(%eax),%eax
   11cdf:	8d 50 01             	lea    0x1(%eax),%edx
   11ce2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ce5:	89 50 10             	mov    %edx,0x10(%eax)
   11ce8:	eb 29                	jmp    11d13 <mutex_lock+0x7f>
    }else
    {
        task_set_block(curr);
   11cea:	83 ec 0c             	sub    $0xc,%esp
   11ced:	ff 75 f0             	pushl  -0x10(%ebp)
   11cf0:	e8 fa ee ff ff       	call   10bef <task_set_block>
   11cf5:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list,&curr->wait_node);
   11cf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cfb:	8d 50 44             	lea    0x44(%eax),%edx
   11cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   11d01:	83 ec 08             	sub    $0x8,%esp
   11d04:	52                   	push   %edx
   11d05:	50                   	push   %eax
   11d06:	e8 e4 09 00 00       	call   126ef <list_insert_last>
   11d0b:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   11d0e:	e8 c2 ef ff ff       	call   10cd5 <schedule_switch>
    }
    irq_leave_protection(state);
   11d13:	83 ec 0c             	sub    $0xc,%esp
   11d16:	ff 75 f4             	pushl  -0xc(%ebp)
   11d19:	e8 ac fc ff ff       	call   119ca <irq_leave_protection>
   11d1e:	83 c4 10             	add    $0x10,%esp
}
   11d21:	90                   	nop
   11d22:	c9                   	leave  
   11d23:	c3                   	ret    

00011d24 <mutex_unlock>:

void mutex_unlock(mutex_t *mutex)
{
   11d24:	55                   	push   %ebp
   11d25:	89 e5                	mov    %esp,%ebp
   11d27:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11d2a:	e8 83 fc ff ff       	call   119b2 <irq_enter_protection>
   11d2f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   11d32:	e8 e3 ee ff ff       	call   10c1a <task_current>
   11d37:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mutex->owner == curr)
   11d3a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d3d:	8b 40 0c             	mov    0xc(%eax),%eax
   11d40:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11d43:	0f 85 84 00 00 00    	jne    11dcd <mutex_unlock+0xa9>
    {
        if(--mutex->locked_count == 0)
   11d49:	8b 45 08             	mov    0x8(%ebp),%eax
   11d4c:	8b 40 10             	mov    0x10(%eax),%eax
   11d4f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d52:	8b 45 08             	mov    0x8(%ebp),%eax
   11d55:	89 50 10             	mov    %edx,0x10(%eax)
   11d58:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5b:	8b 40 10             	mov    0x10(%eax),%eax
   11d5e:	85 c0                	test   %eax,%eax
   11d60:	75 6b                	jne    11dcd <mutex_unlock+0xa9>
        {
            mutex->owner = (task_t *)0;
   11d62:	8b 45 08             	mov    0x8(%ebp),%eax
   11d65:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            if(list_count(&mutex->wait_list))
   11d6c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6f:	83 ec 0c             	sub    $0xc,%esp
   11d72:	50                   	push   %eax
   11d73:	e8 e5 fe ff ff       	call   11c5d <list_count>
   11d78:	83 c4 10             	add    $0x10,%esp
   11d7b:	85 c0                	test   %eax,%eax
   11d7d:	74 4e                	je     11dcd <mutex_unlock+0xa9>
            {
                list_node_t * node = list_remove_first(&mutex->wait_list);
   11d7f:	8b 45 08             	mov    0x8(%ebp),%eax
   11d82:	83 ec 0c             	sub    $0xc,%esp
   11d85:	50                   	push   %eax
   11d86:	e8 c8 09 00 00       	call   12753 <list_remove_first>
   11d8b:	83 c4 10             	add    $0x10,%esp
   11d8e:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(node,task_t,wait_node);
   11d91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d95:	74 08                	je     11d9f <mutex_unlock+0x7b>
   11d97:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d9a:	83 e8 44             	sub    $0x44,%eax
   11d9d:	eb 05                	jmp    11da4 <mutex_unlock+0x80>
   11d9f:	b8 00 00 00 00       	mov    $0x0,%eax
   11da4:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11da7:	83 ec 0c             	sub    $0xc,%esp
   11daa:	ff 75 e8             	pushl  -0x18(%ebp)
   11dad:	e8 08 ee ff ff       	call   10bba <task_set_ready>
   11db2:	83 c4 10             	add    $0x10,%esp
                mutex->locked_count = 1;
   11db5:	8b 45 08             	mov    0x8(%ebp),%eax
   11db8:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
                mutex->owner = task;
   11dbf:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc2:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11dc5:	89 50 0c             	mov    %edx,0xc(%eax)
                schedule_switch();
   11dc8:	e8 08 ef ff ff       	call   10cd5 <schedule_switch>
            }
        }
    }
    irq_leave_protection(state);
   11dcd:	83 ec 0c             	sub    $0xc,%esp
   11dd0:	ff 75 f4             	pushl  -0xc(%ebp)
   11dd3:	e8 f2 fb ff ff       	call   119ca <irq_leave_protection>
   11dd8:	83 c4 10             	add    $0x10,%esp
}
   11ddb:	90                   	nop
   11ddc:	c9                   	leave  
   11ddd:	c3                   	ret    

00011dde <list_count>:
{
   11dde:	55                   	push   %ebp
   11ddf:	89 e5                	mov    %esp,%ebp
    return list->count;
   11de1:	8b 45 08             	mov    0x8(%ebp),%eax
   11de4:	8b 40 08             	mov    0x8(%eax),%eax
}
   11de7:	5d                   	pop    %ebp
   11de8:	c3                   	ret    

00011de9 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"
void sem_init(sem_t *sem,int count)
{
   11de9:	55                   	push   %ebp
   11dea:	89 e5                	mov    %esp,%ebp
   11dec:	83 ec 08             	sub    $0x8,%esp
    sem->count = count;
   11def:	8b 45 08             	mov    0x8(%ebp),%eax
   11df2:	8b 55 0c             	mov    0xc(%ebp),%edx
   11df5:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11df7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dfa:	83 c0 04             	add    $0x4,%eax
   11dfd:	83 ec 0c             	sub    $0xc,%esp
   11e00:	50                   	push   %eax
   11e01:	e8 65 08 00 00       	call   1266b <list_init>
   11e06:	83 c4 10             	add    $0x10,%esp
}
   11e09:	90                   	nop
   11e0a:	c9                   	leave  
   11e0b:	c3                   	ret    

00011e0c <sem_wait>:

void sem_wait(sem_t *sem)
{
   11e0c:	55                   	push   %ebp
   11e0d:	89 e5                	mov    %esp,%ebp
   11e0f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11e12:	e8 9b fb ff ff       	call   119b2 <irq_enter_protection>
   11e17:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(sem->count > 0)
   11e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1d:	8b 00                	mov    (%eax),%eax
   11e1f:	85 c0                	test   %eax,%eax
   11e21:	7e 0f                	jle    11e32 <sem_wait+0x26>
    {
        sem->count--;
   11e23:	8b 45 08             	mov    0x8(%ebp),%eax
   11e26:	8b 00                	mov    (%eax),%eax
   11e28:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e2b:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2e:	89 10                	mov    %edx,(%eax)
   11e30:	eb 34                	jmp    11e66 <sem_wait+0x5a>
    }
    else
    {
        task_t *curr = task_current();
   11e32:	e8 e3 ed ff ff       	call   10c1a <task_current>
   11e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   11e3a:	83 ec 0c             	sub    $0xc,%esp
   11e3d:	ff 75 f0             	pushl  -0x10(%ebp)
   11e40:	e8 aa ed ff ff       	call   10bef <task_set_block>
   11e45:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list,&curr->wait_node);
   11e48:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e4b:	8d 50 44             	lea    0x44(%eax),%edx
   11e4e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e51:	83 c0 04             	add    $0x4,%eax
   11e54:	83 ec 08             	sub    $0x8,%esp
   11e57:	52                   	push   %edx
   11e58:	50                   	push   %eax
   11e59:	e8 91 08 00 00       	call   126ef <list_insert_last>
   11e5e:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   11e61:	e8 6f ee ff ff       	call   10cd5 <schedule_switch>
    }
    irq_leave_protection(state);
   11e66:	83 ec 0c             	sub    $0xc,%esp
   11e69:	ff 75 f4             	pushl  -0xc(%ebp)
   11e6c:	e8 59 fb ff ff       	call   119ca <irq_leave_protection>
   11e71:	83 c4 10             	add    $0x10,%esp
}
   11e74:	90                   	nop
   11e75:	c9                   	leave  
   11e76:	c3                   	ret    

00011e77 <sem_notify>:


void sem_notify(sem_t *sem)
{
   11e77:	55                   	push   %ebp
   11e78:	89 e5                	mov    %esp,%ebp
   11e7a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11e7d:	e8 30 fb ff ff       	call   119b2 <irq_enter_protection>
   11e82:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&sem->wait_list) > 0)
   11e85:	8b 45 08             	mov    0x8(%ebp),%eax
   11e88:	83 c0 04             	add    $0x4,%eax
   11e8b:	83 ec 0c             	sub    $0xc,%esp
   11e8e:	50                   	push   %eax
   11e8f:	e8 4a ff ff ff       	call   11dde <list_count>
   11e94:	83 c4 10             	add    $0x10,%esp
   11e97:	85 c0                	test   %eax,%eax
   11e99:	7e 40                	jle    11edb <sem_notify+0x64>
    {
        list_node_t * node = list_remove_first(&sem->wait_list);
   11e9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11e9e:	83 c0 04             	add    $0x4,%eax
   11ea1:	83 ec 0c             	sub    $0xc,%esp
   11ea4:	50                   	push   %eax
   11ea5:	e8 a9 08 00 00       	call   12753 <list_remove_first>
   11eaa:	83 c4 10             	add    $0x10,%esp
   11ead:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node,task_t,wait_node);
   11eb0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11eb4:	74 08                	je     11ebe <sem_notify+0x47>
   11eb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11eb9:	83 e8 44             	sub    $0x44,%eax
   11ebc:	eb 05                	jmp    11ec3 <sem_notify+0x4c>
   11ebe:	b8 00 00 00 00       	mov    $0x0,%eax
   11ec3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11ec6:	83 ec 0c             	sub    $0xc,%esp
   11ec9:	ff 75 ec             	pushl  -0x14(%ebp)
   11ecc:	e8 e9 ec ff ff       	call   10bba <task_set_ready>
   11ed1:	83 c4 10             	add    $0x10,%esp
        schedule_switch();
   11ed4:	e8 fc ed ff ff       	call   10cd5 <schedule_switch>
   11ed9:	eb 0d                	jmp    11ee8 <sem_notify+0x71>
    }
    else
    {
        sem->count++;
   11edb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ede:	8b 00                	mov    (%eax),%eax
   11ee0:	8d 50 01             	lea    0x1(%eax),%edx
   11ee3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee6:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);
   11ee8:	83 ec 0c             	sub    $0xc,%esp
   11eeb:	ff 75 f4             	pushl  -0xc(%ebp)
   11eee:	e8 d7 fa ff ff       	call   119ca <irq_leave_protection>
   11ef3:	83 c4 10             	add    $0x10,%esp
}
   11ef6:	90                   	nop
   11ef7:	c9                   	leave  
   11ef8:	c3                   	ret    

00011ef9 <sem_count>:
int sem_count(sem_t *sem)
{
   11ef9:	55                   	push   %ebp
   11efa:	89 e5                	mov    %esp,%ebp
   11efc:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11eff:	e8 ae fa ff ff       	call   119b2 <irq_enter_protection>
   11f04:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11f07:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0a:	8b 00                	mov    (%eax),%eax
   11f0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   11f0f:	83 ec 0c             	sub    $0xc,%esp
   11f12:	ff 75 f4             	pushl  -0xc(%ebp)
   11f15:	e8 b0 fa ff ff       	call   119ca <irq_leave_protection>
   11f1a:	83 c4 10             	add    $0x10,%esp
    return count;
   11f1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   11f20:	c9                   	leave  
   11f21:	c3                   	ret    

00011f22 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   11f22:	55                   	push   %ebp
   11f23:	89 e5                	mov    %esp,%ebp
    return (bit_count + 7) / 8;
   11f25:	8b 45 08             	mov    0x8(%ebp),%eax
   11f28:	83 c0 07             	add    $0x7,%eax
   11f2b:	8d 50 07             	lea    0x7(%eax),%edx
   11f2e:	85 c0                	test   %eax,%eax
   11f30:	0f 48 c2             	cmovs  %edx,%eax
   11f33:	c1 f8 03             	sar    $0x3,%eax
}
   11f36:	5d                   	pop    %ebp
   11f37:	c3                   	ret    

00011f38 <bitmap_init>:
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count ,int init_bit)
{
   11f38:	55                   	push   %ebp
   11f39:	89 e5                	mov    %esp,%ebp
   11f3b:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   11f3e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f41:	8b 55 10             	mov    0x10(%ebp),%edx
   11f44:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11f46:	8b 45 08             	mov    0x8(%ebp),%eax
   11f49:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f4c:	89 50 04             	mov    %edx,0x4(%eax)
    int bytes = bitmap_byte_count(count);
   11f4f:	ff 75 10             	pushl  0x10(%ebp)
   11f52:	e8 cb ff ff ff       	call   11f22 <bitmap_byte_count>
   11f57:	83 c4 04             	add    $0x4,%esp
   11f5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bits, init_bit ? 0xff : 0x00, bytes);
   11f5d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11f61:	74 07                	je     11f6a <bitmap_init+0x32>
   11f63:	b8 ff 00 00 00       	mov    $0xff,%eax
   11f68:	eb 05                	jmp    11f6f <bitmap_init+0x37>
   11f6a:	b8 00 00 00 00       	mov    $0x0,%eax
   11f6f:	83 ec 04             	sub    $0x4,%esp
   11f72:	ff 75 f4             	pushl  -0xc(%ebp)
   11f75:	50                   	push   %eax
   11f76:	ff 75 0c             	pushl  0xc(%ebp)
   11f79:	e8 95 03 00 00       	call   12313 <kernel_memset>
   11f7e:	83 c4 10             	add    $0x10,%esp
}
   11f81:	90                   	nop
   11f82:	c9                   	leave  
   11f83:	c3                   	ret    

00011f84 <bitmap_get_bit>:

int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   11f84:	55                   	push   %ebp
   11f85:	89 e5                	mov    %esp,%ebp
   11f87:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   11f88:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8b:	8b 50 04             	mov    0x4(%eax),%edx
   11f8e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f91:	8d 48 07             	lea    0x7(%eax),%ecx
   11f94:	85 c0                	test   %eax,%eax
   11f96:	0f 48 c1             	cmovs  %ecx,%eax
   11f99:	c1 f8 03             	sar    $0x3,%eax
   11f9c:	01 d0                	add    %edx,%eax
   11f9e:	0f b6 00             	movzbl (%eax),%eax
   11fa1:	0f b6 d8             	movzbl %al,%ebx
   11fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fa7:	99                   	cltd   
   11fa8:	c1 ea 1d             	shr    $0x1d,%edx
   11fab:	01 d0                	add    %edx,%eax
   11fad:	83 e0 07             	and    $0x7,%eax
   11fb0:	29 d0                	sub    %edx,%eax
   11fb2:	ba 01 00 00 00       	mov    $0x1,%edx
   11fb7:	89 c1                	mov    %eax,%ecx
   11fb9:	d3 e2                	shl    %cl,%edx
   11fbb:	89 d0                	mov    %edx,%eax
   11fbd:	21 d8                	and    %ebx,%eax
}
   11fbf:	5b                   	pop    %ebx
   11fc0:	5d                   	pop    %ebp
   11fc1:	c3                   	ret    

00011fc2 <bitmap_set_bit>:
void bitmap_set_bit(bitmap_t *bitmap, int index, int count,int bit)
{
   11fc2:	55                   	push   %ebp
   11fc3:	89 e5                	mov    %esp,%ebp
   11fc5:	56                   	push   %esi
   11fc6:	53                   	push   %ebx
   11fc7:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   11fca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11fd1:	e9 a2 00 00 00       	jmp    12078 <bitmap_set_bit+0xb6>
    {
        if(bit)
   11fd6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11fda:	74 4a                	je     12026 <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= (1 << (index % 8));
   11fdc:	8b 45 08             	mov    0x8(%ebp),%eax
   11fdf:	8b 50 04             	mov    0x4(%eax),%edx
   11fe2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fe5:	8d 48 07             	lea    0x7(%eax),%ecx
   11fe8:	85 c0                	test   %eax,%eax
   11fea:	0f 48 c1             	cmovs  %ecx,%eax
   11fed:	c1 f8 03             	sar    $0x3,%eax
   11ff0:	89 c3                	mov    %eax,%ebx
   11ff2:	89 d8                	mov    %ebx,%eax
   11ff4:	01 d0                	add    %edx,%eax
   11ff6:	0f b6 00             	movzbl (%eax),%eax
   11ff9:	89 c6                	mov    %eax,%esi
   11ffb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ffe:	99                   	cltd   
   11fff:	c1 ea 1d             	shr    $0x1d,%edx
   12002:	01 d0                	add    %edx,%eax
   12004:	83 e0 07             	and    $0x7,%eax
   12007:	29 d0                	sub    %edx,%eax
   12009:	ba 01 00 00 00       	mov    $0x1,%edx
   1200e:	89 c1                	mov    %eax,%ecx
   12010:	d3 e2                	shl    %cl,%edx
   12012:	89 d0                	mov    %edx,%eax
   12014:	89 f2                	mov    %esi,%edx
   12016:	09 c2                	or     %eax,%edx
   12018:	8b 45 08             	mov    0x8(%ebp),%eax
   1201b:	8b 40 04             	mov    0x4(%eax),%eax
   1201e:	89 d9                	mov    %ebx,%ecx
   12020:	01 c8                	add    %ecx,%eax
   12022:	88 10                	mov    %dl,(%eax)
   12024:	eb 4a                	jmp    12070 <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12026:	8b 45 08             	mov    0x8(%ebp),%eax
   12029:	8b 50 04             	mov    0x4(%eax),%edx
   1202c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1202f:	8d 48 07             	lea    0x7(%eax),%ecx
   12032:	85 c0                	test   %eax,%eax
   12034:	0f 48 c1             	cmovs  %ecx,%eax
   12037:	c1 f8 03             	sar    $0x3,%eax
   1203a:	89 c3                	mov    %eax,%ebx
   1203c:	89 d8                	mov    %ebx,%eax
   1203e:	01 d0                	add    %edx,%eax
   12040:	0f b6 00             	movzbl (%eax),%eax
   12043:	89 c6                	mov    %eax,%esi
   12045:	8b 45 0c             	mov    0xc(%ebp),%eax
   12048:	99                   	cltd   
   12049:	c1 ea 1d             	shr    $0x1d,%edx
   1204c:	01 d0                	add    %edx,%eax
   1204e:	83 e0 07             	and    $0x7,%eax
   12051:	29 d0                	sub    %edx,%eax
   12053:	ba 01 00 00 00       	mov    $0x1,%edx
   12058:	89 c1                	mov    %eax,%ecx
   1205a:	d3 e2                	shl    %cl,%edx
   1205c:	89 d0                	mov    %edx,%eax
   1205e:	f7 d0                	not    %eax
   12060:	89 f2                	mov    %esi,%edx
   12062:	21 c2                	and    %eax,%edx
   12064:	8b 45 08             	mov    0x8(%ebp),%eax
   12067:	8b 40 04             	mov    0x4(%eax),%eax
   1206a:	89 d9                	mov    %ebx,%ecx
   1206c:	01 c8                	add    %ecx,%eax
   1206e:	88 10                	mov    %dl,(%eax)
        }
        index++;
   12070:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    for(int i = 0; (i < count) && (index < bitmap->bit_count); i++)
   12074:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12078:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1207b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1207e:	7d 0e                	jge    1208e <bitmap_set_bit+0xcc>
   12080:	8b 45 08             	mov    0x8(%ebp),%eax
   12083:	8b 00                	mov    (%eax),%eax
   12085:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12088:	0f 8c 48 ff ff ff    	jl     11fd6 <bitmap_set_bit+0x14>
    }
}
   1208e:	90                   	nop
   1208f:	83 c4 10             	add    $0x10,%esp
   12092:	5b                   	pop    %ebx
   12093:	5e                   	pop    %esi
   12094:	5d                   	pop    %ebp
   12095:	c3                   	ret    

00012096 <bitmap_is_set>:
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   12096:	55                   	push   %ebp
   12097:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12099:	ff 75 0c             	pushl  0xc(%ebp)
   1209c:	ff 75 08             	pushl  0x8(%ebp)
   1209f:	e8 e0 fe ff ff       	call   11f84 <bitmap_get_bit>
   120a4:	83 c4 08             	add    $0x8,%esp
   120a7:	85 c0                	test   %eax,%eax
   120a9:	0f 95 c0             	setne  %al
   120ac:	0f b6 c0             	movzbl %al,%eax
}
   120af:	c9                   	leave  
   120b0:	c3                   	ret    

000120b1 <bitmap_alloc_nbits>:
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   120b1:	55                   	push   %ebp
   120b2:	89 e5                	mov    %esp,%ebp
   120b4:	83 ec 10             	sub    $0x10,%esp
    int index = 0;
   120b7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   120be:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
    while(index < bitmap->bit_count)
   120c5:	e9 8c 00 00 00       	jmp    12156 <bitmap_alloc_nbits+0xa5>
    {
        if(bitmap_get_bit(bitmap, index) != bit)
   120ca:	ff 75 fc             	pushl  -0x4(%ebp)
   120cd:	ff 75 08             	pushl  0x8(%ebp)
   120d0:	e8 af fe ff ff       	call   11f84 <bitmap_get_bit>
   120d5:	83 c4 08             	add    $0x8,%esp
   120d8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   120db:	74 06                	je     120e3 <bitmap_alloc_nbits+0x32>
        {
            index++;
   120dd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   120e1:	eb 73                	jmp    12156 <bitmap_alloc_nbits+0xa5>
        }
        ok_index = index;
   120e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i = 0;
   120e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   120f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   120f7:	eb 27                	jmp    12120 <bitmap_alloc_nbits+0x6f>
        {
            if(bitmap_get_bit(bitmap, index++) != bit)
   120f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120fc:	8d 50 01             	lea    0x1(%eax),%edx
   120ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12102:	50                   	push   %eax
   12103:	ff 75 08             	pushl  0x8(%ebp)
   12106:	e8 79 fe ff ff       	call   11f84 <bitmap_get_bit>
   1210b:	83 c4 08             	add    $0x8,%esp
   1210e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12111:	74 09                	je     1211c <bitmap_alloc_nbits+0x6b>
            {
                ok_index = -1;
   12113:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1211a:	eb 16                	jmp    12132 <bitmap_alloc_nbits+0x81>
        for(i = 0; (i < count) && (index  < bitmap->bit_count); i++)
   1211c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12120:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12123:	3b 45 10             	cmp    0x10(%ebp),%eax
   12126:	7d 0a                	jge    12132 <bitmap_alloc_nbits+0x81>
   12128:	8b 45 08             	mov    0x8(%ebp),%eax
   1212b:	8b 00                	mov    (%eax),%eax
   1212d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12130:	7c c7                	jl     120f9 <bitmap_alloc_nbits+0x48>
            }
        }
        if(i >= count)
   12132:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12135:	3b 45 10             	cmp    0x10(%ebp),%eax
   12138:	7c 1c                	jl     12156 <bitmap_alloc_nbits+0xa5>
        {
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   1213a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1213d:	f7 d0                	not    %eax
   1213f:	50                   	push   %eax
   12140:	ff 75 10             	pushl  0x10(%ebp)
   12143:	ff 75 f8             	pushl  -0x8(%ebp)
   12146:	ff 75 08             	pushl  0x8(%ebp)
   12149:	e8 74 fe ff ff       	call   11fc2 <bitmap_set_bit>
   1214e:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12151:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12154:	eb 13                	jmp    12169 <bitmap_alloc_nbits+0xb8>
    while(index < bitmap->bit_count)
   12156:	8b 45 08             	mov    0x8(%ebp),%eax
   12159:	8b 00                	mov    (%eax),%eax
   1215b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1215e:	0f 8c 66 ff ff ff    	jl     120ca <bitmap_alloc_nbits+0x19>
        }
    }        
    return -1;
   12164:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12169:	c9                   	leave  
   1216a:	c3                   	ret    

0001216b <hlt>:
{
   1216b:	55                   	push   %ebp
   1216c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1216e:	f4                   	hlt    
}
   1216f:	90                   	nop
   12170:	5d                   	pop    %ebp
   12171:	c3                   	ret    

00012172 <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"
void kernel_strcpy (char *dest, const char *src)
{
   12172:	55                   	push   %ebp
   12173:	89 e5                	mov    %esp,%ebp
    if(!dest || !src)
   12175:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12179:	74 27                	je     121a2 <kernel_strcpy+0x30>
   1217b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1217f:	74 21                	je     121a2 <kernel_strcpy+0x30>
    {
        return;
    }
    while((*dest++ = *src++) != '\0');
   12181:	90                   	nop
   12182:	8b 55 0c             	mov    0xc(%ebp),%edx
   12185:	8d 42 01             	lea    0x1(%edx),%eax
   12188:	89 45 0c             	mov    %eax,0xc(%ebp)
   1218b:	8b 45 08             	mov    0x8(%ebp),%eax
   1218e:	8d 48 01             	lea    0x1(%eax),%ecx
   12191:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12194:	0f b6 12             	movzbl (%edx),%edx
   12197:	88 10                	mov    %dl,(%eax)
   12199:	0f b6 00             	movzbl (%eax),%eax
   1219c:	84 c0                	test   %al,%al
   1219e:	75 e2                	jne    12182 <kernel_strcpy+0x10>
   121a0:	eb 01                	jmp    121a3 <kernel_strcpy+0x31>
        return;
   121a2:	90                   	nop
    //*dest = '\0';
}
   121a3:	5d                   	pop    %ebp
   121a4:	c3                   	ret    

000121a5 <kernel_strncpy>:

void kernel_strncpy (char *dest, const char *src, int size)
{
   121a5:	55                   	push   %ebp
   121a6:	89 e5                	mov    %esp,%ebp
   121a8:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src)
   121ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121af:	74 5b                	je     1220c <kernel_strncpy+0x67>
   121b1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   121b5:	74 55                	je     1220c <kernel_strncpy+0x67>
    {
        return;
    }
    char *d = dest;
   121b7:	8b 45 08             	mov    0x8(%ebp),%eax
   121ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   121bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   121c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s))
   121c3:	eb 17                	jmp    121dc <kernel_strncpy+0x37>
    {
        *d++ = *s++;
   121c5:	8b 55 f8             	mov    -0x8(%ebp),%edx
   121c8:	8d 42 01             	lea    0x1(%edx),%eax
   121cb:	89 45 f8             	mov    %eax,-0x8(%ebp)
   121ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121d1:	8d 48 01             	lea    0x1(%eax),%ecx
   121d4:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   121d7:	0f b6 12             	movzbl (%edx),%edx
   121da:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s))
   121dc:	8b 45 10             	mov    0x10(%ebp),%eax
   121df:	8d 50 ff             	lea    -0x1(%eax),%edx
   121e2:	89 55 10             	mov    %edx,0x10(%ebp)
   121e5:	85 c0                	test   %eax,%eax
   121e7:	7e 0a                	jle    121f3 <kernel_strncpy+0x4e>
   121e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   121ec:	0f b6 00             	movzbl (%eax),%eax
   121ef:	84 c0                	test   %al,%al
   121f1:	75 d2                	jne    121c5 <kernel_strncpy+0x20>
    }
    if(size == 0)
   121f3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   121f7:	75 0b                	jne    12204 <kernel_strncpy+0x5f>
    {
        *(d - 1) = '\0';
   121f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121fc:	83 e8 01             	sub    $0x1,%eax
   121ff:	c6 00 00             	movb   $0x0,(%eax)
   12202:	eb 09                	jmp    1220d <kernel_strncpy+0x68>
    }
    else
    {
        *d = '\0';
   12204:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12207:	c6 00 00             	movb   $0x0,(%eax)
   1220a:	eb 01                	jmp    1220d <kernel_strncpy+0x68>
        return;
   1220c:	90                   	nop
    }
}
   1220d:	c9                   	leave  
   1220e:	c3                   	ret    

0001220f <kernel_strncmp>:

int kernel_strncmp (const char *str1, const char *str2, int size)
{
   1220f:	55                   	push   %ebp
   12210:	89 e5                	mov    %esp,%ebp
    if(!str1 || !str2)
   12212:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12216:	74 06                	je     1221e <kernel_strncmp+0xf>
   12218:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1221c:	75 0f                	jne    1222d <kernel_strncmp+0x1e>
    {
        return 0;
   1221e:	b8 00 00 00 00       	mov    $0x0,%eax
   12223:	eb 62                	jmp    12287 <kernel_strncmp+0x78>
    }
    while(*str1 && *str2 && (*str1 == *str2) && size)
    {
        str1++;
   12225:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        str2++;
   12229:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*str1 && *str2 && (*str1 == *str2) && size)
   1222d:	8b 45 08             	mov    0x8(%ebp),%eax
   12230:	0f b6 00             	movzbl (%eax),%eax
   12233:	84 c0                	test   %al,%al
   12235:	74 20                	je     12257 <kernel_strncmp+0x48>
   12237:	8b 45 0c             	mov    0xc(%ebp),%eax
   1223a:	0f b6 00             	movzbl (%eax),%eax
   1223d:	84 c0                	test   %al,%al
   1223f:	74 16                	je     12257 <kernel_strncmp+0x48>
   12241:	8b 45 08             	mov    0x8(%ebp),%eax
   12244:	0f b6 10             	movzbl (%eax),%edx
   12247:	8b 45 0c             	mov    0xc(%ebp),%eax
   1224a:	0f b6 00             	movzbl (%eax),%eax
   1224d:	38 c2                	cmp    %al,%dl
   1224f:	75 06                	jne    12257 <kernel_strncmp+0x48>
   12251:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12255:	75 ce                	jne    12225 <kernel_strncmp+0x16>
    }
    return !((*str1 == '\0') || (*str2 == '\0') || (*str1 == *str2));
   12257:	8b 45 08             	mov    0x8(%ebp),%eax
   1225a:	0f b6 00             	movzbl (%eax),%eax
   1225d:	84 c0                	test   %al,%al
   1225f:	74 21                	je     12282 <kernel_strncmp+0x73>
   12261:	8b 45 0c             	mov    0xc(%ebp),%eax
   12264:	0f b6 00             	movzbl (%eax),%eax
   12267:	84 c0                	test   %al,%al
   12269:	74 17                	je     12282 <kernel_strncmp+0x73>
   1226b:	8b 45 08             	mov    0x8(%ebp),%eax
   1226e:	0f b6 10             	movzbl (%eax),%edx
   12271:	8b 45 0c             	mov    0xc(%ebp),%eax
   12274:	0f b6 00             	movzbl (%eax),%eax
   12277:	38 c2                	cmp    %al,%dl
   12279:	74 07                	je     12282 <kernel_strncmp+0x73>
   1227b:	b8 01 00 00 00       	mov    $0x1,%eax
   12280:	eb 05                	jmp    12287 <kernel_strncmp+0x78>
   12282:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12287:	5d                   	pop    %ebp
   12288:	c3                   	ret    

00012289 <kernel_strlen>:

int kernel_strlen (const char *str)
{
   12289:	55                   	push   %ebp
   1228a:	89 e5                	mov    %esp,%ebp
   1228c:	83 ec 10             	sub    $0x10,%esp
    if(!str)
   1228f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12293:	75 07                	jne    1229c <kernel_strlen+0x13>
    {
        return 0;
   12295:	b8 00 00 00 00       	mov    $0x0,%eax
   1229a:	eb 26                	jmp    122c2 <kernel_strlen+0x39>
    }
    const char *s = str;
   1229c:	8b 45 08             	mov    0x8(%ebp),%eax
   1229f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   122a2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while(*s++)
   122a9:	eb 04                	jmp    122af <kernel_strlen+0x26>
    {
        len++;
   122ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(*s++)
   122af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122b2:	8d 50 01             	lea    0x1(%eax),%edx
   122b5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   122b8:	0f b6 00             	movzbl (%eax),%eax
   122bb:	84 c0                	test   %al,%al
   122bd:	75 ec                	jne    122ab <kernel_strlen+0x22>
    }
    return len;
   122bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   122c2:	c9                   	leave  
   122c3:	c3                   	ret    

000122c4 <kernel_memcpy>:


void kernel_memcpy (void *dest, void *src, int size)
{
   122c4:	55                   	push   %ebp
   122c5:	89 e5                	mov    %esp,%ebp
   122c7:	83 ec 10             	sub    $0x10,%esp
    if(!dest || !src || size <= 0)
   122ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   122ce:	74 40                	je     12310 <kernel_memcpy+0x4c>
   122d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122d4:	74 3a                	je     12310 <kernel_memcpy+0x4c>
   122d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   122da:	7e 34                	jle    12310 <kernel_memcpy+0x4c>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   122dc:	8b 45 08             	mov    0x8(%ebp),%eax
   122df:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t *)src;
   122e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   122e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   122e8:	eb 17                	jmp    12301 <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   122ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
   122ed:	8d 42 01             	lea    0x1(%edx),%eax
   122f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
   122f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122f6:	8d 48 01             	lea    0x1(%eax),%ecx
   122f9:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   122fc:	0f b6 12             	movzbl (%edx),%edx
   122ff:	88 10                	mov    %dl,(%eax)
    while(size--)
   12301:	8b 45 10             	mov    0x10(%ebp),%eax
   12304:	8d 50 ff             	lea    -0x1(%eax),%edx
   12307:	89 55 10             	mov    %edx,0x10(%ebp)
   1230a:	85 c0                	test   %eax,%eax
   1230c:	75 dc                	jne    122ea <kernel_memcpy+0x26>
   1230e:	eb 01                	jmp    12311 <kernel_memcpy+0x4d>
        return;
   12310:	90                   	nop
    }
}
   12311:	c9                   	leave  
   12312:	c3                   	ret    

00012313 <kernel_memset>:

void kernel_memset (void *dest, int c, int size)
{
   12313:	55                   	push   %ebp
   12314:	89 e5                	mov    %esp,%ebp
   12316:	83 ec 10             	sub    $0x10,%esp
    if(!dest || size <= 0)
   12319:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1231d:	74 2b                	je     1234a <kernel_memset+0x37>
   1231f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12323:	7e 25                	jle    1234a <kernel_memset+0x37>
    {
        return;
    }
    uint8_t *d = (uint8_t *)dest;
   12325:	8b 45 08             	mov    0x8(%ebp),%eax
   12328:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--)
   1232b:	eb 0e                	jmp    1233b <kernel_memset+0x28>
    {
        *d++ = (uint8_t)c;
   1232d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12330:	8d 50 01             	lea    0x1(%eax),%edx
   12333:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12336:	8b 55 0c             	mov    0xc(%ebp),%edx
   12339:	88 10                	mov    %dl,(%eax)
    while(size--)
   1233b:	8b 45 10             	mov    0x10(%ebp),%eax
   1233e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12341:	89 55 10             	mov    %edx,0x10(%ebp)
   12344:	85 c0                	test   %eax,%eax
   12346:	75 e5                	jne    1232d <kernel_memset+0x1a>
   12348:	eb 01                	jmp    1234b <kernel_memset+0x38>
        return;
   1234a:	90                   	nop
    }
}
   1234b:	c9                   	leave  
   1234c:	c3                   	ret    

0001234d <kernel_memcmp>:

int kernel_memcmp (void *d1, void *d2, int size)
{
   1234d:	55                   	push   %ebp
   1234e:	89 e5                	mov    %esp,%ebp
   12350:	83 ec 10             	sub    $0x10,%esp
    if(!d1 || !d2 || !size)
   12353:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12357:	74 0c                	je     12365 <kernel_memcmp+0x18>
   12359:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1235d:	74 06                	je     12365 <kernel_memcmp+0x18>
   1235f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12363:	75 07                	jne    1236c <kernel_memcmp+0x1f>
    {
        return 1;
   12365:	b8 01 00 00 00       	mov    $0x1,%eax
   1236a:	eb 43                	jmp    123af <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t *)d1;
   1236c:	8b 45 08             	mov    0x8(%ebp),%eax
   1236f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12372:	8b 45 0c             	mov    0xc(%ebp),%eax
   12375:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--)
   12378:	eb 23                	jmp    1239d <kernel_memcmp+0x50>
    {
        if(*p_d1++ != *p_d2++)
   1237a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1237d:	8d 50 01             	lea    0x1(%eax),%edx
   12380:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12383:	0f b6 08             	movzbl (%eax),%ecx
   12386:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12389:	8d 50 01             	lea    0x1(%eax),%edx
   1238c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1238f:	0f b6 00             	movzbl (%eax),%eax
   12392:	38 c1                	cmp    %al,%cl
   12394:	74 07                	je     1239d <kernel_memcmp+0x50>
        {
            return 1;
   12396:	b8 01 00 00 00       	mov    $0x1,%eax
   1239b:	eb 12                	jmp    123af <kernel_memcmp+0x62>
    while(size--)
   1239d:	8b 45 10             	mov    0x10(%ebp),%eax
   123a0:	8d 50 ff             	lea    -0x1(%eax),%edx
   123a3:	89 55 10             	mov    %edx,0x10(%ebp)
   123a6:	85 c0                	test   %eax,%eax
   123a8:	75 d0                	jne    1237a <kernel_memcmp+0x2d>
        }
    }
    return 0;
   123aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   123af:	c9                   	leave  
   123b0:	c3                   	ret    

000123b1 <kernel_itoa>:

void kernel_itoa (char *buf, int num, int base)
{
   123b1:	55                   	push   %ebp
   123b2:	89 e5                	mov    %esp,%ebp
   123b4:	83 ec 10             	sub    $0x10,%esp
    int is_neg = 0;
   123b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    is_neg = num < 0 ? 1 : 0;
   123be:	8b 45 0c             	mov    0xc(%ebp),%eax
   123c1:	c1 e8 1f             	shr    $0x1f,%eax
   123c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static const char * num2ch = "0123456789abcdef";
    char *p = buf;
   123c7:	8b 45 08             	mov    0x8(%ebp),%eax
   123ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(base != 2 && base != 8 && base != 10 && base != 16)
   123cd:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   123d1:	74 1d                	je     123f0 <kernel_itoa+0x3f>
   123d3:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   123d7:	74 17                	je     123f0 <kernel_itoa+0x3f>
   123d9:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   123dd:	74 11                	je     123f0 <kernel_itoa+0x3f>
   123df:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   123e3:	74 0b                	je     123f0 <kernel_itoa+0x3f>
    {
        *p = '\0';
   123e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123e8:	c6 00 00             	movb   $0x0,(%eax)
        return;
   123eb:	e9 9e 00 00 00       	jmp    1248e <kernel_itoa+0xdd>
    }
    if(num < 0 && base == 10)
   123f0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   123f4:	79 09                	jns    123ff <kernel_itoa+0x4e>
   123f6:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   123fa:	75 03                	jne    123ff <kernel_itoa+0x4e>
    {
        //*p++ = '-';
        num = -num;
   123fc:	f7 5d 0c             	negl   0xc(%ebp)
    }
    do{
        char ch = num2ch[num % base];
   123ff:	8b 0d 40 30 01 00    	mov    0x13040,%ecx
   12405:	8b 45 0c             	mov    0xc(%ebp),%eax
   12408:	99                   	cltd   
   12409:	f7 7d 10             	idivl  0x10(%ebp)
   1240c:	89 d0                	mov    %edx,%eax
   1240e:	01 c8                	add    %ecx,%eax
   12410:	0f b6 00             	movzbl (%eax),%eax
   12413:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   12416:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12419:	8d 50 01             	lea    0x1(%eax),%edx
   1241c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1241f:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   12423:	88 10                	mov    %dl,(%eax)
        num /= base;
   12425:	8b 45 0c             	mov    0xc(%ebp),%eax
   12428:	99                   	cltd   
   12429:	f7 7d 10             	idivl  0x10(%ebp)
   1242c:	89 45 0c             	mov    %eax,0xc(%ebp)
    }while (num);
   1242f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12433:	75 ca                	jne    123ff <kernel_itoa+0x4e>
    if(base == 10 && is_neg)
   12435:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12439:	75 12                	jne    1244d <kernel_itoa+0x9c>
   1243b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1243f:	74 0c                	je     1244d <kernel_itoa+0x9c>
    {
        *p++ = '-';
   12441:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12444:	8d 50 01             	lea    0x1(%eax),%edx
   12447:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1244a:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    *p-- = '\0';
   1244d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12450:	8d 50 ff             	lea    -0x1(%eax),%edx
   12453:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12456:	c6 00 00             	movb   $0x0,(%eax)

    char *start = buf;
   12459:	8b 45 08             	mov    0x8(%ebp),%eax
   1245c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p)
   1245f:	eb 25                	jmp    12486 <kernel_itoa+0xd5>
    {
        char tmp = *start;
   12461:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12464:	0f b6 00             	movzbl (%eax),%eax
   12467:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1246a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1246d:	0f b6 10             	movzbl (%eax),%edx
   12470:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12473:	88 10                	mov    %dl,(%eax)
        *p = tmp;
   12475:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12478:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1247c:	88 10                	mov    %dl,(%eax)
        p--;
   1247e:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   12482:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p)
   12486:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12489:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1248c:	72 d3                	jb     12461 <kernel_itoa+0xb0>
    }
    
}
   1248e:	c9                   	leave  
   1248f:	c3                   	ret    

00012490 <kernel_sprintf>:
void kernel_sprintf (char *buf, const char *fmt, ...)
{
   12490:	55                   	push   %ebp
   12491:	89 e5                	mov    %esp,%ebp
   12493:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12496:	8d 45 10             	lea    0x10(%ebp),%eax
   12499:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buf, fmt, args);
   1249c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1249f:	83 ec 04             	sub    $0x4,%esp
   124a2:	50                   	push   %eax
   124a3:	ff 75 0c             	pushl  0xc(%ebp)
   124a6:	ff 75 08             	pushl  0x8(%ebp)
   124a9:	e8 06 00 00 00       	call   124b4 <kernel_vsprintf>
   124ae:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   124b1:	90                   	nop
   124b2:	c9                   	leave  
   124b3:	c3                   	ret    

000124b4 <kernel_vsprintf>:
void kernel_vsprintf (char *buf, const char *fmt, va_list args)
{
   124b4:	55                   	push   %ebp
   124b5:	89 e5                	mov    %esp,%ebp
   124b7:	83 ec 20             	sub    $0x20,%esp
    enum{
        NORMAL,READ_FMT
    }state = NORMAL;
   124ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char * curr = buf;
   124c1:	8b 45 08             	mov    0x8(%ebp),%eax
   124c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++))
   124c7:	e9 17 01 00 00       	jmp    125e3 <kernel_vsprintf+0x12f>
    {
       switch(state)
   124cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124cf:	85 c0                	test   %eax,%eax
   124d1:	74 0a                	je     124dd <kernel_vsprintf+0x29>
   124d3:	83 f8 01             	cmp    $0x1,%eax
   124d6:	74 2b                	je     12503 <kernel_vsprintf+0x4f>
   124d8:	e9 06 01 00 00       	jmp    125e3 <kernel_vsprintf+0x12f>
       {
        case NORMAL:
            if(ch == '%')
   124dd:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   124e1:	75 0c                	jne    124ef <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   124e3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   124ea:	e9 f4 00 00 00       	jmp    125e3 <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   124ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124f2:	8d 50 01             	lea    0x1(%eax),%edx
   124f5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   124f8:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   124fc:	88 10                	mov    %dl,(%eax)
            }
            break;
   124fe:	e9 e0 00 00 00       	jmp    125e3 <kernel_vsprintf+0x12f>
        case READ_FMT:
            if(ch == 'd')
   12503:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12507:	75 31                	jne    1253a <kernel_vsprintf+0x86>
            {
                int num = va_arg(args,int);
   12509:	8b 45 10             	mov    0x10(%ebp),%eax
   1250c:	8d 50 04             	lea    0x4(%eax),%edx
   1250f:	89 55 10             	mov    %edx,0x10(%ebp)
   12512:	8b 00                	mov    (%eax),%eax
   12514:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr,num,10);
   12517:	6a 0a                	push   $0xa
   12519:	ff 75 e4             	pushl  -0x1c(%ebp)
   1251c:	ff 75 f8             	pushl  -0x8(%ebp)
   1251f:	e8 8d fe ff ff       	call   123b1 <kernel_itoa>
   12524:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   12527:	ff 75 f8             	pushl  -0x8(%ebp)
   1252a:	e8 5a fd ff ff       	call   12289 <kernel_strlen>
   1252f:	83 c4 04             	add    $0x4,%esp
   12532:	01 45 f8             	add    %eax,-0x8(%ebp)
   12535:	e9 a1 00 00 00       	jmp    125db <kernel_vsprintf+0x127>
            }
            else if(ch == 'x')
   1253a:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1253e:	75 2e                	jne    1256e <kernel_vsprintf+0xba>
            {
                int num = va_arg(args,int);
   12540:	8b 45 10             	mov    0x10(%ebp),%eax
   12543:	8d 50 04             	lea    0x4(%eax),%edx
   12546:	89 55 10             	mov    %edx,0x10(%ebp)
   12549:	8b 00                	mov    (%eax),%eax
   1254b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr,num,16);
   1254e:	6a 10                	push   $0x10
   12550:	ff 75 e8             	pushl  -0x18(%ebp)
   12553:	ff 75 f8             	pushl  -0x8(%ebp)
   12556:	e8 56 fe ff ff       	call   123b1 <kernel_itoa>
   1255b:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1255e:	ff 75 f8             	pushl  -0x8(%ebp)
   12561:	e8 23 fd ff ff       	call   12289 <kernel_strlen>
   12566:	83 c4 04             	add    $0x4,%esp
   12569:	01 45 f8             	add    %eax,-0x8(%ebp)
   1256c:	eb 6d                	jmp    125db <kernel_vsprintf+0x127>
            }
            else if(ch == 'c')
   1256e:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12572:	75 1f                	jne    12593 <kernel_vsprintf+0xdf>
            {
                char ch = va_arg(args,int);
   12574:	8b 45 10             	mov    0x10(%ebp),%eax
   12577:	8d 50 04             	lea    0x4(%eax),%edx
   1257a:	89 55 10             	mov    %edx,0x10(%ebp)
   1257d:	8b 00                	mov    (%eax),%eax
   1257f:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = ch;
   12582:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12585:	8d 50 01             	lea    0x1(%eax),%edx
   12588:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1258b:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1258f:	88 10                	mov    %dl,(%eax)
   12591:	eb 48                	jmp    125db <kernel_vsprintf+0x127>
            }
            else if(ch == 's')
   12593:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12597:	75 42                	jne    125db <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args,char *);
   12599:	8b 45 10             	mov    0x10(%ebp),%eax
   1259c:	8d 50 04             	lea    0x4(%eax),%edx
   1259f:	89 55 10             	mov    %edx,0x10(%ebp)
   125a2:	8b 00                	mov    (%eax),%eax
   125a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   125a7:	ff 75 f4             	pushl  -0xc(%ebp)
   125aa:	e8 da fc ff ff       	call   12289 <kernel_strlen>
   125af:	83 c4 04             	add    $0x4,%esp
   125b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--)
   125b5:	eb 17                	jmp    125ce <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   125b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   125ba:	8d 42 01             	lea    0x1(%edx),%eax
   125bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
   125c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125c3:	8d 48 01             	lea    0x1(%eax),%ecx
   125c6:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   125c9:	0f b6 12             	movzbl (%edx),%edx
   125cc:	88 10                	mov    %dl,(%eax)
                while(len--)
   125ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125d1:	8d 50 ff             	lea    -0x1(%eax),%edx
   125d4:	89 55 f0             	mov    %edx,-0x10(%ebp)
   125d7:	85 c0                	test   %eax,%eax
   125d9:	75 dc                	jne    125b7 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   125db:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   125e2:	90                   	nop
    while((ch = *fmt++))
   125e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   125e6:	8d 50 01             	lea    0x1(%eax),%edx
   125e9:	89 55 0c             	mov    %edx,0xc(%ebp)
   125ec:	0f b6 00             	movzbl (%eax),%eax
   125ef:	88 45 ef             	mov    %al,-0x11(%ebp)
   125f2:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   125f6:	0f 85 d0 fe ff ff    	jne    124cc <kernel_vsprintf+0x18>
       }
    }
}
   125fc:	90                   	nop
   125fd:	c9                   	leave  
   125fe:	c3                   	ret    

000125ff <panic>:
void panic(const char *file,int line,const char *func,const char *cond)
{
   125ff:	55                   	push   %ebp
   12600:	89 e5                	mov    %esp,%ebp
   12602:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed: %s\n",cond);
   12605:	83 ec 08             	sub    $0x8,%esp
   12608:	ff 75 14             	pushl  0x14(%ebp)
   1260b:	68 88 2d 01 00       	push   $0x12d88
   12610:	e8 12 03 00 00       	call   12927 <log_printf>
   12615:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\n",file);
   12618:	83 ec 08             	sub    $0x8,%esp
   1261b:	ff 75 08             	pushl  0x8(%ebp)
   1261e:	68 9b 2d 01 00       	push   $0x12d9b
   12623:	e8 ff 02 00 00       	call   12927 <log_printf>
   12628:	83 c4 10             	add    $0x10,%esp
    log_printf("line: %d\n",line);
   1262b:	83 ec 08             	sub    $0x8,%esp
   1262e:	ff 75 0c             	pushl  0xc(%ebp)
   12631:	68 a5 2d 01 00       	push   $0x12da5
   12636:	e8 ec 02 00 00       	call   12927 <log_printf>
   1263b:	83 c4 10             	add    $0x10,%esp
    log_printf("function: %s\n",func);
   1263e:	83 ec 08             	sub    $0x8,%esp
   12641:	ff 75 10             	pushl  0x10(%ebp)
   12644:	68 af 2d 01 00       	push   $0x12daf
   12649:	e8 d9 02 00 00       	call   12927 <log_printf>
   1264e:	83 c4 10             	add    $0x10,%esp
    for(;;){
        hlt();
   12651:	e8 15 fb ff ff       	call   1216b <hlt>
   12656:	eb f9                	jmp    12651 <panic+0x52>

00012658 <list_is_empty>:
{
   12658:	55                   	push   %ebp
   12659:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   1265b:	8b 45 08             	mov    0x8(%ebp),%eax
   1265e:	8b 40 08             	mov    0x8(%eax),%eax
   12661:	85 c0                	test   %eax,%eax
   12663:	0f 94 c0             	sete   %al
   12666:	0f b6 c0             	movzbl %al,%eax
}
   12669:	5d                   	pop    %ebp
   1266a:	c3                   	ret    

0001266b <list_init>:
#include "tools/list.h"

void list_init(list_t *list)
{
   1266b:	55                   	push   %ebp
   1266c:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   1266e:	8b 45 08             	mov    0x8(%ebp),%eax
   12671:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12678:	8b 45 08             	mov    0x8(%ebp),%eax
   1267b:	8b 50 04             	mov    0x4(%eax),%edx
   1267e:	8b 45 08             	mov    0x8(%ebp),%eax
   12681:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   12683:	8b 45 08             	mov    0x8(%ebp),%eax
   12686:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1268d:	90                   	nop
   1268e:	5d                   	pop    %ebp
   1268f:	c3                   	ret    

00012690 <list_insert_first>:

void list_insert_first(list_t * list,list_node_t * node)
{
   12690:	55                   	push   %ebp
   12691:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12693:	8b 45 08             	mov    0x8(%ebp),%eax
   12696:	8b 10                	mov    (%eax),%edx
   12698:	8b 45 0c             	mov    0xc(%ebp),%eax
   1269b:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   1269e:	8b 45 0c             	mov    0xc(%ebp),%eax
   126a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if(list_is_empty(list))
   126a7:	ff 75 08             	pushl  0x8(%ebp)
   126aa:	e8 a9 ff ff ff       	call   12658 <list_is_empty>
   126af:	83 c4 04             	add    $0x4,%esp
   126b2:	85 c0                	test   %eax,%eax
   126b4:	74 15                	je     126cb <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   126b6:	8b 45 08             	mov    0x8(%ebp),%eax
   126b9:	8b 55 0c             	mov    0xc(%ebp),%edx
   126bc:	89 10                	mov    %edx,(%eax)
   126be:	8b 45 08             	mov    0x8(%ebp),%eax
   126c1:	8b 10                	mov    (%eax),%edx
   126c3:	8b 45 08             	mov    0x8(%ebp),%eax
   126c6:	89 50 04             	mov    %edx,0x4(%eax)
   126c9:	eb 12                	jmp    126dd <list_insert_first+0x4d>
    }
    else
    {
        list->first->pre = node;
   126cb:	8b 45 08             	mov    0x8(%ebp),%eax
   126ce:	8b 00                	mov    (%eax),%eax
   126d0:	8b 55 0c             	mov    0xc(%ebp),%edx
   126d3:	89 10                	mov    %edx,(%eax)
        list->first = node;
   126d5:	8b 45 08             	mov    0x8(%ebp),%eax
   126d8:	8b 55 0c             	mov    0xc(%ebp),%edx
   126db:	89 10                	mov    %edx,(%eax)
    }
    list->count++;
   126dd:	8b 45 08             	mov    0x8(%ebp),%eax
   126e0:	8b 40 08             	mov    0x8(%eax),%eax
   126e3:	8d 50 01             	lea    0x1(%eax),%edx
   126e6:	8b 45 08             	mov    0x8(%ebp),%eax
   126e9:	89 50 08             	mov    %edx,0x8(%eax)
}
   126ec:	90                   	nop
   126ed:	c9                   	leave  
   126ee:	c3                   	ret    

000126ef <list_insert_last>:

void list_insert_last(list_t * list,list_node_t * node)
{
   126ef:	55                   	push   %ebp
   126f0:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   126f2:	8b 45 08             	mov    0x8(%ebp),%eax
   126f5:	8b 50 04             	mov    0x4(%eax),%edx
   126f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   126fb:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   126fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12700:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if(list_is_empty(list))
   12707:	ff 75 08             	pushl  0x8(%ebp)
   1270a:	e8 49 ff ff ff       	call   12658 <list_is_empty>
   1270f:	83 c4 04             	add    $0x4,%esp
   12712:	85 c0                	test   %eax,%eax
   12714:	74 16                	je     1272c <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   12716:	8b 45 08             	mov    0x8(%ebp),%eax
   12719:	8b 55 0c             	mov    0xc(%ebp),%edx
   1271c:	89 50 04             	mov    %edx,0x4(%eax)
   1271f:	8b 45 08             	mov    0x8(%ebp),%eax
   12722:	8b 50 04             	mov    0x4(%eax),%edx
   12725:	8b 45 08             	mov    0x8(%ebp),%eax
   12728:	89 10                	mov    %edx,(%eax)
   1272a:	eb 15                	jmp    12741 <list_insert_last+0x52>
    }
    else
    {
        list->last->next = node;
   1272c:	8b 45 08             	mov    0x8(%ebp),%eax
   1272f:	8b 40 04             	mov    0x4(%eax),%eax
   12732:	8b 55 0c             	mov    0xc(%ebp),%edx
   12735:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12738:	8b 45 08             	mov    0x8(%ebp),%eax
   1273b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1273e:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list->count++;
   12741:	8b 45 08             	mov    0x8(%ebp),%eax
   12744:	8b 40 08             	mov    0x8(%eax),%eax
   12747:	8d 50 01             	lea    0x1(%eax),%edx
   1274a:	8b 45 08             	mov    0x8(%ebp),%eax
   1274d:	89 50 08             	mov    %edx,0x8(%eax)
}
   12750:	90                   	nop
   12751:	c9                   	leave  
   12752:	c3                   	ret    

00012753 <list_remove_first>:

list_node_t* list_remove_first(list_t * list)
{
   12753:	55                   	push   %ebp
   12754:	89 e5                	mov    %esp,%ebp
   12756:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list))
   12759:	ff 75 08             	pushl  0x8(%ebp)
   1275c:	e8 f7 fe ff ff       	call   12658 <list_is_empty>
   12761:	83 c4 04             	add    $0x4,%esp
   12764:	85 c0                	test   %eax,%eax
   12766:	74 07                	je     1276f <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   12768:	b8 00 00 00 00       	mov    $0x0,%eax
   1276d:	eb 59                	jmp    127c8 <list_remove_first+0x75>
    }
    list_node_t * node = list->first;
   1276f:	8b 45 08             	mov    0x8(%ebp),%eax
   12772:	8b 00                	mov    (%eax),%eax
   12774:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = node->next;
   12777:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1277a:	8b 50 04             	mov    0x4(%eax),%edx
   1277d:	8b 45 08             	mov    0x8(%ebp),%eax
   12780:	89 10                	mov    %edx,(%eax)
    if(list->first == (list_node_t *)0)
   12782:	8b 45 08             	mov    0x8(%ebp),%eax
   12785:	8b 00                	mov    (%eax),%eax
   12787:	85 c0                	test   %eax,%eax
   12789:	75 0c                	jne    12797 <list_remove_first+0x44>
    {
        list->last = (list_node_t *)0;
   1278b:	8b 45 08             	mov    0x8(%ebp),%eax
   1278e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12795:	eb 0b                	jmp    127a2 <list_remove_first+0x4f>
    }
    else
    {
        list->first->pre = (list_node_t *)0;
   12797:	8b 45 08             	mov    0x8(%ebp),%eax
   1279a:	8b 00                	mov    (%eax),%eax
   1279c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   127a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   127ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127ae:	8b 10                	mov    (%eax),%edx
   127b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127b3:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   127b6:	8b 45 08             	mov    0x8(%ebp),%eax
   127b9:	8b 40 08             	mov    0x8(%eax),%eax
   127bc:	8d 50 ff             	lea    -0x1(%eax),%edx
   127bf:	8b 45 08             	mov    0x8(%ebp),%eax
   127c2:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   127c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127c8:	c9                   	leave  
   127c9:	c3                   	ret    

000127ca <list_remove>:

list_node_t* list_remove(list_t * list,list_node_t * node)
{
   127ca:	55                   	push   %ebp
   127cb:	89 e5                	mov    %esp,%ebp
    if(node == list->first)
   127cd:	8b 45 08             	mov    0x8(%ebp),%eax
   127d0:	8b 00                	mov    (%eax),%eax
   127d2:	39 45 0c             	cmp    %eax,0xc(%ebp)
   127d5:	75 0b                	jne    127e2 <list_remove+0x18>
    {
        list->first = node->next;
   127d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   127da:	8b 50 04             	mov    0x4(%eax),%edx
   127dd:	8b 45 08             	mov    0x8(%ebp),%eax
   127e0:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last)
   127e2:	8b 45 08             	mov    0x8(%ebp),%eax
   127e5:	8b 40 04             	mov    0x4(%eax),%eax
   127e8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   127eb:	75 0b                	jne    127f8 <list_remove+0x2e>
    {
        list->last = node->pre;
   127ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   127f0:	8b 10                	mov    (%eax),%edx
   127f2:	8b 45 08             	mov    0x8(%ebp),%eax
   127f5:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->pre)
   127f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   127fb:	8b 00                	mov    (%eax),%eax
   127fd:	85 c0                	test   %eax,%eax
   127ff:	74 0e                	je     1280f <list_remove+0x45>
    {
        node->pre->next = node->next;
   12801:	8b 45 0c             	mov    0xc(%ebp),%eax
   12804:	8b 00                	mov    (%eax),%eax
   12806:	8b 55 0c             	mov    0xc(%ebp),%edx
   12809:	8b 52 04             	mov    0x4(%edx),%edx
   1280c:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) 
   1280f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12812:	8b 40 04             	mov    0x4(%eax),%eax
   12815:	85 c0                	test   %eax,%eax
   12817:	74 0d                	je     12826 <list_remove+0x5c>
    {
        node->next->pre = node->pre;
   12819:	8b 45 0c             	mov    0xc(%ebp),%eax
   1281c:	8b 40 04             	mov    0x4(%eax),%eax
   1281f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12822:	8b 12                	mov    (%edx),%edx
   12824:	89 10                	mov    %edx,(%eax)
    }
    node->next = node->pre = (list_node_t *)0;
   12826:	8b 45 0c             	mov    0xc(%ebp),%eax
   12829:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1282f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12832:	8b 10                	mov    (%eax),%edx
   12834:	8b 45 0c             	mov    0xc(%ebp),%eax
   12837:	89 50 04             	mov    %edx,0x4(%eax)
    list->count--;
   1283a:	8b 45 08             	mov    0x8(%ebp),%eax
   1283d:	8b 40 08             	mov    0x8(%eax),%eax
   12840:	8d 50 ff             	lea    -0x1(%eax),%edx
   12843:	8b 45 08             	mov    0x8(%ebp),%eax
   12846:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12849:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   1284c:	5d                   	pop    %ebp
   1284d:	c3                   	ret    

0001284e <inb>:
{
   1284e:	55                   	push   %ebp
   1284f:	89 e5                	mov    %esp,%ebp
   12851:	83 ec 14             	sub    $0x14,%esp
   12854:	8b 45 08             	mov    0x8(%ebp),%eax
   12857:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
   1285b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1285f:	89 c2                	mov    %eax,%edx
   12861:	ec                   	in     (%dx),%al
   12862:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12865:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12869:	c9                   	leave  
   1286a:	c3                   	ret    

0001286b <outb>:
{
   1286b:	55                   	push   %ebp
   1286c:	89 e5                	mov    %esp,%ebp
   1286e:	83 ec 08             	sub    $0x8,%esp
   12871:	8b 55 08             	mov    0x8(%ebp),%edx
   12874:	8b 45 0c             	mov    0xc(%ebp),%eax
   12877:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1287b:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
   1287e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12882:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12886:	ee                   	out    %al,(%dx)
}
   12887:	90                   	nop
   12888:	c9                   	leave  
   12889:	c3                   	ret    

0001288a <log_init>:
#include "cpu/irq.h"    
#include "ipc/mutex.h"
#define COM_PORT 0x3f8
static mutex_t log_mutex;
void log_init (void)
{
   1288a:	55                   	push   %ebp
   1288b:	89 e5                	mov    %esp,%ebp
   1288d:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&log_mutex);
   12890:	83 ec 0c             	sub    $0xc,%esp
   12893:	68 c4 9f 01 00       	push   $0x19fc4
   12898:	e8 cb f3 ff ff       	call   11c68 <mutex_init>
   1289d:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   128a0:	83 ec 08             	sub    $0x8,%esp
   128a3:	6a 00                	push   $0x0
   128a5:	68 f9 03 00 00       	push   $0x3f9
   128aa:	e8 bc ff ff ff       	call   1286b <outb>
   128af:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x80);
   128b2:	83 ec 08             	sub    $0x8,%esp
   128b5:	68 80 00 00 00       	push   $0x80
   128ba:	68 fb 03 00 00       	push   $0x3fb
   128bf:	e8 a7 ff ff ff       	call   1286b <outb>
   128c4:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 0, 0x03);
   128c7:	83 ec 08             	sub    $0x8,%esp
   128ca:	6a 03                	push   $0x3
   128cc:	68 f8 03 00 00       	push   $0x3f8
   128d1:	e8 95 ff ff ff       	call   1286b <outb>
   128d6:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 1, 0x00);
   128d9:	83 ec 08             	sub    $0x8,%esp
   128dc:	6a 00                	push   $0x0
   128de:	68 f9 03 00 00       	push   $0x3f9
   128e3:	e8 83 ff ff ff       	call   1286b <outb>
   128e8:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 3, 0x03);
   128eb:	83 ec 08             	sub    $0x8,%esp
   128ee:	6a 03                	push   $0x3
   128f0:	68 fb 03 00 00       	push   $0x3fb
   128f5:	e8 71 ff ff ff       	call   1286b <outb>
   128fa:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 2, 0xC7);
   128fd:	83 ec 08             	sub    $0x8,%esp
   12900:	68 c7 00 00 00       	push   $0xc7
   12905:	68 fa 03 00 00       	push   $0x3fa
   1290a:	e8 5c ff ff ff       	call   1286b <outb>
   1290f:	83 c4 10             	add    $0x10,%esp
    outb(COM_PORT + 4, 0x0F);
   12912:	83 ec 08             	sub    $0x8,%esp
   12915:	6a 0f                	push   $0xf
   12917:	68 fc 03 00 00       	push   $0x3fc
   1291c:	e8 4a ff ff ff       	call   1286b <outb>
   12921:	83 c4 10             	add    $0x10,%esp
}
   12924:	90                   	nop
   12925:	c9                   	leave  
   12926:	c3                   	ret    

00012927 <log_printf>:


void log_printf (const char *fmt, ...)
{
   12927:	55                   	push   %ebp
   12928:	89 e5                	mov    %esp,%ebp
   1292a:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    kernel_memset(buf, 0, sizeof(buf));
   12930:	83 ec 04             	sub    $0x4,%esp
   12933:	68 80 00 00 00       	push   $0x80
   12938:	6a 00                	push   $0x0
   1293a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12940:	50                   	push   %eax
   12941:	e8 cd f9 ff ff       	call   12313 <kernel_memset>
   12946:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12949:	8d 45 0c             	lea    0xc(%ebp),%eax
   1294c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

    kernel_vsprintf(buf, fmt, args);
   12952:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12958:	83 ec 04             	sub    $0x4,%esp
   1295b:	50                   	push   %eax
   1295c:	ff 75 08             	pushl  0x8(%ebp)
   1295f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12965:	50                   	push   %eax
   12966:	e8 49 fb ff ff       	call   124b4 <kernel_vsprintf>
   1296b:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&log_mutex);
   1296e:	83 ec 0c             	sub    $0xc,%esp
   12971:	68 c4 9f 01 00       	push   $0x19fc4
   12976:	e8 19 f3 ff ff       	call   11c94 <mutex_lock>
   1297b:	83 c4 10             	add    $0x10,%esp
    const char *p = buf;
   1297e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12984:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   12987:	eb 39                	jmp    129c2 <log_printf+0x9b>
    {
        while ((inb(COM_PORT + 5) & (1 << 6)) == 0);
   12989:	90                   	nop
   1298a:	83 ec 0c             	sub    $0xc,%esp
   1298d:	68 fd 03 00 00       	push   $0x3fd
   12992:	e8 b7 fe ff ff       	call   1284e <inb>
   12997:	83 c4 10             	add    $0x10,%esp
   1299a:	0f b6 c0             	movzbl %al,%eax
   1299d:	83 e0 40             	and    $0x40,%eax
   129a0:	85 c0                	test   %eax,%eax
   129a2:	74 e6                	je     1298a <log_printf+0x63>
        outb(COM_PORT, *p);
   129a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   129a7:	0f b6 00             	movzbl (%eax),%eax
   129aa:	0f b6 c0             	movzbl %al,%eax
   129ad:	83 ec 08             	sub    $0x8,%esp
   129b0:	50                   	push   %eax
   129b1:	68 f8 03 00 00       	push   $0x3f8
   129b6:	e8 b0 fe ff ff       	call   1286b <outb>
   129bb:	83 c4 10             	add    $0x10,%esp
        p++;
   129be:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    while (*p != '\0')
   129c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   129c5:	0f b6 00             	movzbl (%eax),%eax
   129c8:	84 c0                	test   %al,%al
   129ca:	75 bd                	jne    12989 <log_printf+0x62>
    }

    outb(COM_PORT, '\r');
   129cc:	83 ec 08             	sub    $0x8,%esp
   129cf:	6a 0d                	push   $0xd
   129d1:	68 f8 03 00 00       	push   $0x3f8
   129d6:	e8 90 fe ff ff       	call   1286b <outb>
   129db:	83 c4 10             	add    $0x10,%esp
    //outb(COM_PORT, '\n');
    mutex_unlock(&log_mutex);
   129de:	83 ec 0c             	sub    $0xc,%esp
   129e1:	68 c4 9f 01 00       	push   $0x19fc4
   129e6:	e8 39 f3 ff ff       	call   11d24 <mutex_unlock>
   129eb:	83 c4 10             	add    $0x10,%esp
}
   129ee:	90                   	nop
   129ef:	c9                   	leave  
   129f0:	c3                   	ret    
