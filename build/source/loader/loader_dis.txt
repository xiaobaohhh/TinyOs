
E:/ubuntu/diy-x86os/start/start/build/source/loader/loader.elf:     file format elf32-i386
E:/ubuntu/diy-x86os/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000716 memsz 0x00000716 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00002000 memsz 0x000020a4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006bc  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000005a  000086bc  000086bc  000016bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00002000  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000a4  0000b000  0000b000  00004000  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00004018  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d7  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034a  00000000  00000000  00004a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000343  00000000  00000000  00004d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  000050dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000444  00000000  00000000  000053fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00005840  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
000086bc l    d  .rodata	00000000 .rodata
00009000 l    d  .data	00000000 .data
0000b000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	00000012 write_cr0
000080dc l     F .text	0000002b far_jump
00008107 l     F .text	0000003b show_msg
00008142 l     F .text	00000140 detect_memory
00008282 l     F .text	00000092 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008337 l     F .text	0000001d inb
00008354 l     F .text	0000001f inw
00008373 l     F .text	0000001f outb
00008392 l     F .text	00000011 read_cr0
000083a3 l     F .text	0000000c write_cr0
000083af l     F .text	0000000c write_cr3
000083bb l     F .text	00000011 read_cr4
000083cc l     F .text	0000000c write_cr4
000083d8 l     F .text	0000012d read_disk
00008505 l     F .text	0000011a reload_elf_file
0000861f l     F .text	00000005 die
0000a000 l     O .data	00001000 page_dir.1899
00008314 g     F .text	00000023 loader_entry
00009000 g     O .data	00000018 gdt_table
0000866b g     F .text	00000051 load_kernel
00008624 g     F .text	00000047 enable_page_mode
0000b000 g     O .bss	000000a4 boot_info
00008000 g       .text	00000000 _start
0000b000 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
0000b000 g       .data	00000000 _edata
0000b0a4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start        
	.extern loader_entry
_start:
	jmp loader_entry
    8000:	e9 11 03             	jmp    8314 <loader_entry>

00008003 <protect_mode_entry>:
	.code32
	.text
	.global protect_mode_entry
	.extern load_kernel
protect_mode_entry:
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %es
    8009:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800b:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800d:	8e e8                	mov    %ax,%gs
	mov %ax, %ss
    800f:	8e d0                	mov    %ax,%ss
	
	jmp $8,$load_kernel
    8011:	ea 6b 86 00 00       	ljmp   $0x0,$0x866b
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
#ifndef CPU_INSTR_H
#define CPU_INSTR_H

#include "types.h"
static inline uint8_t inb(uint16_t port)
{
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:
    uint16_t rv;
    __asm__ __volatile__("in %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
    return rv;
}
static inline void outb(uint16_t port, uint8_t data)
{
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
    805d:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8063:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8069:	ee                   	out    %al,(%dx)
}
    806a:	90                   	nop
    806b:	66 c9                	leavel 
    806d:	66 c3                	retl   

0000806f <cli>:
static inline void cli(void)
{
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile("cli");
    8074:	fa                   	cli    
}
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl   

0000807a <lgdt>:
{
    __asm__ __volatile("sti");
}

static inline void lgdt(uint32_t start , uint32_t size)
{
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }gdt;

    gdt.start31_16 = start >> 16;
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	66 c1 e8 10          	shr    $0x10,%eax
    808c:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff;
    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
    8099:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809e:	66 83 e8 01          	sub    $0x1,%eax
    80a2:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
}
    80ab:	90                   	nop
    80ac:	66 c9                	leavel 
    80ae:	66 c3                	retl   

000080b0 <read_cr0>:
    idt.start15_0 = start & 0xffff;
    idt.limit = size - 1;
    __asm__ __volatile__("lidt %[i]"::[i]"m"(idt));
}
static inline uint32_t read_cr0(void)
{
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__("mov %%cr0, %[v]":[v]"=r"(cr0));
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c6:	66 c9                	leavel 
    80c8:	66 c3                	retl   

000080ca <write_cr0>:

static inline void write_cr0(uint32_t v)
{
    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	0f 22 c0             	mov    %eax,%cr0
}
    80d7:	90                   	nop
    80d8:	66 5d                	pop    %ebp
    80da:	66 c3                	retl   

000080dc <far_jump>:
static inline void write_cr4(uint32_t v)
{
    __asm__ __volatile__("mov %[v], %%cr4"::[v]"r"(v));
}
static inline void far_jump(uint32_t selector, uint32_t offset)
{
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = {offset ,selector};
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ef:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    80f9:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80fe:	67 66 ff 28          	ljmpl  *(%eax)
}
    8102:	90                   	nop
    8103:	66 c9                	leavel 
    8105:	66 c3                	retl   

00008107 <show_msg>:
__asm__(".code16gcc");

#include "loader.h"

boot_info_t boot_info;
static void show_msg(const char *str) {
    8107:	66 55                	push   %ebp
    8109:	66 89 e5             	mov    %esp,%ebp
    810c:	66 83 ec 10          	sub    $0x10,%esp
    char c;
    while ((c = *str++) != '\0') {
    8110:	eb 0c                	jmp    811e <show_msg+0x17>
        __asm__ __volatile__(
    8112:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8118:	b4 0e                	mov    $0xe,%ah
    811a:	88 c0                	mov    %al,%al
    811c:	cd 10                	int    $0x10
    while ((c = *str++) != '\0') {
    811e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8123:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8128:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    812d:	67 66 0f b6 00       	movzbl (%eax),%eax
    8132:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8136:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813b:	75 d5                	jne    8112 <show_msg+0xb>
            "mov $0xe, %%ah\n\t"
            "mov %[ch], %%al\n\t"
            "int $0x10"::[ch]"r"(c)
        );
    }
}
    813d:	90                   	nop
    813e:	66 c9                	leavel 
    8140:	66 c3                	retl   

00008142 <detect_memory>:

static void detect_memory(void) {
    8142:	66 55                	push   %ebp
    8144:	66 89 e5             	mov    %esp,%ebp
    8147:	66 57                	push   %edi
    8149:	66 56                	push   %esi
    814b:	66 53                	push   %ebx
    814d:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t signature;
    uint32_t bytes;
    uint32_t contID = 0;
    8151:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8158:	00 00 
    SMAP_entry_t smap_entry;
    show_msg("try to detect memory...\n\r");
    815a:	66 68 bc 86 00 00    	pushl  $0x86bc
    8160:	66 e8 a1 ff ff ff    	calll  8107 <show_msg>
    8166:	66 83 c4 04          	add    $0x4,%esp
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    816a:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8171:	00 00 
    8173:	e9 e0 00             	jmp    8256 <detect_memory+0x114>
        SMAP_entry_t * entry = &smap_entry;
    8176:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    817b:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
        __asm__ __volatile__("int $0x15"
    8180:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8186:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    818b:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    8191:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    8197:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    819c:	66 89 f7             	mov    %esi,%edi
    819f:	cd 15                	int    $0x15
    81a1:	66 89 da             	mov    %ebx,%edx
    81a4:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81a9:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81ae:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
        : "=a"(signature), "=c"(bytes), "=b"(contID)
        : "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
        show_msg("after BIOS call\n\r");   // 添加这行
    81b3:	66 68 d6 86 00 00    	pushl  $0x86d6
    81b9:	66 e8 48 ff ff ff    	calll  8107 <show_msg>
    81bf:	66 83 c4 04          	add    $0x4,%esp
        if(signature != 0x534D4150) {
    81c3:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81ca:	4d 53 
    81cc:	74 13                	je     81e1 <detect_memory+0x9f>
            show_msg("failed\r\n");
    81ce:	66 68 e8 86 00 00    	pushl  $0x86e8
    81d4:	66 e8 2d ff ff ff    	calll  8107 <show_msg>
    81da:	66 83 c4 04          	add    $0x4,%esp
            return;
    81de:	e9 92 00             	jmp    8273 <detect_memory+0x131>
        }
        if(bytes > 20 && (entry->ACPI & 0x0001) == 0) {
    81e1:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e7:	76 13                	jbe    81fc <detect_memory+0xba>
    81e9:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81ee:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81f3:	66 83 e0 01          	and    $0x1,%eax
    81f7:	66 85 c0             	test   %eax,%eax
    81fa:	74 53                	je     824f <detect_memory+0x10d>
            continue;
        }
        if(entry->Type == 1)
    81fc:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8201:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8206:	66 83 f8 01          	cmp    $0x1,%eax
    820a:	75 39                	jne    8245 <detect_memory+0x103>
        {
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    820c:	66 a1 a0 b0          	mov    0xb0a0,%eax
    8210:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8215:	67 66 8b 12          	mov    (%edx),%edx
    8219:	67 66 89 14 c5 00 b0 	mov    %edx,0xb000(,%eax,8)
    8220:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8222:	66 a1 a0 b0          	mov    0xb0a0,%eax
    8226:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    822b:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8230:	67 66 89 14 c5 04 b0 	mov    %edx,0xb004(,%eax,8)
    8237:	00 00 
            boot_info.ram_region_count++;
    8239:	66 a1 a0 b0          	mov    0xb0a0,%eax
    823d:	66 83 c0 01          	add    $0x1,%eax
    8241:	66 a3 a0 b0          	mov    %eax,0xb0a0
        }
        if(contID == 0)
    8245:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    824b:	74 15                	je     8262 <detect_memory+0x120>
    824d:	eb 01                	jmp    8250 <detect_memory+0x10e>
            continue;
    824f:	90                   	nop
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8250:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8256:	67 66 83 7d ec 13    	cmpl   $0x13,-0x14(%ebp)
    825c:	0f 8e 16 ff          	jle    8176 <detect_memory+0x34>
    8260:	eb 01                	jmp    8263 <detect_memory+0x121>
        {
            break;
    8262:	90                   	nop
        }

    }
    show_msg("memory detected ok\n\r");
    8263:	66 68 f1 86 00 00    	pushl  $0x86f1
    8269:	66 e8 98 fe ff ff    	calll  8107 <show_msg>
    826f:	66 83 c4 04          	add    $0x4,%esp
    
    
    
}
    8273:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8278:	66 5b                	pop    %ebx
    827a:	66 5e                	pop    %esi
    827c:	66 5f                	pop    %edi
    827e:	66 5d                	pop    %ebp
    8280:	66 c3                	retl   

00008282 <enter_protect_mode>:
    {0xffff,0x0000,0x9a00,0x00cf},
    {0xffff,0x0000,0x9200,0x00cf},

};
static void enter_protect_mode(void)
{
    8282:	66 55                	push   %ebp
    8284:	66 89 e5             	mov    %esp,%ebp
    8287:	66 83 ec 10          	sub    $0x10,%esp
    cli();
    828b:	66 e8 de fd ff ff    	calll  806f <cli>
    uint8_t v = inb(0x92);
    8291:	66 68 92 00 00 00    	pushl  $0x92
    8297:	66 e8 7b fd ff ff    	calll  8018 <inb>
    829d:	66 83 c4 04          	add    $0x4,%esp
    82a1:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92,v | 0x2);
    82a5:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82ab:	66 83 c8 02          	or     $0x2,%eax
    82af:	66 0f b6 c0          	movzbl %al,%eax
    82b3:	66 50                	push   %eax
    82b5:	66 68 92 00 00 00    	pushl  $0x92
    82bb:	66 e8 81 fd ff ff    	calll  8042 <outb>
    82c1:	66 83 c4 08          	add    $0x8,%esp
    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
    82c5:	66 b8 00 90 00 00    	mov    $0x9000,%eax
    82cb:	66 6a 18             	pushl  $0x18
    82ce:	66 50                	push   %eax
    82d0:	66 e8 a4 fd ff ff    	calll  807a <lgdt>
    82d6:	66 83 c4 08          	add    $0x8,%esp

    uint32_t cr0 = read_cr0();
    82da:	66 e8 d0 fd ff ff    	calll  80b0 <read_cr0>
    82e0:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82e5:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82ea:	66 83 c8 01          	or     $0x1,%eax
    82ee:	66 50                	push   %eax
    82f0:	66 e8 d4 fd ff ff    	calll  80ca <write_cr0>
    82f6:	66 83 c4 04          	add    $0x4,%esp

    far_jump(8,(uint32_t)protect_mode_entry);
    82fa:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    8300:	66 50                	push   %eax
    8302:	66 6a 08             	pushl  $0x8
    8305:	66 e8 d1 fd ff ff    	calll  80dc <far_jump>
    830b:	66 83 c4 08          	add    $0x8,%esp
    

}
    830f:	90                   	nop
    8310:	66 c9                	leavel 
    8312:	66 c3                	retl   

00008314 <loader_entry>:
void loader_entry(void) {
    8314:	66 55                	push   %ebp
    8316:	66 89 e5             	mov    %esp,%ebp
    show_msg("...loading...\n\r");
    8319:	66 68 06 87 00 00    	pushl  $0x8706
    831f:	66 e8 e2 fd ff ff    	calll  8107 <show_msg>
    8325:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8329:	66 e8 13 fe ff ff    	calll  8142 <detect_memory>
    enter_protect_mode();
    832f:	66 e8 4d ff ff ff    	calll  8282 <enter_protect_mode>
    for (;;)
    8335:	eb fe                	jmp    8335 <loader_entry+0x21>

00008337 <inb>:
{
    8337:	55                   	push   %bp
    8338:	89 e5                	mov    %sp,%bp
    833a:	83 ec 14             	sub    $0x14,%sp
    833d:	8b 45 08             	mov    0x8(%di),%ax
    8340:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("inb %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
    8344:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8348:	89 c2                	mov    %ax,%dx
    834a:	ec                   	in     (%dx),%al
    834b:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    834e:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    8352:	c9                   	leave  
    8353:	c3                   	ret    

00008354 <inw>:
{
    8354:	55                   	push   %bp
    8355:	89 e5                	mov    %sp,%bp
    8357:	83 ec 14             	sub    $0x14,%sp
    835a:	8b 45 08             	mov    0x8(%di),%ax
    835d:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("in %[p], %[v]":[v] "=a"(rv) : [p]"d"(port));
    8361:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8365:	89 c2                	mov    %ax,%dx
    8367:	66 ed                	in     (%dx),%eax
    8369:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return rv;
    836d:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    8371:	c9                   	leave  
    8372:	c3                   	ret    

00008373 <outb>:
{
    8373:	55                   	push   %bp
    8374:	89 e5                	mov    %sp,%bp
    8376:	83 ec 08             	sub    $0x8,%sp
    8379:	8b 55 08             	mov    0x8(%di),%dx
    837c:	8b 45 0c             	mov    0xc(%di),%ax
    837f:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8383:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
    8386:	0f b7 55 fc          	movzww -0x4(%di),%dx
    838a:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    838e:	ee                   	out    %al,(%dx)
}
    838f:	90                   	nop
    8390:	c9                   	leave  
    8391:	c3                   	ret    

00008392 <read_cr0>:
{
    8392:	55                   	push   %bp
    8393:	89 e5                	mov    %sp,%bp
    8395:	83 ec 10             	sub    $0x10,%sp
    __asm__ __volatile__("mov %%cr0, %[v]":[v]"=r"(cr0));
    8398:	0f 20 c0             	mov    %cr0,%eax
    839b:	89 45 fc             	mov    %ax,-0x4(%di)
    return cr0;
    839e:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83a1:	c9                   	leave  
    83a2:	c3                   	ret    

000083a3 <write_cr0>:
{
    83a3:	55                   	push   %bp
    83a4:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
    83a6:	8b 45 08             	mov    0x8(%di),%ax
    83a9:	0f 22 c0             	mov    %eax,%cr0
}
    83ac:	90                   	nop
    83ad:	5d                   	pop    %bp
    83ae:	c3                   	ret    

000083af <write_cr3>:
{
    83af:	55                   	push   %bp
    83b0:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
    83b2:	8b 45 08             	mov    0x8(%di),%ax
    83b5:	0f 22 d8             	mov    %eax,%cr3
}
    83b8:	90                   	nop
    83b9:	5d                   	pop    %bp
    83ba:	c3                   	ret    

000083bb <read_cr4>:
{
    83bb:	55                   	push   %bp
    83bc:	89 e5                	mov    %sp,%bp
    83be:	83 ec 10             	sub    $0x10,%sp
    __asm__ __volatile__("mov %%cr4, %[v]":[v]"=r"(cr4));
    83c1:	0f 20 e0             	mov    %cr4,%eax
    83c4:	89 45 fc             	mov    %ax,-0x4(%di)
    return cr4;
    83c7:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83ca:	c9                   	leave  
    83cb:	c3                   	ret    

000083cc <write_cr4>:
{
    83cc:	55                   	push   %bp
    83cd:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr4"::[v]"r"(v));
    83cf:	8b 45 08             	mov    0x8(%di),%ax
    83d2:	0f 22 e0             	mov    %eax,%cr4
}
    83d5:	90                   	nop
    83d6:	5d                   	pop    %bp
    83d7:	c3                   	ret    

000083d8 <read_disk>:
#include "loader.h"
#include "comm/elf.h"
static void read_disk(uint32_t sector, uint32_t sector_count,uint8_t *buf)
{
    83d8:	55                   	push   %bp
    83d9:	89 e5                	mov    %sp,%bp
    83db:	53                   	push   %bx
    83dc:	83 ec 10             	sub    $0x10,%sp
    outb(0x1f6, 0xe0);
    83df:	68 e0 00             	push   $0xe0
    83e2:	00 00                	add    %al,(%bx,%si)
    83e4:	68 f6 01             	push   $0x1f6
    83e7:	00 00                	add    %al,(%bx,%si)
    83e9:	e8 85 ff             	call   8371 <inw+0x1d>
    83ec:	ff                   	(bad)  
    83ed:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f2, (uint8_t)(sector_count >> 8));
    83f1:	8b 45 0c             	mov    0xc(%di),%ax
    83f4:	c1 e8 08             	shr    $0x8,%ax
    83f7:	0f b6 c0             	movzbw %al,%ax
    83fa:	50                   	push   %ax
    83fb:	68 f2 01             	push   $0x1f2
    83fe:	00 00                	add    %al,(%bx,%si)
    8400:	e8 6e ff             	call   8371 <inw+0x1d>
    8403:	ff                   	(bad)  
    8404:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f3, (uint8_t)(sector >> 24));
    8408:	8b 45 08             	mov    0x8(%di),%ax
    840b:	c1 e8 18             	shr    $0x18,%ax
    840e:	0f b6 c0             	movzbw %al,%ax
    8411:	50                   	push   %ax
    8412:	68 f3 01             	push   $0x1f3
    8415:	00 00                	add    %al,(%bx,%si)
    8417:	e8 57 ff             	call   8371 <inw+0x1d>
    841a:	ff                   	(bad)  
    841b:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f4, 0);
    841f:	6a 00                	push   $0x0
    8421:	68 f4 01             	push   $0x1f4
    8424:	00 00                	add    %al,(%bx,%si)
    8426:	e8 48 ff             	call   8371 <inw+0x1d>
    8429:	ff                   	(bad)  
    842a:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f5, 0);
    842e:	6a 00                	push   $0x0
    8430:	68 f5 01             	push   $0x1f5
    8433:	00 00                	add    %al,(%bx,%si)
    8435:	e8 39 ff             	call   8371 <inw+0x1d>
    8438:	ff                   	(bad)  
    8439:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    
    outb(0x1f2, (uint8_t)(sector_count));
    843d:	8b 45 0c             	mov    0xc(%di),%ax
    8440:	0f b6 c0             	movzbw %al,%ax
    8443:	50                   	push   %ax
    8444:	68 f2 01             	push   $0x1f2
    8447:	00 00                	add    %al,(%bx,%si)
    8449:	e8 25 ff             	call   8371 <inw+0x1d>
    844c:	ff                   	(bad)  
    844d:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f3, (uint8_t)(sector));
    8451:	8b 45 08             	mov    0x8(%di),%ax
    8454:	0f b6 c0             	movzbw %al,%ax
    8457:	50                   	push   %ax
    8458:	68 f3 01             	push   $0x1f3
    845b:	00 00                	add    %al,(%bx,%si)
    845d:	e8 11 ff             	call   8371 <inw+0x1d>
    8460:	ff                   	(bad)  
    8461:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f4, (uint8_t)(sector >> 8));
    8465:	8b 45 08             	mov    0x8(%di),%ax
    8468:	c1 e8 08             	shr    $0x8,%ax
    846b:	0f b6 c0             	movzbw %al,%ax
    846e:	50                   	push   %ax
    846f:	68 f4 01             	push   $0x1f4
    8472:	00 00                	add    %al,(%bx,%si)
    8474:	e8 fa fe             	call   8371 <inw+0x1d>
    8477:	ff                   	(bad)  
    8478:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f5, (uint8_t)(sector >> 16));
    847c:	8b 45 08             	mov    0x8(%di),%ax
    847f:	c1 e8 10             	shr    $0x10,%ax
    8482:	0f b6 c0             	movzbw %al,%ax
    8485:	50                   	push   %ax
    8486:	68 f5 01             	push   $0x1f5
    8489:	00 00                	add    %al,(%bx,%si)
    848b:	e8 e3 fe             	call   8371 <inw+0x1d>
    848e:	ff                   	(bad)  
    848f:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
   
   outb(0x1f7, 0x24);
    8493:	6a 24                	push   $0x24
    8495:	68 f7 01             	push   $0x1f7
    8498:	00 00                	add    %al,(%bx,%si)
    849a:	e8 d4 fe             	call   8371 <inw+0x1d>
    849d:	ff                   	(bad)  
    849e:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

   uint16_t * data_buf = (uint16_t *)buf;
    84a2:	8b 45 10             	mov    0x10(%di),%ax
    84a5:	89 45 f8             	mov    %ax,-0x8(%di)
   while(sector_count--)
    84a8:	eb 48                	jmp    84f2 <read_disk+0x11a>
   {
        while((inb(0x1f7) & 0x08) != 0x08);
    84aa:	90                   	nop
    84ab:	68 f7 01             	push   $0x1f7
    84ae:	00 00                	add    %al,(%bx,%si)
    84b0:	e8 82 fe             	call   8335 <loader_entry+0x21>
    84b3:	ff                   	(bad)  
    84b4:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84b8:	0f b6 c0             	movzbw %al,%ax
    84bb:	83 e0 08             	and    $0x8,%ax
    84be:	83 f8 08             	cmp    $0x8,%ax
    84c1:	75 e8                	jne    84ab <read_disk+0xd3>
        for(int i = 0; i < SECTOR_SIZE / 2; i++)
    84c3:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    84c8:	00 00                	add    %al,(%bx,%si)
    84ca:	eb 1d                	jmp    84e9 <read_disk+0x111>
        {
            *data_buf++ = inw(0x1f0);
    84cc:	8b 5d f8             	mov    -0x8(%di),%bx
    84cf:	8d 43 02             	lea    0x2(%bp,%di),%ax
    84d2:	89 45 f8             	mov    %ax,-0x8(%di)
    84d5:	68 f0 01             	push   $0x1f0
    84d8:	00 00                	add    %al,(%bx,%si)
    84da:	e8 75 fe             	call   8352 <inb+0x1b>
    84dd:	ff                   	(bad)  
    84de:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84e2:	66 89 03             	mov    %eax,(%bp,%di)
        for(int i = 0; i < SECTOR_SIZE / 2; i++)
    84e5:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84e9:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84ee:	00 00                	add    %al,(%bx,%si)
    84f0:	7e da                	jle    84cc <read_disk+0xf4>
   while(sector_count--)
    84f2:	8b 45 0c             	mov    0xc(%di),%ax
    84f5:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84f8:	89 55 0c             	mov    %dx,0xc(%di)
    84fb:	85 c0                	test   %ax,%ax
    84fd:	75 ab                	jne    84aa <read_disk+0xd2>
        }
   }
}
    84ff:	90                   	nop
    8500:	8b 5d fc             	mov    -0x4(%di),%bx
    8503:	c9                   	leave  
    8504:	c3                   	ret    

00008505 <reload_elf_file>:

static uint32_t reload_elf_file(uint8_t *file_buffer)
{
    8505:	55                   	push   %bp
    8506:	89 e5                	mov    %sp,%bp
    8508:	83 ec 20             	sub    $0x20,%sp
    Elf32_Ehdr *elf_hdr = (Elf32_Ehdr *)file_buffer;
    850b:	8b 45 08             	mov    0x8(%di),%ax
    850e:	89 45 e8             	mov    %ax,-0x18(%di)
    if(elf_hdr->e_ident[0] != 0x7f || elf_hdr->e_ident[1] != 'E' 
    8511:	8b 45 e8             	mov    -0x18(%di),%ax
    8514:	0f b6 00             	movzbw (%bx,%si),%ax
    8517:	3c 7f                	cmp    $0x7f,%al
    8519:	75 21                	jne    853c <reload_elf_file+0x37>
    851b:	8b 45 e8             	mov    -0x18(%di),%ax
    851e:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    8522:	3c 45                	cmp    $0x45,%al
    8524:	75 16                	jne    853c <reload_elf_file+0x37>
        || elf_hdr->e_ident[2] != 'L' 
    8526:	8b 45 e8             	mov    -0x18(%di),%ax
    8529:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    852d:	3c 4c                	cmp    $0x4c,%al
    852f:	75 0b                	jne    853c <reload_elf_file+0x37>
        || elf_hdr->e_ident[3] != 'F')
    8531:	8b 45 e8             	mov    -0x18(%di),%ax
    8534:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    8538:	3c 46                	cmp    $0x46,%al
    853a:	74 0a                	je     8546 <reload_elf_file+0x41>
    {
        return 0;
    853c:	b8 00 00             	mov    $0x0,%ax
    853f:	00 00                	add    %al,(%bx,%si)
    8541:	e9 d7 00             	jmp    861b <reload_elf_file+0x116>
    8544:	00 00                	add    %al,(%bx,%si)
    }

    for(int i = 0; i < elf_hdr->e_phnum; i++)
    8546:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    854b:	00 00                	add    %al,(%bx,%si)
    854d:	e9 b2 00             	jmp    8602 <reload_elf_file+0xfd>
    8550:	00 00                	add    %al,(%bx,%si)
    {
        Elf32_Phdr *phdr = (Elf32_Phdr *)(file_buffer + elf_hdr->e_phoff) + i;
    8552:	8b 45 e8             	mov    -0x18(%di),%ax
    8555:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    8558:	8b 45 08             	mov    0x8(%di),%ax
    855b:	01 c2                	add    %ax,%dx
    855d:	8b 45 fc             	mov    -0x4(%di),%ax
    8560:	c1 e0 05             	shl    $0x5,%ax
    8563:	01 d0                	add    %dx,%ax
    8565:	89 45 e4             	mov    %ax,-0x1c(%di)
        if(phdr->p_type != PT_LOAD)
    8568:	8b 45 e4             	mov    -0x1c(%di),%ax
    856b:	8b 00                	mov    (%bx,%si),%ax
    856d:	83 f8 01             	cmp    $0x1,%ax
    8570:	0f 85 89 00          	jne    85fd <reload_elf_file+0xf8>
    8574:	00 00                	add    %al,(%bx,%si)
        {
            continue;
        }
        uint8_t *src = file_buffer + phdr->p_offset;
    8576:	8b 45 e4             	mov    -0x1c(%di),%ax
    8579:	8b 50 04             	mov    0x4(%bx,%si),%dx
    857c:	8b 45 08             	mov    0x8(%di),%ax
    857f:	01 d0                	add    %dx,%ax
    8581:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t *dest = (uint8_t *)phdr->p_paddr;
    8584:	8b 45 e4             	mov    -0x1c(%di),%ax
    8587:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    858a:	89 45 f4             	mov    %ax,-0xc(%di)
        for(int j = 0; j < phdr->p_filesz; j++)
    858d:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    8592:	00 00                	add    %al,(%bx,%si)
    8594:	eb 1b                	jmp    85b1 <reload_elf_file+0xac>
        {
            *dest++ = *src++;
    8596:	8b 55 f8             	mov    -0x8(%di),%dx
    8599:	8d 42 01             	lea    0x1(%bp,%si),%ax
    859c:	89 45 f8             	mov    %ax,-0x8(%di)
    859f:	8b 45 f4             	mov    -0xc(%di),%ax
    85a2:	8d 48 01             	lea    0x1(%bx,%si),%cx
    85a5:	89 4d f4             	mov    %cx,-0xc(%di)
    85a8:	0f b6 12             	movzbw (%bp,%si),%dx
    85ab:	88 10                	mov    %dl,(%bx,%si)
        for(int j = 0; j < phdr->p_filesz; j++)
    85ad:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    85b1:	8b 45 e4             	mov    -0x1c(%di),%ax
    85b4:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85b7:	8b 45 f0             	mov    -0x10(%di),%ax
    85ba:	39 c2                	cmp    %ax,%dx
    85bc:	77 d8                	ja     8596 <reload_elf_file+0x91>
        }
        dest = (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    85be:	8b 45 e4             	mov    -0x1c(%di),%ax
    85c1:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85c4:	8b 45 e4             	mov    -0x1c(%di),%ax
    85c7:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    85ca:	01 d0                	add    %dx,%ax
    85cc:	89 45 f4             	mov    %ax,-0xc(%di)
        for(int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++)
    85cf:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    85d4:	00 00                	add    %al,(%bx,%si)
    85d6:	eb 10                	jmp    85e8 <reload_elf_file+0xe3>
        {
            *dest++ = 0;
    85d8:	8b 45 f4             	mov    -0xc(%di),%ax
    85db:	8d 50 01             	lea    0x1(%bx,%si),%dx
    85de:	89 55 f4             	mov    %dx,-0xc(%di)
    85e1:	c6 00 00             	movb   $0x0,(%bx,%si)
        for(int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++)
    85e4:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    85e8:	8b 45 e4             	mov    -0x1c(%di),%ax
    85eb:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85ee:	8b 45 e4             	mov    -0x1c(%di),%ax
    85f1:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85f4:	29 c2                	sub    %ax,%dx
    85f6:	8b 45 ec             	mov    -0x14(%di),%ax
    85f9:	39 c2                	cmp    %ax,%dx
    85fb:	77 db                	ja     85d8 <reload_elf_file+0xd3>
    85fd:	eb 01                	jmp    8600 <reload_elf_file+0xfb>
            continue;
    85ff:	90                   	nop
    for(int i = 0; i < elf_hdr->e_phnum; i++)
    8600:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    8604:	8b 45 e8             	mov    -0x18(%di),%ax
    8607:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    860b:	0f b7 c0             	movzww %ax,%ax
    860e:	39 45 fc             	cmp    %ax,-0x4(%di)
    8611:	0f 8c 3b ff          	jl     8550 <reload_elf_file+0x4b>
    8615:	ff                   	(bad)  
    8616:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
        }
    }
    return elf_hdr->e_entry;
    861a:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    861d:	c9                   	leave  
    861e:	c3                   	ret    

0000861f <die>:
static void die(int err_code)
{
    861f:	55                   	push   %bp
    8620:	89 e5                	mov    %sp,%bp
    for(;;);
    8622:	eb fe                	jmp    8622 <die+0x3>

00008624 <enable_page_mode>:
#define PDE_PCD (1 << 4)
#define PDE_A (1 << 5)
#define PDE_D (1 << 6)
#define PDE_PS (1 << 7)
void enable_page_mode(void)
{
    8624:	55                   	push   %bp
    8625:	89 e5                	mov    %sp,%bp
    8627:	83 ec 10             	sub    $0x10,%sp
    static uint32_t page_dir[1024] __attribute__((aligned(4096))) = {
        [0] = PDE_P | PDE_RW | PDE_PS
    };
    uint32_t cr4 = read_cr4();
    862a:	e8 8c fd             	call   83b9 <write_cr3+0xa>
    862d:	ff                   	(bad)  
    862e:	ff 89 45 fc          	decw   -0x3bb(%bx,%di)
    uint32_t cr0 = read_cr0();
    8632:	e8 5b fd             	call   8390 <outb+0x1d>
    8635:	ff                   	(bad)  
    8636:	ff 89 45 f8          	decw   -0x7bb(%bx,%di)
    write_cr4(cr4 | CR4_PSE);
    863a:	8b 45 fc             	mov    -0x4(%di),%ax
    863d:	83 c8 10             	or     $0x10,%ax
    8640:	50                   	push   %ax
    8641:	e8 86 fd             	call   83ca <read_cr4+0xf>
    8644:	ff                   	(bad)  
    8645:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    write_cr3((uint32_t)page_dir);
    8649:	b8 00 a0             	mov    $0xa000,%ax
    864c:	00 00                	add    %al,(%bx,%si)
    864e:	50                   	push   %ax
    864f:	e8 5b fd             	call   83ad <write_cr0+0xa>
    8652:	ff                   	(bad)  
    8653:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    write_cr0(cr0 | CR0_PG);
    8657:	8b 45 f8             	mov    -0x8(%di),%ax
    865a:	0d 00 00             	or     $0x0,%ax
    865d:	00 80 50 e8          	add    %al,-0x17b0(%bx,%si)
    8661:	3e fd                	ds std 
    8663:	ff                   	(bad)  
    8664:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
}
    8668:	90                   	nop
    8669:	c9                   	leave  
    866a:	c3                   	ret    

0000866b <load_kernel>:
void load_kernel(void)
{
    866b:	55                   	push   %bp
    866c:	89 e5                	mov    %sp,%bp
    866e:	83 ec 18             	sub    $0x18,%sp
    read_disk(100, 500, (uint8_t *)SYS_KERNEL_LOAD_ADDR);
    8671:	68 00 00             	push   $0x0
    8674:	10 00                	adc    %al,(%bx,%si)
    8676:	68 f4 01             	push   $0x1f4
    8679:	00 00                	add    %al,(%bx,%si)
    867b:	6a 64                	push   $0x64
    867d:	e8 56 fd             	call   83d6 <write_cr4+0xa>
    8680:	ff                   	(bad)  
    8681:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)

    uint32_t kernel_entry = reload_elf_file((uint8_t *)SYS_KERNEL_LOAD_ADDR);
    8685:	68 00 00             	push   $0x0
    8688:	10 00                	adc    %al,(%bx,%si)
    868a:	e8 76 fe             	call   8503 <read_disk+0x12b>
    868d:	ff                   	(bad)  
    868e:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8692:	89 45 f4             	mov    %ax,-0xc(%di)
    if(kernel_entry == 0)
    8695:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    8699:	75 0a                	jne    86a5 <load_kernel+0x3a>
    {
        die(-1);
    869b:	6a ff                	push   $0xffff
    869d:	e8 7d ff             	call   861d <reload_elf_file+0x118>
    86a0:	ff                   	(bad)  
    86a1:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    }
    enable_page_mode();
    86a5:	e8 7a ff             	call   8622 <die+0x3>
    86a8:	ff                   	(bad)  
    86a9:	ff 8b 45 f4          	decw   -0xbbb(%bp,%di)
    ((void(*)(boot_info_t *))kernel_entry)(&boot_info);
    86ad:	83 ec 0c             	sub    $0xc,%sp
    86b0:	68 00 b0             	push   $0xb000
    86b3:	00 00                	add    %al,(%bx,%si)
    86b5:	ff d0                	call   *%ax
    86b7:	83 c4 10             	add    $0x10,%sp
    for(;;);
    86ba:	eb fe                	jmp    86ba <load_kernel+0x4f>
